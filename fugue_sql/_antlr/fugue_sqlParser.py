# Generated from fugue_sql/_antlr/fugue_sql.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u014e")
        buf.write("\u0e85\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\3\2\6")
        buf.write("\2\u01a2\n\2\r\2\16\2\u01a3\3\2\3\2\3\3\3\3\3\3\3\4\3")
        buf.write("\4\3\4\3\4\3\4\5\4\u01b0\n\4\3\5\5\5\u01b3\n\5\3\5\3\5")
        buf.write("\5\5\u01b7\n\5\3\5\5\5\u01ba\n\5\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01c8\n\6\3\7\3\7\5\7\u01cc")
        buf.write("\n\7\3\7\5\7\u01cf\n\7\3\7\3\7\3\b\3\b\5\b\u01d5\n\b\3")
        buf.write("\b\5\b\u01d8\n\b\3\b\3\b\3\t\3\t\3\t\3\t\5\t\u01e0\n\t")
        buf.write("\3\t\5\t\u01e3\n\t\3\t\3\t\5\t\u01e7\n\t\3\t\5\t\u01ea")
        buf.write("\n\t\3\t\3\t\5\t\u01ee\n\t\3\n\3\n\3\n\3\n\3\n\5\n\u01f5")
        buf.write("\n\n\3\13\3\13\3\13\3\13\3\13\5\13\u01fc\n\13\3\f\3\f")
        buf.write("\3\f\3\f\3\f\5\f\u0203\n\f\3\f\3\f\5\f\u0207\n\f\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\5\r\u0210\n\r\3\r\3\r\5\r\u0214")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\5\16\u021b\n\16\3\17\3\17")
        buf.write("\3\17\5\17\u0220\n\17\3\17\3\17\5\17\u0224\n\17\3\17\3")
        buf.write("\17\5\17\u0228\n\17\3\20\3\20\3\20\3\21\3\21\5\21\u022f")
        buf.write("\n\21\3\21\3\21\3\21\3\21\3\22\3\22\5\22\u0237\n\22\3")
        buf.write("\22\3\22\5\22\u023b\n\22\3\22\3\22\5\22\u023f\n\22\3\23")
        buf.write("\3\23\5\23\u0243\n\23\3\23\5\23\u0246\n\23\3\23\3\23\3")
        buf.write("\23\5\23\u024b\n\23\3\24\3\24\5\24\u024f\n\24\3\24\3\24")
        buf.write("\5\24\u0253\n\24\3\24\5\24\u0256\n\24\3\24\3\24\5\24\u025a")
        buf.write("\n\24\3\25\3\25\5\25\u025e\n\25\3\25\5\25\u0261\n\25\3")
        buf.write("\25\3\25\5\25\u0265\n\25\3\25\5\25\u0268\n\25\3\25\3\25")
        buf.write("\5\25\u026c\n\25\3\26\3\26\5\26\u0270\n\26\3\26\5\26\u0273")
        buf.write("\n\26\3\26\3\26\3\26\5\26\u0278\n\26\3\27\3\27\3\30\3")
        buf.write("\30\5\30\u027e\n\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34")
        buf.write("\5\34\u0287\n\34\3\34\3\34\3\34\5\34\u028c\n\34\3\34\5")
        buf.write("\34\u028f\n\34\3\34\5\34\u0292\n\34\3\34\5\34\u0295\n")
        buf.write("\34\3\34\3\34\5\34\u0299\n\34\3\34\5\34\u029c\n\34\3\34")
        buf.write("\5\34\u029f\n\34\3\34\5\34\u02a2\n\34\3\34\3\34\3\34\5")
        buf.write("\34\u02a7\n\34\3\34\5\34\u02aa\n\34\3\34\5\34\u02ad\n")
        buf.write("\34\3\34\5\34\u02b0\n\34\3\34\5\34\u02b3\n\34\3\34\5\34")
        buf.write("\u02b6\n\34\3\35\3\35\3\36\3\36\3\36\5\36\u02bd\n\36\3")
        buf.write("\37\3\37\3 \3 \3 \7 \u02c4\n \f \16 \u02c7\13 \3 \3 \3")
        buf.write(" \7 \u02cc\n \f \16 \u02cf\13 \5 \u02d1\n \3!\3!\3!\3")
        buf.write("!\3\"\3\"\3\"\3\"\3\"\5\"\u02dc\n\"\3#\3#\3#\3$\3$\3$")
        buf.write("\5$\u02e4\n$\3%\3%\3%\5%\u02e9\n%\3%\3%\5%\u02ed\n%\3")
        buf.write("&\3&\3&\5&\u02f2\n&\3&\3&\5&\u02f6\n&\3\'\3\'\3\'\7\'")
        buf.write("\u02fb\n\'\f\'\16\'\u02fe\13\'\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\5(\u0308\n(\3)\5)\u030b\n)\3)\3)\3)\3)\5)\u0311\n)\3")
        buf.write(")\3)\5)\u0315\n)\3)\5)\u0318\n)\3)\3)\3)\3)\3)\5)\u031f")
        buf.write("\n)\5)\u0321\n)\3*\3*\3+\3+\3+\3+\3+\3+\5+\u032b\n+\3")
        buf.write("+\3+\3+\7+\u0330\n+\f+\16+\u0333\13+\3,\5,\u0336\n,\3")
        buf.write(",\3,\5,\u033a\n,\3,\3,\3,\5,\u033f\n,\3-\3-\3-\5-\u0344")
        buf.write("\n-\3-\5-\u0347\n-\3.\3.\3.\7.\u034c\n.\f.\16.\u034f\13")
        buf.write(".\3/\3/\3/\7/\u0354\n/\f/\16/\u0357\13/\3\60\3\60\5\60")
        buf.write("\u035b\n\60\3\61\3\61\3\62\3\62\3\62\7\62\u0362\n\62\f")
        buf.write("\62\16\62\u0365\13\62\3\63\3\63\3\63\7\63\u036a\n\63\f")
        buf.write("\63\16\63\u036d\13\63\3\64\3\64\5\64\u0371\n\64\3\65\3")
        buf.write("\65\3\65\7\65\u0376\n\65\f\65\16\65\u0379\13\65\3\66\3")
        buf.write("\66\3\66\3\66\3\67\3\67\38\38\38\38\38\38\38\38\38\58")
        buf.write("\u038a\n8\39\39\39\39\3:\3:\3;\3;\3;\5;\u0395\n;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\5;\u039e\n;\3;\3;\3;\3;\5;\u03a4\n;\3")
        buf.write("<\3<\3<\7<\u03a9\n<\f<\16<\u03ac\13<\3=\3=\3=\3=\3>\3")
        buf.write(">\5>\u03b4\n>\3?\3?\3?\3?\7?\u03ba\n?\f?\16?\u03bd\13")
        buf.write("?\3?\5?\u03c0\n?\3?\3?\3?\3?\5?\u03c6\n?\3@\3@\3@\3@\3")
        buf.write("@\3@\5@\u03ce\n@\3A\3A\3B\3B\3C\3C\3D\3D\3E\3E\3F\3F\7")
        buf.write("F\u03dc\nF\fF\16F\u03df\13F\3F\3F\3G\3G\3G\3H\3H\3H\3")
        buf.write("I\3I\3I\3J\3J\3J\3K\3K\3K\3L\3L\3L\3M\3M\5M\u03f7\nM\3")
        buf.write("M\3M\3M\5M\u03fc\nM\3M\3M\3M\3M\3M\3M\5M\u0404\nM\3M\3")
        buf.write("M\3M\3M\3M\3M\7M\u040c\nM\fM\16M\u040f\13M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0422\nM\3")
        buf.write("M\3M\5M\u0426\nM\3M\3M\3M\3M\5M\u042c\nM\3M\5M\u042f\n")
        buf.write("M\3M\5M\u0432\nM\3M\3M\3M\3M\3M\5M\u0439\nM\3M\3M\3M\5")
        buf.write("M\u043e\nM\3M\5M\u0441\nM\3M\3M\3M\3M\3M\5M\u0448\nM\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0454\nM\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\7M\u045d\nM\fM\16M\u0460\13M\3M\5M\u0463\nM\3")
        buf.write("M\5M\u0466\nM\3M\3M\3M\3M\3M\5M\u046d\nM\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\7M\u0478\nM\fM\16M\u047b\13M\3M\3M\3M\3")
        buf.write("M\3M\5M\u0482\nM\3M\3M\3M\5M\u0487\nM\3M\5M\u048a\nM\3")
        buf.write("M\3M\3M\3M\5M\u0490\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u049b")
        buf.write("\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u04db\nM\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\5M\u04e4\nM\3M\3M\5M\u04e8\nM\3M\3M\3M\3M\5M\u04ee")
        buf.write("\nM\3M\3M\5M\u04f2\nM\3M\3M\3M\5M\u04f7\nM\3M\3M\3M\3")
        buf.write("M\5M\u04fd\nM\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0509\n")
        buf.write("M\3M\3M\3M\3M\3M\3M\5M\u0511\nM\3M\3M\3M\3M\5M\u0517\n")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0524\nM\3M\6M\u0527")
        buf.write("\nM\rM\16M\u0528\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\5M\u0539\nM\3M\3M\3M\7M\u053e\nM\fM\16M\u0541\13")
        buf.write("M\3M\5M\u0544\nM\3M\3M\3M\3M\5M\u054a\nM\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0559\nM\3M\3M\5M\u055d\n")
        buf.write("M\3M\3M\3M\3M\5M\u0563\nM\3M\3M\3M\3M\5M\u0569\nM\3M\5")
        buf.write("M\u056c\nM\3M\5M\u056f\nM\3M\3M\3M\3M\5M\u0575\nM\3M\3")
        buf.write("M\5M\u0579\nM\3M\3M\3M\3M\3M\3M\7M\u0581\nM\fM\16M\u0584")
        buf.write("\13M\3M\3M\3M\3M\3M\3M\5M\u058c\nM\3M\5M\u058f\nM\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\5M\u0598\nM\3M\3M\3M\5M\u059d\nM\3M\3")
        buf.write("M\3M\3M\5M\u05a3\nM\3M\3M\3M\3M\3M\5M\u05aa\nM\3M\5M\u05ad")
        buf.write("\nM\3M\3M\3M\3M\5M\u05b3\nM\3M\3M\3M\3M\3M\3M\3M\7M\u05bc")
        buf.write("\nM\fM\16M\u05bf\13M\5M\u05c1\nM\3M\3M\5M\u05c5\nM\3M")
        buf.write("\3M\3M\5M\u05ca\nM\3M\3M\3M\5M\u05cf\nM\3M\3M\3M\3M\3")
        buf.write("M\5M\u05d6\nM\3M\5M\u05d9\nM\3M\5M\u05dc\nM\3M\3M\3M\3")
        buf.write("M\3M\5M\u05e3\nM\3M\3M\3M\5M\u05e8\nM\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\5M\u05f1\nM\3M\3M\3M\3M\3M\3M\5M\u05f9\nM\3M\3M\3")
        buf.write("M\3M\5M\u05ff\nM\3M\5M\u0602\nM\3M\5M\u0605\nM\3M\3M\3")
        buf.write("M\3M\5M\u060b\nM\3M\3M\5M\u060f\nM\3M\3M\5M\u0613\nM\3")
        buf.write("M\3M\5M\u0617\nM\5M\u0619\nM\3M\3M\3M\3M\3M\3M\5M\u0621")
        buf.write("\nM\3M\3M\3M\3M\3M\3M\5M\u0629\nM\3M\3M\3M\3M\5M\u062f")
        buf.write("\nM\3M\3M\3M\3M\5M\u0635\nM\3M\5M\u0638\nM\3M\3M\5M\u063c")
        buf.write("\nM\3M\5M\u063f\nM\3M\3M\5M\u0643\nM\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u065a")
        buf.write("\nM\fM\16M\u065d\13M\5M\u065f\nM\3M\3M\5M\u0663\nM\3M")
        buf.write("\3M\3M\3M\5M\u0669\nM\3M\5M\u066c\nM\3M\5M\u066f\nM\3")
        buf.write("M\3M\3M\3M\5M\u0675\nM\3M\3M\3M\3M\3M\3M\5M\u067d\nM\3")
        buf.write("M\3M\3M\5M\u0682\nM\3M\3M\3M\3M\5M\u0688\nM\3M\3M\3M\3")
        buf.write("M\5M\u068e\nM\3M\3M\3M\3M\3M\3M\3M\3M\7M\u0698\nM\fM\16")
        buf.write("M\u069b\13M\5M\u069d\nM\3M\3M\3M\7M\u06a2\nM\fM\16M\u06a5")
        buf.write("\13M\3M\3M\7M\u06a9\nM\fM\16M\u06ac\13M\3M\3M\3M\7M\u06b1")
        buf.write("\nM\fM\16M\u06b4\13M\5M\u06b6\nM\3N\3N\3N\3N\3N\3N\5N")
        buf.write("\u06be\nN\3N\3N\5N\u06c2\nN\3N\3N\3N\3N\3N\5N\u06c9\n")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\5N\u073d\nN\3N\3N\3N\3N\3N\3N\5N\u0745")
        buf.write("\nN\3N\3N\3N\3N\3N\3N\5N\u074d\nN\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\5N\u0756\nN\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0760\nN\3O\3")
        buf.write("O\5O\u0764\nO\3O\5O\u0767\nO\3O\3O\3O\3O\5O\u076d\nO\3")
        buf.write("O\3O\3P\3P\5P\u0773\nP\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\5")
        buf.write("Q\u077f\nQ\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\3R\5R\u078b\nR\3")
        buf.write("R\3R\3R\5R\u0790\nR\3S\3S\3S\3T\3T\3T\3U\5U\u0799\nU\3")
        buf.write("U\3U\3U\3V\3V\3V\5V\u07a1\nV\3V\3V\3V\3V\3V\5V\u07a8\n")
        buf.write("V\5V\u07aa\nV\3V\3V\3V\5V\u07af\nV\3V\3V\5V\u07b3\nV\3")
        buf.write("V\3V\3V\5V\u07b8\nV\3V\3V\3V\5V\u07bd\nV\3V\3V\3V\5V\u07c2")
        buf.write("\nV\3V\5V\u07c5\nV\3V\3V\3V\5V\u07ca\nV\3V\3V\5V\u07ce")
        buf.write("\nV\3V\3V\3V\5V\u07d3\nV\5V\u07d5\nV\3W\3W\5W\u07d9\n")
        buf.write("W\3X\3X\3X\3X\3X\7X\u07e0\nX\fX\16X\u07e3\13X\3X\3X\3")
        buf.write("Y\3Y\3Y\5Y\u07ea\nY\3Z\3Z\3[\3[\3[\3[\3[\5[\u07f3\n[\3")
        buf.write("\\\3\\\3\\\7\\\u07f8\n\\\f\\\16\\\u07fb\13\\\3]\3]\3]")
        buf.write("\3]\7]\u0801\n]\f]\16]\u0804\13]\3^\3^\5^\u0808\n^\3^")
        buf.write("\5^\u080b\n^\3^\3^\3^\3^\3_\3_\3_\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\3`\3`\3`\7`\u081e\n`\f`\16`\u0821\13`\3a\3a\3a\3a\7")
        buf.write("a\u0827\na\fa\16a\u082a\13a\3a\3a\3b\3b\5b\u0830\nb\3")
        buf.write("b\5b\u0833\nb\3c\3c\3c\7c\u0838\nc\fc\16c\u083b\13c\3")
        buf.write("c\5c\u083e\nc\3d\3d\3d\3d\5d\u0844\nd\3e\3e\3e\3e\7e\u084a")
        buf.write("\ne\fe\16e\u084d\13e\3e\3e\3f\3f\3f\3f\7f\u0855\nf\ff")
        buf.write("\16f\u0858\13f\3f\3f\3g\3g\3g\3g\3g\3g\5g\u0862\ng\3h")
        buf.write("\3h\3h\3h\3h\5h\u0869\nh\3i\3i\3i\3i\5i\u086f\ni\3j\3")
        buf.write("j\3j\3k\3k\3k\3k\3k\3k\6k\u087a\nk\rk\16k\u087b\3k\3k")
        buf.write("\3k\3k\3k\5k\u0883\nk\3k\3k\3k\3k\3k\5k\u088a\nk\3k\3")
        buf.write("k\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0896\nk\3k\3k\3k\3k\7k\u089c")
        buf.write("\nk\fk\16k\u089f\13k\3k\7k\u08a2\nk\fk\16k\u08a5\13k\5")
        buf.write("k\u08a7\nk\3l\3l\3l\3l\3l\7l\u08ae\nl\fl\16l\u08b1\13")
        buf.write("l\5l\u08b3\nl\3l\3l\3l\3l\3l\7l\u08ba\nl\fl\16l\u08bd")
        buf.write("\13l\5l\u08bf\nl\3l\3l\3l\3l\3l\7l\u08c6\nl\fl\16l\u08c9")
        buf.write("\13l\5l\u08cb\nl\3l\3l\3l\3l\3l\7l\u08d2\nl\fl\16l\u08d5")
        buf.write("\13l\5l\u08d7\nl\3l\5l\u08da\nl\3l\3l\3l\5l\u08df\nl\5")
        buf.write("l\u08e1\nl\3m\3m\3m\3n\3n\3n\5n\u08e9\nn\3n\3n\3n\3n\5")
        buf.write("n\u08ef\nn\3n\3n\3n\3n\3n\5n\u08f6\nn\3n\3n\3n\3n\3n\5")
        buf.write("n\u08fd\nn\3n\7n\u0900\nn\fn\16n\u0903\13n\3o\3o\3o\3")
        buf.write("o\3o\5o\u090a\no\3p\3p\5p\u090e\np\3p\3p\5p\u0912\np\3")
        buf.write("q\3q\6q\u0916\nq\rq\16q\u0917\3r\3r\5r\u091c\nr\3r\3r")
        buf.write("\3r\3r\7r\u0922\nr\fr\16r\u0925\13r\3r\5r\u0928\nr\3r")
        buf.write("\5r\u092b\nr\3r\5r\u092e\nr\3r\5r\u0931\nr\3r\3r\5r\u0935")
        buf.write("\nr\3s\3s\3s\5s\u093a\ns\3s\3s\3s\7s\u093f\ns\fs\16s\u0942")
        buf.write("\13s\3s\5s\u0945\ns\3s\5s\u0948\ns\3s\5s\u094b\ns\3s\5")
        buf.write("s\u094e\ns\5s\u0950\ns\3t\5t\u0953\nt\3u\3u\3u\3u\3u\3")
        buf.write("u\3u\3u\3u\3u\5u\u095f\nu\3u\5u\u0962\nu\3u\3u\5u\u0966")
        buf.write("\nu\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0970\nu\3u\3u\5u\u0974")
        buf.write("\nu\5u\u0976\nu\3u\5u\u0979\nu\3u\3u\5u\u097d\nu\3v\3")
        buf.write("v\7v\u0981\nv\fv\16v\u0984\13v\3v\5v\u0987\nv\3v\3v\3")
        buf.write("w\3w\3w\3x\3x\3x\3x\5x\u0992\nx\3x\3x\3x\3y\3y\3y\3y\3")
        buf.write("y\5y\u099c\ny\3y\3y\3y\3z\3z\3z\3z\3z\3z\3z\5z\u09a8\n")
        buf.write("z\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\7{\u09b5\n{\f{\16{")
        buf.write("\u09b8\13{\3{\3{\5{\u09bc\n{\3|\3|\3|\7|\u09c1\n|\f|\16")
        buf.write("|\u09c4\13|\3}\3}\3}\3}\3~\3~\3~\3\177\3\177\3\177\3\u0080")
        buf.write("\3\u0080\3\u0080\5\u0080\u09d3\n\u0080\3\u0080\7\u0080")
        buf.write("\u09d6\n\u0080\f\u0080\16\u0080\u09d9\13\u0080\3\u0080")
        buf.write("\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\7\u0081\u09e3\n\u0081\f\u0081\16\u0081\u09e6\13\u0081")
        buf.write("\3\u0081\3\u0081\5\u0081\u09ea\n\u0081\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\7\u0082\u09f0\n\u0082\f\u0082\16\u0082")
        buf.write("\u09f3\13\u0082\3\u0082\7\u0082\u09f6\n\u0082\f\u0082")
        buf.write("\16\u0082\u09f9\13\u0082\3\u0082\5\u0082\u09fc\n\u0082")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\7\u0083\u0a03")
        buf.write("\n\u0083\f\u0083\16\u0083\u0a06\13\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\7\u0083\u0a12\n\u0083\f\u0083\16\u0083\u0a15")
        buf.write("\13\u0083\3\u0083\3\u0083\5\u0083\u0a19\n\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\7\u0083\u0a23\n\u0083\f\u0083\16\u0083\u0a26\13\u0083")
        buf.write("\3\u0083\3\u0083\5\u0083\u0a2a\n\u0083\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\7\u0084\u0a30\n\u0084\f\u0084\16\u0084")
        buf.write("\u0a33\13\u0084\5\u0084\u0a35\n\u0084\3\u0084\3\u0084")
        buf.write("\5\u0084\u0a39\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\7\u0085")
        buf.write("\u0a45\n\u0085\f\u0085\16\u0085\u0a48\13\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\7\u0086\u0a52\n\u0086\f\u0086\16\u0086\u0a55\13\u0086")
        buf.write("\3\u0086\3\u0086\5\u0086\u0a59\n\u0086\3\u0087\3\u0087")
        buf.write("\5\u0087\u0a5d\n\u0087\3\u0087\5\u0087\u0a60\n\u0087\3")
        buf.write("\u0088\3\u0088\3\u0088\5\u0088\u0a65\n\u0088\3\u0088\3")
        buf.write("\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u0a6c\n\u0088\f")
        buf.write("\u0088\16\u0088\u0a6f\13\u0088\5\u0088\u0a71\n\u0088\3")
        buf.write("\u0088\3\u0088\3\u0088\5\u0088\u0a76\n\u0088\3\u0088\3")
        buf.write("\u0088\3\u0088\7\u0088\u0a7b\n\u0088\f\u0088\16\u0088")
        buf.write("\u0a7e\13\u0088\5\u0088\u0a80\n\u0088\3\u0089\3\u0089")
        buf.write("\3\u008a\3\u008a\7\u008a\u0a86\n\u008a\f\u008a\16\u008a")
        buf.write("\u0a89\13\u008a\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b")
        buf.write("\u0a8f\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\5\u008b\u0a96\n\u008b\3\u008c\5\u008c\u0a99\n\u008c\3")
        buf.write("\u008c\3\u008c\3\u008c\5\u008c\u0a9e\n\u008c\3\u008c\5")
        buf.write("\u008c\u0aa1\n\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0aa6")
        buf.write("\n\u008c\3\u008c\3\u008c\5\u008c\u0aaa\n\u008c\3\u008c")
        buf.write("\5\u008c\u0aad\n\u008c\3\u008c\5\u008c\u0ab0\n\u008c\3")
        buf.write("\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0ab6\n\u008d\3")
        buf.write("\u008e\3\u008e\3\u008e\5\u008e\u0abb\n\u008e\3\u008e\3")
        buf.write("\u008e\3\u008f\5\u008f\u0ac0\n\u008f\3\u008f\3\u008f\3")
        buf.write("\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u0ad2\n\u008f\5\u008f\u0ad4\n\u008f\3\u008f\5")
        buf.write("\u008f\u0ad7\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3")
        buf.write("\u0091\3\u0091\3\u0091\7\u0091\u0ae0\n\u0091\f\u0091\16")
        buf.write("\u0091\u0ae3\13\u0091\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\7\u0092\u0ae9\n\u0092\f\u0092\16\u0092\u0aec\13\u0092")
        buf.write("\3\u0092\3\u0092\3\u0093\3\u0093\5\u0093\u0af2\n\u0093")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094\u0af8\n\u0094")
        buf.write("\f\u0094\16\u0094\u0afb\13\u0094\3\u0094\3\u0094\3\u0095")
        buf.write("\3\u0095\5\u0095\u0b01\n\u0095\3\u0096\3\u0096\5\u0096")
        buf.write("\u0b05\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\5\u0096\u0b0d\n\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\5\u0096\u0b15\n\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\5\u0096\u0b1b\n\u0096\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\7\u0097\u0b21\n\u0097\f\u0097")
        buf.write("\16\u0097\u0b24\13\u0097\3\u0097\3\u0097\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\7\u0098\u0b2d\n\u0098\f\u0098")
        buf.write("\16\u0098\u0b30\13\u0098\5\u0098\u0b32\n\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0099\5\u0099\u0b38\n\u0099\3\u0099")
        buf.write("\3\u0099\5\u0099\u0b3c\n\u0099\5\u0099\u0b3e\n\u0099\3")
        buf.write("\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\5\u009a\u0b47\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a")
        buf.write("\u0b53\n\u009a\5\u009a\u0b55\n\u009a\3\u009a\3\u009a\3")
        buf.write("\u009a\3\u009a\3\u009a\5\u009a\u0b5c\n\u009a\3\u009a\3")
        buf.write("\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0b63\n\u009a\3")
        buf.write("\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0b69\n\u009a\3")
        buf.write("\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0b6f\n\u009a\5")
        buf.write("\u009a\u0b71\n\u009a\3\u009b\3\u009b\3\u009b\7\u009b\u0b76")
        buf.write("\n\u009b\f\u009b\16\u009b\u0b79\13\u009b\3\u009c\3\u009c")
        buf.write("\3\u009c\7\u009c\u0b7e\n\u009c\f\u009c\16\u009c\u0b81")
        buf.write("\13\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u0b86\n\u009d")
        buf.write("\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\5\u009e\u0b8d")
        buf.write("\n\u009e\3\u009e\3\u009e\3\u009f\3\u009f\5\u009f\u0b93")
        buf.write("\n\u009f\3\u009f\3\u009f\5\u009f\u0b97\n\u009f\5\u009f")
        buf.write("\u0b99\n\u009f\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0b9e\n")
        buf.write("\u00a0\f\u00a0\16\u00a0\u0ba1\13\u00a0\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\7\u00a1\u0ba7\n\u00a1\f\u00a1\16\u00a1")
        buf.write("\u0baa\13\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0bb4\n\u00a2\f\u00a2")
        buf.write("\16\u00a2\u0bb7\13\u00a2\3\u00a2\3\u00a2\5\u00a2\u0bbb")
        buf.write("\n\u00a2\3\u00a3\3\u00a3\5\u00a3\u0bbf\n\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0bcd\n\u00a5")
        buf.write("\5\u00a5\u0bcf\n\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\7\u00a5\u0bd7\n\u00a5\f\u00a5\16\u00a5")
        buf.write("\u0bda\13\u00a5\3\u00a6\5\u00a6\u0bdd\n\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0be5")
        buf.write("\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\7\u00a6")
        buf.write("\u0bec\n\u00a6\f\u00a6\16\u00a6\u0bef\13\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\5\u00a6\u0bf4\n\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0bfc\n\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c01\n\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\7\u00a6\u0c0b\n\u00a6\f\u00a6\16\u00a6\u0c0e\13\u00a6")
        buf.write("\3\u00a6\3\u00a6\5\u00a6\u0c12\n\u00a6\3\u00a6\5\u00a6")
        buf.write("\u0c15\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write("\u0c1b\n\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c1f\n\u00a6\3")
        buf.write("\u00a6\3\u00a6\3\u00a6\5\u00a6\u0c24\n\u00a6\3\u00a6\3")
        buf.write("\u00a6\3\u00a6\5\u00a6\u0c29\n\u00a6\3\u00a6\3\u00a6\3")
        buf.write("\u00a6\5\u00a6\u0c2e\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3")
        buf.write("\u00a7\5\u00a7\u0c34\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3")
        buf.write("\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\7\u00a7\u0c49\n\u00a7\f\u00a7\16\u00a7")
        buf.write("\u0c4c\13\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\6\u00a8")
        buf.write("\u0c52\n\u00a8\r\u00a8\16\u00a8\u0c53\3\u00a8\3\u00a8")
        buf.write("\5\u00a8\u0c58\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\6\u00a8\u0c5f\n\u00a8\r\u00a8\16\u00a8\u0c60")
        buf.write("\3\u00a8\3\u00a8\5\u00a8\u0c65\n\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0c75")
        buf.write("\n\u00a8\f\u00a8\16\u00a8\u0c78\13\u00a8\5\u00a8\u0c7a")
        buf.write("\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\5\u00a8\u0c82\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0c8b\n\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\6\u00a8\u0ca0\n\u00a8")
        buf.write("\r\u00a8\16\u00a8\u0ca1\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0cad")
        buf.write("\n\u00a8\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0cb2\n\u00a8")
        buf.write("\f\u00a8\16\u00a8\u0cb5\13\u00a8\5\u00a8\u0cb7\n\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\5\u00a8\u0cc0\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u0cc4\n")
        buf.write("\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\6\u00a8\u0cce\n\u00a8\r\u00a8\16\u00a8")
        buf.write("\u0ccf\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0ce9\n\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0cf0\n\u00a8")
        buf.write("\3\u00a8\5\u00a8\u0cf3\n\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0d02\n\u00a8\3\u00a8")
        buf.write("\3\u00a8\5\u00a8\u0d06\n\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0d10")
        buf.write("\n\u00a8\f\u00a8\16\u00a8\u0d13\13\u00a8\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\6\u00a9")
        buf.write("\u0d1d\n\u00a9\r\u00a9\16\u00a9\u0d1e\5\u00a9\u0d21\n")
        buf.write("\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\5\u00aa\u0d2b\n\u00aa\3\u00ab\3\u00ab")
        buf.write("\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00af")
        buf.write("\3\u00af\3\u00af\5\u00af\u0d38\n\u00af\3\u00b0\3\u00b0")
        buf.write("\5\u00b0\u0d3c\n\u00b0\3\u00b1\3\u00b1\3\u00b1\6\u00b1")
        buf.write("\u0d41\n\u00b1\r\u00b1\16\u00b1\u0d42\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\5\u00b2\u0d48\n\u00b2\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b4\5\u00b4\u0d50\n\u00b4\3\u00b4")
        buf.write("\3\u00b4\5\u00b4\u0d54\n\u00b4\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0d5d\n\u00b5")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0d62\n\u00b6\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\5\u00b7\u0d73\n\u00b7\3\u00b7\3\u00b7\5\u00b7\u0d77\n")
        buf.write("\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7")
        buf.write("\u0d7e\n\u00b7\f\u00b7\16\u00b7\u0d81\13\u00b7\3\u00b7")
        buf.write("\5\u00b7\u0d84\n\u00b7\5\u00b7\u0d86\n\u00b7\3\u00b8\3")
        buf.write("\u00b8\3\u00b8\7\u00b8\u0d8b\n\u00b8\f\u00b8\16\u00b8")
        buf.write("\u0d8e\13\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9")
        buf.write("\u0d94\n\u00b9\3\u00b9\5\u00b9\u0d97\n\u00b9\3\u00b9\5")
        buf.write("\u00b9\u0d9a\n\u00b9\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u0d9f")
        buf.write("\n\u00ba\f\u00ba\16\u00ba\u0da2\13\u00ba\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\5\u00bb\u0da8\n\u00bb\3\u00bb\5\u00bb")
        buf.write("\u0dab\n\u00bb\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0db0\n")
        buf.write("\u00bc\f\u00bc\16\u00bc\u0db3\13\u00bc\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0dba\n\u00bd\3\u00bd")
        buf.write("\5\u00bd\u0dbd\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u0dc8")
        buf.write("\n\u00bf\f\u00bf\16\u00bf\u0dcb\13\u00bf\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1")
        buf.write("\u0ddc\n\u00c1\f\u00c1\16\u00c1\u0ddf\13\u00c1\3\u00c1")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0de6\n\u00c1")
        buf.write("\f\u00c1\16\u00c1\u0de9\13\u00c1\5\u00c1\u0deb\n\u00c1")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0df2")
        buf.write("\n\u00c1\f\u00c1\16\u00c1\u0df5\13\u00c1\5\u00c1\u0df7")
        buf.write("\n\u00c1\5\u00c1\u0df9\n\u00c1\3\u00c1\5\u00c1\u0dfc\n")
        buf.write("\u00c1\3\u00c1\5\u00c1\u0dff\n\u00c1\3\u00c2\3\u00c2\3")
        buf.write("\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\5\u00c2\u0e11\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0e1a\n\u00c3\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\7\u00c4\u0e1f\n\u00c4\f\u00c4\16\u00c4")
        buf.write("\u0e22\13\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5")
        buf.write("\u0e28\n\u00c5\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u0e2d\n")
        buf.write("\u00c6\f\u00c6\16\u00c6\u0e30\13\u00c6\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c8\3\u00c8\6\u00c8\u0e37\n\u00c8\r\u00c8")
        buf.write("\16\u00c8\u0e38\3\u00c8\5\u00c8\u0e3c\n\u00c8\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\5\u00c9\u0e41\n\u00c9\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0e49\n\u00ca")
        buf.write("\3\u00cb\3\u00cb\3\u00cc\3\u00cc\5\u00cc\u0e4f\n\u00cc")
        buf.write("\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0e54\n\u00cc\3\u00cc")
        buf.write("\3\u00cc\3\u00cc\5\u00cc\u0e59\n\u00cc\3\u00cc\3\u00cc")
        buf.write("\5\u00cc\u0e5d\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u0e61\n")
        buf.write("\u00cc\3\u00cc\3\u00cc\5\u00cc\u0e65\n\u00cc\3\u00cc\3")
        buf.write("\u00cc\5\u00cc\u0e69\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u0e6d")
        buf.write("\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u0e71\n\u00cc\3\u00cc")
        buf.write("\5\u00cc\u0e74\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0e7d\n\u00cd\3\u00ce")
        buf.write("\3\u00ce\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\7\u065b")
        buf.write("\u0699\u06a3\u06aa\u06b2\7T\u00da\u0148\u014c\u014e\u00d1")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e")
        buf.write("\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190")
        buf.write("\u0192\u0194\u0196\u0198\u019a\u019c\u019e\2\65\4\2\62")
        buf.write("\62\67\67\3\2\u00be\u00bf\5\2%%\u00cd\u00cd\u010e\u010e")
        buf.write("\3\2&(\4\2\4\4\u012c\u012c\3\2\24\26\3\2\u0135\u0138\4")
        buf.write("\2;;ii\5\2\f\r}}\u0115\u0115\4\2\16\16\u00be\u00be\4\2")
        buf.write("ee\u00d8\u00d8\4\2DD\u00e6\u00e6\4\2cc\u00ba\u00ba\4\2")
        buf.write("\u0088\u0088\u0095\u0095\3\2OP\4\2\u0107\u0107\u0125\u0125")
        buf.write("\4\2\63\63GG\7\2LLXXzz\u0087\u0087\u00b1\u00b1\3\2ij\4")
        buf.write("\2zz\u0087\u0087\4\2\u00be\u00be\u0140\u0140\4\2\60\60")
        buf.write("\u00ab\u00ab\5\2bb\u00b9\u00b9\u00f0\u00f0\6\2uu\u009c")
        buf.write("\u009c\u00f9\u00f9\u011b\u011b\5\2uu\u00f9\u00f9\u011b")
        buf.write("\u011b\4\2\u0082\u0082\u00a3\u00a3\4\2\62\62nn\4\2\u0144")
        buf.write("\u0144\u0146\u0146\5\2\62\62\67\67\u00fd\u00fd\5\2}}\u0115")
        buf.write("\u0115\u011d\u011d\4\2\u0135\u0136\u013b\u013b\3\2\u0137")
        buf.write("\u013a\4\2\u0135\u0136\u013e\u013e\4\2]]__\3\2\u0105\u0106")
        buf.write("\4\2\3\3\u0088\u0088\4\2\3\3\u0084\u0084\5\2??\u00a6\u00a6")
        buf.write("\u0110\u0110\3\2\u012c\u012d\3\2\u0135\u013f\6\2\65\65")
        buf.write("\u0095\u0095\u00bd\u00bd\u00c5\u00c5\4\2}}\u0115\u0115")
        buf.write("\3\2\u0135\u0136\4\2oo\u00ce\u00ce\4\2\u00c6\u00c6\u00fe")
        buf.write("\u00fe\4\2\u0083\u0083\u00d5\u00d5\3\2\u0145\u0146\4\2")
        buf.write("pp\u00f8\u00f8\65\2\60\61\63\6489;<>>@DGGILNNPVXX[\\a")
        buf.write("cemopttv|\177\177\u0081\u0083\u0086\u0087\u008a\u008c")
        buf.write("\u008f\u008f\u0092\u0094\u0096\u0097\u0099\u009b\u009d")
        buf.write("\u009d\u00a0\u00a0\u00a2\u00a5\u00a8\u00b5\u00b8\u00ba")
        buf.write("\u00bc\u00bc\u00bf\u00c0\u00c3\u00c4\u00c7\u00c7\u00c9")
        buf.write("\u00ca\u00cc\u00d5\u00d7\u00df\u00e1\u00e7\u00e9\u00f0")
        buf.write("\u00f4\u00f6\u00f8\u00f8\u00fa\u00fc\u00fe\u0106\u0108")
        buf.write("\u010c\u010f\u010f\u0111\u0116\u0118\u011a\u011e\u0121")
        buf.write("\u0124\u0126\u0129\u0129\u013a\u013a\21\2\66\66ZZuu\u0089")
        buf.write("\u0089\u0098\u0098\u009c\u009c\u00a1\u00a1\u00a7\u00a7")
        buf.write("\u00bb\u00bb\u00c1\u00c1\u00e8\u00e8\u00f3\u00f3\u00f9")
        buf.write("\u00f9\u011b\u011b\u0123\u0123\23\2\60\65\67Y[tv\u0088")
        buf.write("\u008a\u0097\u0099\u009b\u009d\u00a0\u00a2\u00a6\u00a8")
        buf.write("\u00ba\u00bc\u00c0\u00c2\u00e7\u00e9\u00f2\u00f4\u00f8")
        buf.write("\u00fa\u011a\u011c\u0122\u0124\u012b\u013a\u013a\2\u1099")
        buf.write("\2\u01a1\3\2\2\2\4\u01a7\3\2\2\2\6\u01af\3\2\2\2\b\u01b2")
        buf.write("\3\2\2\2\n\u01c7\3\2\2\2\f\u01c9\3\2\2\2\16\u01d2\3\2")
        buf.write("\2\2\20\u01db\3\2\2\2\22\u01ef\3\2\2\2\24\u01f6\3\2\2")
        buf.write("\2\26\u01fd\3\2\2\2\30\u0208\3\2\2\2\32\u0215\3\2\2\2")
        buf.write("\34\u021c\3\2\2\2\36\u0229\3\2\2\2 \u022c\3\2\2\2\"\u0234")
        buf.write("\3\2\2\2$\u0240\3\2\2\2&\u024c\3\2\2\2(\u025b\3\2\2\2")
        buf.write("*\u026d\3\2\2\2,\u0279\3\2\2\2.\u027d\3\2\2\2\60\u027f")
        buf.write("\3\2\2\2\62\u0281\3\2\2\2\64\u0283\3\2\2\2\66\u02b5\3")
        buf.write("\2\2\28\u02b7\3\2\2\2:\u02b9\3\2\2\2<\u02be\3\2\2\2>\u02d0")
        buf.write("\3\2\2\2@\u02d2\3\2\2\2B\u02db\3\2\2\2D\u02dd\3\2\2\2")
        buf.write("F\u02e3\3\2\2\2H\u02e5\3\2\2\2J\u02ee\3\2\2\2L\u02f7\3")
        buf.write("\2\2\2N\u0307\3\2\2\2P\u0320\3\2\2\2R\u0322\3\2\2\2T\u032a")
        buf.write("\3\2\2\2V\u033e\3\2\2\2X\u0346\3\2\2\2Z\u0348\3\2\2\2")
        buf.write("\\\u0350\3\2\2\2^\u0358\3\2\2\2`\u035c\3\2\2\2b\u035e")
        buf.write("\3\2\2\2d\u0366\3\2\2\2f\u0370\3\2\2\2h\u0372\3\2\2\2")
        buf.write("j\u037a\3\2\2\2l\u037e\3\2\2\2n\u0389\3\2\2\2p\u038b\3")
        buf.write("\2\2\2r\u038f\3\2\2\2t\u03a3\3\2\2\2v\u03a5\3\2\2\2x\u03ad")
        buf.write("\3\2\2\2z\u03b3\3\2\2\2|\u03c5\3\2\2\2~\u03cd\3\2\2\2")
        buf.write("\u0080\u03cf\3\2\2\2\u0082\u03d1\3\2\2\2\u0084\u03d3\3")
        buf.write("\2\2\2\u0086\u03d5\3\2\2\2\u0088\u03d7\3\2\2\2\u008a\u03d9")
        buf.write("\3\2\2\2\u008c\u03e2\3\2\2\2\u008e\u03e5\3\2\2\2\u0090")
        buf.write("\u03e8\3\2\2\2\u0092\u03eb\3\2\2\2\u0094\u03ee\3\2\2\2")
        buf.write("\u0096\u03f1\3\2\2\2\u0098\u06b5\3\2\2\2\u009a\u075f\3")
        buf.write("\2\2\2\u009c\u0761\3\2\2\2\u009e\u0772\3\2\2\2\u00a0\u0778")
        buf.write("\3\2\2\2\u00a2\u0784\3\2\2\2\u00a4\u0791\3\2\2\2\u00a6")
        buf.write("\u0794\3\2\2\2\u00a8\u0798\3\2\2\2\u00aa\u07d4\3\2\2\2")
        buf.write("\u00ac\u07d6\3\2\2\2\u00ae\u07da\3\2\2\2\u00b0\u07e6\3")
        buf.write("\2\2\2\u00b2\u07eb\3\2\2\2\u00b4\u07f2\3\2\2\2\u00b6\u07f4")
        buf.write("\3\2\2\2\u00b8\u07fc\3\2\2\2\u00ba\u0805\3\2\2\2\u00bc")
        buf.write("\u0810\3\2\2\2\u00be\u081f\3\2\2\2\u00c0\u0822\3\2\2\2")
        buf.write("\u00c2\u082d\3\2\2\2\u00c4\u083d\3\2\2\2\u00c6\u0843\3")
        buf.write("\2\2\2\u00c8\u0845\3\2\2\2\u00ca\u0850\3\2\2\2\u00cc\u0861")
        buf.write("\3\2\2\2\u00ce\u0868\3\2\2\2\u00d0\u086a\3\2\2\2\u00d2")
        buf.write("\u0870\3\2\2\2\u00d4\u08a6\3\2\2\2\u00d6\u08b2\3\2\2\2")
        buf.write("\u00d8\u08e2\3\2\2\2\u00da\u08e8\3\2\2\2\u00dc\u0909\3")
        buf.write("\2\2\2\u00de\u090b\3\2\2\2\u00e0\u0913\3\2\2\2\u00e2\u0934")
        buf.write("\3\2\2\2\u00e4\u094f\3\2\2\2\u00e6\u0952\3\2\2\2\u00e8")
        buf.write("\u095e\3\2\2\2\u00ea\u097e\3\2\2\2\u00ec\u098a\3\2\2\2")
        buf.write("\u00ee\u098d\3\2\2\2\u00f0\u0996\3\2\2\2\u00f2\u09a7\3")
        buf.write("\2\2\2\u00f4\u09bb\3\2\2\2\u00f6\u09bd\3\2\2\2\u00f8\u09c5")
        buf.write("\3\2\2\2\u00fa\u09c9\3\2\2\2\u00fc\u09cc\3\2\2\2\u00fe")
        buf.write("\u09cf\3\2\2\2\u0100\u09e9\3\2\2\2\u0102\u09eb\3\2\2\2")
        buf.write("\u0104\u0a29\3\2\2\2\u0106\u0a38\3\2\2\2\u0108\u0a3a\3")
        buf.write("\2\2\2\u010a\u0a58\3\2\2\2\u010c\u0a5a\3\2\2\2\u010e\u0a61")
        buf.write("\3\2\2\2\u0110\u0a81\3\2\2\2\u0112\u0a83\3\2\2\2\u0114")
        buf.write("\u0a95\3\2\2\2\u0116\u0aaf\3\2\2\2\u0118\u0ab5\3\2\2\2")
        buf.write("\u011a\u0ab7\3\2\2\2\u011c\u0ad6\3\2\2\2\u011e\u0ad8\3")
        buf.write("\2\2\2\u0120\u0adc\3\2\2\2\u0122\u0ae4\3\2\2\2\u0124\u0aef")
        buf.write("\3\2\2\2\u0126\u0af3\3\2\2\2\u0128\u0afe\3\2\2\2\u012a")
        buf.write("\u0b1a\3\2\2\2\u012c\u0b1c\3\2\2\2\u012e\u0b27\3\2\2\2")
        buf.write("\u0130\u0b3d\3\2\2\2\u0132\u0b70\3\2\2\2\u0134\u0b72\3")
        buf.write("\2\2\2\u0136\u0b7a\3\2\2\2\u0138\u0b85\3\2\2\2\u013a\u0b8c")
        buf.write("\3\2\2\2\u013c\u0b90\3\2\2\2\u013e\u0b9a\3\2\2\2\u0140")
        buf.write("\u0ba2\3\2\2\2\u0142\u0bba\3\2\2\2\u0144\u0bbe\3\2\2\2")
        buf.write("\u0146\u0bc0\3\2\2\2\u0148\u0bce\3\2\2\2\u014a\u0c2d\3")
        buf.write("\2\2\2\u014c\u0c33\3\2\2\2\u014e\u0d05\3\2\2\2\u0150\u0d20")
        buf.write("\3\2\2\2\u0152\u0d2a\3\2\2\2\u0154\u0d2c\3\2\2\2\u0156")
        buf.write("\u0d2e\3\2\2\2\u0158\u0d30\3\2\2\2\u015a\u0d32\3\2\2\2")
        buf.write("\u015c\u0d34\3\2\2\2\u015e\u0d39\3\2\2\2\u0160\u0d40\3")
        buf.write("\2\2\2\u0162\u0d44\3\2\2\2\u0164\u0d49\3\2\2\2\u0166\u0d53")
        buf.write("\3\2\2\2\u0168\u0d5c\3\2\2\2\u016a\u0d61\3\2\2\2\u016c")
        buf.write("\u0d85\3\2\2\2\u016e\u0d87\3\2\2\2\u0170\u0d8f\3\2\2\2")
        buf.write("\u0172\u0d9b\3\2\2\2\u0174\u0da3\3\2\2\2\u0176\u0dac\3")
        buf.write("\2\2\2\u0178\u0db4\3\2\2\2\u017a\u0dbe\3\2\2\2\u017c\u0dc3")
        buf.write("\3\2\2\2\u017e\u0dcc\3\2\2\2\u0180\u0dfe\3\2\2\2\u0182")
        buf.write("\u0e10\3\2\2\2\u0184\u0e19\3\2\2\2\u0186\u0e1b\3\2\2\2")
        buf.write("\u0188\u0e27\3\2\2\2\u018a\u0e29\3\2\2\2\u018c\u0e31\3")
        buf.write("\2\2\2\u018e\u0e3b\3\2\2\2\u0190\u0e40\3\2\2\2\u0192\u0e48")
        buf.write("\3\2\2\2\u0194\u0e4a\3\2\2\2\u0196\u0e73\3\2\2\2\u0198")
        buf.write("\u0e7c\3\2\2\2\u019a\u0e7e\3\2\2\2\u019c\u0e80\3\2\2\2")
        buf.write("\u019e\u0e82\3\2\2\2\u01a0\u01a2\5\6\4\2\u01a1\u01a0\3")
        buf.write("\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6\7\2\2\3\u01a6")
        buf.write("\3\3\2\2\2\u01a7\u01a8\5\6\4\2\u01a8\u01a9\7\2\2\3\u01a9")
        buf.write("\5\3\2\2\2\u01aa\u01b0\5\b\5\2\u01ab\u01b0\5*\26\2\u01ac")
        buf.write("\u01b0\5$\23\2\u01ad\u01b0\5&\24\2\u01ae\u01b0\5(\25\2")
        buf.write("\u01af\u01aa\3\2\2\2\u01af\u01ab\3\2\2\2\u01af\u01ac\3")
        buf.write("\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01ae\3\2\2\2\u01b0\7")
        buf.write("\3\2\2\2\u01b1\u01b3\5D#\2\u01b2\u01b1\3\2\2\2\u01b2\u01b3")
        buf.write("\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b6\5\u00a8U\2\u01b5")
        buf.write("\u01b7\5\66\34\2\u01b6\u01b5\3\2\2\2\u01b6\u01b7\3\2\2")
        buf.write("\2\u01b7\u01b9\3\2\2\2\u01b8\u01ba\5<\37\2\u01b9\u01b8")
        buf.write("\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\t\3\2\2\2\u01bb\u01c8")
        buf.write("\5\f\7\2\u01bc\u01c8\5\16\b\2\u01bd\u01c8\5\34\17\2\u01be")
        buf.write("\u01c8\5\36\20\2\u01bf\u01c8\5 \21\2\u01c0\u01c8\5\"\22")
        buf.write("\2\u01c1\u01c8\5\20\t\2\u01c2\u01c8\5\22\n\2\u01c3\u01c8")
        buf.write("\5\24\13\2\u01c4\u01c8\5\26\f\2\u01c5\u01c8\5\30\r\2\u01c6")
        buf.write("\u01c8\5\32\16\2\u01c7\u01bb\3\2\2\2\u01c7\u01bc\3\2\2")
        buf.write("\2\u01c7\u01bd\3\2\2\2\u01c7\u01be\3\2\2\2\u01c7\u01bf")
        buf.write("\3\2\2\2\u01c7\u01c0\3\2\2\2\u01c7\u01c1\3\2\2\2\u01c7")
        buf.write("\u01c2\3\2\2\2\u01c7\u01c3\3\2\2\2\u01c7\u01c4\3\2\2\2")
        buf.write("\u01c7\u01c5\3\2\2\2\u01c7\u01c6\3\2\2\2\u01c8\13\3\2")
        buf.write("\2\2\u01c9\u01cb\7\u0113\2\2\u01ca\u01cc\5> \2\u01cb\u01ca")
        buf.write("\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd")
        buf.write("\u01cf\5P)\2\u01ce\u01cd\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf")
        buf.write("\u01d0\3\2\2\2\u01d0\u01d1\5H%\2\u01d1\r\3\2\2\2\u01d2")
        buf.write("\u01d4\7\33\2\2\u01d3\u01d5\5> \2\u01d4\u01d3\3\2\2\2")
        buf.write("\u01d4\u01d5\3\2\2\2\u01d5\u01d7\3\2\2\2\u01d6\u01d8\5")
        buf.write("P)\2\u01d7\u01d6\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01d9")
        buf.write("\3\2\2\2\u01d9\u01da\5J&\2\u01da\17\3\2\2\2\u01db\u01dc")
        buf.write("\7$\2\2\u01dc\u01dd\7\65\2\2\u01dd\u01df\7\u0121\2\2\u01de")
        buf.write("\u01e0\5B\"\2\u01df\u01de\3\2\2\2\u01df\u01e0\3\2\2\2")
        buf.write("\u01e0\u01e2\3\2\2\2\u01e1\u01e3\5P)\2\u01e2\u01e1\3\2")
        buf.write("\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e6")
        buf.write("\5\60\31\2\u01e5\u01e7\5,\27\2\u01e6\u01e5\3\2\2\2\u01e6")
        buf.write("\u01e7\3\2\2\2\u01e7\u01e9\3\2\2\2\u01e8\u01ea\5\62\32")
        buf.write("\2\u01e9\u01e8\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb")
        buf.write("\3\2\2\2\u01eb\u01ed\5\64\33\2\u01ec\u01ee\5X-\2\u01ed")
        buf.write("\u01ec\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\21\3\2\2\2\u01ef")
        buf.write("\u01f0\7\u00e2\2\2\u01f0\u01f1\7P\2\2\u01f1\u01f4\5b\62")
        buf.write("\2\u01f2\u01f3\7\u0088\2\2\u01f3\u01f5\5B\"\2\u01f4\u01f2")
        buf.write("\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\23\3\2\2\2\u01f6\u01f7")
        buf.write("\7\63\2\2\u01f7\u01f8\7P\2\2\u01f8\u01fb\5h\65\2\u01f9")
        buf.write("\u01fa\7\u0088\2\2\u01fa\u01fc\5B\"\2\u01fb\u01f9\3\2")
        buf.write("\2\2\u01fb\u01fc\3\2\2\2\u01fc\25\3\2\2\2\u01fd\u01fe")
        buf.write("\7p\2\2\u01fe\u01ff\7P\2\2\u01ff\u0202\5Z.\2\u0200\u0201")
        buf.write("\7\u0092\2\2\u0201\u0203\7w\2\2\u0202\u0200\3\2\2\2\u0202")
        buf.write("\u0203\3\2\2\2\u0203\u0206\3\2\2\2\u0204\u0205\7\u0088")
        buf.write("\2\2\u0205\u0207\5B\"\2\u0206\u0204\3\2\2\2\u0206\u0207")
        buf.write("\3\2\2\2\u0207\27\3\2\2\2\u0208\u0209\7p\2\2\u0209\u020a")
        buf.write("\7\u00ef\2\2\u020a\u020b\7\u0092\2\2\u020b\u020c\t\2\2")
        buf.write("\2\u020c\u020f\t\3\2\2\u020d\u020e\7\u00c1\2\2\u020e\u0210")
        buf.write("\5Z.\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0213")
        buf.write("\3\2\2\2\u0211\u0212\7\u0088\2\2\u0212\u0214\5B\"\2\u0213")
        buf.write("\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\31\3\2\2\2\u0215")
        buf.write("\u0216\7\23\2\2\u0216\u0217\t\3\2\2\u0217\u021a\5X-\2")
        buf.write("\u0218\u0219\7\u0088\2\2\u0219\u021b\5B\"\2\u021a\u0218")
        buf.write("\3\2\2\2\u021a\u021b\3\2\2\2\u021b\33\3\2\2\2\u021c\u021d")
        buf.write("\7!\2\2\u021d\u021f\5> \2\u021e\u0220\5N(\2\u021f\u021e")
        buf.write("\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0223\3\2\2\2\u0221")
        buf.write("\u0222\7B\2\2\u0222\u0224\5Z.\2\u0223\u0221\3\2\2\2\u0223")
        buf.write("\u0224\3\2\2\2\u0224\u0227\3\2\2\2\u0225\u0226\7\27\2")
        buf.write("\2\u0226\u0228\5\\/\2\u0227\u0225\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\35\3\2\2\2\u0229\u022a\7Y\2\2\u022a\u022b")
        buf.write("\5J&\2\u022b\37\3\2\2\2\u022c\u022e\7Y\2\2\u022d\u022f")
        buf.write("\7a\2\2\u022e\u022d\3\2\2\2\u022e\u022f\3\2\2\2\u022f")
        buf.write("\u0230\3\2\2\2\u0230\u0231\5|?\2\u0231\u0232\7\u00f0\2")
        buf.write("\2\u0232\u0233\5h\65\2\u0233!\3\2\2\2\u0234\u0236\7\u00ac")
        buf.write("\2\2\u0235\u0237\5\62\32\2\u0236\u0235\3\2\2\2\u0236\u0237")
        buf.write("\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u023a\5\64\33\2\u0239")
        buf.write("\u023b\5X-\2\u023a\u0239\3\2\2\2\u023a\u023b\3\2\2\2\u023b")
        buf.write("\u023e\3\2\2\2\u023c\u023d\7P\2\2\u023d\u023f\5.\30\2")
        buf.write("\u023e\u023c\3\2\2\2\u023e\u023f\3\2\2\2\u023f#\3\2\2")
        buf.write("\2\u0240\u0242\7\34\2\2\u0241\u0243\5> \2\u0242\u0241")
        buf.write("\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0245\3\2\2\2\u0244")
        buf.write("\u0246\5P)\2\u0245\u0244\3\2\2\2\u0245\u0246\3\2\2\2\u0246")
        buf.write("\u0247\3\2\2\2\u0247\u0248\7\u0123\2\2\u0248\u024a\5L")
        buf.write("\'\2\u0249\u024b\5X-\2\u024a\u0249\3\2\2\2\u024a\u024b")
        buf.write("\3\2\2\2\u024b%\3\2\2\2\u024c\u024e\7\"\2\2\u024d\u024f")
        buf.write("\5> \2\u024e\u024d\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0252")
        buf.write("\3\2\2\2\u0250\u0251\7\u00ef\2\2\u0251\u0253\7\u0144\2")
        buf.write("\2\u0252\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0255")
        buf.write("\3\2\2\2\u0254\u0256\7\36\2\2\u0255\u0254\3\2\2\2\u0255")
        buf.write("\u0256\3\2\2\2\u0256\u0259\3\2\2\2\u0257\u0258\7#\2\2")
        buf.write("\u0258\u025a\7\u0140\2\2\u0259\u0257\3\2\2\2\u0259\u025a")
        buf.write("\3\2\2\2\u025a\'\3\2\2\2\u025b\u025d\7$\2\2\u025c\u025e")
        buf.write("\5B\"\2\u025d\u025c\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write("\u0260\3\2\2\2\u025f\u0261\5P)\2\u0260\u025f\3\2\2\2\u0260")
        buf.write("\u0261\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0264\5\60\31")
        buf.write("\2\u0263\u0265\5,\27\2\u0264\u0263\3\2\2\2\u0264\u0265")
        buf.write("\3\2\2\2\u0265\u0267\3\2\2\2\u0266\u0268\5\62\32\2\u0267")
        buf.write("\u0266\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u0269\3\2\2\2")
        buf.write("\u0269\u026b\5\64\33\2\u026a\u026c\5X-\2\u026b\u026a\3")
        buf.write("\2\2\2\u026b\u026c\3\2\2\2\u026c)\3\2\2\2\u026d\u026f")
        buf.write("\7\35\2\2\u026e\u0270\5> \2\u026f\u026e\3\2\2\2\u026f")
        buf.write("\u0270\3\2\2\2\u0270\u0272\3\2\2\2\u0271\u0273\5P)\2\u0272")
        buf.write("\u0271\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2")
        buf.write("\u0274\u0275\7\u0123\2\2\u0275\u0277\5L\'\2\u0276\u0278")
        buf.write("\5X-\2\u0277\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278+")
        buf.write("\3\2\2\2\u0279\u027a\7)\2\2\u027a-\3\2\2\2\u027b\u027e")
        buf.write("\5h\65\2\u027c\u027e\5Z.\2\u027d\u027b\3\2\2\2\u027d\u027c")
        buf.write("\3\2\2\2\u027e/\3\2\2\2\u027f\u0280\t\4\2\2\u0280\61\3")
        buf.write("\2\2\2\u0281\u0282\t\5\2\2\u0282\63\3\2\2\2\u0283\u0284")
        buf.write("\7\u0140\2\2\u0284\65\3\2\2\2\u0285\u0287\7\u00a5\2\2")
        buf.write("\u0286\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u028b\3")
        buf.write("\2\2\2\u0288\u028c\7\30\2\2\u0289\u028a\7,\2\2\u028a\u028c")
        buf.write("\7+\2\2\u028b\u0288\3\2\2\2\u028b\u0289\3\2\2\2\u028c")
        buf.write("\u028e\3\2\2\2\u028d\u028f\5X-\2\u028e\u028d\3\2\2\2\u028e")
        buf.write("\u028f\3\2\2\2\u028f\u02b6\3\2\2\2\u0290\u0292\7\u00a5")
        buf.write("\2\2\u0291\u0290\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0294")
        buf.write("\3\2\2\2\u0293\u0295\7-\2\2\u0294\u0293\3\2\2\2\u0294")
        buf.write("\u0295\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0298\7+\2\2")
        buf.write("\u0297\u0299\5P)\2\u0298\u0297\3\2\2\2\u0298\u0299\3\2")
        buf.write("\2\2\u0299\u029b\3\2\2\2\u029a\u029c\5,\27\2\u029b\u029a")
        buf.write("\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029e\3\2\2\2\u029d")
        buf.write("\u029f\5X-\2\u029e\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02b6\3\2\2\2\u02a0\u02a2\7\u00a5\2\2\u02a1\u02a0\3\2")
        buf.write("\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4")
        buf.write("\7.\2\2\u02a4\u02a6\7+\2\2\u02a5\u02a7\58\35\2\u02a6\u02a5")
        buf.write("\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a9\3\2\2\2\u02a8")
        buf.write("\u02aa\5P)\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa")
        buf.write("\u02ac\3\2\2\2\u02ab\u02ad\5,\27\2\u02ac\u02ab\3\2\2\2")
        buf.write("\u02ac\u02ad\3\2\2\2\u02ad\u02af\3\2\2\2\u02ae\u02b0\5")
        buf.write("X-\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2")
        buf.write("\3\2\2\2\u02b1\u02b3\5:\36\2\u02b2\u02b1\3\2\2\2\u02b2")
        buf.write("\u02b3\3\2\2\2\u02b3\u02b6\3\2\2\2\u02b4\u02b6\5:\36\2")
        buf.write("\u02b5\u0286\3\2\2\2\u02b5\u0291\3\2\2\2\u02b5\u02a1\3")
        buf.write("\2\2\2\u02b5\u02b4\3\2\2\2\u02b6\67\3\2\2\2\u02b7\u02b8")
        buf.write("\7\u0140\2\2\u02b89\3\2\2\2\u02b9\u02bc\7/\2\2\u02ba\u02bb")
        buf.write("\7:\2\2\u02bb\u02bd\5\u0088E\2\u02bc\u02ba\3\2\2\2\u02bc")
        buf.write("\u02bd\3\2\2\2\u02bd;\3\2\2\2\u02be\u02bf\7\31\2\2\u02bf")
        buf.write("=\3\2\2\2\u02c0\u02c5\5B\"\2\u02c1\u02c2\7\3\2\2\u02c2")
        buf.write("\u02c4\5B\"\2\u02c3\u02c1\3\2\2\2\u02c4\u02c7\3\2\2\2")
        buf.write("\u02c5\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02d1\3")
        buf.write("\2\2\2\u02c7\u02c5\3\2\2\2\u02c8\u02cd\5@!\2\u02c9\u02ca")
        buf.write("\7\3\2\2\u02ca\u02cc\5@!\2\u02cb\u02c9\3\2\2\2\u02cc\u02cf")
        buf.write("\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u02d1\3\2\2\2\u02cf\u02cd\3\2\2\2\u02d0\u02c0\3\2\2\2")
        buf.write("\u02d0\u02c8\3\2\2\2\u02d1?\3\2\2\2\u02d2\u02d3\5\u0088")
        buf.write("E\2\u02d3\u02d4\t\6\2\2\u02d4\u02d5\5B\"\2\u02d5A\3\2")
        buf.write("\2\2\u02d6\u02dc\5\u0088E\2\u02d7\u02d8\7\5\2\2\u02d8")
        buf.write("\u02d9\5\b\5\2\u02d9\u02da\7\6\2\2\u02da\u02dc\3\2\2\2")
        buf.write("\u02db\u02d6\3\2\2\2\u02db\u02d7\3\2\2\2\u02dcC\3\2\2")
        buf.write("\2\u02dd\u02de\5\u0088E\2\u02de\u02df\5F$\2\u02dfE\3\2")
        buf.write("\2\2\u02e0\u02e4\7*\2\2\u02e1\u02e2\6$\2\2\u02e2\u02e4")
        buf.write("\7\u012c\2\2\u02e3\u02e0\3\2\2\2\u02e3\u02e1\3\2\2\2\u02e4")
        buf.write("G\3\2\2\2\u02e5\u02e6\7\u0123\2\2\u02e6\u02e8\5L\'\2\u02e7")
        buf.write("\u02e9\5X-\2\u02e8\u02e7\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9")
        buf.write("\u02ec\3\2\2\2\u02ea\u02eb\7\u00f0\2\2\u02eb\u02ed\5d")
        buf.write("\63\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2\u02edI\3")
        buf.write("\2\2\2\u02ee\u02ef\7\u0123\2\2\u02ef\u02f1\5L\'\2\u02f0")
        buf.write("\u02f2\5X-\2\u02f1\u02f0\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2")
        buf.write("\u02f5\3\2\2\2\u02f3\u02f4\7\u00f0\2\2\u02f4\u02f6\5h")
        buf.write("\65\2\u02f5\u02f3\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6K\3")
        buf.write("\2\2\2\u02f7\u02fc\5\u0088E\2\u02f8\u02f9\7\7\2\2\u02f9")
        buf.write("\u02fb\5\u0088E\2\u02fa\u02f8\3\2\2\2\u02fb\u02fe\3\2")
        buf.write("\2\2\u02fc\u02fa\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fdM\3")
        buf.write("\2\2\2\u02fe\u02fc\3\2\2\2\u02ff\u0308\7Z\2\2\u0300\u0308")
        buf.write("\7\u0098\2\2\u0301\u0302\7\u00a7\2\2\u0302\u0308\7\u00c8")
        buf.write("\2\2\u0303\u0304\7\u00e8\2\2\u0304\u0308\7\u00c8\2\2\u0305")
        buf.write("\u0306\7\u0089\2\2\u0306\u0308\7\u00c8\2\2\u0307\u02ff")
        buf.write("\3\2\2\2\u0307\u0300\3\2\2\2\u0307\u0301\3\2\2\2\u0307")
        buf.write("\u0303\3\2\2\2\u0307\u0305\3\2\2\2\u0308O\3\2\2\2\u0309")
        buf.write("\u030b\5R*\2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b")
        buf.write("\u030c\3\2\2\2\u030c\u030d\7 \2\2\u030d\u0310\5T+\2\u030e")
        buf.write("\u030f\7B\2\2\u030f\u0311\5Z.\2\u0310\u030e\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311\u0314\3\2\2\2\u0312\u0313\7\27\2")
        buf.write("\2\u0313\u0315\5\\/\2\u0314\u0312\3\2\2\2\u0314\u0315")
        buf.write("\3\2\2\2\u0315\u0321\3\2\2\2\u0316\u0318\5R*\2\u0317\u0316")
        buf.write("\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
        buf.write("\u031a\7 \2\2\u031a\u031b\7B\2\2\u031b\u031e\5Z.\2\u031c")
        buf.write("\u031d\7\27\2\2\u031d\u031f\5\\/\2\u031e\u031c\3\2\2\2")
        buf.write("\u031e\u031f\3\2\2\2\u031f\u0321\3\2\2\2\u0320\u030a\3")
        buf.write("\2\2\2\u0320\u0317\3\2\2\2\u0321Q\3\2\2\2\u0322\u0323")
        buf.write("\t\7\2\2\u0323S\3\2\2\2\u0324\u0325\b+\1\2\u0325\u032b")
        buf.write("\5V,\2\u0326\u0327\7\5\2\2\u0327\u0328\5T+\2\u0328\u0329")
        buf.write("\7\6\2\2\u0329\u032b\3\2\2\2\u032a\u0324\3\2\2\2\u032a")
        buf.write("\u0326\3\2\2\2\u032b\u0331\3\2\2\2\u032c\u032d\f\3\2\2")
        buf.write("\u032d\u032e\t\b\2\2\u032e\u0330\5T+\4\u032f\u032c\3\2")
        buf.write("\2\2\u0330\u0333\3\2\2\2\u0331\u032f\3\2\2\2\u0331\u0332")
        buf.write("\3\2\2\2\u0332U\3\2\2\2\u0333\u0331\3\2\2\2\u0334\u0336")
        buf.write("\7\u0136\2\2\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337\u033f\7\u0146\2\2\u0338\u033a\7\u0136")
        buf.write("\2\2\u0339\u0338\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033b")
        buf.write("\3\2\2\2\u033b\u033f\7\u0144\2\2\u033c\u033f\7\36\2\2")
        buf.write("\u033d\u033f\7\37\2\2\u033e\u0335\3\2\2\2\u033e\u0339")
        buf.write("\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033d\3\2\2\2\u033f")
        buf.write("W\3\2\2\2\u0340\u0341\7\32\2\2\u0341\u0347\5v<\2\u0342")
        buf.write("\u0344\7\32\2\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2")
        buf.write("\2\u0344\u0345\3\2\2\2\u0345\u0347\5t;\2\u0346\u0340\3")
        buf.write("\2\2\2\u0346\u0343\3\2\2\2\u0347Y\3\2\2\2\u0348\u034d")
        buf.write("\5`\61\2\u0349\u034a\7\3\2\2\u034a\u034c\5`\61\2\u034b")
        buf.write("\u0349\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2")
        buf.write("\u034d\u034e\3\2\2\2\u034e[\3\2\2\2\u034f\u034d\3\2\2")
        buf.write("\2\u0350\u0355\5^\60\2\u0351\u0352\7\3\2\2\u0352\u0354")
        buf.write("\5^\60\2\u0353\u0351\3\2\2\2\u0354\u0357\3\2\2\2\u0355")
        buf.write("\u0353\3\2\2\2\u0355\u0356\3\2\2\2\u0356]\3\2\2\2\u0357")
        buf.write("\u0355\3\2\2\2\u0358\u035a\5`\61\2\u0359\u035b\t\t\2\2")
        buf.write("\u035a\u0359\3\2\2\2\u035a\u035b\3\2\2\2\u035b_\3\2\2")
        buf.write("\2\u035c\u035d\5\u0088E\2\u035da\3\2\2\2\u035e\u0363\5")
        buf.write("p9\2\u035f\u0360\7\3\2\2\u0360\u0362\5p9\2\u0361\u035f")
        buf.write("\3\2\2\2\u0362\u0365\3\2\2\2\u0363\u0361\3\2\2\2\u0363")
        buf.write("\u0364\3\2\2\2\u0364c\3\2\2\2\u0365\u0363\3\2\2\2\u0366")
        buf.write("\u036b\5f\64\2\u0367\u0368\7\3\2\2\u0368\u036a\5f\64\2")
        buf.write("\u0369\u0367\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369\3")
        buf.write("\2\2\2\u036b\u036c\3\2\2\2\u036ce\3\2\2\2\u036d\u036b")
        buf.write("\3\2\2\2\u036e\u0371\5j\66\2\u036f\u0371\7\u0137\2\2\u0370")
        buf.write("\u036e\3\2\2\2\u0370\u036f\3\2\2\2\u0371g\3\2\2\2\u0372")
        buf.write("\u0377\5j\66\2\u0373\u0374\7\3\2\2\u0374\u0376\5j\66\2")
        buf.write("\u0375\u0373\3\2\2\2\u0376\u0379\3\2\2\2\u0377\u0375\3")
        buf.write("\2\2\2\u0377\u0378\3\2\2\2\u0378i\3\2\2\2\u0379\u0377")
        buf.write("\3\2\2\2\u037a\u037b\5l\67\2\u037b\u037c\7\4\2\2\u037c")
        buf.write("\u037d\5n8\2\u037dk\3\2\2\2\u037e\u037f\5\u0088E\2\u037f")
        buf.write("m\3\2\2\2\u0380\u038a\5\u0088E\2\u0381\u0382\7\b\2\2\u0382")
        buf.write("\u0383\5n8\2\u0383\u0384\7\t\2\2\u0384\u038a\3\2\2\2\u0385")
        buf.write("\u0386\7\n\2\2\u0386\u0387\5h\65\2\u0387\u0388\7\13\2")
        buf.write("\2\u0388\u038a\3\2\2\2\u0389\u0380\3\2\2\2\u0389\u0381")
        buf.write("\3\2\2\2\u0389\u0385\3\2\2\2\u038ao\3\2\2\2\u038b\u038c")
        buf.write("\5l\67\2\u038c\u038d\7\4\2\2\u038d\u038e\5l\67\2\u038e")
        buf.write("q\3\2\2\2\u038f\u0390\5~@\2\u0390s\3\2\2\2\u0391\u0392")
        buf.write("\7\n\2\2\u0392\u0394\5v<\2\u0393\u0395\7\3\2\2\u0394\u0393")
        buf.write("\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0396\3\2\2\2\u0396")
        buf.write("\u0397\7\13\2\2\u0397\u03a4\3\2\2\2\u0398\u0399\7\n\2")
        buf.write("\2\u0399\u03a4\7\13\2\2\u039a\u039b\7\5\2\2\u039b\u039d")
        buf.write("\5v<\2\u039c\u039e\7\3\2\2\u039d\u039c\3\2\2\2\u039d\u039e")
        buf.write("\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0\7\6\2\2\u03a0")
        buf.write("\u03a4\3\2\2\2\u03a1\u03a2\7\5\2\2\u03a2\u03a4\7\6\2\2")
        buf.write("\u03a3\u0391\3\2\2\2\u03a3\u0398\3\2\2\2\u03a3\u039a\3")
        buf.write("\2\2\2\u03a3\u03a1\3\2\2\2\u03a4u\3\2\2\2\u03a5\u03aa")
        buf.write("\5x=\2\u03a6\u03a7\7\3\2\2\u03a7\u03a9\5x=\2\u03a8\u03a6")
        buf.write("\3\2\2\2\u03a9\u03ac\3\2\2\2\u03aa\u03a8\3\2\2\2\u03aa")
        buf.write("\u03ab\3\2\2\2\u03abw\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ad")
        buf.write("\u03ae\5z>\2\u03ae\u03af\t\6\2\2\u03af\u03b0\5~@\2\u03b0")
        buf.write("y\3\2\2\2\u03b1\u03b4\5\u0088E\2\u03b2\u03b4\5\u0082B")
        buf.write("\2\u03b3\u03b1\3\2\2\2\u03b3\u03b2\3\2\2\2\u03b4{\3\2")
        buf.write("\2\2\u03b5\u03b6\7\b\2\2\u03b6\u03bb\5~@\2\u03b7\u03b8")
        buf.write("\7\3\2\2\u03b8\u03ba\5~@\2\u03b9\u03b7\3\2\2\2\u03ba\u03bd")
        buf.write("\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc")
        buf.write("\u03bf\3\2\2\2\u03bd\u03bb\3\2\2\2\u03be\u03c0\7\3\2\2")
        buf.write("\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\3")
        buf.write("\2\2\2\u03c1\u03c2\7\t\2\2\u03c2\u03c6\3\2\2\2\u03c3\u03c4")
        buf.write("\7\b\2\2\u03c4\u03c6\7\t\2\2\u03c5\u03b5\3\2\2\2\u03c5")
        buf.write("\u03c3\3\2\2\2\u03c6}\3\2\2\2\u03c7\u03ce\5\u0082B\2\u03c8")
        buf.write("\u03ce\5\u0080A\2\u03c9\u03ce\5t;\2\u03ca\u03ce\5|?\2")
        buf.write("\u03cb\u03ce\5\u0084C\2\u03cc\u03ce\5\u0086D\2\u03cd\u03c7")
        buf.write("\3\2\2\2\u03cd\u03c8\3\2\2\2\u03cd\u03c9\3\2\2\2\u03cd")
        buf.write("\u03ca\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03cc\3\2\2\2")
        buf.write("\u03ce\177\3\2\2\2\u03cf\u03d0\5\u0196\u00cc\2\u03d0\u0081")
        buf.write("\3\2\2\2\u03d1\u03d2\7\u0140\2\2\u03d2\u0083\3\2\2\2\u03d3")
        buf.write("\u03d4\t\n\2\2\u03d4\u0085\3\2\2\2\u03d5\u03d6\t\13\2")
        buf.write("\2\u03d6\u0087\3\2\2\2\u03d7\u03d8\5\u0190\u00c9\2\u03d8")
        buf.write("\u0089\3\2\2\2\u03d9\u03dd\5\u0098M\2\u03da\u03dc\7\17")
        buf.write("\2\2\u03db\u03da\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db")
        buf.write("\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e0\3\2\2\2\u03df")
        buf.write("\u03dd\3\2\2\2\u03e0\u03e1\7\2\2\3\u03e1\u008b\3\2\2\2")
        buf.write("\u03e2\u03e3\5\u013c\u009f\2\u03e3\u03e4\7\2\2\3\u03e4")
        buf.write("\u008d\3\2\2\2\u03e5\u03e6\5\u0138\u009d\2\u03e6\u03e7")
        buf.write("\7\2\2\3\u03e7\u008f\3\2\2\2\u03e8\u03e9\5\u0136\u009c")
        buf.write("\2\u03e9\u03ea\7\2\2\3\u03ea\u0091\3\2\2\2\u03eb\u03ec")
        buf.write("\5\u013a\u009e\2\u03ec\u03ed\7\2\2\3\u03ed\u0093\3\2\2")
        buf.write("\2\u03ee\u03ef\5\u016c\u00b7\2\u03ef\u03f0\7\2\2\3\u03f0")
        buf.write("\u0095\3\2\2\2\u03f1\u03f2\5\u0172\u00ba\2\u03f2\u03f3")
        buf.write("\7\2\2\3\u03f3\u0097\3\2\2\2\u03f4\u06b6\5\u00a8U\2\u03f5")
        buf.write("\u03f7\5\u00b8]\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3\2")
        buf.write("\2\2\u03f7\u03f8\3\2\2\2\u03f8\u06b6\5\u00d4k\2\u03f9")
        buf.write("\u03fb\7\u0121\2\2\u03fa\u03fc\7\u00b9\2\2\u03fb\u03fa")
        buf.write("\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("\u06b6\5\u0136\u009c\2\u03fe\u03ff\7Y\2\2\u03ff\u0403")
        buf.write("\5\u00b2Z\2\u0400\u0401\7\u0092\2\2\u0401\u0402\7\u00bd")
        buf.write("\2\2\u0402\u0404\7w\2\2\u0403\u0400\3\2\2\2\u0403\u0404")
        buf.write("\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u040d\5\u0136\u009c")
        buf.write("\2\u0406\u040c\5\u00a6T\2\u0407\u040c\5\u00a4S\2\u0408")
        buf.write("\u0409\7\u012a\2\2\u0409\u040a\t\f\2\2\u040a\u040c\5\u00c0")
        buf.write("a\2\u040b\u0406\3\2\2\2\u040b\u0407\3\2\2\2\u040b\u0408")
        buf.write("\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d")
        buf.write("\u040e\3\2\2\2\u040e\u06b6\3\2\2\2\u040f\u040d\3\2\2\2")
        buf.write("\u0410\u0411\7\63\2\2\u0411\u0412\5\u00b2Z\2\u0412\u0413")
        buf.write("\5\u0136\u009c\2\u0413\u0414\7\u00f8\2\2\u0414\u0415\t")
        buf.write("\f\2\2\u0415\u0416\5\u00c0a\2\u0416\u06b6\3\2\2\2\u0417")
        buf.write("\u0418\7\63\2\2\u0418\u0419\5\u00b2Z\2\u0419\u041a\5\u0136")
        buf.write("\u009c\2\u041a\u041b\7\u00f8\2\2\u041b\u041c\5\u00a4S")
        buf.write("\2\u041c\u06b6\3\2\2\2\u041d\u041e\7p\2\2\u041e\u0421")
        buf.write("\5\u00b2Z\2\u041f\u0420\7\u0092\2\2\u0420\u0422\7w\2\2")
        buf.write("\u0421\u041f\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0423\3")
        buf.write("\2\2\2\u0423\u0425\5\u0136\u009c\2\u0424\u0426\t\r\2\2")
        buf.write("\u0425\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u06b6\3")
        buf.write("\2\2\2\u0427\u0428\7\u00fb\2\2\u0428\u042b\t\16\2\2\u0429")
        buf.write("\u042a\t\17\2\2\u042a\u042c\5\u0136\u009c\2\u042b\u0429")
        buf.write("\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u0431\3\2\2\2\u042d")
        buf.write("\u042f\7\u00a8\2\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2")
        buf.write("\2\2\u042f\u0430\3\2\2\2\u0430\u0432\7\u0140\2\2\u0431")
        buf.write("\u042e\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u06b6\3\2\2\2")
        buf.write("\u0433\u0438\5\u009cO\2\u0434\u0435\7\5\2\2\u0435\u0436")
        buf.write("\5\u0172\u00ba\2\u0436\u0437\7\6\2\2\u0437\u0439\3\2\2")
        buf.write("\2\u0438\u0434\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a")
        buf.write("\3\2\2\2\u043a\u043b\5\u00bc_\2\u043b\u0440\5\u00be`\2")
        buf.write("\u043c\u043e\7:\2\2\u043d\u043c\3\2\2\2\u043d\u043e\3")
        buf.write("\2\2\2\u043e\u043f\3\2\2\2\u043f\u0441\5\u00a8U\2\u0440")
        buf.write("\u043d\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u06b6\3\2\2\2")
        buf.write("\u0442\u0447\5\u009cO\2\u0443\u0444\7\5\2\2\u0444\u0445")
        buf.write("\5\u0172\u00ba\2\u0445\u0446\7\6\2\2\u0446\u0448\3\2\2")
        buf.write("\2\u0447\u0443\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u045e")
        buf.write("\3\2\2\2\u0449\u045d\5\u00a6T\2\u044a\u044b\7\u00cf\2")
        buf.write("\2\u044b\u044c\7B\2\2\u044c\u044d\7\5\2\2\u044d\u044e")
        buf.write("\5\u0172\u00ba\2\u044e\u044f\7\6\2\2\u044f\u0454\3\2\2")
        buf.write("\2\u0450\u0451\7\u00cf\2\2\u0451\u0452\7B\2\2\u0452\u0454")
        buf.write("\5\u011e\u0090\2\u0453\u044a\3\2\2\2\u0453\u0450\3\2\2")
        buf.write("\2\u0454\u045d\3\2\2\2\u0455\u045d\5\u00a0Q\2\u0456\u045d")
        buf.write("\5\u00a2R\2\u0457\u045d\5\u0132\u009a\2\u0458\u045d\5")
        buf.write("\u00ccg\2\u0459\u045d\5\u00a4S\2\u045a\u045b\7\u010a\2")
        buf.write("\2\u045b\u045d\5\u00c0a\2\u045c\u0449\3\2\2\2\u045c\u0453")
        buf.write("\3\2\2\2\u045c\u0455\3\2\2\2\u045c\u0456\3\2\2\2\u045c")
        buf.write("\u0457\3\2\2\2\u045c\u0458\3\2\2\2\u045c\u0459\3\2\2\2")
        buf.write("\u045c\u045a\3\2\2\2\u045d\u0460\3\2\2\2\u045e\u045c\3")
        buf.write("\2\2\2\u045e\u045f\3\2\2\2\u045f\u0465\3\2\2\2\u0460\u045e")
        buf.write("\3\2\2\2\u0461\u0463\7:\2\2\u0462\u0461\3\2\2\2\u0462")
        buf.write("\u0463\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0466\5\u00a8")
        buf.write("U\2\u0465\u0462\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u06b6")
        buf.write("\3\2\2\2\u0467\u0468\7Y\2\2\u0468\u046c\7\u0107\2\2\u0469")
        buf.write("\u046a\7\u0092\2\2\u046a\u046b\7\u00bd\2\2\u046b\u046d")
        buf.write("\7w\2\2\u046c\u0469\3\2\2\2\u046c\u046d\3\2\2\2\u046d")
        buf.write("\u046e\3\2\2\2\u046e\u046f\5\u0138\u009d\2\u046f\u0470")
        buf.write("\7\u00a8\2\2\u0470\u0479\5\u0138\u009d\2\u0471\u0478\5")
        buf.write("\u00bc_\2\u0472\u0478\5\u0132\u009a\2\u0473\u0478\5\u00cc")
        buf.write("g\2\u0474\u0478\5\u00a4S\2\u0475\u0476\7\u010a\2\2\u0476")
        buf.write("\u0478\5\u00c0a\2\u0477\u0471\3\2\2\2\u0477\u0472\3\2")
        buf.write("\2\2\u0477\u0473\3\2\2\2\u0477\u0474\3\2\2\2\u0477\u0475")
        buf.write("\3\2\2\2\u0478\u047b\3\2\2\2\u0479\u0477\3\2\2\2\u0479")
        buf.write("\u047a\3\2\2\2\u047a\u06b6\3\2\2\2\u047b\u0479\3\2\2\2")
        buf.write("\u047c\u0481\5\u009eP\2\u047d\u047e\7\5\2\2\u047e\u047f")
        buf.write("\5\u0172\u00ba\2\u047f\u0480\7\6\2\2\u0480\u0482\3\2\2")
        buf.write("\2\u0481\u047d\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0483")
        buf.write("\3\2\2\2\u0483\u0484\5\u00bc_\2\u0484\u0489\5\u00be`\2")
        buf.write("\u0485\u0487\7:\2\2\u0486\u0485\3\2\2\2\u0486\u0487\3")
        buf.write("\2\2\2\u0487\u0488\3\2\2\2\u0488\u048a\5\u00a8U\2\u0489")
        buf.write("\u0486\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u06b6\3\2\2\2")
        buf.write("\u048b\u048c\7\64\2\2\u048c\u048d\7\u0107\2\2\u048d\u048f")
        buf.write("\5\u0136\u009c\2\u048e\u0490\5\u00aeX\2\u048f\u048e\3")
        buf.write("\2\2\2\u048f\u0490\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0492")
        buf.write("\7U\2\2\u0492\u049a\7\u0101\2\2\u0493\u049b\5\u0190\u00c9")
        buf.write("\2\u0494\u0495\7\u0084\2\2\u0495\u0496\7P\2\2\u0496\u049b")
        buf.write("\5\u0120\u0091\2\u0497\u0498\7\u0084\2\2\u0498\u0499\7")
        buf.write("\62\2\2\u0499\u049b\7P\2\2\u049a\u0493\3\2\2\2\u049a\u0494")
        buf.write("\3\2\2\2\u049a\u0497\3\2\2\2\u049a\u049b\3\2\2\2\u049b")
        buf.write("\u06b6\3\2\2\2\u049c\u049d\7\63\2\2\u049d\u049e\7\u0107")
        buf.write("\2\2\u049e\u049f\5\u0136\u009c\2\u049f\u04a0\7\60\2\2")
        buf.write("\u04a0\u04a1\t\20\2\2\u04a1\u04a2\5\u016e\u00b8\2\u04a2")
        buf.write("\u06b6\3\2\2\2\u04a3\u04a4\7\63\2\2\u04a4\u04a5\7\u0107")
        buf.write("\2\2\u04a5\u04a6\5\u0136\u009c\2\u04a6\u04a7\7\60\2\2")
        buf.write("\u04a7\u04a8\t\20\2\2\u04a8\u04a9\7\5\2\2\u04a9\u04aa")
        buf.write("\5\u016e\u00b8\2\u04aa\u04ab\7\6\2\2\u04ab\u06b6\3\2\2")
        buf.write("\2\u04ac\u04ad\7\63\2\2\u04ad\u04ae\7\u0107\2\2\u04ae")
        buf.write("\u04af\5\u0136\u009c\2\u04af\u04b0\7\u00e2\2\2\u04b0\u04b1")
        buf.write("\7O\2\2\u04b1\u04b2\5\u0136\u009c\2\u04b2\u04b3\7\u010e")
        buf.write("\2\2\u04b3\u04b4\5\u018c\u00c7\2\u04b4\u06b6\3\2\2\2\u04b5")
        buf.write("\u04b6\7\63\2\2\u04b6\u04b7\7\u0107\2\2\u04b7\u04b8\5")
        buf.write("\u0136\u009c\2\u04b8\u04b9\7p\2\2\u04b9\u04ba\t\20\2\2")
        buf.write("\u04ba\u04bb\7\5\2\2\u04bb\u04bc\5\u0134\u009b\2\u04bc")
        buf.write("\u04bd\7\6\2\2\u04bd\u06b6\3\2\2\2\u04be\u04bf\7\63\2")
        buf.write("\2\u04bf\u04c0\7\u0107\2\2\u04c0\u04c1\5\u0136\u009c\2")
        buf.write("\u04c1\u04c2\7p\2\2\u04c2\u04c3\t\20\2\2\u04c3\u04c4\5")
        buf.write("\u0134\u009b\2\u04c4\u06b6\3\2\2\2\u04c5\u04c6\7\63\2")
        buf.write("\2\u04c6\u04c7\t\21\2\2\u04c7\u04c8\5\u0136\u009c\2\u04c8")
        buf.write("\u04c9\7\u00e2\2\2\u04c9\u04ca\7\u010e\2\2\u04ca\u04cb")
        buf.write("\5\u0136\u009c\2\u04cb\u06b6\3\2\2\2\u04cc\u04cd\7\63")
        buf.write("\2\2\u04cd\u04ce\t\21\2\2\u04ce\u04cf\5\u0136\u009c\2")
        buf.write("\u04cf\u04d0\7\u00f8\2\2\u04d0\u04d1\7\u010a\2\2\u04d1")
        buf.write("\u04d2\5\u00c0a\2\u04d2\u06b6\3\2\2\2\u04d3\u04d4\7\63")
        buf.write("\2\2\u04d4\u04d5\t\21\2\2\u04d5\u04d6\5\u0136\u009c\2")
        buf.write("\u04d6\u04d7\7\u011f\2\2\u04d7\u04da\7\u010a\2\2\u04d8")
        buf.write("\u04d9\7\u0092\2\2\u04d9\u04db\7w\2\2\u04da\u04d8\3\2")
        buf.write("\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd")
        buf.write("\5\u00c0a\2\u04dd\u06b6\3\2\2\2\u04de\u04df\7\63\2\2\u04df")
        buf.write("\u04e0\7\u0107\2\2\u04e0\u04e1\5\u0136\u009c\2\u04e1\u04e3")
        buf.write("\t\22\2\2\u04e2\u04e4\7O\2\2\u04e3\u04e2\3\2\2\2\u04e3")
        buf.write("\u04e4\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e7\5\u0136")
        buf.write("\u009c\2\u04e6\u04e8\5\u0198\u00cd\2\u04e7\u04e6\3\2\2")
        buf.write("\2\u04e7\u04e8\3\2\2\2\u04e8\u06b6\3\2\2\2\u04e9\u04ea")
        buf.write("\7\63\2\2\u04ea\u04eb\7\u0107\2\2\u04eb\u04ed\5\u0136")
        buf.write("\u009c\2\u04ec\u04ee\5\u00aeX\2\u04ed\u04ec\3\2\2\2\u04ed")
        buf.write("\u04ee\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f1\7G\2\2")
        buf.write("\u04f0\u04f2\7O\2\2\u04f1\u04f0\3\2\2\2\u04f1\u04f2\3")
        buf.write("\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f4\5\u0136\u009c\2")
        buf.write("\u04f4\u04f6\5\u0174\u00bb\2\u04f5\u04f7\5\u016a\u00b6")
        buf.write("\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u06b6")
        buf.write("\3\2\2\2\u04f8\u04f9\7\63\2\2\u04f9\u04fa\7\u0107\2\2")
        buf.write("\u04fa\u04fc\5\u0136\u009c\2\u04fb\u04fd\5\u00aeX\2\u04fc")
        buf.write("\u04fb\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04fe\3\2\2\2")
        buf.write("\u04fe\u04ff\7\u00e4\2\2\u04ff\u0500\7P\2\2\u0500\u0501")
        buf.write("\7\5\2\2\u0501\u0502\5\u016e\u00b8\2\u0502\u0503\7\6\2")
        buf.write("\2\u0503\u06b6\3\2\2\2\u0504\u0505\7\63\2\2\u0505\u0506")
        buf.write("\7\u0107\2\2\u0506\u0508\5\u0136\u009c\2\u0507\u0509\5")
        buf.write("\u00aeX\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2\2\2\u0509")
        buf.write("\u050a\3\2\2\2\u050a\u050b\7\u00f8\2\2\u050b\u050c\7\u00f5")
        buf.write("\2\2\u050c\u0510\7\u0140\2\2\u050d\u050e\7\u012a\2\2\u050e")
        buf.write("\u050f\7\u00f6\2\2\u050f\u0511\5\u00c0a\2\u0510\u050d")
        buf.write("\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u06b6\3\2\2\2\u0512")
        buf.write("\u0513\7\63\2\2\u0513\u0514\7\u0107\2\2\u0514\u0516\5")
        buf.write("\u0136\u009c\2\u0515\u0517\5\u00aeX\2\u0516\u0515\3\2")
        buf.write("\2\2\u0516\u0517\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519")
        buf.write("\7\u00f8\2\2\u0519\u051a\7\u00f6\2\2\u051a\u051b\5\u00c0")
        buf.write("a\2\u051b\u06b6\3\2\2\2\u051c\u051d\7\63\2\2\u051d\u051e")
        buf.write("\t\21\2\2\u051e\u051f\5\u0136\u009c\2\u051f\u0523\7\60")
        buf.write("\2\2\u0520\u0521\7\u0092\2\2\u0521\u0522\7\u00bd\2\2\u0522")
        buf.write("\u0524\7w\2\2\u0523\u0520\3\2\2\2\u0523\u0524\3\2\2\2")
        buf.write("\u0524\u0526\3\2\2\2\u0525\u0527\5\u00acW\2\u0526\u0525")
        buf.write("\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0526\3\2\2\2\u0528")
        buf.write("\u0529\3\2\2\2\u0529\u06b6\3\2\2\2\u052a\u052b\7\63\2")
        buf.write("\2\u052b\u052c\7\u0107\2\2\u052c\u052d\5\u0136\u009c\2")
        buf.write("\u052d\u052e\5\u00aeX\2\u052e\u052f\7\u00e2\2\2\u052f")
        buf.write("\u0530\7\u010e\2\2\u0530\u0531\5\u00aeX\2\u0531\u06b6")
        buf.write("\3\2\2\2\u0532\u0533\7\63\2\2\u0533\u0534\t\21\2\2\u0534")
        buf.write("\u0535\5\u0136\u009c\2\u0535\u0538\7p\2\2\u0536\u0537")
        buf.write("\7\u0092\2\2\u0537\u0539\7w\2\2\u0538\u0536\3\2\2\2\u0538")
        buf.write("\u0539\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053f\5\u00ae")
        buf.write("X\2\u053b\u053c\7\3\2\2\u053c\u053e\5\u00aeX\2\u053d\u053b")
        buf.write("\3\2\2\2\u053e\u0541\3\2\2\2\u053f\u053d\3\2\2\2\u053f")
        buf.write("\u0540\3\2\2\2\u0540\u0543\3\2\2\2\u0541\u053f\3\2\2\2")
        buf.write("\u0542\u0544\7\u00d9\2\2\u0543\u0542\3\2\2\2\u0543\u0544")
        buf.write("\3\2\2\2\u0544\u06b6\3\2\2\2\u0545\u0546\7\63\2\2\u0546")
        buf.write("\u0547\7\u0107\2\2\u0547\u0549\5\u0136\u009c\2\u0548\u054a")
        buf.write("\5\u00aeX\2\u0549\u0548\3\2\2\2\u0549\u054a\3\2\2\2\u054a")
        buf.write("\u054b\3\2\2\2\u054b\u054c\7\u00f8\2\2\u054c\u054d\5\u00a4")
        buf.write("S\2\u054d\u06b6\3\2\2\2\u054e\u054f\7\63\2\2\u054f\u0550")
        buf.write("\7\u0107\2\2\u0550\u0551\5\u0136\u009c\2\u0551\u0552\7")
        buf.write("\u00de\2\2\u0552\u0553\7\u00d0\2\2\u0553\u06b6\3\2\2\2")
        buf.write("\u0554\u0555\7p\2\2\u0555\u0558\7\u0107\2\2\u0556\u0557")
        buf.write("\7\u0092\2\2\u0557\u0559\7w\2\2\u0558\u0556\3\2\2\2\u0558")
        buf.write("\u0559\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u055c\5\u0136")
        buf.write("\u009c\2\u055b\u055d\7\u00d9\2\2\u055c\u055b\3\2\2\2\u055c")
        buf.write("\u055d\3\2\2\2\u055d\u06b6\3\2\2\2\u055e\u055f\7p\2\2")
        buf.write("\u055f\u0562\7\u0125\2\2\u0560\u0561\7\u0092\2\2\u0561")
        buf.write("\u0563\7w\2\2\u0562\u0560\3\2\2\2\u0562\u0563\3\2\2\2")
        buf.write("\u0563\u0564\3\2\2\2\u0564\u06b6\5\u0136\u009c\2\u0565")
        buf.write("\u0568\7Y\2\2\u0566\u0567\7\u00c5\2\2\u0567\u0569\7\u00e4")
        buf.write("\2\2\u0568\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056e")
        buf.write("\3\2\2\2\u056a\u056c\7\u008c\2\2\u056b\u056a\3\2\2\2\u056b")
        buf.write("\u056c\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056f\7\u010b")
        buf.write("\2\2\u056e\u056b\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0570")
        buf.write("\3\2\2\2\u0570\u0574\7\u0125\2\2\u0571\u0572\7\u0092\2")
        buf.write("\2\u0572\u0573\7\u00bd\2\2\u0573\u0575\7w\2\2\u0574\u0571")
        buf.write("\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0576\3\2\2\2\u0576")
        buf.write("\u0578\5\u0136\u009c\2\u0577\u0579\5\u0126\u0094\2\u0578")
        buf.write("\u0577\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u0582\3\2\2\2")
        buf.write("\u057a\u0581\5\u00a6T\2\u057b\u057c\7\u00cf\2\2\u057c")
        buf.write("\u057d\7\u00c1\2\2\u057d\u0581\5\u011e\u0090\2\u057e\u057f")
        buf.write("\7\u010a\2\2\u057f\u0581\5\u00c0a\2\u0580\u057a\3\2\2")
        buf.write("\2\u0580\u057b\3\2\2\2\u0580\u057e\3\2\2\2\u0581\u0584")
        buf.write("\3\2\2\2\u0582\u0580\3\2\2\2\u0582\u0583\3\2\2\2\u0583")
        buf.write("\u0585\3\2\2\2\u0584\u0582\3\2\2\2\u0585\u0586\7:\2\2")
        buf.write("\u0586\u0587\5\u00a8U\2\u0587\u06b6\3\2\2\2\u0588\u058b")
        buf.write("\7Y\2\2\u0589\u058a\7\u00c5\2\2\u058a\u058c\7\u00e4\2")
        buf.write("\2\u058b\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058e")
        buf.write("\3\2\2\2\u058d\u058f\7\u008c\2\2\u058e\u058d\3\2\2\2\u058e")
        buf.write("\u058f\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0591\7\u010b")
        buf.write("\2\2\u0591\u0592\7\u0125\2\2\u0592\u0597\5\u0138\u009d")
        buf.write("\2\u0593\u0594\7\5\2\2\u0594\u0595\5\u0172\u00ba\2\u0595")
        buf.write("\u0596\7\6\2\2\u0596\u0598\3\2\2\2\u0597\u0593\3\2\2\2")
        buf.write("\u0597\u0598\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u059c\5")
        buf.write("\u00bc_\2\u059a\u059b\7\u00c4\2\2\u059b\u059d\5\u00c0")
        buf.write("a\2\u059c\u059a\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u06b6")
        buf.write("\3\2\2\2\u059e\u059f\7\63\2\2\u059f\u05a0\7\u0125\2\2")
        buf.write("\u05a0\u05a2\5\u0136\u009c\2\u05a1\u05a3\7:\2\2\u05a2")
        buf.write("\u05a1\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4\3\2\2\2")
        buf.write("\u05a4\u05a5\5\u00a8U\2\u05a5\u06b6\3\2\2\2\u05a6\u05a9")
        buf.write("\7Y\2\2\u05a7\u05a8\7\u00c5\2\2\u05a8\u05aa\7\u00e4\2")
        buf.write("\2\u05a9\u05a7\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ac")
        buf.write("\3\2\2\2\u05ab\u05ad\7\u010b\2\2\u05ac\u05ab\3\2\2\2\u05ac")
        buf.write("\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05b2\7\u008a")
        buf.write("\2\2\u05af\u05b0\7\u0092\2\2\u05b0\u05b1\7\u00bd\2\2\u05b1")
        buf.write("\u05b3\7w\2\2\u05b2\u05af\3\2\2\2\u05b2\u05b3\3\2\2\2")
        buf.write("\u05b3\u05b4\3\2\2\2\u05b4\u05b5\5\u0136\u009c\2\u05b5")
        buf.write("\u05b6\7:\2\2\u05b6\u05c0\7\u0140\2\2\u05b7\u05b8\7\u0123")
        buf.write("\2\2\u05b8\u05bd\5\u00d2j\2\u05b9\u05ba\7\3\2\2\u05ba")
        buf.write("\u05bc\5\u00d2j\2\u05bb\u05b9\3\2\2\2\u05bc\u05bf\3\2")
        buf.write("\2\2\u05bd\u05bb\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05c1")
        buf.write("\3\2\2\2\u05bf\u05bd\3\2\2\2\u05c0\u05b7\3\2\2\2\u05c0")
        buf.write("\u05c1\3\2\2\2\u05c1\u06b6\3\2\2\2\u05c2\u05c4\7p\2\2")
        buf.write("\u05c3\u05c5\7\u010b\2\2\u05c4\u05c3\3\2\2\2\u05c4\u05c5")
        buf.write("\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c9\7\u008a\2\2\u05c7")
        buf.write("\u05c8\7\u0092\2\2\u05c8\u05ca\7w\2\2\u05c9\u05c7\3\2")
        buf.write("\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u06b6")
        buf.write("\5\u0136\u009c\2\u05cc\u05ce\7x\2\2\u05cd\u05cf\t\23\2")
        buf.write("\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0")
        buf.write("\3\2\2\2\u05d0\u06b6\5\u0098M\2\u05d1\u05d2\7\u00fb\2")
        buf.write("\2\u05d2\u05d5\7\u0108\2\2\u05d3\u05d4\t\17\2\2\u05d4")
        buf.write("\u05d6\5\u0136\u009c\2\u05d5\u05d3\3\2\2\2\u05d5\u05d6")
        buf.write("\3\2\2\2\u05d6\u05db\3\2\2\2\u05d7\u05d9\7\u00a8\2\2\u05d8")
        buf.write("\u05d7\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05da\3\2\2\2")
        buf.write("\u05da\u05dc\7\u0140\2\2\u05db\u05d8\3\2\2\2\u05db\u05dc")
        buf.write("\3\2\2\2\u05dc\u06b6\3\2\2\2\u05dd\u05de\7\u00fb\2\2\u05de")
        buf.write("\u05df\7\u0107\2\2\u05df\u05e2\7z\2\2\u05e0\u05e1\t\17")
        buf.write("\2\2\u05e1\u05e3\5\u0136\u009c\2\u05e2\u05e0\3\2\2\2\u05e2")
        buf.write("\u05e3\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e5\7\u00a8")
        buf.write("\2\2\u05e5\u05e7\7\u0140\2\2\u05e6\u05e8\5\u00aeX\2\u05e7")
        buf.write("\u05e6\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8\u06b6\3\2\2\2")
        buf.write("\u05e9\u05ea\7\u00fb\2\2\u05ea\u05eb\7\u010a\2\2\u05eb")
        buf.write("\u05f0\5\u0136\u009c\2\u05ec\u05ed\7\5\2\2\u05ed\u05ee")
        buf.write("\5\u00c4c\2\u05ee\u05ef\7\6\2\2\u05ef\u05f1\3\2\2\2\u05f0")
        buf.write("\u05ec\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u06b6\3\2\2\2")
        buf.write("\u05f2\u05f3\7\u00fb\2\2\u05f3\u05f4\7P\2\2\u05f4\u05f5")
        buf.write("\t\17\2\2\u05f5\u05f8\5\u0136\u009c\2\u05f6\u05f7\t\17")
        buf.write("\2\2\u05f7\u05f9\5\u0136\u009c\2\u05f8\u05f6\3\2\2\2\u05f8")
        buf.write("\u05f9\3\2\2\2\u05f9\u06b6\3\2\2\2\u05fa\u05fb\7\u00fb")
        buf.write("\2\2\u05fb\u05fe\7\u0126\2\2\u05fc\u05fd\t\17\2\2\u05fd")
        buf.write("\u05ff\5\u0136\u009c\2\u05fe\u05fc\3\2\2\2\u05fe\u05ff")
        buf.write("\3\2\2\2\u05ff\u0604\3\2\2\2\u0600\u0602\7\u00a8\2\2\u0601")
        buf.write("\u0600\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0603\3\2\2\2")
        buf.write("\u0603\u0605\7\u0140\2\2\u0604\u0601\3\2\2\2\u0604\u0605")
        buf.write("\3\2\2\2\u0605\u06b6\3\2\2\2\u0606\u0607\7\u00fb\2\2\u0607")
        buf.write("\u0608\7\u00d0\2\2\u0608\u060a\5\u0136\u009c\2\u0609\u060b")
        buf.write("\5\u00aeX\2\u060a\u0609\3\2\2\2\u060a\u060b\3\2\2\2\u060b")
        buf.write("\u06b6\3\2\2\2\u060c\u060e\7\u00fb\2\2\u060d\u060f\5\u0190")
        buf.write("\u00c9\2\u060e\u060d\3\2\2\2\u060e\u060f\3\2\2\2\u060f")
        buf.write("\u0610\3\2\2\2\u0610\u0618\7\u008b\2\2\u0611\u0613\7\u00a8")
        buf.write("\2\2\u0612\u0611\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0616")
        buf.write("\3\2\2\2\u0614\u0617\5\u0136\u009c\2\u0615\u0617\7\u0140")
        buf.write("\2\2\u0616\u0614\3\2\2\2\u0616\u0615\3\2\2\2\u0617\u0619")
        buf.write("\3\2\2\2\u0618\u0612\3\2\2\2\u0618\u0619\3\2\2\2\u0619")
        buf.write("\u06b6\3\2\2\2\u061a\u061b\7\u00fb\2\2\u061b\u061c\7Y")
        buf.write("\2\2\u061c\u061d\7\u0107\2\2\u061d\u0620\5\u0136\u009c")
        buf.write("\2\u061e\u061f\7:\2\2\u061f\u0621\7\u00f5\2\2\u0620\u061e")
        buf.write("\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u06b6\3\2\2\2\u0622")
        buf.write("\u0623\7\u00fb\2\2\u0623\u0624\7\\\2\2\u0624\u06b6\7\u00b9")
        buf.write("\2\2\u0625\u0626\t\24\2\2\u0626\u0628\7\u008a\2\2\u0627")
        buf.write("\u0629\7z\2\2\u0628\u0627\3\2\2\2\u0628\u0629\3\2\2\2")
        buf.write("\u0629\u062a\3\2\2\2\u062a\u06b6\5\u00b4[\2\u062b\u062c")
        buf.write("\t\24\2\2\u062c\u062e\5\u00b2Z\2\u062d\u062f\7z\2\2\u062e")
        buf.write("\u062d\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u0630\3\2\2\2")
        buf.write("\u0630\u0631\5\u0136\u009c\2\u0631\u06b6\3\2\2\2\u0632")
        buf.write("\u0634\t\24\2\2\u0633\u0635\7\u0107\2\2\u0634\u0633\3")
        buf.write("\2\2\2\u0634\u0635\3\2\2\2\u0635\u0637\3\2\2\2\u0636\u0638")
        buf.write("\t\25\2\2\u0637\u0636\3\2\2\2\u0637\u0638\3\2\2\2\u0638")
        buf.write("\u0639\3\2\2\2\u0639\u063b\5\u0136\u009c\2\u063a\u063c")
        buf.write("\5\u00aeX\2\u063b\u063a\3\2\2\2\u063b\u063c\3\2\2\2\u063c")
        buf.write("\u063e\3\2\2\2\u063d\u063f\5\u00b6\\\2\u063e\u063d\3\2")
        buf.write("\2\2\u063e\u063f\3\2\2\2\u063f\u06b6\3\2\2\2\u0640\u0642")
        buf.write("\t\24\2\2\u0641\u0643\7\u00da\2\2\u0642\u0641\3\2\2\2")
        buf.write("\u0642\u0643\3\2\2\2\u0643\u0644\3\2\2\2\u0644\u06b6\5")
        buf.write("\u00a8U\2\u0645\u0646\7Q\2\2\u0646\u0647\7\u00c1\2\2\u0647")
        buf.write("\u0648\5\u00b2Z\2\u0648\u0649\5\u0136\u009c\2\u0649\u064a")
        buf.write("\7\u009f\2\2\u064a\u064b\t\26\2\2\u064b\u06b6\3\2\2\2")
        buf.write("\u064c\u064d\7Q\2\2\u064d\u064e\7\u00c1\2\2\u064e\u064f")
        buf.write("\7\u0107\2\2\u064f\u0650\5\u0136\u009c\2\u0650\u0651\7")
        buf.write("\u009f\2\2\u0651\u0652\t\26\2\2\u0652\u06b6\3\2\2\2\u0653")
        buf.write("\u0654\7\u00e1\2\2\u0654\u0655\7\u0107\2\2\u0655\u06b6")
        buf.write("\5\u0136\u009c\2\u0656\u065e\7\u00e1\2\2\u0657\u065f\7")
        buf.write("\u0140\2\2\u0658\u065a\13\2\2\2\u0659\u0658\3\2\2\2\u065a")
        buf.write("\u065d\3\2\2\2\u065b\u065c\3\2\2\2\u065b\u0659\3\2\2\2")
        buf.write("\u065c\u065f\3\2\2\2\u065d\u065b\3\2\2\2\u065e\u0657\3")
        buf.write("\2\2\2\u065e\u065b\3\2\2\2\u065f\u06b6\3\2\2\2\u0660\u0662")
        buf.write("\7C\2\2\u0661\u0663\7\u00a5\2\2\u0662\u0661\3\2\2\2\u0662")
        buf.write("\u0663\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0665\7\u0107")
        buf.write("\2\2\u0665\u0668\5\u0136\u009c\2\u0666\u0667\7\u00c4\2")
        buf.write("\2\u0667\u0669\5\u00c0a\2\u0668\u0666\3\2\2\2\u0668\u0669")
        buf.write("\3\2\2\2\u0669\u066e\3\2\2\2\u066a\u066c\7:\2\2\u066b")
        buf.write("\u066a\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066d\3\2\2\2")
        buf.write("\u066d\u066f\5\u00a8U\2\u066e\u066b\3\2\2\2\u066e\u066f")
        buf.write("\3\2\2\2\u066f\u06b6\3\2\2\2\u0670\u0671\7\u011a\2\2\u0671")
        buf.write("\u0674\7\u0107\2\2\u0672\u0673\7\u0092\2\2\u0673\u0675")
        buf.write("\7w\2\2\u0674\u0672\3\2\2\2\u0674\u0675\3\2\2\2\u0675")
        buf.write("\u0676\3\2\2\2\u0676\u06b6\5\u0136\u009c\2\u0677\u0678")
        buf.write("\7I\2\2\u0678\u06b6\7C\2\2\u0679\u067a\7\u00ac\2\2\u067a")
        buf.write("\u067c\7a\2\2\u067b\u067d\7\u00ad\2\2\u067c\u067b\3\2")
        buf.write("\2\2\u067c\u067d\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u067f")
        buf.write("\7\u0099\2\2\u067f\u0681\7\u0140\2\2\u0680\u0682\7\u00cd")
        buf.write("\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0683")
        buf.write("\3\2\2\2\u0683\u0684\7\u009e\2\2\u0684\u0685\7\u0107\2")
        buf.write("\2\u0685\u0687\5\u0136\u009c\2\u0686\u0688\5\u00aeX\2")
        buf.write("\u0687\u0686\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u06b6\3")
        buf.write("\2\2\2\u0689\u068a\7\u0116\2\2\u068a\u068b\7\u0107\2\2")
        buf.write("\u068b\u068d\5\u0136\u009c\2\u068c\u068e\5\u00aeX\2\u068d")
        buf.write("\u068c\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u06b6\3\2\2\2")
        buf.write("\u068f\u0690\7\u00b8\2\2\u0690\u0691\7\u00e3\2\2\u0691")
        buf.write("\u0692\7\u0107\2\2\u0692\u06b6\5\u0136\u009c\2\u0693\u0694")
        buf.write("\t\27\2\2\u0694\u069c\5\u0190\u00c9\2\u0695\u069d\7\u0140")
        buf.write("\2\2\u0696\u0698\13\2\2\2\u0697\u0696\3\2\2\2\u0698\u069b")
        buf.write("\3\2\2\2\u0699\u069a\3\2\2\2\u0699\u0697\3\2\2\2\u069a")
        buf.write("\u069d\3\2\2\2\u069b\u0699\3\2\2\2\u069c\u0695\3\2\2\2")
        buf.write("\u069c\u0699\3\2\2\2\u069d\u06b6\3\2\2\2\u069e\u069f\7")
        buf.write("\u00f8\2\2\u069f\u06a3\7\u00ea\2\2\u06a0\u06a2\13\2\2")
        buf.write("\2\u06a1\u06a0\3\2\2\2\u06a2\u06a5\3\2\2\2\u06a3\u06a4")
        buf.write("\3\2\2\2\u06a3\u06a1\3\2\2\2\u06a4\u06b6\3\2\2\2\u06a5")
        buf.write("\u06a3\3\2\2\2\u06a6\u06aa\7\u00f8\2\2\u06a7\u06a9\13")
        buf.write("\2\2\2\u06a8\u06a7\3\2\2\2\u06a9\u06ac\3\2\2\2\u06aa\u06ab")
        buf.write("\3\2\2\2\u06aa\u06a8\3\2\2\2\u06ab\u06b6\3\2\2\2\u06ac")
        buf.write("\u06aa\3\2\2\2\u06ad\u06b6\7\u00e5\2\2\u06ae\u06b2\5\u009a")
        buf.write("N\2\u06af\u06b1\13\2\2\2\u06b0\u06af\3\2\2\2\u06b1\u06b4")
        buf.write("\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b3")
        buf.write("\u06b6\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b5\u03f4\3\2\2\2")
        buf.write("\u06b5\u03f6\3\2\2\2\u06b5\u03f9\3\2\2\2\u06b5\u03fe\3")
        buf.write("\2\2\2\u06b5\u0410\3\2\2\2\u06b5\u0417\3\2\2\2\u06b5\u041d")
        buf.write("\3\2\2\2\u06b5\u0427\3\2\2\2\u06b5\u0433\3\2\2\2\u06b5")
        buf.write("\u0442\3\2\2\2\u06b5\u0467\3\2\2\2\u06b5\u047c\3\2\2\2")
        buf.write("\u06b5\u048b\3\2\2\2\u06b5\u049c\3\2\2\2\u06b5\u04a3\3")
        buf.write("\2\2\2\u06b5\u04ac\3\2\2\2\u06b5\u04b5\3\2\2\2\u06b5\u04be")
        buf.write("\3\2\2\2\u06b5\u04c5\3\2\2\2\u06b5\u04cc\3\2\2\2\u06b5")
        buf.write("\u04d3\3\2\2\2\u06b5\u04de\3\2\2\2\u06b5\u04e9\3\2\2\2")
        buf.write("\u06b5\u04f8\3\2\2\2\u06b5\u0504\3\2\2\2\u06b5\u0512\3")
        buf.write("\2\2\2\u06b5\u051c\3\2\2\2\u06b5\u052a\3\2\2\2\u06b5\u0532")
        buf.write("\3\2\2\2\u06b5\u0545\3\2\2\2\u06b5\u054e\3\2\2\2\u06b5")
        buf.write("\u0554\3\2\2\2\u06b5\u055e\3\2\2\2\u06b5\u0565\3\2\2\2")
        buf.write("\u06b5\u0588\3\2\2\2\u06b5\u059e\3\2\2\2\u06b5\u05a6\3")
        buf.write("\2\2\2\u06b5\u05c2\3\2\2\2\u06b5\u05cc\3\2\2\2\u06b5\u05d1")
        buf.write("\3\2\2\2\u06b5\u05dd\3\2\2\2\u06b5\u05e9\3\2\2\2\u06b5")
        buf.write("\u05f2\3\2\2\2\u06b5\u05fa\3\2\2\2\u06b5\u0606\3\2\2\2")
        buf.write("\u06b5\u060c\3\2\2\2\u06b5\u061a\3\2\2\2\u06b5\u0622\3")
        buf.write("\2\2\2\u06b5\u0625\3\2\2\2\u06b5\u062b\3\2\2\2\u06b5\u0632")
        buf.write("\3\2\2\2\u06b5\u0640\3\2\2\2\u06b5\u0645\3\2\2\2\u06b5")
        buf.write("\u064c\3\2\2\2\u06b5\u0653\3\2\2\2\u06b5\u0656\3\2\2\2")
        buf.write("\u06b5\u0660\3\2\2\2\u06b5\u0670\3\2\2\2\u06b5\u0677\3")
        buf.write("\2\2\2\u06b5\u0679\3\2\2\2\u06b5\u0689\3\2\2\2\u06b5\u068f")
        buf.write("\3\2\2\2\u06b5\u0693\3\2\2\2\u06b5\u069e\3\2\2\2\u06b5")
        buf.write("\u06a6\3\2\2\2\u06b5\u06ad\3\2\2\2\u06b5\u06ae\3\2\2\2")
        buf.write("\u06b6\u0099\3\2\2\2\u06b7\u06b8\7Y\2\2\u06b8\u0760\7")
        buf.write("\u00ea\2\2\u06b9\u06ba\7p\2\2\u06ba\u0760\7\u00ea\2\2")
        buf.write("\u06bb\u06bd\7\u008d\2\2\u06bc\u06be\7\u00ea\2\2\u06bd")
        buf.write("\u06bc\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u0760\3\2\2\2")
        buf.write("\u06bf\u06c1\7\u00e7\2\2\u06c0\u06c2\7\u00ea\2\2\u06c1")
        buf.write("\u06c0\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u0760\3\2\2\2")
        buf.write("\u06c3\u06c4\7\u00fb\2\2\u06c4\u0760\7\u008d\2\2\u06c5")
        buf.write("\u06c6\7\u00fb\2\2\u06c6\u06c8\7\u00ea\2\2\u06c7\u06c9")
        buf.write("\7\u008d\2\2\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9")
        buf.write("\u0760\3\2\2\2\u06ca\u06cb\7\u00fb\2\2\u06cb\u0760\7\u00d7")
        buf.write("\2\2\u06cc\u06cd\7\u00fb\2\2\u06cd\u0760\7\u00eb\2\2\u06ce")
        buf.write("\u06cf\7\u00fb\2\2\u06cf\u06d0\7\\\2\2\u06d0\u0760\7\u00eb")
        buf.write("\2\2\u06d1\u06d2\7y\2\2\u06d2\u0760\7\u0107\2\2\u06d3")
        buf.write("\u06d4\7\u0094\2\2\u06d4\u0760\7\u0107\2\2\u06d5\u06d6")
        buf.write("\7\u00fb\2\2\u06d6\u0760\7T\2\2\u06d7\u06d8\7\u00fb\2")
        buf.write("\2\u06d8\u06d9\7Y\2\2\u06d9\u0760\7\u0107\2\2\u06da\u06db")
        buf.write("\7\u00fb\2\2\u06db\u0760\7\u0112\2\2\u06dc\u06dd\7\u00fb")
        buf.write("\2\2\u06dd\u0760\7\u0097\2\2\u06de\u06df\7\u00fb\2\2\u06df")
        buf.write("\u0760\7\u00b0\2\2\u06e0\u06e1\7Y\2\2\u06e1\u0760\7\u0096")
        buf.write("\2\2\u06e2\u06e3\7p\2\2\u06e3\u0760\7\u0096\2\2\u06e4")
        buf.write("\u06e5\7\63\2\2\u06e5\u0760\7\u0096\2\2\u06e6\u06e7\7")
        buf.write("\u00af\2\2\u06e7\u0760\7\u0107\2\2\u06e8\u06e9\7\u00af")
        buf.write("\2\2\u06e9\u0760\7b\2\2\u06ea\u06eb\7\u011e\2\2\u06eb")
        buf.write("\u0760\7\u0107\2\2\u06ec\u06ed\7\u011e\2\2\u06ed\u0760")
        buf.write("\7b\2\2\u06ee\u06ef\7Y\2\2\u06ef\u06f0\7\u010b\2\2\u06f0")
        buf.write("\u0760\7\u00b2\2\2\u06f1\u06f2\7p\2\2\u06f2\u06f3\7\u010b")
        buf.write("\2\2\u06f3\u0760\7\u00b2\2\2\u06f4\u06f5\7\63\2\2\u06f5")
        buf.write("\u06f6\7\u0107\2\2\u06f6\u06f7\5\u0138\u009d\2\u06f7\u06f8")
        buf.write("\7\u00bd\2\2\u06f8\u06f9\7K\2\2\u06f9\u0760\3\2\2\2\u06fa")
        buf.write("\u06fb\7\63\2\2\u06fb\u06fc\7\u0107\2\2\u06fc\u06fd\5")
        buf.write("\u0138\u009d\2\u06fd\u06fe\7K\2\2\u06fe\u06ff\7B\2\2\u06ff")
        buf.write("\u0760\3\2\2\2\u0700\u0701\7\63\2\2\u0701\u0702\7\u0107")
        buf.write("\2\2\u0702\u0703\5\u0138\u009d\2\u0703\u0704\7\u00bd\2")
        buf.write("\2\u0704\u0705\7\u00ff\2\2\u0705\u0760\3\2\2\2\u0706\u0707")
        buf.write("\7\63\2\2\u0707\u0708\7\u0107\2\2\u0708\u0709\5\u0138")
        buf.write("\u009d\2\u0709\u070a\7\u00fc\2\2\u070a\u070b\7B\2\2\u070b")
        buf.write("\u0760\3\2\2\2\u070c\u070d\7\63\2\2\u070d\u070e\7\u0107")
        buf.write("\2\2\u070e\u070f\5\u0138\u009d\2\u070f\u0710\7\u00bd\2")
        buf.write("\2\u0710\u0711\7\u00fc\2\2\u0711\u0760\3\2\2\2\u0712\u0713")
        buf.write("\7\63\2\2\u0713\u0714\7\u0107\2\2\u0714\u0715\5\u0138")
        buf.write("\u009d\2\u0715\u0716\7\u00bd\2\2\u0716\u0717\7\u0102\2")
        buf.write("\2\u0717\u0718\7:\2\2\u0718\u0719\7l\2\2\u0719\u0760\3")
        buf.write("\2\2\2\u071a\u071b\7\63\2\2\u071b\u071c\7\u0107\2\2\u071c")
        buf.write("\u071d\5\u0138\u009d\2\u071d\u071e\7\u00f8\2\2\u071e\u071f")
        buf.write("\7\u00fc\2\2\u071f\u0720\7\u00ae\2\2\u0720\u0760\3\2\2")
        buf.write("\2\u0721\u0722\7\63\2\2\u0722\u0723\7\u0107\2\2\u0723")
        buf.write("\u0724\5\u0138\u009d\2\u0724\u0725\7v\2\2\u0725\u0726")
        buf.write("\7\u00ce\2\2\u0726\u0760\3\2\2\2\u0727\u0728\7\63\2\2")
        buf.write("\u0728\u0729\7\u0107\2\2\u0729\u072a\5\u0138\u009d\2\u072a")
        buf.write("\u072b\78\2\2\u072b\u072c\7\u00ce\2\2\u072c\u0760\3\2")
        buf.write("\2\2\u072d\u072e\7\63\2\2\u072e\u072f\7\u0107\2\2\u072f")
        buf.write("\u0730\5\u0138\u009d\2\u0730\u0731\7\u0118\2\2\u0731\u0732")
        buf.write("\7\u00ce\2\2\u0732\u0760\3\2\2\2\u0733\u0734\7\63\2\2")
        buf.write("\u0734\u0735\7\u0107\2\2\u0735\u0736\5\u0138\u009d\2\u0736")
        buf.write("\u0737\7\u010f\2\2\u0737\u0760\3\2\2\2\u0738\u0739\7\63")
        buf.write("\2\2\u0739\u073a\7\u0107\2\2\u073a\u073c\5\u0138\u009d")
        buf.write("\2\u073b\u073d\5\u00aeX\2\u073c\u073b\3\2\2\2\u073c\u073d")
        buf.write("\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u073f\7S\2\2\u073f")
        buf.write("\u0760\3\2\2\2\u0740\u0741\7\63\2\2\u0741\u0742\7\u0107")
        buf.write("\2\2\u0742\u0744\5\u0138\u009d\2\u0743\u0745\5\u00aeX")
        buf.write("\2\u0744\u0743\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746")
        buf.write("\3\2\2\2\u0746\u0747\7V\2\2\u0747\u0760\3\2\2\2\u0748")
        buf.write("\u0749\7\63\2\2\u0749\u074a\7\u0107\2\2\u074a\u074c\5")
        buf.write("\u0138\u009d\2\u074b\u074d\5\u00aeX\2\u074c\u074b\3\2")
        buf.write("\2\2\u074c\u074d\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u074f")
        buf.write("\7\u00f8\2\2\u074f\u0750\7\u0081\2\2\u0750\u0760\3\2\2")
        buf.write("\2\u0751\u0752\7\63\2\2\u0752\u0753\7\u0107\2\2\u0753")
        buf.write("\u0755\5\u0138\u009d\2\u0754\u0756\5\u00aeX\2\u0755\u0754")
        buf.write("\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0757\3\2\2\2\u0757")
        buf.write("\u0758\7\u00e4\2\2\u0758\u0759\7P\2\2\u0759\u0760\3\2")
        buf.write("\2\2\u075a\u075b\7\u0100\2\2\u075b\u0760\7\u0111\2\2\u075c")
        buf.write("\u0760\7R\2\2\u075d\u0760\7\u00ec\2\2\u075e\u0760\7k\2")
        buf.write("\2\u075f\u06b7\3\2\2\2\u075f\u06b9\3\2\2\2\u075f\u06bb")
        buf.write("\3\2\2\2\u075f\u06bf\3\2\2\2\u075f\u06c3\3\2\2\2\u075f")
        buf.write("\u06c5\3\2\2\2\u075f\u06ca\3\2\2\2\u075f\u06cc\3\2\2\2")
        buf.write("\u075f\u06ce\3\2\2\2\u075f\u06d1\3\2\2\2\u075f\u06d3\3")
        buf.write("\2\2\2\u075f\u06d5\3\2\2\2\u075f\u06d7\3\2\2\2\u075f\u06da")
        buf.write("\3\2\2\2\u075f\u06dc\3\2\2\2\u075f\u06de\3\2\2\2\u075f")
        buf.write("\u06e0\3\2\2\2\u075f\u06e2\3\2\2\2\u075f\u06e4\3\2\2\2")
        buf.write("\u075f\u06e6\3\2\2\2\u075f\u06e8\3\2\2\2\u075f\u06ea\3")
        buf.write("\2\2\2\u075f\u06ec\3\2\2\2\u075f\u06ee\3\2\2\2\u075f\u06f1")
        buf.write("\3\2\2\2\u075f\u06f4\3\2\2\2\u075f\u06fa\3\2\2\2\u075f")
        buf.write("\u0700\3\2\2\2\u075f\u0706\3\2\2\2\u075f\u070c\3\2\2\2")
        buf.write("\u075f\u0712\3\2\2\2\u075f\u071a\3\2\2\2\u075f\u0721\3")
        buf.write("\2\2\2\u075f\u0727\3\2\2\2\u075f\u072d\3\2\2\2\u075f\u0733")
        buf.write("\3\2\2\2\u075f\u0738\3\2\2\2\u075f\u0740\3\2\2\2\u075f")
        buf.write("\u0748\3\2\2\2\u075f\u0751\3\2\2\2\u075f\u075a\3\2\2\2")
        buf.write("\u075f\u075c\3\2\2\2\u075f\u075d\3\2\2\2\u075f\u075e\3")
        buf.write("\2\2\2\u0760\u009b\3\2\2\2\u0761\u0763\7Y\2\2\u0762\u0764")
        buf.write("\7\u010b\2\2\u0763\u0762\3\2\2\2\u0763\u0764\3\2\2\2\u0764")
        buf.write("\u0766\3\2\2\2\u0765\u0767\7{\2\2\u0766\u0765\3\2\2\2")
        buf.write("\u0766\u0767\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u076c\7")
        buf.write("\u0107\2\2\u0769\u076a\7\u0092\2\2\u076a\u076b\7\u00bd")
        buf.write("\2\2\u076b\u076d\7w\2\2\u076c\u0769\3\2\2\2\u076c\u076d")
        buf.write("\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u076f\5\u0136\u009c")
        buf.write("\2\u076f\u009d\3\2\2\2\u0770\u0771\7Y\2\2\u0771\u0773")
        buf.write("\7\u00c5\2\2\u0772\u0770\3\2\2\2\u0772\u0773\3\2\2\2\u0773")
        buf.write("\u0774\3\2\2\2\u0774\u0775\7\u00e4\2\2\u0775\u0776\7\u0107")
        buf.write("\2\2\u0776\u0777\5\u0136\u009c\2\u0777\u009f\3\2\2\2\u0778")
        buf.write("\u0779\7K\2\2\u0779\u077a\7B\2\2\u077a\u077e\5\u011e\u0090")
        buf.write("\2\u077b\u077c\7\u00ff\2\2\u077c\u077d\7B\2\2\u077d\u077f")
        buf.write("\5\u0122\u0092\2\u077e\u077b\3\2\2\2\u077e\u077f\3\2\2")
        buf.write("\2\u077f\u0780\3\2\2\2\u0780\u0781\7\u009e\2\2\u0781\u0782")
        buf.write("\7\u0144\2\2\u0782\u0783\7A\2\2\u0783\u00a1\3\2\2\2\u0784")
        buf.write("\u0785\7\u00fc\2\2\u0785\u0786\7B\2\2\u0786\u0787\5\u011e")
        buf.write("\u0090\2\u0787\u078a\7\u00c1\2\2\u0788\u078b\5\u00c8e")
        buf.write("\2\u0789\u078b\5\u00caf\2\u078a\u0788\3\2\2\2\u078a\u0789")
        buf.write("\3\2\2\2\u078b\u078f\3\2\2\2\u078c\u078d\7\u0102\2\2\u078d")
        buf.write("\u078e\7:\2\2\u078e\u0790\7l\2\2\u078f\u078c\3\2\2\2\u078f")
        buf.write("\u0790\3\2\2\2\u0790\u00a3\3\2\2\2\u0791\u0792\7\u00ae")
        buf.write("\2\2\u0792\u0793\7\u0140\2\2\u0793\u00a5\3\2\2\2\u0794")
        buf.write("\u0795\7Q\2\2\u0795\u0796\7\u0140\2\2\u0796\u00a7\3\2")
        buf.write("\2\2\u0797\u0799\5\u00b8]\2\u0798\u0797\3\2\2\2\u0798")
        buf.write("\u0799\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b\5\u00da")
        buf.write("n\2\u079b\u079c\5\u00d6l\2\u079c\u00a9\3\2\2\2\u079d\u079e")
        buf.write("\7\u009b\2\2\u079e\u07a0\7\u00cd\2\2\u079f\u07a1\7\u0107")
        buf.write("\2\2\u07a0\u079f\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2")
        buf.write("\3\2\2\2\u07a2\u07a9\5\u0136\u009c\2\u07a3\u07a7\5\u00ae")
        buf.write("X\2\u07a4\u07a5\7\u0092\2\2\u07a5\u07a6\7\u00bd\2\2\u07a6")
        buf.write("\u07a8\7w\2\2\u07a7\u07a4\3\2\2\2\u07a7\u07a8\3\2\2\2")
        buf.write("\u07a8\u07aa\3\2\2\2\u07a9\u07a3\3\2\2\2\u07a9\u07aa\3")
        buf.write("\2\2\2\u07aa\u07d5\3\2\2\2\u07ab\u07ac\7\u009b\2\2\u07ac")
        buf.write("\u07ae\7\u009e\2\2\u07ad\u07af\7\u0107\2\2\u07ae\u07ad")
        buf.write("\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0")
        buf.write("\u07b2\5\u0136\u009c\2\u07b1\u07b3\5\u00aeX\2\u07b2\u07b1")
        buf.write("\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b7\3\2\2\2\u07b4")
        buf.write("\u07b5\7\u0092\2\2\u07b5\u07b6\7\u00bd\2\2\u07b6\u07b8")
        buf.write("\7w\2\2\u07b7\u07b4\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8")
        buf.write("\u07d5\3\2\2\2\u07b9\u07ba\7\u009b\2\2\u07ba\u07bc\7\u00cd")
        buf.write("\2\2\u07bb\u07bd\7\u00ad\2\2\u07bc\u07bb\3\2\2\2\u07bc")
        buf.write("\u07bd\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07bf\7m\2\2")
        buf.write("\u07bf\u07c1\7\u0140\2\2\u07c0\u07c2\5\u0132\u009a\2\u07c1")
        buf.write("\u07c0\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c4\3\2\2\2")
        buf.write("\u07c3\u07c5\5\u00ccg\2\u07c4\u07c3\3\2\2\2\u07c4\u07c5")
        buf.write("\3\2\2\2\u07c5\u07d5\3\2\2\2\u07c6\u07c7\7\u009b\2\2\u07c7")
        buf.write("\u07c9\7\u00cd\2\2\u07c8\u07ca\7\u00ad\2\2\u07c9\u07c8")
        buf.write("\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb")
        buf.write("\u07cd\7m\2\2\u07cc\u07ce\7\u0140\2\2\u07cd\u07cc\3\2")
        buf.write("\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d2")
        buf.write("\5\u00bc_\2\u07d0\u07d1\7\u00c4\2\2\u07d1\u07d3\5\u00c0")
        buf.write("a\2\u07d2\u07d0\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07d5")
        buf.write("\3\2\2\2\u07d4\u079d\3\2\2\2\u07d4\u07ab\3\2\2\2\u07d4")
        buf.write("\u07b9\3\2\2\2\u07d4\u07c6\3\2\2\2\u07d5\u00ab\3\2\2\2")
        buf.write("\u07d6\u07d8\5\u00aeX\2\u07d7\u07d9\5\u00a4S\2\u07d8\u07d7")
        buf.write("\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u00ad\3\2\2\2\u07da")
        buf.write("\u07db\7\u00ce\2\2\u07db\u07dc\7\5\2\2\u07dc\u07e1\5\u00b0")
        buf.write("Y\2\u07dd\u07de\7\3\2\2\u07de\u07e0\5\u00b0Y\2\u07df\u07dd")
        buf.write("\3\2\2\2\u07e0\u07e3\3\2\2\2\u07e1\u07df\3\2\2\2\u07e1")
        buf.write("\u07e2\3\2\2\2\u07e2\u07e4\3\2\2\2\u07e3\u07e1\3\2\2\2")
        buf.write("\u07e4\u07e5\7\6\2\2\u07e5\u00af\3\2\2\2\u07e6\u07e9\5")
        buf.write("\u0190\u00c9\2\u07e7\u07e8\7\u012c\2\2\u07e8\u07ea\5\u0150")
        buf.write("\u00a9\2\u07e9\u07e7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea")
        buf.write("\u00b1\3\2\2\2\u07eb\u07ec\t\30\2\2\u07ec\u00b3\3\2\2")
        buf.write("\2\u07ed\u07f3\5\u018a\u00c6\2\u07ee\u07f3\7\u0140\2\2")
        buf.write("\u07ef\u07f3\5\u0152\u00aa\2\u07f0\u07f3\5\u0156\u00ac")
        buf.write("\2\u07f1\u07f3\5\u0158\u00ad\2\u07f2\u07ed\3\2\2\2\u07f2")
        buf.write("\u07ee\3\2\2\2\u07f2\u07ef\3\2\2\2\u07f2\u07f0\3\2\2\2")
        buf.write("\u07f2\u07f1\3\2\2\2\u07f3\u00b5\3\2\2\2\u07f4\u07f9\5")
        buf.write("\u0190\u00c9\2\u07f5\u07f6\7\7\2\2\u07f6\u07f8\5\u0190")
        buf.write("\u00c9\2\u07f7\u07f5\3\2\2\2\u07f8\u07fb\3\2\2\2\u07f9")
        buf.write("\u07f7\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u00b7\3\2\2\2")
        buf.write("\u07fb\u07f9\3\2\2\2\u07fc\u07fd\7\u012a\2\2\u07fd\u0802")
        buf.write("\5\u00ba^\2\u07fe\u07ff\7\3\2\2\u07ff\u0801\5\u00ba^\2")
        buf.write("\u0800\u07fe\3\2\2\2\u0801\u0804\3\2\2\2\u0802\u0800\3")
        buf.write("\2\2\2\u0802\u0803\3\2\2\2\u0803\u00b9\3\2\2\2\u0804\u0802")
        buf.write("\3\2\2\2\u0805\u0807\5\u018c\u00c7\2\u0806\u0808\5\u011e")
        buf.write("\u0090\2\u0807\u0806\3\2\2\2\u0807\u0808\3\2\2\2\u0808")
        buf.write("\u080a\3\2\2\2\u0809\u080b\7:\2\2\u080a\u0809\3\2\2\2")
        buf.write("\u080a\u080b\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\7")
        buf.write("\5\2\2\u080d\u080e\5\u00a8U\2\u080e\u080f\7\6\2\2\u080f")
        buf.write("\u00bb\3\2\2\2\u0810\u0811\7\u0123\2\2\u0811\u0812\5\u0136")
        buf.write("\u009c\2\u0812\u00bd\3\2\2\2\u0813\u0814\7\u00c4\2\2\u0814")
        buf.write("\u081e\5\u00c0a\2\u0815\u0816\7\u00cf\2\2\u0816\u0817")
        buf.write("\7B\2\2\u0817\u081e\5\u0140\u00a1\2\u0818\u081e\5\u00a0")
        buf.write("Q\2\u0819\u081e\5\u00a4S\2\u081a\u081e\5\u00a6T\2\u081b")
        buf.write("\u081c\7\u010a\2\2\u081c\u081e\5\u00c0a\2\u081d\u0813")
        buf.write("\3\2\2\2\u081d\u0815\3\2\2\2\u081d\u0818\3\2\2\2\u081d")
        buf.write("\u0819\3\2\2\2\u081d\u081a\3\2\2\2\u081d\u081b\3\2\2\2")
        buf.write("\u081e\u0821\3\2\2\2\u081f\u081d\3\2\2\2\u081f\u0820\3")
        buf.write("\2\2\2\u0820\u00bf\3\2\2\2\u0821\u081f\3\2\2\2\u0822\u0823")
        buf.write("\7\5\2\2\u0823\u0828\5\u00c2b\2\u0824\u0825\7\3\2\2\u0825")
        buf.write("\u0827\5\u00c2b\2\u0826\u0824\3\2\2\2\u0827\u082a\3\2")
        buf.write("\2\2\u0828\u0826\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u082b")
        buf.write("\3\2\2\2\u082a\u0828\3\2\2\2\u082b\u082c\7\6\2\2\u082c")
        buf.write("\u00c1\3\2\2\2\u082d\u0832\5\u00c4c\2\u082e\u0830\7\u012c")
        buf.write("\2\2\u082f\u082e\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u0831")
        buf.write("\3\2\2\2\u0831\u0833\5\u00c6d\2\u0832\u082f\3\2\2\2\u0832")
        buf.write("\u0833\3\2\2\2\u0833\u00c3\3\2\2\2\u0834\u0839\5\u0190")
        buf.write("\u00c9\2\u0835\u0836\7\7\2\2\u0836\u0838\5\u0190\u00c9")
        buf.write("\2\u0837\u0835\3\2\2\2\u0838\u083b\3\2\2\2\u0839\u0837")
        buf.write("\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u083e\3\2\2\2\u083b")
        buf.write("\u0839\3\2\2\2\u083c\u083e\7\u0140\2\2\u083d\u0834\3\2")
        buf.write("\2\2\u083d\u083c\3\2\2\2\u083e\u00c5\3\2\2\2\u083f\u0844")
        buf.write("\7\u0144\2\2\u0840\u0844\7\u0146\2\2\u0841\u0844\5\u015a")
        buf.write("\u00ae\2\u0842\u0844\7\u0140\2\2\u0843\u083f\3\2\2\2\u0843")
        buf.write("\u0840\3\2\2\2\u0843\u0841\3\2\2\2\u0843\u0842\3\2\2\2")
        buf.write("\u0844\u00c7\3\2\2\2\u0845\u0846\7\5\2\2\u0846\u084b\5")
        buf.write("\u0150\u00a9\2\u0847\u0848\7\3\2\2\u0848\u084a\5\u0150")
        buf.write("\u00a9\2\u0849\u0847\3\2\2\2\u084a\u084d\3\2\2\2\u084b")
        buf.write("\u0849\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084e\3\2\2\2")
        buf.write("\u084d\u084b\3\2\2\2\u084e\u084f\7\6\2\2\u084f\u00c9\3")
        buf.write("\2\2\2\u0850\u0851\7\5\2\2\u0851\u0856\5\u00c8e\2\u0852")
        buf.write("\u0853\7\3\2\2\u0853\u0855\5\u00c8e\2\u0854\u0852\3\2")
        buf.write("\2\2\u0855\u0858\3\2\2\2\u0856\u0854\3\2\2\2\u0856\u0857")
        buf.write("\3\2\2\2\u0857\u0859\3\2\2\2\u0858\u0856\3\2\2\2\u0859")
        buf.write("\u085a\7\6\2\2\u085a\u00cb\3\2\2\2\u085b\u085c\7\u0102")
        buf.write("\2\2\u085c\u085d\7:\2\2\u085d\u0862\5\u00ceh\2\u085e\u085f")
        buf.write("\7\u0102\2\2\u085f\u0860\7B\2\2\u0860\u0862\5\u00d0i\2")
        buf.write("\u0861\u085b\3\2\2\2\u0861\u085e\3\2\2\2\u0862\u00cd\3")
        buf.write("\2\2\2\u0863\u0864\7\u009a\2\2\u0864\u0865\7\u0140\2\2")
        buf.write("\u0865\u0866\7\u00c9\2\2\u0866\u0869\7\u0140\2\2\u0867")
        buf.write("\u0869\5\u0190\u00c9\2\u0868\u0863\3\2\2\2\u0868\u0867")
        buf.write("\3\2\2\2\u0869\u00cf\3\2\2\2\u086a\u086e\7\u0140\2\2\u086b")
        buf.write("\u086c\7\u012a\2\2\u086c\u086d\7\u00f6\2\2\u086d\u086f")
        buf.write("\5\u00c0a\2\u086e\u086b\3\2\2\2\u086e\u086f\3\2\2\2\u086f")
        buf.write("\u00d1\3\2\2\2\u0870\u0871\5\u0190\u00c9\2\u0871\u0872")
        buf.write("\7\u0140\2\2\u0872\u00d3\3\2\2\2\u0873\u0874\5\u00aaV")
        buf.write("\2\u0874\u0875\5\u00dan\2\u0875\u0876\5\u00d6l\2\u0876")
        buf.write("\u08a7\3\2\2\2\u0877\u0879\5\u0102\u0082\2\u0878\u087a")
        buf.write("\5\u00d8m\2\u0879\u0878\3\2\2\2\u087a\u087b\3\2\2\2\u087b")
        buf.write("\u0879\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u08a7\3\2\2\2")
        buf.write("\u087d\u087e\7g\2\2\u087e\u087f\7\u0088\2\2\u087f\u0880")
        buf.write("\5\u0136\u009c\2\u0880\u0882\5\u0130\u0099\2\u0881\u0883")
        buf.write("\5\u00fa~\2\u0882\u0881\3\2\2\2\u0882\u0883\3\2\2\2\u0883")
        buf.write("\u08a7\3\2\2\2\u0884\u0885\7\u0120\2\2\u0885\u0886\5\u0136")
        buf.write("\u009c\2\u0886\u0887\5\u0130\u0099\2\u0887\u0889\5\u00ec")
        buf.write("w\2\u0888\u088a\5\u00fa~\2\u0889\u0888\3\2\2\2\u0889\u088a")
        buf.write("\3\2\2\2\u088a\u08a7\3\2\2\2\u088b\u088c\7\u00b5\2\2\u088c")
        buf.write("\u088d\7\u009e\2\2\u088d\u088e\5\u0136\u009c\2\u088e\u088f")
        buf.write("\5\u0130\u0099\2\u088f\u0895\7\u0123\2\2\u0890\u0896\5")
        buf.write("\u0136\u009c\2\u0891\u0892\7\5\2\2\u0892\u0893\5\u00a8")
        buf.write("U\2\u0893\u0894\7\6\2\2\u0894\u0896\3\2\2\2\u0895\u0890")
        buf.write("\3\2\2\2\u0895\u0891\3\2\2\2\u0896\u0897\3\2\2\2\u0897")
        buf.write("\u0898\5\u0130\u0099\2\u0898\u0899\7\u00c1\2\2\u0899\u089d")
        buf.write("\5\u0148\u00a5\2\u089a\u089c\5\u00eex\2\u089b\u089a\3")
        buf.write("\2\2\2\u089c\u089f\3\2\2\2\u089d\u089b\3\2\2\2\u089d\u089e")
        buf.write("\3\2\2\2\u089e\u08a3\3\2\2\2\u089f\u089d\3\2\2\2\u08a0")
        buf.write("\u08a2\5\u00f0y\2\u08a1\u08a0\3\2\2\2\u08a2\u08a5\3\2")
        buf.write("\2\2\u08a3\u08a1\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a7")
        buf.write("\3\2\2\2\u08a5\u08a3\3\2\2\2\u08a6\u0873\3\2\2\2\u08a6")
        buf.write("\u0877\3\2\2\2\u08a6\u087d\3\2\2\2\u08a6\u0884\3\2\2\2")
        buf.write("\u08a6\u088b\3\2\2\2\u08a7\u00d5\3\2\2\2\u08a8\u08a9\7")
        buf.write("\u00c6\2\2\u08a9\u08aa\7B\2\2\u08aa\u08af\5\u00dep\2\u08ab")
        buf.write("\u08ac\7\3\2\2\u08ac\u08ae\5\u00dep\2\u08ad\u08ab\3\2")
        buf.write("\2\2\u08ae\u08b1\3\2\2\2\u08af\u08ad\3\2\2\2\u08af\u08b0")
        buf.write("\3\2\2\2\u08b0\u08b3\3\2\2\2\u08b1\u08af\3\2\2\2\u08b2")
        buf.write("\u08a8\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08be\3\2\2\2")
        buf.write("\u08b4\u08b5\7J\2\2\u08b5\u08b6\7B\2\2\u08b6\u08bb\5\u0146")
        buf.write("\u00a4\2\u08b7\u08b8\7\3\2\2\u08b8\u08ba\5\u0146\u00a4")
        buf.write("\2\u08b9\u08b7\3\2\2\2\u08ba\u08bd\3\2\2\2\u08bb\u08b9")
        buf.write("\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08bf\3\2\2\2\u08bd")
        buf.write("\u08bb\3\2\2\2\u08be\u08b4\3\2\2\2\u08be\u08bf\3\2\2\2")
        buf.write("\u08bf\u08ca\3\2\2\2\u08c0\u08c1\7o\2\2\u08c1\u08c2\7")
        buf.write("B\2\2\u08c2\u08c7\5\u0146\u00a4\2\u08c3\u08c4\7\3\2\2")
        buf.write("\u08c4\u08c6\5\u0146\u00a4\2\u08c5\u08c3\3\2\2\2\u08c6")
        buf.write("\u08c9\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c7\u08c8\3\2\2\2")
        buf.write("\u08c8\u08cb\3\2\2\2\u08c9\u08c7\3\2\2\2\u08ca\u08c0\3")
        buf.write("\2\2\2\u08ca\u08cb\3\2\2\2\u08cb\u08d6\3\2\2\2\u08cc\u08cd")
        buf.write("\7\u00fe\2\2\u08cd\u08ce\7B\2\2\u08ce\u08d3\5\u00dep\2")
        buf.write("\u08cf\u08d0\7\3\2\2\u08d0\u08d2\5\u00dep\2\u08d1\u08cf")
        buf.write("\3\2\2\2\u08d2\u08d5\3\2\2\2\u08d3\u08d1\3\2\2\2\u08d3")
        buf.write("\u08d4\3\2\2\2\u08d4\u08d7\3\2\2\2\u08d5\u08d3\3\2\2\2")
        buf.write("\u08d6\u08cc\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08d9\3")
        buf.write("\2\2\2\u08d8\u08da\5\u017c\u00bf\2\u08d9\u08d8\3\2\2\2")
        buf.write("\u08d9\u08da\3\2\2\2\u08da\u08e0\3\2\2\2\u08db\u08de\7")
        buf.write("\u00a9\2\2\u08dc\u08df\7\62\2\2\u08dd\u08df\5\u0146\u00a4")
        buf.write("\2\u08de\u08dc\3\2\2\2\u08de\u08dd\3\2\2\2\u08df\u08e1")
        buf.write("\3\2\2\2\u08e0\u08db\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1")
        buf.write("\u00d7\3\2\2\2\u08e2\u08e3\5\u00aaV\2\u08e3\u08e4\5\u00e2")
        buf.write("r\2\u08e4\u00d9\3\2\2\2\u08e5\u08e6\bn\1\2\u08e6\u08e9")
        buf.write("\5\u00dco\2\u08e7\u08e9\5\n\6\2\u08e8\u08e5\3\2\2\2\u08e8")
        buf.write("\u08e7\3\2\2\2\u08e9\u0901\3\2\2\2\u08ea\u08eb\f\5\2\2")
        buf.write("\u08eb\u08ec\6n\5\2\u08ec\u08ee\t\31\2\2\u08ed\u08ef\5")
        buf.write("\u0110\u0089\2\u08ee\u08ed\3\2\2\2\u08ee\u08ef\3\2\2\2")
        buf.write("\u08ef\u08f0\3\2\2\2\u08f0\u0900\5\u00dan\6\u08f1\u08f2")
        buf.write("\f\4\2\2\u08f2\u08f3\6n\7\2\u08f3\u08f5\7\u009c\2\2\u08f4")
        buf.write("\u08f6\5\u0110\u0089\2\u08f5\u08f4\3\2\2\2\u08f5\u08f6")
        buf.write("\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u0900\5\u00dan\5\u08f8")
        buf.write("\u08f9\f\3\2\2\u08f9\u08fa\6n\t\2\u08fa\u08fc\t\32\2\2")
        buf.write("\u08fb\u08fd\5\u0110\u0089\2\u08fc\u08fb\3\2\2\2\u08fc")
        buf.write("\u08fd\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u0900\5\u00da")
        buf.write("n\4\u08ff\u08ea\3\2\2\2\u08ff\u08f1\3\2\2\2\u08ff\u08f8")
        buf.write("\3\2\2\2\u0900\u0903\3\2\2\2\u0901\u08ff\3\2\2\2\u0901")
        buf.write("\u0902\3\2\2\2\u0902\u00db\3\2\2\2\u0903\u0901\3\2\2\2")
        buf.write("\u0904\u090a\5\u00e4s\2\u0905\u090a\5\u00e0q\2\u0906\u0907")
        buf.write("\7\u0107\2\2\u0907\u090a\5\u0136\u009c\2\u0908\u090a\5")
        buf.write("\u012c\u0097\2\u0909\u0904\3\2\2\2\u0909\u0905\3\2\2\2")
        buf.write("\u0909\u0906\3\2\2\2\u0909\u0908\3\2\2\2\u090a\u00dd\3")
        buf.write("\2\2\2\u090b\u090d\5\u0146\u00a4\2\u090c\u090e\t\t\2\2")
        buf.write("\u090d\u090c\3\2\2\2\u090d\u090e\3\2\2\2\u090e\u0911\3")
        buf.write("\2\2\2\u090f\u0910\7\u00bf\2\2\u0910\u0912\t\33\2\2\u0911")
        buf.write("\u090f\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u00df\3\2\2\2")
        buf.write("\u0913\u0915\5\u0102\u0082\2\u0914\u0916\5\u00e2r\2\u0915")
        buf.write("\u0914\3\2\2\2\u0916\u0917\3\2\2\2\u0917\u0915\3\2\2\2")
        buf.write("\u0917\u0918\3\2\2\2\u0918\u00e1\3\2\2\2\u0919\u091b\5")
        buf.write("\u00e8u\2\u091a\u091c\5\u00fa~\2\u091b\u091a\3\2\2\2\u091b")
        buf.write("\u091c\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091e\5\u00d6")
        buf.write("l\2\u091e\u0935\3\2\2\2\u091f\u0923\5\u00eav\2\u0920\u0922")
        buf.write("\5\u010e\u0088\2\u0921\u0920\3\2\2\2\u0922\u0925\3\2\2")
        buf.write("\2\u0923\u0921\3\2\2\2\u0923\u0924\3\2\2\2\u0924\u0927")
        buf.write("\3\2\2\2\u0925\u0923\3\2\2\2\u0926\u0928\5\u00fa~\2\u0927")
        buf.write("\u0926\3\2\2\2\u0927\u0928\3\2\2\2\u0928\u092a\3\2\2\2")
        buf.write("\u0929\u092b\5\u0104\u0083\2\u092a\u0929\3\2\2\2\u092a")
        buf.write("\u092b\3\2\2\2\u092b\u092d\3\2\2\2\u092c\u092e\5\u00fc")
        buf.write("\177\2\u092d\u092c\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u0930")
        buf.write("\3\2\2\2\u092f\u0931\5\u017c\u00bf\2\u0930\u092f\3\2\2")
        buf.write("\2\u0930\u0931\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0933")
        buf.write("\5\u00d6l\2\u0933\u0935\3\2\2\2\u0934\u0919\3\2\2\2\u0934")
        buf.write("\u091f\3\2\2\2\u0935\u00e3\3\2\2\2\u0936\u0937\5\u00e8")
        buf.write("u\2\u0937\u0939\5\u00e6t\2\u0938\u093a\5\u00fa~\2\u0939")
        buf.write("\u0938\3\2\2\2\u0939\u093a\3\2\2\2\u093a\u0950\3\2\2\2")
        buf.write("\u093b\u093c\5\u00eav\2\u093c\u0940\5\u00e6t\2\u093d\u093f")
        buf.write("\5\u010e\u0088\2\u093e\u093d\3\2\2\2\u093f\u0942\3\2\2")
        buf.write("\2\u0940\u093e\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0944")
        buf.write("\3\2\2\2\u0942\u0940\3\2\2\2\u0943\u0945\5\u00fa~\2\u0944")
        buf.write("\u0943\3\2\2\2\u0944\u0945\3\2\2\2\u0945\u0947\3\2\2\2")
        buf.write("\u0946\u0948\5\u0104\u0083\2\u0947\u0946\3\2\2\2\u0947")
        buf.write("\u0948\3\2\2\2\u0948\u094a\3\2\2\2\u0949\u094b\5\u00fc")
        buf.write("\177\2\u094a\u0949\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094d")
        buf.write("\3\2\2\2\u094c\u094e\5\u017c\u00bf\2\u094d\u094c\3\2\2")
        buf.write("\2\u094d\u094e\3\2\2\2\u094e\u0950\3\2\2\2\u094f\u0936")
        buf.write("\3\2\2\2\u094f\u093b\3\2\2\2\u0950\u00e5\3\2\2\2\u0951")
        buf.write("\u0953\5\u0102\u0082\2\u0952\u0951\3\2\2\2\u0952\u0953")
        buf.write("\3\2\2\2\u0953\u00e7\3\2\2\2\u0954\u0955\7\u00f2\2\2\u0955")
        buf.write("\u0956\7\u0113\2\2\u0956\u0957\7\5\2\2\u0957\u0958\5\u013e")
        buf.write("\u00a0\2\u0958\u0959\7\6\2\2\u0959\u095f\3\2\2\2\u095a")
        buf.write("\u095b\7\u00b3\2\2\u095b\u095f\5\u013e\u00a0\2\u095c\u095d")
        buf.write("\7\u00df\2\2\u095d\u095f\5\u013e\u00a0\2\u095e\u0954\3")
        buf.write("\2\2\2\u095e\u095a\3\2\2\2\u095e\u095c\3\2\2\2\u095f\u0961")
        buf.write("\3\2\2\2\u0960\u0962\5\u0132\u009a\2\u0961\u0960\3\2\2")
        buf.write("\2\u0961\u0962\3\2\2\2\u0962\u0965\3\2\2\2\u0963\u0964")
        buf.write("\7\u00dd\2\2\u0964\u0966\7\u0140\2\2\u0965\u0963\3\2\2")
        buf.write("\2\u0965\u0966\3\2\2\2\u0966\u0967\3\2\2\2\u0967\u0968")
        buf.write("\7\u0123\2\2\u0968\u0975\7\u0140\2\2\u0969\u0973\7:\2")
        buf.write("\2\u096a\u0974\5\u0120\u0091\2\u096b\u0974\5\u0172\u00ba")
        buf.write("\2\u096c\u096f\7\5\2\2\u096d\u0970\5\u0120\u0091\2\u096e")
        buf.write("\u0970\5\u0172\u00ba\2\u096f\u096d\3\2\2\2\u096f\u096e")
        buf.write("\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0972\7\6\2\2\u0972")
        buf.write("\u0974\3\2\2\2\u0973\u096a\3\2\2\2\u0973\u096b\3\2\2\2")
        buf.write("\u0973\u096c\3\2\2\2\u0974\u0976\3\2\2\2\u0975\u0969\3")
        buf.write("\2\2\2\u0975\u0976\3\2\2\2\u0976\u0978\3\2\2\2\u0977\u0979")
        buf.write("\5\u0132\u009a\2\u0978\u0977\3\2\2\2\u0978\u0979\3\2\2")
        buf.write("\2\u0979\u097c\3\2\2\2\u097a\u097b\7\u00dc\2\2\u097b\u097d")
        buf.write("\7\u0140\2\2\u097c\u097a\3\2\2\2\u097c\u097d\3\2\2\2\u097d")
        buf.write("\u00e9\3\2\2\2\u097e\u0982\7\u00f2\2\2\u097f\u0981\5\u00fe")
        buf.write("\u0080\2\u0980\u097f\3\2\2\2\u0981\u0984\3\2\2\2\u0982")
        buf.write("\u0980\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0986\3\2\2\2")
        buf.write("\u0984\u0982\3\2\2\2\u0985\u0987\5\u0110\u0089\2\u0986")
        buf.write("\u0985\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u0988\3\2\2\2")
        buf.write("\u0988\u0989\5\u013e\u00a0\2\u0989\u00eb\3\2\2\2\u098a")
        buf.write("\u098b\7\u00f8\2\2\u098b\u098c\5\u00f6|\2\u098c\u00ed")
        buf.write("\3\2\2\2\u098d\u098e\7\u0127\2\2\u098e\u0991\7\u00b4\2")
        buf.write("\2\u098f\u0990\7\65\2\2\u0990\u0992\5\u0148\u00a5\2\u0991")
        buf.write("\u098f\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0993\3\2\2\2")
        buf.write("\u0993\u0994\7\u010d\2\2\u0994\u0995\5\u00f2z\2\u0995")
        buf.write("\u00ef\3\2\2\2\u0996\u0997\7\u0127\2\2\u0997\u0998\7\u00bd")
        buf.write("\2\2\u0998\u099b\7\u00b4\2\2\u0999\u099a\7\65\2\2\u099a")
        buf.write("\u099c\5\u0148\u00a5\2\u099b\u0999\3\2\2\2\u099b\u099c")
        buf.write("\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099e\7\u010d\2\2\u099e")
        buf.write("\u099f\5\u00f4{\2\u099f\u00f1\3\2\2\2\u09a0\u09a8\7g\2")
        buf.write("\2\u09a1\u09a2\7\u0120\2\2\u09a2\u09a3\7\u00f8\2\2\u09a3")
        buf.write("\u09a8\7\u0137\2\2\u09a4\u09a5\7\u0120\2\2\u09a5\u09a6")
        buf.write("\7\u00f8\2\2\u09a6\u09a8\5\u00f6|\2\u09a7\u09a0\3\2\2")
        buf.write("\2\u09a7\u09a1\3\2\2\2\u09a7\u09a4\3\2\2\2\u09a8\u00f3")
        buf.write("\3\2\2\2\u09a9\u09aa\7\u009b\2\2\u09aa\u09bc\7\u0137\2")
        buf.write("\2\u09ab\u09ac\7\u009b\2\2\u09ac\u09ad\7\5\2\2\u09ad\u09ae")
        buf.write("\5\u0134\u009b\2\u09ae\u09af\7\6\2\2\u09af\u09b0\7\u0124")
        buf.write("\2\2\u09b0\u09b1\7\5\2\2\u09b1\u09b6\5\u0146\u00a4\2\u09b2")
        buf.write("\u09b3\7\3\2\2\u09b3\u09b5\5\u0146\u00a4\2\u09b4\u09b2")
        buf.write("\3\2\2\2\u09b5\u09b8\3\2\2\2\u09b6\u09b4\3\2\2\2\u09b6")
        buf.write("\u09b7\3\2\2\2\u09b7\u09b9\3\2\2\2\u09b8\u09b6\3\2\2\2")
        buf.write("\u09b9\u09ba\7\6\2\2\u09ba\u09bc\3\2\2\2\u09bb\u09a9\3")
        buf.write("\2\2\2\u09bb\u09ab\3\2\2\2\u09bc\u00f5\3\2\2\2\u09bd\u09c2")
        buf.write("\5\u00f8}\2\u09be\u09bf\7\3\2\2\u09bf\u09c1\5\u00f8}\2")
        buf.write("\u09c0\u09be\3\2\2\2\u09c1\u09c4\3\2\2\2\u09c2\u09c0\3")
        buf.write("\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u00f7\3\2\2\2\u09c4\u09c2")
        buf.write("\3\2\2\2\u09c5\u09c6\5\u0136\u009c\2\u09c6\u09c7\7\u012c")
        buf.write("\2\2\u09c7\u09c8\5\u0146\u00a4\2\u09c8\u00f9\3\2\2\2\u09c9")
        buf.write("\u09ca\7\u0128\2\2\u09ca\u09cb\5\u0148\u00a5\2\u09cb\u00fb")
        buf.write("\3\2\2\2\u09cc\u09cd\7\u0090\2\2\u09cd\u09ce\5\u0148\u00a5")
        buf.write("\2\u09ce\u00fd\3\2\2\2\u09cf\u09d0\7\20\2\2\u09d0\u09d7")
        buf.write("\5\u0100\u0081\2\u09d1\u09d3\7\3\2\2\u09d2\u09d1\3\2\2")
        buf.write("\2\u09d2\u09d3\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d6")
        buf.write("\5\u0100\u0081\2\u09d5\u09d2\3\2\2\2\u09d6\u09d9\3\2\2")
        buf.write("\2\u09d7\u09d5\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09da")
        buf.write("\3\2\2\2\u09d9\u09d7\3\2\2\2\u09da\u09db\7\21\2\2\u09db")
        buf.write("\u00ff\3\2\2\2\u09dc\u09ea\5\u0190\u00c9\2\u09dd\u09de")
        buf.write("\5\u0190\u00c9\2\u09de\u09df\7\5\2\2\u09df\u09e4\5\u014e")
        buf.write("\u00a8\2\u09e0\u09e1\7\3\2\2\u09e1\u09e3\5\u014e\u00a8")
        buf.write("\2\u09e2\u09e0\3\2\2\2\u09e3\u09e6\3\2\2\2\u09e4\u09e2")
        buf.write("\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e7\3\2\2\2\u09e6")
        buf.write("\u09e4\3\2\2\2\u09e7\u09e8\7\6\2\2\u09e8\u09ea\3\2\2\2")
        buf.write("\u09e9\u09dc\3\2\2\2\u09e9\u09dd\3\2\2\2\u09ea\u0101\3")
        buf.write("\2\2\2\u09eb\u09ec\7\u0088\2\2\u09ec\u09f1\5\u0112\u008a")
        buf.write("\2\u09ed\u09ee\7\3\2\2\u09ee\u09f0\5\u0112\u008a\2\u09ef")
        buf.write("\u09ed\3\2\2\2\u09f0\u09f3\3\2\2\2\u09f1\u09ef\3\2\2\2")
        buf.write("\u09f1\u09f2\3\2\2\2\u09f2\u09f7\3\2\2\2\u09f3\u09f1\3")
        buf.write("\2\2\2\u09f4\u09f6\5\u010e\u0088\2\u09f5\u09f4\3\2\2\2")
        buf.write("\u09f6\u09f9\3\2\2\2\u09f7\u09f5\3\2\2\2\u09f7\u09f8\3")
        buf.write("\2\2\2\u09f8\u09fb\3\2\2\2\u09f9\u09f7\3\2\2\2\u09fa\u09fc")
        buf.write("\5\u0108\u0085\2\u09fb\u09fa\3\2\2\2\u09fb\u09fc\3\2\2")
        buf.write("\2\u09fc\u0103\3\2\2\2\u09fd\u09fe\7\u008e\2\2\u09fe\u09ff")
        buf.write("\7B\2\2\u09ff\u0a04\5\u0146\u00a4\2\u0a00\u0a01\7\3\2")
        buf.write("\2\u0a01\u0a03\5\u0146\u00a4\2\u0a02\u0a00\3\2\2\2\u0a03")
        buf.write("\u0a06\3\2\2\2\u0a04\u0a02\3\2\2\2\u0a04\u0a05\3\2\2\2")
        buf.write("\u0a05\u0a18\3\2\2\2\u0a06\u0a04\3\2\2\2\u0a07\u0a08\7")
        buf.write("\u012a\2\2\u0a08\u0a19\7\u00ed\2\2\u0a09\u0a0a\7\u012a")
        buf.write("\2\2\u0a0a\u0a19\7[\2\2\u0a0b\u0a0c\7\u008f\2\2\u0a0c")
        buf.write("\u0a0d\7\u00fa\2\2\u0a0d\u0a0e\7\5\2\2\u0a0e\u0a13\5\u0106")
        buf.write("\u0084\2\u0a0f\u0a10\7\3\2\2\u0a10\u0a12\5\u0106\u0084")
        buf.write("\2\u0a11\u0a0f\3\2\2\2\u0a12\u0a15\3\2\2\2\u0a13\u0a11")
        buf.write("\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u0a16\3\2\2\2\u0a15")
        buf.write("\u0a13\3\2\2\2\u0a16\u0a17\7\6\2\2\u0a17\u0a19\3\2\2\2")
        buf.write("\u0a18\u0a07\3\2\2\2\u0a18\u0a09\3\2\2\2\u0a18\u0a0b\3")
        buf.write("\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a2a\3\2\2\2\u0a1a\u0a1b")
        buf.write("\7\u008e\2\2\u0a1b\u0a1c\7B\2\2\u0a1c\u0a1d\7\u008f\2")
        buf.write("\2\u0a1d\u0a1e\7\u00fa\2\2\u0a1e\u0a1f\7\5\2\2\u0a1f\u0a24")
        buf.write("\5\u0106\u0084\2\u0a20\u0a21\7\3\2\2\u0a21\u0a23\5\u0106")
        buf.write("\u0084\2\u0a22\u0a20\3\2\2\2\u0a23\u0a26\3\2\2\2\u0a24")
        buf.write("\u0a22\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a27\3\2\2\2")
        buf.write("\u0a26\u0a24\3\2\2\2\u0a27\u0a28\7\6\2\2\u0a28\u0a2a\3")
        buf.write("\2\2\2\u0a29\u09fd\3\2\2\2\u0a29\u0a1a\3\2\2\2\u0a2a\u0105")
        buf.write("\3\2\2\2\u0a2b\u0a34\7\5\2\2\u0a2c\u0a31\5\u0146\u00a4")
        buf.write("\2\u0a2d\u0a2e\7\3\2\2\u0a2e\u0a30\5\u0146\u00a4\2\u0a2f")
        buf.write("\u0a2d\3\2\2\2\u0a30\u0a33\3\2\2\2\u0a31\u0a2f\3\2\2\2")
        buf.write("\u0a31\u0a32\3\2\2\2\u0a32\u0a35\3\2\2\2\u0a33\u0a31\3")
        buf.write("\2\2\2\u0a34\u0a2c\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a36")
        buf.write("\3\2\2\2\u0a36\u0a39\7\6\2\2\u0a37\u0a39\5\u0146\u00a4")
        buf.write("\2\u0a38\u0a2b\3\2\2\2\u0a38\u0a37\3\2\2\2\u0a39\u0107")
        buf.write("\3\2\2\2\u0a3a\u0a3b\7\u00d2\2\2\u0a3b\u0a3c\7\5\2\2\u0a3c")
        buf.write("\u0a3d\5\u013e\u00a0\2\u0a3d\u0a3e\7\u0084\2\2\u0a3e\u0a3f")
        buf.write("\5\u010a\u0086\2\u0a3f\u0a40\7\u0095\2\2\u0a40\u0a41\7")
        buf.write("\5\2\2\u0a41\u0a46\5\u010c\u0087\2\u0a42\u0a43\7\3\2\2")
        buf.write("\u0a43\u0a45\5\u010c\u0087\2\u0a44\u0a42\3\2\2\2\u0a45")
        buf.write("\u0a48\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46\u0a47\3\2\2\2")
        buf.write("\u0a47\u0a49\3\2\2\2\u0a48\u0a46\3\2\2\2\u0a49\u0a4a\7")
        buf.write("\6\2\2\u0a4a\u0a4b\7\6\2\2\u0a4b\u0109\3\2\2\2\u0a4c\u0a59")
        buf.write("\5\u0190\u00c9\2\u0a4d\u0a4e\7\5\2\2\u0a4e\u0a53\5\u0190")
        buf.write("\u00c9\2\u0a4f\u0a50\7\3\2\2\u0a50\u0a52\5\u0190\u00c9")
        buf.write("\2\u0a51\u0a4f\3\2\2\2\u0a52\u0a55\3\2\2\2\u0a53\u0a51")
        buf.write("\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a56\3\2\2\2\u0a55")
        buf.write("\u0a53\3\2\2\2\u0a56\u0a57\7\6\2\2\u0a57\u0a59\3\2\2\2")
        buf.write("\u0a58\u0a4c\3\2\2\2\u0a58\u0a4d\3\2\2\2\u0a59\u010b\3")
        buf.write("\2\2\2\u0a5a\u0a5f\5\u0146\u00a4\2\u0a5b\u0a5d\7:\2\2")
        buf.write("\u0a5c\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5e\3")
        buf.write("\2\2\2\u0a5e\u0a60\5\u0190\u00c9\2\u0a5f\u0a5c\3\2\2\2")
        buf.write("\u0a5f\u0a60\3\2\2\2\u0a60\u010d\3\2\2\2\u0a61\u0a62\7")
        buf.write("\u00a4\2\2\u0a62\u0a64\7\u0125\2\2\u0a63\u0a65\7\u00c8")
        buf.write("\2\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a66")
        buf.write("\3\2\2\2\u0a66\u0a67\5\u018a\u00c6\2\u0a67\u0a70\7\5\2")
        buf.write("\2\u0a68\u0a6d\5\u0146\u00a4\2\u0a69\u0a6a\7\3\2\2\u0a6a")
        buf.write("\u0a6c\5\u0146\u00a4\2\u0a6b\u0a69\3\2\2\2\u0a6c\u0a6f")
        buf.write("\3\2\2\2\u0a6d\u0a6b\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e")
        buf.write("\u0a71\3\2\2\2\u0a6f\u0a6d\3\2\2\2\u0a70\u0a68\3\2\2\2")
        buf.write("\u0a70\u0a71\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72\u0a73\7")
        buf.write("\6\2\2\u0a73\u0a7f\5\u0190\u00c9\2\u0a74\u0a76\7:\2\2")
        buf.write("\u0a75\u0a74\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a77\3")
        buf.write("\2\2\2\u0a77\u0a7c\5\u0190\u00c9\2\u0a78\u0a79\7\3\2\2")
        buf.write("\u0a79\u0a7b\5\u0190\u00c9\2\u0a7a\u0a78\3\2\2\2\u0a7b")
        buf.write("\u0a7e\3\2\2\2\u0a7c\u0a7a\3\2\2\2\u0a7c\u0a7d\3\2\2\2")
        buf.write("\u0a7d\u0a80\3\2\2\2\u0a7e\u0a7c\3\2\2\2\u0a7f\u0a75\3")
        buf.write("\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u010f\3\2\2\2\u0a81\u0a82")
        buf.write("\t\34\2\2\u0a82\u0111\3\2\2\2\u0a83\u0a87\5\u012a\u0096")
        buf.write("\2\u0a84\u0a86\5\u0114\u008b\2\u0a85\u0a84\3\2\2\2\u0a86")
        buf.write("\u0a89\3\2\2\2\u0a87\u0a85\3\2\2\2\u0a87\u0a88\3\2\2\2")
        buf.write("\u0a88\u0113\3\2\2\2\u0a89\u0a87\3\2\2\2\u0a8a\u0a8b\5")
        buf.write("\u0116\u008c\2\u0a8b\u0a8c\7\u00a1\2\2\u0a8c\u0a8e\5\u012a")
        buf.write("\u0096\2\u0a8d\u0a8f\5\u0118\u008d\2\u0a8e\u0a8d\3\2\2")
        buf.write("\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a96\3\2\2\2\u0a90\u0a91")
        buf.write("\7\u00bb\2\2\u0a91\u0a92\5\u0116\u008c\2\u0a92\u0a93\7")
        buf.write("\u00a1\2\2\u0a93\u0a94\5\u012a\u0096\2\u0a94\u0a96\3\2")
        buf.write("\2\2\u0a95\u0a8a\3\2\2\2\u0a95\u0a90\3\2\2\2\u0a96\u0115")
        buf.write("\3\2\2\2\u0a97\u0a99\7\u0098\2\2\u0a98\u0a97\3\2\2\2\u0a98")
        buf.write("\u0a99\3\2\2\2\u0a99\u0ab0\3\2\2\2\u0a9a\u0ab0\7Z\2\2")
        buf.write("\u0a9b\u0a9d\7\u00a7\2\2\u0a9c\u0a9e\7\u00c8\2\2\u0a9d")
        buf.write("\u0a9c\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0ab0\3\2\2\2")
        buf.write("\u0a9f\u0aa1\7\u00a7\2\2\u0aa0\u0a9f\3\2\2\2\u0aa0\u0aa1")
        buf.write("\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0ab0\7\u00f3\2\2\u0aa3")
        buf.write("\u0aa5\7\u00e8\2\2\u0aa4\u0aa6\7\u00c8\2\2\u0aa5\u0aa4")
        buf.write("\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0ab0\3\2\2\2\u0aa7")
        buf.write("\u0aa9\7\u0089\2\2\u0aa8\u0aaa\7\u00c8\2\2\u0aa9\u0aa8")
        buf.write("\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u0ab0\3\2\2\2\u0aab")
        buf.write("\u0aad\7\u00a7\2\2\u0aac\u0aab\3\2\2\2\u0aac\u0aad\3\2")
        buf.write("\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab0\7\66\2\2\u0aaf\u0a98")
        buf.write("\3\2\2\2\u0aaf\u0a9a\3\2\2\2\u0aaf\u0a9b\3\2\2\2\u0aaf")
        buf.write("\u0aa0\3\2\2\2\u0aaf\u0aa3\3\2\2\2\u0aaf\u0aa7\3\2\2\2")
        buf.write("\u0aaf\u0aac\3\2\2\2\u0ab0\u0117\3\2\2\2\u0ab1\u0ab2\7")
        buf.write("\u00c1\2\2\u0ab2\u0ab6\5\u0148\u00a5\2\u0ab3\u0ab4\7\u0123")
        buf.write("\2\2\u0ab4\u0ab6\5\u011e\u0090\2\u0ab5\u0ab1\3\2\2\2\u0ab5")
        buf.write("\u0ab3\3\2\2\2\u0ab6\u0119\3\2\2\2\u0ab7\u0ab8\7\u0109")
        buf.write("\2\2\u0ab8\u0aba\7\5\2\2\u0ab9\u0abb\5\u011c\u008f\2\u0aba")
        buf.write("\u0ab9\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u0abc\3\2\2\2")
        buf.write("\u0abc\u0abd\7\6\2\2\u0abd\u011b\3\2\2\2\u0abe\u0ac0\7")
        buf.write("\u0136\2\2\u0abf\u0abe\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0")
        buf.write("\u0ac1\3\2\2\2\u0ac1\u0ac2\t\35\2\2\u0ac2\u0ad7\7\u00d1")
        buf.write("\2\2\u0ac3\u0ac4\5\u0146\u00a4\2\u0ac4\u0ac5\7\u00ef\2")
        buf.write("\2\u0ac5\u0ad7\3\2\2\2\u0ac6\u0ac7\7@\2\2\u0ac7\u0ac8")
        buf.write("\7\u0144\2\2\u0ac8\u0ac9\7\u00c7\2\2\u0ac9\u0aca\7\u00c0")
        buf.write("\2\2\u0aca\u0ad3\7\u0144\2\2\u0acb\u0ad1\7\u00c1\2\2\u0acc")
        buf.write("\u0ad2\5\u0190\u00c9\2\u0acd\u0ace\5\u018a\u00c6\2\u0ace")
        buf.write("\u0acf\7\5\2\2\u0acf\u0ad0\7\6\2\2\u0ad0\u0ad2\3\2\2\2")
        buf.write("\u0ad1\u0acc\3\2\2\2\u0ad1\u0acd\3\2\2\2\u0ad2\u0ad4\3")
        buf.write("\2\2\2\u0ad3\u0acb\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad7")
        buf.write("\3\2\2\2\u0ad5\u0ad7\5\u0146\u00a4\2\u0ad6\u0abf\3\2\2")
        buf.write("\2\u0ad6\u0ac3\3\2\2\2\u0ad6\u0ac6\3\2\2\2\u0ad6\u0ad5")
        buf.write("\3\2\2\2\u0ad7\u011d\3\2\2\2\u0ad8\u0ad9\7\5\2\2\u0ad9")
        buf.write("\u0ada\5\u0120\u0091\2\u0ada\u0adb\7\6\2\2\u0adb\u011f")
        buf.write("\3\2\2\2\u0adc\u0ae1\5\u018c\u00c7\2\u0add\u0ade\7\3\2")
        buf.write("\2\u0ade\u0ae0\5\u018c\u00c7\2\u0adf\u0add\3\2\2\2\u0ae0")
        buf.write("\u0ae3\3\2\2\2\u0ae1\u0adf\3\2\2\2\u0ae1\u0ae2\3\2\2\2")
        buf.write("\u0ae2\u0121\3\2\2\2\u0ae3\u0ae1\3\2\2\2\u0ae4\u0ae5\7")
        buf.write("\5\2\2\u0ae5\u0aea\5\u0124\u0093\2\u0ae6\u0ae7\7\3\2\2")
        buf.write("\u0ae7\u0ae9\5\u0124\u0093\2\u0ae8\u0ae6\3\2\2\2\u0ae9")
        buf.write("\u0aec\3\2\2\2\u0aea\u0ae8\3\2\2\2\u0aea\u0aeb\3\2\2\2")
        buf.write("\u0aeb\u0aed\3\2\2\2\u0aec\u0aea\3\2\2\2\u0aed\u0aee\7")
        buf.write("\6\2\2\u0aee\u0123\3\2\2\2\u0aef\u0af1\5\u018c\u00c7\2")
        buf.write("\u0af0\u0af2\t\t\2\2\u0af1\u0af0\3\2\2\2\u0af1\u0af2\3")
        buf.write("\2\2\2\u0af2\u0125\3\2\2\2\u0af3\u0af4\7\5\2\2\u0af4\u0af9")
        buf.write("\5\u0128\u0095\2\u0af5\u0af6\7\3\2\2\u0af6\u0af8\5\u0128")
        buf.write("\u0095\2\u0af7\u0af5\3\2\2\2\u0af8\u0afb\3\2\2\2\u0af9")
        buf.write("\u0af7\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0afc\3\2\2\2")
        buf.write("\u0afb\u0af9\3\2\2\2\u0afc\u0afd\7\6\2\2\u0afd\u0127\3")
        buf.write("\2\2\2\u0afe\u0b00\5\u0190\u00c9\2\u0aff\u0b01\5\u00a6")
        buf.write("T\2\u0b00\u0aff\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0129")
        buf.write("\3\2\2\2\u0b02\u0b04\5\u0136\u009c\2\u0b03\u0b05\5\u011a")
        buf.write("\u008e\2\u0b04\u0b03\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05")
        buf.write("\u0b06\3\2\2\2\u0b06\u0b07\5\u0130\u0099\2\u0b07\u0b1b")
        buf.write("\3\2\2\2\u0b08\u0b09\7\5\2\2\u0b09\u0b0a\5\u00a8U\2\u0b0a")
        buf.write("\u0b0c\7\6\2\2\u0b0b\u0b0d\5\u011a\u008e\2\u0b0c\u0b0b")
        buf.write("\3\2\2\2\u0b0c\u0b0d\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e")
        buf.write("\u0b0f\5\u0130\u0099\2\u0b0f\u0b1b\3\2\2\2\u0b10\u0b11")
        buf.write("\7\5\2\2\u0b11\u0b12\5\u0112\u008a\2\u0b12\u0b14\7\6\2")
        buf.write("\2\u0b13\u0b15\5\u011a\u008e\2\u0b14\u0b13\3\2\2\2\u0b14")
        buf.write("\u0b15\3\2\2\2\u0b15\u0b16\3\2\2\2\u0b16\u0b17\5\u0130")
        buf.write("\u0099\2\u0b17\u0b1b\3\2\2\2\u0b18\u0b1b\5\u012c\u0097")
        buf.write("\2\u0b19\u0b1b\5\u012e\u0098\2\u0b1a\u0b02\3\2\2\2\u0b1a")
        buf.write("\u0b08\3\2\2\2\u0b1a\u0b10\3\2\2\2\u0b1a\u0b18\3\2\2\2")
        buf.write("\u0b1a\u0b19\3\2\2\2\u0b1b\u012b\3\2\2\2\u0b1c\u0b1d\7")
        buf.write("\u0124\2\2\u0b1d\u0b22\5\u0146\u00a4\2\u0b1e\u0b1f\7\3")
        buf.write("\2\2\u0b1f\u0b21\5\u0146\u00a4\2\u0b20\u0b1e\3\2\2\2\u0b21")
        buf.write("\u0b24\3\2\2\2\u0b22\u0b20\3\2\2\2\u0b22\u0b23\3\2\2\2")
        buf.write("\u0b23\u0b25\3\2\2\2\u0b24\u0b22\3\2\2\2\u0b25\u0b26\5")
        buf.write("\u0130\u0099\2\u0b26\u012d\3\2\2\2\u0b27\u0b28\5\u018c")
        buf.write("\u00c7\2\u0b28\u0b31\7\5\2\2\u0b29\u0b2e\5\u0146\u00a4")
        buf.write("\2\u0b2a\u0b2b\7\3\2\2\u0b2b\u0b2d\5\u0146\u00a4\2\u0b2c")
        buf.write("\u0b2a\3\2\2\2\u0b2d\u0b30\3\2\2\2\u0b2e\u0b2c\3\2\2\2")
        buf.write("\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b32\3\2\2\2\u0b30\u0b2e\3")
        buf.write("\2\2\2\u0b31\u0b29\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32\u0b33")
        buf.write("\3\2\2\2\u0b33\u0b34\7\6\2\2\u0b34\u0b35\5\u0130\u0099")
        buf.write("\2\u0b35\u012f\3\2\2\2\u0b36\u0b38\7:\2\2\u0b37\u0b36")
        buf.write("\3\2\2\2\u0b37\u0b38\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39")
        buf.write("\u0b3b\5\u0192\u00ca\2\u0b3a\u0b3c\5\u011e\u0090\2\u0b3b")
        buf.write("\u0b3a\3\2\2\2\u0b3b\u0b3c\3\2\2\2\u0b3c\u0b3e\3\2\2\2")
        buf.write("\u0b3d\u0b37\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0131\3")
        buf.write("\2\2\2\u0b3f\u0b40\7\u00ee\2\2\u0b40\u0b41\7\u0086\2\2")
        buf.write("\u0b41\u0b42\7\u00f5\2\2\u0b42\u0b46\7\u0140\2\2\u0b43")
        buf.write("\u0b44\7\u012a\2\2\u0b44\u0b45\7\u00f6\2\2\u0b45\u0b47")
        buf.write("\5\u00c0a\2\u0b46\u0b43\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47")
        buf.write("\u0b71\3\2\2\2\u0b48\u0b49\7\u00ee\2\2\u0b49\u0b4a\7\u0086")
        buf.write("\2\2\u0b4a\u0b54\7h\2\2\u0b4b\u0b4c\7\177\2\2\u0b4c\u0b4d")
        buf.write("\7\u010c\2\2\u0b4d\u0b4e\7B\2\2\u0b4e\u0b52\7\u0140\2")
        buf.write("\2\u0b4f\u0b50\7t\2\2\u0b50\u0b51\7B\2\2\u0b51\u0b53\7")
        buf.write("\u0140\2\2\u0b52\u0b4f\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53")
        buf.write("\u0b55\3\2\2\2\u0b54\u0b4b\3\2\2\2\u0b54\u0b55\3\2\2\2")
        buf.write("\u0b55\u0b5b\3\2\2\2\u0b56\u0b57\7N\2\2\u0b57\u0b58\7")
        buf.write("\u00a0\2\2\u0b58\u0b59\7\u010c\2\2\u0b59\u0b5a\7B\2\2")
        buf.write("\u0b5a\u0b5c\7\u0140\2\2\u0b5b\u0b56\3\2\2\2\u0b5b\u0b5c")
        buf.write("\3\2\2\2\u0b5c\u0b62\3\2\2\2\u0b5d\u0b5e\7\u00b3\2\2\u0b5e")
        buf.write("\u0b5f\7\u00a2\2\2\u0b5f\u0b60\7\u010c\2\2\u0b60\u0b61")
        buf.write("\7B\2\2\u0b61\u0b63\7\u0140\2\2\u0b62\u0b5d\3\2\2\2\u0b62")
        buf.write("\u0b63\3\2\2\2\u0b63\u0b68\3\2\2\2\u0b64\u0b65\7\u00aa")
        buf.write("\2\2\u0b65\u0b66\7\u010c\2\2\u0b66\u0b67\7B\2\2\u0b67")
        buf.write("\u0b69\7\u0140\2\2\u0b68\u0b64\3\2\2\2\u0b68\u0b69\3\2")
        buf.write("\2\2\u0b69\u0b6e\3\2\2\2\u0b6a\u0b6b\7\u00be\2\2\u0b6b")
        buf.write("\u0b6c\7f\2\2\u0b6c\u0b6d\7:\2\2\u0b6d\u0b6f\7\u0140\2")
        buf.write("\2\u0b6e\u0b6a\3\2\2\2\u0b6e\u0b6f\3\2\2\2\u0b6f\u0b71")
        buf.write("\3\2\2\2\u0b70\u0b3f\3\2\2\2\u0b70\u0b48\3\2\2\2\u0b71")
        buf.write("\u0133\3\2\2\2\u0b72\u0b77\5\u0136\u009c\2\u0b73\u0b74")
        buf.write("\7\3\2\2\u0b74\u0b76\5\u0136\u009c\2\u0b75\u0b73\3\2\2")
        buf.write("\2\u0b76\u0b79\3\2\2\2\u0b77\u0b75\3\2\2\2\u0b77\u0b78")
        buf.write("\3\2\2\2\u0b78\u0135\3\2\2\2\u0b79\u0b77\3\2\2\2\u0b7a")
        buf.write("\u0b7f\5\u018c\u00c7\2\u0b7b\u0b7c\7\7\2\2\u0b7c\u0b7e")
        buf.write("\5\u018c\u00c7\2\u0b7d\u0b7b\3\2\2\2\u0b7e\u0b81\3\2\2")
        buf.write("\2\u0b7f\u0b7d\3\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80\u0137")
        buf.write("\3\2\2\2\u0b81\u0b7f\3\2\2\2\u0b82\u0b83\5\u018c\u00c7")
        buf.write("\2\u0b83\u0b84\7\7\2\2\u0b84\u0b86\3\2\2\2\u0b85\u0b82")
        buf.write("\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87")
        buf.write("\u0b88\5\u018c\u00c7\2\u0b88\u0139\3\2\2\2\u0b89\u0b8a")
        buf.write("\5\u018c\u00c7\2\u0b8a\u0b8b\7\7\2\2\u0b8b\u0b8d\3\2\2")
        buf.write("\2\u0b8c\u0b89\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b8e")
        buf.write("\3\2\2\2\u0b8e\u0b8f\5\u018c\u00c7\2\u0b8f\u013b\3\2\2")
        buf.write("\2\u0b90\u0b98\5\u0146\u00a4\2\u0b91\u0b93\7:\2\2\u0b92")
        buf.write("\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b96\3\2\2\2")
        buf.write("\u0b94\u0b97\5\u018c\u00c7\2\u0b95\u0b97\5\u011e\u0090")
        buf.write("\2\u0b96\u0b94\3\2\2\2\u0b96\u0b95\3\2\2\2\u0b97\u0b99")
        buf.write("\3\2\2\2\u0b98\u0b92\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99")
        buf.write("\u013d\3\2\2\2\u0b9a\u0b9f\5\u013c\u009f\2\u0b9b\u0b9c")
        buf.write("\7\3\2\2\u0b9c\u0b9e\5\u013c\u009f\2\u0b9d\u0b9b\3\2\2")
        buf.write("\2\u0b9e\u0ba1\3\2\2\2\u0b9f\u0b9d\3\2\2\2\u0b9f\u0ba0")
        buf.write("\3\2\2\2\u0ba0\u013f\3\2\2\2\u0ba1\u0b9f\3\2\2\2\u0ba2")
        buf.write("\u0ba3\7\5\2\2\u0ba3\u0ba8\5\u0142\u00a2\2\u0ba4\u0ba5")
        buf.write("\7\3\2\2\u0ba5\u0ba7\5\u0142\u00a2\2\u0ba6\u0ba4\3\2\2")
        buf.write("\2\u0ba7\u0baa\3\2\2\2\u0ba8\u0ba6\3\2\2\2\u0ba8\u0ba9")
        buf.write("\3\2\2\2\u0ba9\u0bab\3\2\2\2\u0baa\u0ba8\3\2\2\2\u0bab")
        buf.write("\u0bac\7\6\2\2\u0bac\u0141\3\2\2\2\u0bad\u0bbb\5\u018a")
        buf.write("\u00c6\2\u0bae\u0baf\5\u0190\u00c9\2\u0baf\u0bb0\7\5\2")
        buf.write("\2\u0bb0\u0bb5\5\u0144\u00a3\2\u0bb1\u0bb2\7\3\2\2\u0bb2")
        buf.write("\u0bb4\5\u0144\u00a3\2\u0bb3\u0bb1\3\2\2\2\u0bb4\u0bb7")
        buf.write("\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6")
        buf.write("\u0bb8\3\2\2\2\u0bb7\u0bb5\3\2\2\2\u0bb8\u0bb9\7\6\2\2")
        buf.write("\u0bb9\u0bbb\3\2\2\2\u0bba\u0bad\3\2\2\2\u0bba\u0bae\3")
        buf.write("\2\2\2\u0bbb\u0143\3\2\2\2\u0bbc\u0bbf\5\u018a\u00c6\2")
        buf.write("\u0bbd\u0bbf\5\u0150\u00a9\2\u0bbe\u0bbc\3\2\2\2\u0bbe")
        buf.write("\u0bbd\3\2\2\2\u0bbf\u0145\3\2\2\2\u0bc0\u0bc1\5\u0148")
        buf.write("\u00a5\2\u0bc1\u0147\3\2\2\2\u0bc2\u0bc3\b\u00a5\1\2\u0bc3")
        buf.write("\u0bc4\7\u00bd\2\2\u0bc4\u0bcf\5\u0148\u00a5\7\u0bc5\u0bc6")
        buf.write("\7w\2\2\u0bc6\u0bc7\7\5\2\2\u0bc7\u0bc8\5\u00a8U\2\u0bc8")
        buf.write("\u0bc9\7\6\2\2\u0bc9\u0bcf\3\2\2\2\u0bca\u0bcc\5\u014c")
        buf.write("\u00a7\2\u0bcb\u0bcd\5\u014a\u00a6\2\u0bcc\u0bcb\3\2\2")
        buf.write("\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0bcf\3\2\2\2\u0bce\u0bc2")
        buf.write("\3\2\2\2\u0bce\u0bc5\3\2\2\2\u0bce\u0bca\3\2\2\2\u0bcf")
        buf.write("\u0bd8\3\2\2\2\u0bd0\u0bd1\f\4\2\2\u0bd1\u0bd2\7\65\2")
        buf.write("\2\u0bd2\u0bd7\5\u0148\u00a5\5\u0bd3\u0bd4\f\3\2\2\u0bd4")
        buf.write("\u0bd5\7\u00c5\2\2\u0bd5\u0bd7\5\u0148\u00a5\4\u0bd6\u0bd0")
        buf.write("\3\2\2\2\u0bd6\u0bd3\3\2\2\2\u0bd7\u0bda\3\2\2\2\u0bd8")
        buf.write("\u0bd6\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0149\3\2\2\2")
        buf.write("\u0bda\u0bd8\3\2\2\2\u0bdb\u0bdd\7\u00bd\2\2\u0bdc\u0bdb")
        buf.write("\3\2\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde")
        buf.write("\u0bdf\7>\2\2\u0bdf\u0be0\5\u014c\u00a7\2\u0be0\u0be1")
        buf.write("\7\65\2\2\u0be1\u0be2\5\u014c\u00a7\2\u0be2\u0c2e\3\2")
        buf.write("\2\2\u0be3\u0be5\7\u00bd\2\2\u0be4\u0be3\3\2\2\2\u0be4")
        buf.write("\u0be5\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0be7\7\u0095")
        buf.write("\2\2\u0be7\u0be8\7\5\2\2\u0be8\u0bed\5\u0146\u00a4\2\u0be9")
        buf.write("\u0bea\7\3\2\2\u0bea\u0bec\5\u0146\u00a4\2\u0beb\u0be9")
        buf.write("\3\2\2\2\u0bec\u0bef\3\2\2\2\u0bed\u0beb\3\2\2\2\u0bed")
        buf.write("\u0bee\3\2\2\2\u0bee\u0bf0\3\2\2\2\u0bef\u0bed\3\2\2\2")
        buf.write("\u0bf0\u0bf1\7\6\2\2\u0bf1\u0c2e\3\2\2\2\u0bf2\u0bf4\7")
        buf.write("\u00bd\2\2\u0bf3\u0bf2\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4")
        buf.write("\u0bf5\3\2\2\2\u0bf5\u0bf6\7\u0095\2\2\u0bf6\u0bf7\7\5")
        buf.write("\2\2\u0bf7\u0bf8\5\u00a8U\2\u0bf8\u0bf9\7\6\2\2\u0bf9")
        buf.write("\u0c2e\3\2\2\2\u0bfa\u0bfc\7\u00bd\2\2\u0bfb\u0bfa\3\2")
        buf.write("\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0bfe")
        buf.write("\7\u00e9\2\2\u0bfe\u0c2e\5\u014c\u00a7\2\u0bff\u0c01\7")
        buf.write("\u00bd\2\2\u0c00\u0bff\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01")
        buf.write("\u0c02\3\2\2\2\u0c02\u0c03\7\u00a8\2\2\u0c03\u0c11\t\36")
        buf.write("\2\2\u0c04\u0c05\7\5\2\2\u0c05\u0c12\7\6\2\2\u0c06\u0c07")
        buf.write("\7\5\2\2\u0c07\u0c0c\5\u0146\u00a4\2\u0c08\u0c09\7\3\2")
        buf.write("\2\u0c09\u0c0b\5\u0146\u00a4\2\u0c0a\u0c08\3\2\2\2\u0c0b")
        buf.write("\u0c0e\3\2\2\2\u0c0c\u0c0a\3\2\2\2\u0c0c\u0c0d\3\2\2\2")
        buf.write("\u0c0d\u0c0f\3\2\2\2\u0c0e\u0c0c\3\2\2\2\u0c0f\u0c10\7")
        buf.write("\6\2\2\u0c10\u0c12\3\2\2\2\u0c11\u0c04\3\2\2\2\u0c11\u0c06")
        buf.write("\3\2\2\2\u0c12\u0c2e\3\2\2\2\u0c13\u0c15\7\u00bd\2\2\u0c14")
        buf.write("\u0c13\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15\u0c16\3\2\2\2")
        buf.write("\u0c16\u0c17\7\u00a8\2\2\u0c17\u0c1a\5\u014c\u00a7\2\u0c18")
        buf.write("\u0c19\7s\2\2\u0c19\u0c1b\7\u0140\2\2\u0c1a\u0c18\3\2")
        buf.write("\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c2e\3\2\2\2\u0c1c\u0c1e")
        buf.write("\7\u009f\2\2\u0c1d\u0c1f\7\u00bd\2\2\u0c1e\u0c1d\3\2\2")
        buf.write("\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0c2e")
        buf.write("\7\u00be\2\2\u0c21\u0c23\7\u009f\2\2\u0c22\u0c24\7\u00bd")
        buf.write("\2\2\u0c23\u0c22\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c25")
        buf.write("\3\2\2\2\u0c25\u0c2e\t\37\2\2\u0c26\u0c28\7\u009f\2\2")
        buf.write("\u0c27\u0c29\7\u00bd\2\2\u0c28\u0c27\3\2\2\2\u0c28\u0c29")
        buf.write("\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2b\7n\2\2\u0c2b")
        buf.write("\u0c2c\7\u0088\2\2\u0c2c\u0c2e\5\u014c\u00a7\2\u0c2d\u0bdc")
        buf.write("\3\2\2\2\u0c2d\u0be4\3\2\2\2\u0c2d\u0bf3\3\2\2\2\u0c2d")
        buf.write("\u0bfb\3\2\2\2\u0c2d\u0c00\3\2\2\2\u0c2d\u0c14\3\2\2\2")
        buf.write("\u0c2d\u0c1c\3\2\2\2\u0c2d\u0c21\3\2\2\2\u0c2d\u0c26\3")
        buf.write("\2\2\2\u0c2e\u014b\3\2\2\2\u0c2f\u0c30\b\u00a7\1\2\u0c30")
        buf.write("\u0c34\5\u014e\u00a8\2\u0c31\u0c32\t \2\2\u0c32\u0c34")
        buf.write("\5\u014c\u00a7\t\u0c33\u0c2f\3\2\2\2\u0c33\u0c31\3\2\2")
        buf.write("\2\u0c34\u0c4a\3\2\2\2\u0c35\u0c36\f\b\2\2\u0c36\u0c37")
        buf.write("\t!\2\2\u0c37\u0c49\5\u014c\u00a7\t\u0c38\u0c39\f\7\2")
        buf.write("\2\u0c39\u0c3a\t\"\2\2\u0c3a\u0c49\5\u014c\u00a7\b\u0c3b")
        buf.write("\u0c3c\f\6\2\2\u0c3c\u0c3d\7\u013c\2\2\u0c3d\u0c49\5\u014c")
        buf.write("\u00a7\7\u0c3e\u0c3f\f\5\2\2\u0c3f\u0c40\7\u013f\2\2\u0c40")
        buf.write("\u0c49\5\u014c\u00a7\6\u0c41\u0c42\f\4\2\2\u0c42\u0c43")
        buf.write("\7\u013d\2\2\u0c43\u0c49\5\u014c\u00a7\5\u0c44\u0c45\f")
        buf.write("\3\2\2\u0c45\u0c46\5\u0152\u00aa\2\u0c46\u0c47\5\u014c")
        buf.write("\u00a7\4\u0c47\u0c49\3\2\2\2\u0c48\u0c35\3\2\2\2\u0c48")
        buf.write("\u0c38\3\2\2\2\u0c48\u0c3b\3\2\2\2\u0c48\u0c3e\3\2\2\2")
        buf.write("\u0c48\u0c41\3\2\2\2\u0c48\u0c44\3\2\2\2\u0c49\u0c4c\3")
        buf.write("\2\2\2\u0c4a\u0c48\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u014d")
        buf.write("\3\2\2\2\u0c4c\u0c4a\3\2\2\2\u0c4d\u0c4e\b\u00a8\1\2\u0c4e")
        buf.write("\u0d06\t#\2\2\u0c4f\u0c51\7E\2\2\u0c50\u0c52\5\u017a\u00be")
        buf.write("\2\u0c51\u0c50\3\2\2\2\u0c52\u0c53\3\2\2\2\u0c53\u0c51")
        buf.write("\3\2\2\2\u0c53\u0c54\3\2\2\2\u0c54\u0c57\3\2\2\2\u0c55")
        buf.write("\u0c56\7q\2\2\u0c56\u0c58\5\u0146\u00a4\2\u0c57\u0c55")
        buf.write("\3\2\2\2\u0c57\u0c58\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59")
        buf.write("\u0c5a\7r\2\2\u0c5a\u0d06\3\2\2\2\u0c5b\u0c5c\7E\2\2\u0c5c")
        buf.write("\u0c5e\5\u0146\u00a4\2\u0c5d\u0c5f\5\u017a\u00be\2\u0c5e")
        buf.write("\u0c5d\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c5e\3\2\2\2")
        buf.write("\u0c60\u0c61\3\2\2\2\u0c61\u0c64\3\2\2\2\u0c62\u0c63\7")
        buf.write("q\2\2\u0c63\u0c65\5\u0146\u00a4\2\u0c64\u0c62\3\2\2\2")
        buf.write("\u0c64\u0c65\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c67\7")
        buf.write("r\2\2\u0c67\u0d06\3\2\2\2\u0c68\u0c69\7F\2\2\u0c69\u0c6a")
        buf.write("\7\5\2\2\u0c6a\u0c6b\5\u0146\u00a4\2\u0c6b\u0c6c\7:\2")
        buf.write("\2\u0c6c\u0c6d\5\u016c\u00b7\2\u0c6d\u0c6e\7\6\2\2\u0c6e")
        buf.write("\u0d06\3\2\2\2\u0c6f\u0c70\7\u0104\2\2\u0c70\u0c79\7\5")
        buf.write("\2\2\u0c71\u0c76\5\u013c\u009f\2\u0c72\u0c73\7\3\2\2\u0c73")
        buf.write("\u0c75\5\u013c\u009f\2\u0c74\u0c72\3\2\2\2\u0c75\u0c78")
        buf.write("\3\2\2\2\u0c76\u0c74\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77")
        buf.write("\u0c7a\3\2\2\2\u0c78\u0c76\3\2\2\2\u0c79\u0c71\3\2\2\2")
        buf.write("\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0d06\7")
        buf.write("\6\2\2\u0c7c\u0c7d\7\u0082\2\2\u0c7d\u0c7e\7\5\2\2\u0c7e")
        buf.write("\u0c81\5\u0146\u00a4\2\u0c7f\u0c80\7\u0093\2\2\u0c80\u0c82")
        buf.write("\7\u00bf\2\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82")
        buf.write("\u0c83\3\2\2\2\u0c83\u0c84\7\6\2\2\u0c84\u0d06\3\2\2\2")
        buf.write("\u0c85\u0c86\7\u00a3\2\2\u0c86\u0c87\7\5\2\2\u0c87\u0c8a")
        buf.write("\5\u0146\u00a4\2\u0c88\u0c89\7\u0093\2\2\u0c89\u0c8b\7")
        buf.write("\u00bf\2\2\u0c8a\u0c88\3\2\2\2\u0c8a\u0c8b\3\2\2\2\u0c8b")
        buf.write("\u0c8c\3\2\2\2\u0c8c\u0c8d\7\6\2\2\u0c8d\u0d06\3\2\2\2")
        buf.write("\u0c8e\u0c8f\7\u00d4\2\2\u0c8f\u0c90\7\5\2\2\u0c90\u0c91")
        buf.write("\5\u014c\u00a7\2\u0c91\u0c92\7\u0095\2\2\u0c92\u0c93\5")
        buf.write("\u014c\u00a7\2\u0c93\u0c94\7\6\2\2\u0c94\u0d06\3\2\2\2")
        buf.write("\u0c95\u0d06\5\u0150\u00a9\2\u0c96\u0d06\7\u0137\2\2\u0c97")
        buf.write("\u0c98\5\u018a\u00c6\2\u0c98\u0c99\7\7\2\2\u0c99\u0c9a")
        buf.write("\7\u0137\2\2\u0c9a\u0d06\3\2\2\2\u0c9b\u0c9c\7\5\2\2\u0c9c")
        buf.write("\u0c9f\5\u013c\u009f\2\u0c9d\u0c9e\7\3\2\2\u0c9e\u0ca0")
        buf.write("\5\u013c\u009f\2\u0c9f\u0c9d\3\2\2\2\u0ca0\u0ca1\3\2\2")
        buf.write("\2\u0ca1\u0c9f\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u0ca3")
        buf.write("\3\2\2\2\u0ca3\u0ca4\7\6\2\2\u0ca4\u0d06\3\2\2\2\u0ca5")
        buf.write("\u0ca6\7\5\2\2\u0ca6\u0ca7\5\u00a8U\2\u0ca7\u0ca8\7\6")
        buf.write("\2\2\u0ca8\u0d06\3\2\2\2\u0ca9\u0caa\5\u0188\u00c5\2\u0caa")
        buf.write("\u0cb6\7\5\2\2\u0cab\u0cad\5\u0110\u0089\2\u0cac\u0cab")
        buf.write("\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae")
        buf.write("\u0cb3\5\u0146\u00a4\2\u0caf\u0cb0\7\3\2\2\u0cb0\u0cb2")
        buf.write("\5\u0146\u00a4\2\u0cb1\u0caf\3\2\2\2\u0cb2\u0cb5\3\2\2")
        buf.write("\2\u0cb3\u0cb1\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb7")
        buf.write("\3\2\2\2\u0cb5\u0cb3\3\2\2\2\u0cb6\u0cac\3\2\2\2\u0cb6")
        buf.write("\u0cb7\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8\u0cbf\7\6\2\2")
        buf.write("\u0cb9\u0cba\7\u0080\2\2\u0cba\u0cbb\7\5\2\2\u0cbb\u0cbc")
        buf.write("\7\u0128\2\2\u0cbc\u0cbd\5\u0148\u00a5\2\u0cbd\u0cbe\7")
        buf.write("\6\2\2\u0cbe\u0cc0\3\2\2\2\u0cbf\u0cb9\3\2\2\2\u0cbf\u0cc0")
        buf.write("\3\2\2\2\u0cc0\u0cc3\3\2\2\2\u0cc1\u0cc2\7\u00ca\2\2\u0cc2")
        buf.write("\u0cc4\5\u0180\u00c1\2\u0cc3\u0cc1\3\2\2\2\u0cc3\u0cc4")
        buf.write("\3\2\2\2\u0cc4\u0d06\3\2\2\2\u0cc5\u0cc6\5\u0190\u00c9")
        buf.write("\2\u0cc6\u0cc7\7\22\2\2\u0cc7\u0cc8\5\u0146\u00a4\2\u0cc8")
        buf.write("\u0d06\3\2\2\2\u0cc9\u0cca\7\5\2\2\u0cca\u0ccd\5\u0190")
        buf.write("\u00c9\2\u0ccb\u0ccc\7\3\2\2\u0ccc\u0cce\5\u0190\u00c9")
        buf.write("\2\u0ccd\u0ccb\3\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0ccd")
        buf.write("\3\2\2\2\u0ccf\u0cd0\3\2\2\2\u0cd0\u0cd1\3\2\2\2\u0cd1")
        buf.write("\u0cd2\7\6\2\2\u0cd2\u0cd3\7\22\2\2\u0cd3\u0cd4\5\u0146")
        buf.write("\u00a4\2\u0cd4\u0d06\3\2\2\2\u0cd5\u0d06\5\u0190\u00c9")
        buf.write("\2\u0cd6\u0cd7\7\5\2\2\u0cd7\u0cd8\5\u0146\u00a4\2\u0cd8")
        buf.write("\u0cd9\7\6\2\2\u0cd9\u0d06\3\2\2\2\u0cda\u0cdb\7|\2\2")
        buf.write("\u0cdb\u0cdc\7\5\2\2\u0cdc\u0cdd\5\u0190\u00c9\2\u0cdd")
        buf.write("\u0cde\7\u0088\2\2\u0cde\u0cdf\5\u014c\u00a7\2\u0cdf\u0ce0")
        buf.write("\7\6\2\2\u0ce0\u0d06\3\2\2\2\u0ce1\u0ce2\t$\2\2\u0ce2")
        buf.write("\u0ce3\7\5\2\2\u0ce3\u0ce4\5\u014c\u00a7\2\u0ce4\u0ce5")
        buf.write("\t%\2\2\u0ce5\u0ce8\5\u014c\u00a7\2\u0ce6\u0ce7\t&\2\2")
        buf.write("\u0ce7\u0ce9\5\u014c\u00a7\2\u0ce8\u0ce6\3\2\2\2\u0ce8")
        buf.write("\u0ce9\3\2\2\2\u0ce9\u0cea\3\2\2\2\u0cea\u0ceb\7\6\2\2")
        buf.write("\u0ceb\u0d06\3\2\2\2\u0cec\u0ced\7\u0114\2\2\u0ced\u0cef")
        buf.write("\7\5\2\2\u0cee\u0cf0\t\'\2\2\u0cef\u0cee\3\2\2\2\u0cef")
        buf.write("\u0cf0\3\2\2\2\u0cf0\u0cf2\3\2\2\2\u0cf1\u0cf3\5\u014c")
        buf.write("\u00a7\2\u0cf2\u0cf1\3\2\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3")
        buf.write("\u0cf4\3\2\2\2\u0cf4\u0cf5\7\u0088\2\2\u0cf5\u0cf6\5\u014c")
        buf.write("\u00a7\2\u0cf6\u0cf7\7\6\2\2\u0cf7\u0d06\3\2\2\2\u0cf8")
        buf.write("\u0cf9\7\u00cc\2\2\u0cf9\u0cfa\7\5\2\2\u0cfa\u0cfb\5\u014c")
        buf.write("\u00a7\2\u0cfb\u0cfc\7\u00d3\2\2\u0cfc\u0cfd\5\u014c\u00a7")
        buf.write("\2\u0cfd\u0cfe\7\u0088\2\2\u0cfe\u0d01\5\u014c\u00a7\2")
        buf.write("\u0cff\u0d00\7\u0084\2\2\u0d00\u0d02\5\u014c\u00a7\2\u0d01")
        buf.write("\u0cff\3\2\2\2\u0d01\u0d02\3\2\2\2\u0d02\u0d03\3\2\2\2")
        buf.write("\u0d03\u0d04\7\6\2\2\u0d04\u0d06\3\2\2\2\u0d05\u0c4d\3")
        buf.write("\2\2\2\u0d05\u0c4f\3\2\2\2\u0d05\u0c5b\3\2\2\2\u0d05\u0c68")
        buf.write("\3\2\2\2\u0d05\u0c6f\3\2\2\2\u0d05\u0c7c\3\2\2\2\u0d05")
        buf.write("\u0c85\3\2\2\2\u0d05\u0c8e\3\2\2\2\u0d05\u0c95\3\2\2\2")
        buf.write("\u0d05\u0c96\3\2\2\2\u0d05\u0c97\3\2\2\2\u0d05\u0c9b\3")
        buf.write("\2\2\2\u0d05\u0ca5\3\2\2\2\u0d05\u0ca9\3\2\2\2\u0d05\u0cc5")
        buf.write("\3\2\2\2\u0d05\u0cc9\3\2\2\2\u0d05\u0cd5\3\2\2\2\u0d05")
        buf.write("\u0cd6\3\2\2\2\u0d05\u0cda\3\2\2\2\u0d05\u0ce1\3\2\2\2")
        buf.write("\u0d05\u0cec\3\2\2\2\u0d05\u0cf8\3\2\2\2\u0d06\u0d11\3")
        buf.write("\2\2\2\u0d07\u0d08\f\n\2\2\u0d08\u0d09\7\b\2\2\u0d09\u0d0a")
        buf.write("\5\u014c\u00a7\2\u0d0a\u0d0b\7\t\2\2\u0d0b\u0d10\3\2\2")
        buf.write("\2\u0d0c\u0d0d\f\b\2\2\u0d0d\u0d0e\7\7\2\2\u0d0e\u0d10")
        buf.write("\5\u0190\u00c9\2\u0d0f\u0d07\3\2\2\2\u0d0f\u0d0c\3\2\2")
        buf.write("\2\u0d10\u0d13\3\2\2\2\u0d11\u0d0f\3\2\2\2\u0d11\u0d12")
        buf.write("\3\2\2\2\u0d12\u014f\3\2\2\2\u0d13\u0d11\3\2\2\2\u0d14")
        buf.write("\u0d21\7\u00be\2\2\u0d15\u0d21\5\u015c\u00af\2\u0d16\u0d17")
        buf.write("\5\u0190\u00c9\2\u0d17\u0d18\7\u0140\2\2\u0d18\u0d21\3")
        buf.write("\2\2\2\u0d19\u0d21\5\u0196\u00cc\2\u0d1a\u0d21\5\u015a")
        buf.write("\u00ae\2\u0d1b\u0d1d\7\u0140\2\2\u0d1c\u0d1b\3\2\2\2\u0d1d")
        buf.write("\u0d1e\3\2\2\2\u0d1e\u0d1c\3\2\2\2\u0d1e\u0d1f\3\2\2\2")
        buf.write("\u0d1f\u0d21\3\2\2\2\u0d20\u0d14\3\2\2\2\u0d20\u0d15\3")
        buf.write("\2\2\2\u0d20\u0d16\3\2\2\2\u0d20\u0d19\3\2\2\2\u0d20\u0d1a")
        buf.write("\3\2\2\2\u0d20\u0d1c\3\2\2\2\u0d21\u0151\3\2\2\2\u0d22")
        buf.write("\u0d2b\5\u0154\u00ab\2\u0d23\u0d2b\7\u012f\2\2\u0d24\u0d2b")
        buf.write("\7\u0130\2\2\u0d25\u0d2b\7\u0131\2\2\u0d26\u0d2b\7\u0132")
        buf.write("\2\2\u0d27\u0d2b\7\u0133\2\2\u0d28\u0d2b\7\u0134\2\2\u0d29")
        buf.write("\u0d2b\7\u012e\2\2\u0d2a\u0d22\3\2\2\2\u0d2a\u0d23\3\2")
        buf.write("\2\2\u0d2a\u0d24\3\2\2\2\u0d2a\u0d25\3\2\2\2\u0d2a\u0d26")
        buf.write("\3\2\2\2\u0d2a\u0d27\3\2\2\2\u0d2a\u0d28\3\2\2\2\u0d2a")
        buf.write("\u0d29\3\2\2\2\u0d2b\u0153\3\2\2\2\u0d2c\u0d2d\t(\2\2")
        buf.write("\u0d2d\u0155\3\2\2\2\u0d2e\u0d2f\t)\2\2\u0d2f\u0157\3")
        buf.write("\2\2\2\u0d30\u0d31\t*\2\2\u0d31\u0159\3\2\2\2\u0d32\u0d33")
        buf.write("\t+\2\2\u0d33\u015b\3\2\2\2\u0d34\u0d37\7\u009d\2\2\u0d35")
        buf.write("\u0d38\5\u015e\u00b0\2\u0d36\u0d38\5\u0162\u00b2\2\u0d37")
        buf.write("\u0d35\3\2\2\2\u0d37\u0d36\3\2\2\2\u0d37\u0d38\3\2\2\2")
        buf.write("\u0d38\u015d\3\2\2\2\u0d39\u0d3b\5\u0160\u00b1\2\u0d3a")
        buf.write("\u0d3c\5\u0164\u00b3\2\u0d3b\u0d3a\3\2\2\2\u0d3b\u0d3c")
        buf.write("\3\2\2\2\u0d3c\u015f\3\2\2\2\u0d3d\u0d3e\5\u0166\u00b4")
        buf.write("\2\u0d3e\u0d3f\5\u0168\u00b5\2\u0d3f\u0d41\3\2\2\2\u0d40")
        buf.write("\u0d3d\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d40\3\2\2\2")
        buf.write("\u0d42\u0d43\3\2\2\2\u0d43\u0161\3\2\2\2\u0d44\u0d47\5")
        buf.write("\u0164\u00b3\2\u0d45\u0d48\5\u0160\u00b1\2\u0d46\u0d48")
        buf.write("\5\u0164\u00b3\2\u0d47\u0d45\3\2\2\2\u0d47\u0d46\3\2\2")
        buf.write("\2\u0d47\u0d48\3\2\2\2\u0d48\u0163\3\2\2\2\u0d49\u0d4a")
        buf.write("\5\u0166\u00b4\2\u0d4a\u0d4b\5\u0168\u00b5\2\u0d4b\u0d4c")
        buf.write("\7\u010e\2\2\u0d4c\u0d4d\5\u0168\u00b5\2\u0d4d\u0165\3")
        buf.write("\2\2\2\u0d4e\u0d50\t,\2\2\u0d4f\u0d4e\3\2\2\2\u0d4f\u0d50")
        buf.write("\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d54\t\35\2\2\u0d52")
        buf.write("\u0d54\7\u0140\2\2\u0d53\u0d4f\3\2\2\2\u0d53\u0d52\3\2")
        buf.write("\2\2\u0d54\u0167\3\2\2\2\u0d55\u0d5d\7d\2\2\u0d56\u0d5d")
        buf.write("\7\u0091\2\2\u0d57\u0d5d\7\u00b6\2\2\u0d58\u0d5d\7\u00b7")
        buf.write("\2\2\u0d59\u0d5d\7\u00f1\2\2\u0d5a\u0d5d\7\u012b\2\2\u0d5b")
        buf.write("\u0d5d\5\u0190\u00c9\2\u0d5c\u0d55\3\2\2\2\u0d5c\u0d56")
        buf.write("\3\2\2\2\u0d5c\u0d57\3\2\2\2\u0d5c\u0d58\3\2\2\2\u0d5c")
        buf.write("\u0d59\3\2\2\2\u0d5c\u0d5a\3\2\2\2\u0d5c\u0d5b\3\2\2\2")
        buf.write("\u0d5d\u0169\3\2\2\2\u0d5e\u0d62\7\u0082\2\2\u0d5f\u0d60")
        buf.write("\7\61\2\2\u0d60\u0d62\5\u018c\u00c7\2\u0d61\u0d5e\3\2")
        buf.write("\2\2\u0d61\u0d5f\3\2\2\2\u0d62\u016b\3\2\2\2\u0d63\u0d64")
        buf.write("\79\2\2\u0d64\u0d65\7\u0131\2\2\u0d65\u0d66\5\u016c\u00b7")
        buf.write("\2\u0d66\u0d67\7\u0133\2\2\u0d67\u0d86\3\2\2\2\u0d68\u0d69")
        buf.write("\7\u00b3\2\2\u0d69\u0d6a\7\u0131\2\2\u0d6a\u0d6b\5\u016c")
        buf.write("\u00b7\2\u0d6b\u0d6c\7\3\2\2\u0d6c\u0d6d\5\u016c\u00b7")
        buf.write("\2\u0d6d\u0d6e\7\u0133\2\2\u0d6e\u0d86\3\2\2\2\u0d6f\u0d76")
        buf.write("\7\u0104\2\2\u0d70\u0d72\7\u0131\2\2\u0d71\u0d73\5\u0176")
        buf.write("\u00bc\2\u0d72\u0d71\3\2\2\2\u0d72\u0d73\3\2\2\2\u0d73")
        buf.write("\u0d74\3\2\2\2\u0d74\u0d77\7\u0133\2\2\u0d75\u0d77\7\u012f")
        buf.write("\2\2\u0d76\u0d70\3\2\2\2\u0d76\u0d75\3\2\2\2\u0d77\u0d86")
        buf.write("\3\2\2\2\u0d78\u0d83\5\u0190\u00c9\2\u0d79\u0d7a\7\5\2")
        buf.write("\2\u0d7a\u0d7f\7\u0144\2\2\u0d7b\u0d7c\7\3\2\2\u0d7c\u0d7e")
        buf.write("\7\u0144\2\2\u0d7d\u0d7b\3\2\2\2\u0d7e\u0d81\3\2\2\2\u0d7f")
        buf.write("\u0d7d\3\2\2\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d82\3\2\2\2")
        buf.write("\u0d81\u0d7f\3\2\2\2\u0d82\u0d84\7\6\2\2\u0d83\u0d79\3")
        buf.write("\2\2\2\u0d83\u0d84\3\2\2\2\u0d84\u0d86\3\2\2\2\u0d85\u0d63")
        buf.write("\3\2\2\2\u0d85\u0d68\3\2\2\2\u0d85\u0d6f\3\2\2\2\u0d85")
        buf.write("\u0d78\3\2\2\2\u0d86\u016d\3\2\2\2\u0d87\u0d8c\5\u0170")
        buf.write("\u00b9\2\u0d88\u0d89\7\3\2\2\u0d89\u0d8b\5\u0170\u00b9")
        buf.write("\2\u0d8a\u0d88\3\2\2\2\u0d8b\u0d8e\3\2\2\2\u0d8c\u0d8a")
        buf.write("\3\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u016f\3\2\2\2\u0d8e")
        buf.write("\u0d8c\3\2\2\2\u0d8f\u0d90\5\u0136\u009c\2\u0d90\u0d93")
        buf.write("\5\u016c\u00b7\2\u0d91\u0d92\7\u00bd\2\2\u0d92\u0d94\7")
        buf.write("\u00be\2\2\u0d93\u0d91\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94")
        buf.write("\u0d96\3\2\2\2\u0d95\u0d97\5\u00a6T\2\u0d96\u0d95\3\2")
        buf.write("\2\2\u0d96\u0d97\3\2\2\2\u0d97\u0d99\3\2\2\2\u0d98\u0d9a")
        buf.write("\5\u016a\u00b6\2\u0d99\u0d98\3\2\2\2\u0d99\u0d9a\3\2\2")
        buf.write("\2\u0d9a\u0171\3\2\2\2\u0d9b\u0da0\5\u0174\u00bb\2\u0d9c")
        buf.write("\u0d9d\7\3\2\2\u0d9d\u0d9f\5\u0174\u00bb\2\u0d9e\u0d9c")
        buf.write("\3\2\2\2\u0d9f\u0da2\3\2\2\2\u0da0\u0d9e\3\2\2\2\u0da0")
        buf.write("\u0da1\3\2\2\2\u0da1\u0173\3\2\2\2\u0da2\u0da0\3\2\2\2")
        buf.write("\u0da3\u0da4\5\u018c\u00c7\2\u0da4\u0da7\5\u016c\u00b7")
        buf.write("\2\u0da5\u0da6\7\u00bd\2\2\u0da6\u0da8\7\u00be\2\2\u0da7")
        buf.write("\u0da5\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0daa\3\2\2\2")
        buf.write("\u0da9\u0dab\5\u00a6T\2\u0daa\u0da9\3\2\2\2\u0daa\u0dab")
        buf.write("\3\2\2\2\u0dab\u0175\3\2\2\2\u0dac\u0db1\5\u0178\u00bd")
        buf.write("\2\u0dad\u0dae\7\3\2\2\u0dae\u0db0\5\u0178\u00bd\2\u0daf")
        buf.write("\u0dad\3\2\2\2\u0db0\u0db3\3\2\2\2\u0db1\u0daf\3\2\2\2")
        buf.write("\u0db1\u0db2\3\2\2\2\u0db2\u0177\3\2\2\2\u0db3\u0db1\3")
        buf.write("\2\2\2\u0db4\u0db5\5\u0190\u00c9\2\u0db5\u0db6\7\4\2\2")
        buf.write("\u0db6\u0db9\5\u016c\u00b7\2\u0db7\u0db8\7\u00bd\2\2\u0db8")
        buf.write("\u0dba\7\u00be\2\2\u0db9\u0db7\3\2\2\2\u0db9\u0dba\3\2")
        buf.write("\2\2\u0dba\u0dbc\3\2\2\2\u0dbb\u0dbd\5\u00a6T\2\u0dbc")
        buf.write("\u0dbb\3\2\2\2\u0dbc\u0dbd\3\2\2\2\u0dbd\u0179\3\2\2\2")
        buf.write("\u0dbe\u0dbf\7\u0127\2\2\u0dbf\u0dc0\5\u0146\u00a4\2\u0dc0")
        buf.write("\u0dc1\7\u010d\2\2\u0dc1\u0dc2\5\u0146\u00a4\2\u0dc2\u017b")
        buf.write("\3\2\2\2\u0dc3\u0dc4\7\u0129\2\2\u0dc4\u0dc9\5\u017e\u00c0")
        buf.write("\2\u0dc5\u0dc6\7\3\2\2\u0dc6\u0dc8\5\u017e\u00c0\2\u0dc7")
        buf.write("\u0dc5\3\2\2\2\u0dc8\u0dcb\3\2\2\2\u0dc9\u0dc7\3\2\2\2")
        buf.write("\u0dc9\u0dca\3\2\2\2\u0dca\u017d\3\2\2\2\u0dcb\u0dc9\3")
        buf.write("\2\2\2\u0dcc\u0dcd\5\u018c\u00c7\2\u0dcd\u0dce\7:\2\2")
        buf.write("\u0dce\u0dcf\5\u0180\u00c1\2\u0dcf\u017f\3\2\2\2\u0dd0")
        buf.write("\u0dff\5\u018c\u00c7\2\u0dd1\u0dd2\7\5\2\2\u0dd2\u0dd3")
        buf.write("\5\u018c\u00c7\2\u0dd3\u0dd4\7\6\2\2\u0dd4\u0dff\3\2\2")
        buf.write("\2\u0dd5\u0df8\7\5\2\2\u0dd6\u0dd7\7J\2\2\u0dd7\u0dd8")
        buf.write("\7B\2\2\u0dd8\u0ddd\5\u0146\u00a4\2\u0dd9\u0dda\7\3\2")
        buf.write("\2\u0dda\u0ddc\5\u0146\u00a4\2\u0ddb\u0dd9\3\2\2\2\u0ddc")
        buf.write("\u0ddf\3\2\2\2\u0ddd\u0ddb\3\2\2\2\u0ddd\u0dde\3\2\2\2")
        buf.write("\u0dde\u0df9\3\2\2\2\u0ddf\u0ddd\3\2\2\2\u0de0\u0de1\t")
        buf.write("-\2\2\u0de1\u0de2\7B\2\2\u0de2\u0de7\5\u0146\u00a4\2\u0de3")
        buf.write("\u0de4\7\3\2\2\u0de4\u0de6\5\u0146\u00a4\2\u0de5\u0de3")
        buf.write("\3\2\2\2\u0de6\u0de9\3\2\2\2\u0de7\u0de5\3\2\2\2\u0de7")
        buf.write("\u0de8\3\2\2\2\u0de8\u0deb\3\2\2\2\u0de9\u0de7\3\2\2\2")
        buf.write("\u0dea\u0de0\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0df6\3")
        buf.write("\2\2\2\u0dec\u0ded\t.\2\2\u0ded\u0dee\7B\2\2\u0dee\u0df3")
        buf.write("\5\u00dep\2\u0def\u0df0\7\3\2\2\u0df0\u0df2\5\u00dep\2")
        buf.write("\u0df1\u0def\3\2\2\2\u0df2\u0df5\3\2\2\2\u0df3\u0df1\3")
        buf.write("\2\2\2\u0df3\u0df4\3\2\2\2\u0df4\u0df7\3\2\2\2\u0df5\u0df3")
        buf.write("\3\2\2\2\u0df6\u0dec\3\2\2\2\u0df6\u0df7\3\2\2\2\u0df7")
        buf.write("\u0df9\3\2\2\2\u0df8\u0dd6\3\2\2\2\u0df8\u0dea\3\2\2\2")
        buf.write("\u0df9\u0dfb\3\2\2\2\u0dfa\u0dfc\5\u0182\u00c2\2\u0dfb")
        buf.write("\u0dfa\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0dfd\3\2\2\2")
        buf.write("\u0dfd\u0dff\7\6\2\2\u0dfe\u0dd0\3\2\2\2\u0dfe\u0dd1\3")
        buf.write("\2\2\2\u0dfe\u0dd5\3\2\2\2\u0dff\u0181\3\2\2\2\u0e00\u0e01")
        buf.write("\7\u00db\2\2\u0e01\u0e11\5\u0184\u00c3\2\u0e02\u0e03\7")
        buf.write("\u00ef\2\2\u0e03\u0e11\5\u0184\u00c3\2\u0e04\u0e05\7\u00db")
        buf.write("\2\2\u0e05\u0e06\7>\2\2\u0e06\u0e07\5\u0184\u00c3\2\u0e07")
        buf.write("\u0e08\7\65\2\2\u0e08\u0e09\5\u0184\u00c3\2\u0e09\u0e11")
        buf.write("\3\2\2\2\u0e0a\u0e0b\7\u00ef\2\2\u0e0b\u0e0c\7>\2\2\u0e0c")
        buf.write("\u0e0d\5\u0184\u00c3\2\u0e0d\u0e0e\7\65\2\2\u0e0e\u0e0f")
        buf.write("\5\u0184\u00c3\2\u0e0f\u0e11\3\2\2\2\u0e10\u0e00\3\2\2")
        buf.write("\2\u0e10\u0e02\3\2\2\2\u0e10\u0e04\3\2\2\2\u0e10\u0e0a")
        buf.write("\3\2\2\2\u0e11\u0183\3\2\2\2\u0e12\u0e13\7\u0119\2\2\u0e13")
        buf.write("\u0e1a\t/\2\2\u0e14\u0e15\7\\\2\2\u0e15\u0e1a\7\u00ee")
        buf.write("\2\2\u0e16\u0e17\5\u0146\u00a4\2\u0e17\u0e18\t/\2\2\u0e18")
        buf.write("\u0e1a\3\2\2\2\u0e19\u0e12\3\2\2\2\u0e19\u0e14\3\2\2\2")
        buf.write("\u0e19\u0e16\3\2\2\2\u0e1a\u0185\3\2\2\2\u0e1b\u0e20\5")
        buf.write("\u018a\u00c6\2\u0e1c\u0e1d\7\3\2\2\u0e1d\u0e1f\5\u018a")
        buf.write("\u00c6\2\u0e1e\u0e1c\3\2\2\2\u0e1f\u0e22\3\2\2\2\u0e20")
        buf.write("\u0e1e\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0187\3\2\2\2")
        buf.write("\u0e22\u0e20\3\2\2\2\u0e23\u0e28\5\u018a\u00c6\2\u0e24")
        buf.write("\u0e28\7\u0080\2\2\u0e25\u0e28\7\u00a7\2\2\u0e26\u0e28")
        buf.write("\7\u00e8\2\2\u0e27\u0e23\3\2\2\2\u0e27\u0e24\3\2\2\2\u0e27")
        buf.write("\u0e25\3\2\2\2\u0e27\u0e26\3\2\2\2\u0e28\u0189\3\2\2\2")
        buf.write("\u0e29\u0e2e\5\u0190\u00c9\2\u0e2a\u0e2b\7\7\2\2\u0e2b")
        buf.write("\u0e2d\5\u0190\u00c9\2\u0e2c\u0e2a\3\2\2\2\u0e2d\u0e30")
        buf.write("\3\2\2\2\u0e2e\u0e2c\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f")
        buf.write("\u018b\3\2\2\2\u0e30\u0e2e\3\2\2\2\u0e31\u0e32\5\u0190")
        buf.write("\u00c9\2\u0e32\u0e33\5\u018e\u00c8\2\u0e33\u018d\3\2\2")
        buf.write("\2\u0e34\u0e35\7\u0136\2\2\u0e35\u0e37\5\u0190\u00c9\2")
        buf.write("\u0e36\u0e34\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0e36\3")
        buf.write("\2\2\2\u0e38\u0e39\3\2\2\2\u0e39\u0e3c\3\2\2\2\u0e3a\u0e3c")
        buf.write("\3\2\2\2\u0e3b\u0e36\3\2\2\2\u0e3b\u0e3a\3\2\2\2\u0e3c")
        buf.write("\u018f\3\2\2\2\u0e3d\u0e41\5\u0192\u00ca\2\u0e3e\u0e3f")
        buf.write("\6\u00c9\24\2\u0e3f\u0e41\5\u019c\u00cf\2\u0e40\u0e3d")
        buf.write("\3\2\2\2\u0e40\u0e3e\3\2\2\2\u0e41\u0191\3\2\2\2\u0e42")
        buf.write("\u0e49\7\u0149\2\2\u0e43\u0e49\5\u0194\u00cb\2\u0e44\u0e45")
        buf.write("\6\u00ca\25\2\u0e45\u0e49\5\u019a\u00ce\2\u0e46\u0e47")
        buf.write("\6\u00ca\26\2\u0e47\u0e49\5\u019e\u00d0\2\u0e48\u0e42")
        buf.write("\3\2\2\2\u0e48\u0e43\3\2\2\2\u0e48\u0e44\3\2\2\2\u0e48")
        buf.write("\u0e46\3\2\2\2\u0e49\u0193\3\2\2\2\u0e4a\u0e4b\7\u014a")
        buf.write("\2\2\u0e4b\u0195\3\2\2\2\u0e4c\u0e4e\6\u00cc\27\2\u0e4d")
        buf.write("\u0e4f\7\u0136\2\2\u0e4e\u0e4d\3\2\2\2\u0e4e\u0e4f\3\2")
        buf.write("\2\2\u0e4f\u0e50\3\2\2\2\u0e50\u0e74\7\u0145\2\2\u0e51")
        buf.write("\u0e53\6\u00cc\30\2\u0e52\u0e54\7\u0136\2\2\u0e53\u0e52")
        buf.write("\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e55\3\2\2\2\u0e55")
        buf.write("\u0e74\7\u0146\2\2\u0e56\u0e58\6\u00cc\31\2\u0e57\u0e59")
        buf.write("\7\u0136\2\2\u0e58\u0e57\3\2\2\2\u0e58\u0e59\3\2\2\2\u0e59")
        buf.write("\u0e5a\3\2\2\2\u0e5a\u0e74\t\60\2\2\u0e5b\u0e5d\7\u0136")
        buf.write("\2\2\u0e5c\u0e5b\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d\u0e5e")
        buf.write("\3\2\2\2\u0e5e\u0e74\7\u0144\2\2\u0e5f\u0e61\7\u0136\2")
        buf.write("\2\u0e60\u0e5f\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e62")
        buf.write("\3\2\2\2\u0e62\u0e74\7\u0141\2\2\u0e63\u0e65\7\u0136\2")
        buf.write("\2\u0e64\u0e63\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66")
        buf.write("\3\2\2\2\u0e66\u0e74\7\u0142\2\2\u0e67\u0e69\7\u0136\2")
        buf.write("\2\u0e68\u0e67\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0e6a")
        buf.write("\3\2\2\2\u0e6a\u0e74\7\u0143\2\2\u0e6b\u0e6d\7\u0136\2")
        buf.write("\2\u0e6c\u0e6b\3\2\2\2\u0e6c\u0e6d\3\2\2\2\u0e6d\u0e6e")
        buf.write("\3\2\2\2\u0e6e\u0e74\7\u0147\2\2\u0e6f\u0e71\7\u0136\2")
        buf.write("\2\u0e70\u0e6f\3\2\2\2\u0e70\u0e71\3\2\2\2\u0e71\u0e72")
        buf.write("\3\2\2\2\u0e72\u0e74\7\u0148\2\2\u0e73\u0e4c\3\2\2\2\u0e73")
        buf.write("\u0e51\3\2\2\2\u0e73\u0e56\3\2\2\2\u0e73\u0e5c\3\2\2\2")
        buf.write("\u0e73\u0e60\3\2\2\2\u0e73\u0e64\3\2\2\2\u0e73\u0e68\3")
        buf.write("\2\2\2\u0e73\u0e6c\3\2\2\2\u0e73\u0e70\3\2\2\2\u0e74\u0197")
        buf.write("\3\2\2\2\u0e75\u0e76\7\u0117\2\2\u0e76\u0e7d\5\u016c\u00b7")
        buf.write("\2\u0e77\u0e7d\5\u00a6T\2\u0e78\u0e7d\5\u016a\u00b6\2")
        buf.write("\u0e79\u0e7a\t\61\2\2\u0e7a\u0e7b\7\u00bd\2\2\u0e7b\u0e7d")
        buf.write("\7\u00be\2\2\u0e7c\u0e75\3\2\2\2\u0e7c\u0e77\3\2\2\2\u0e7c")
        buf.write("\u0e78\3\2\2\2\u0e7c\u0e79\3\2\2\2\u0e7d\u0199\3\2\2\2")
        buf.write("\u0e7e\u0e7f\t\62\2\2\u0e7f\u019b\3\2\2\2\u0e80\u0e81")
        buf.write("\t\63\2\2\u0e81\u019d\3\2\2\2\u0e82\u0e83\t\64\2\2\u0e83")
        buf.write("\u019f\3\2\2\2\u01ef\u01a3\u01af\u01b2\u01b6\u01b9\u01c7")
        buf.write("\u01cb\u01ce\u01d4\u01d7\u01df\u01e2\u01e6\u01e9\u01ed")
        buf.write("\u01f4\u01fb\u0202\u0206\u020f\u0213\u021a\u021f\u0223")
        buf.write("\u0227\u022e\u0236\u023a\u023e\u0242\u0245\u024a\u024e")
        buf.write("\u0252\u0255\u0259\u025d\u0260\u0264\u0267\u026b\u026f")
        buf.write("\u0272\u0277\u027d\u0286\u028b\u028e\u0291\u0294\u0298")
        buf.write("\u029b\u029e\u02a1\u02a6\u02a9\u02ac\u02af\u02b2\u02b5")
        buf.write("\u02bc\u02c5\u02cd\u02d0\u02db\u02e3\u02e8\u02ec\u02f1")
        buf.write("\u02f5\u02fc\u0307\u030a\u0310\u0314\u0317\u031e\u0320")
        buf.write("\u032a\u0331\u0335\u0339\u033e\u0343\u0346\u034d\u0355")
        buf.write("\u035a\u0363\u036b\u0370\u0377\u0389\u0394\u039d\u03a3")
        buf.write("\u03aa\u03b3\u03bb\u03bf\u03c5\u03cd\u03dd\u03f6\u03fb")
        buf.write("\u0403\u040b\u040d\u0421\u0425\u042b\u042e\u0431\u0438")
        buf.write("\u043d\u0440\u0447\u0453\u045c\u045e\u0462\u0465\u046c")
        buf.write("\u0477\u0479\u0481\u0486\u0489\u048f\u049a\u04da\u04e3")
        buf.write("\u04e7\u04ed\u04f1\u04f6\u04fc\u0508\u0510\u0516\u0523")
        buf.write("\u0528\u0538\u053f\u0543\u0549\u0558\u055c\u0562\u0568")
        buf.write("\u056b\u056e\u0574\u0578\u0580\u0582\u058b\u058e\u0597")
        buf.write("\u059c\u05a2\u05a9\u05ac\u05b2\u05bd\u05c0\u05c4\u05c9")
        buf.write("\u05ce\u05d5\u05d8\u05db\u05e2\u05e7\u05f0\u05f8\u05fe")
        buf.write("\u0601\u0604\u060a\u060e\u0612\u0616\u0618\u0620\u0628")
        buf.write("\u062e\u0634\u0637\u063b\u063e\u0642\u065b\u065e\u0662")
        buf.write("\u0668\u066b\u066e\u0674\u067c\u0681\u0687\u068d\u0699")
        buf.write("\u069c\u06a3\u06aa\u06b2\u06b5\u06bd\u06c1\u06c8\u073c")
        buf.write("\u0744\u074c\u0755\u075f\u0763\u0766\u076c\u0772\u077e")
        buf.write("\u078a\u078f\u0798\u07a0\u07a7\u07a9\u07ae\u07b2\u07b7")
        buf.write("\u07bc\u07c1\u07c4\u07c9\u07cd\u07d2\u07d4\u07d8\u07e1")
        buf.write("\u07e9\u07f2\u07f9\u0802\u0807\u080a\u081d\u081f\u0828")
        buf.write("\u082f\u0832\u0839\u083d\u0843\u084b\u0856\u0861\u0868")
        buf.write("\u086e\u087b\u0882\u0889\u0895\u089d\u08a3\u08a6\u08af")
        buf.write("\u08b2\u08bb\u08be\u08c7\u08ca\u08d3\u08d6\u08d9\u08de")
        buf.write("\u08e0\u08e8\u08ee\u08f5\u08fc\u08ff\u0901\u0909\u090d")
        buf.write("\u0911\u0917\u091b\u0923\u0927\u092a\u092d\u0930\u0934")
        buf.write("\u0939\u0940\u0944\u0947\u094a\u094d\u094f\u0952\u095e")
        buf.write("\u0961\u0965\u096f\u0973\u0975\u0978\u097c\u0982\u0986")
        buf.write("\u0991\u099b\u09a7\u09b6\u09bb\u09c2\u09d2\u09d7\u09e4")
        buf.write("\u09e9\u09f1\u09f7\u09fb\u0a04\u0a13\u0a18\u0a24\u0a29")
        buf.write("\u0a31\u0a34\u0a38\u0a46\u0a53\u0a58\u0a5c\u0a5f\u0a64")
        buf.write("\u0a6d\u0a70\u0a75\u0a7c\u0a7f\u0a87\u0a8e\u0a95\u0a98")
        buf.write("\u0a9d\u0aa0\u0aa5\u0aa9\u0aac\u0aaf\u0ab5\u0aba\u0abf")
        buf.write("\u0ad1\u0ad3\u0ad6\u0ae1\u0aea\u0af1\u0af9\u0b00\u0b04")
        buf.write("\u0b0c\u0b14\u0b1a\u0b22\u0b2e\u0b31\u0b37\u0b3b\u0b3d")
        buf.write("\u0b46\u0b52\u0b54\u0b5b\u0b62\u0b68\u0b6e\u0b70\u0b77")
        buf.write("\u0b7f\u0b85\u0b8c\u0b92\u0b96\u0b98\u0b9f\u0ba8\u0bb5")
        buf.write("\u0bba\u0bbe\u0bcc\u0bce\u0bd6\u0bd8\u0bdc\u0be4\u0bed")
        buf.write("\u0bf3\u0bfb\u0c00\u0c0c\u0c11\u0c14\u0c1a\u0c1e\u0c23")
        buf.write("\u0c28\u0c2d\u0c33\u0c48\u0c4a\u0c53\u0c57\u0c60\u0c64")
        buf.write("\u0c76\u0c79\u0c81\u0c8a\u0ca1\u0cac\u0cb3\u0cb6\u0cbf")
        buf.write("\u0cc3\u0ccf\u0ce8\u0cef\u0cf2\u0d01\u0d05\u0d0f\u0d11")
        buf.write("\u0d1e\u0d20\u0d2a\u0d37\u0d3b\u0d42\u0d47\u0d4f\u0d53")
        buf.write("\u0d5c\u0d61\u0d72\u0d76\u0d7f\u0d83\u0d85\u0d8c\u0d93")
        buf.write("\u0d96\u0d99\u0da0\u0da7\u0daa\u0db1\u0db9\u0dbc\u0dc9")
        buf.write("\u0ddd\u0de7\u0dea\u0df3\u0df6\u0df8\u0dfb\u0dfe\u0e10")
        buf.write("\u0e19\u0e20\u0e27\u0e2e\u0e38\u0e3b\u0e40\u0e48\u0e4e")
        buf.write("\u0e53\u0e58\u0e5c\u0e60\u0e64\u0e68\u0e6c\u0e70\u0e73")
        buf.write("\u0e7c")
        return buf.getvalue()


class fugue_sqlParser ( Parser ):

    grammarFileName = "fugue_sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "':'", "'('", "')'", "'.'", "'['", 
                     "']'", "'{'", "'}'", "'true'", "'false'", "'null'", 
                     "';'", "'/*+'", "'*/'", "'->'", "'FILL'", "'HASH'", 
                     "'RAND'", "'EVEN'", "'PRESORT'", "'PERSIST'", "'BROADCAST'", 
                     "'PARAMS'", "'PROCESS'", "'OUTPUT'", "'OUTTRANSFORM'", 
                     "'ROWCOUNT'", "'CONCURRENCY'", "'PREPARTITION'", "'ZIP'", 
                     "'PRINT'", "'TITLE'", "'SAVE'", "'APPEND'", "'PARQUET'", 
                     "'CSV'", "'JSON'", "'SINGLE'", "':='", "'CHECKPOINT'", 
                     "'WEAK'", "'STRONG'", "'DETERMINISTIC'", "'YIELD'", 
                     "'ADD'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", 
                     "'AND'", "'ANTI'", "'ANY'", "'ARCHIVE'", "'ARRAY'", 
                     "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", "'BETWEEN'", 
                     "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'CACHE'", 
                     "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHECK'", 
                     "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", 
                     "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
                     "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", 
                     "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'DATA'", "'DATABASE'", "<INVALID>", "'DAY'", "'DBPROPERTIES'", 
                     "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
                     "'DISTRIBUTE'", "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", 
                     "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", "'EXISTS'", 
                     "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", 
                     "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", 
                     "'FILEFORMAT'", "'FIRST'", "'FOLLOWING'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", "'FULL'", 
                     "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", 
                     "'GROUP'", "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", 
                     "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", 
                     "'INNER'", "'INPATH'", "'INPUTFORMAT'", "'INSERT'", 
                     "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITEMS'", 
                     "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", "'LAZY'", 
                     "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINES'", 
                     "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", 
                     "'LOCKS'", "'LOGICAL'", "'MACRO'", "'MAP'", "'MATCHED'", 
                     "'MERGE'", "'MINUTE'", "'MONTH'", "'MSCK'", "'NAMESPACE'", 
                     "'NAMESPACES'", "'NATURAL'", "'NO'", "<INVALID>", "'NULL'", 
                     "'NULLS'", "'OF'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", 
                     "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", 
                     "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
                     "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENT'", 
                     "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", 
                     "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", 
                     "'QUERY'", "'RANGE'", "'RECORDREADER'", "'RECORDWRITER'", 
                     "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
                     "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", "'RESTRICT'", 
                     "'REVOKE'", "'RIGHT'", "<INVALID>", "'ROLE'", "'ROLES'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEMA'", 
                     "'SECOND'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
                     "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", "'SORT'", 
                     "'SORTED'", "'START'", "'STATISTICS'", "'STORED'", 
                     "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TO'", "'TOUCH'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNSET'", "'UPDATE'", "'USE'", 
                     "'USER'", "'USING'", "'VALUES'", "'VIEW'", "'VIEWS'", 
                     "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'YEAR'", 
                     "'='", "'=='", "'<=>'", "'<>'", "'!='", "'<'", "<INVALID>", 
                     "'>'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'DIV'", "'~'", "'&'", "'|'", "'||'", "'^'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "FILL", "HASH", "RAND", "EVEN", "PRESORT", 
                      "PERSIST", "BROADCAST", "PARAMS", "PROCESS", "OUTPUT", 
                      "OUTTRANSFORM", "ROWCOUNT", "CONCURRENCY", "PREPARTITION", 
                      "ZIP", "PRINT", "TITLE", "SAVE", "APPEND", "PARQUET", 
                      "CSV", "JSON", "SINGLE", "COLONEQUAL", "CHECKPOINT", 
                      "WEAK", "STRONG", "DETERMINISTIC", "YIELD", "ADD", 
                      "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANTI", 
                      "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", "AT", "AUTHORIZATION", 
                      "BETWEEN", "BOTH", "BUCKET", "BUCKETS", "BY", "CACHE", 
                      "CASCADE", "CASE", "CAST", "CHANGE", "CHECK", "CLEAR", 
                      "CLUSTER", "CLUSTERED", "CODEGEN", "COLLATE", "COLLECTION", 
                      "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMPACT", 
                      "COMPACTIONS", "COMPUTE", "CONCATENATE", "CONSTRAINT", 
                      "COST", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "DATA", "DATABASE", "DATABASES", "DAY", "DBPROPERTIES", 
                      "DEFINED", "DELETE", "DELIMITED", "DESC", "DESCRIBE", 
                      "DFS", "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE", 
                      "DROP", "ELSE", "END", "ESCAPE", "ESCAPED", "EXCEPT", 
                      "EXCHANGE", "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", 
                      "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", 
                      "FILTER", "FILEFORMAT", "FIRST", "FOLLOWING", "FOR", 
                      "FOREIGN", "FORMAT", "FORMATTED", "FROM", "FULL", 
                      "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANT", "GROUP", 
                      "GROUPING", "HAVING", "HOUR", "IF", "IGNORE", "IMPORT", 
                      "IN", "INDEX", "INDEXES", "INNER", "INPATH", "INPUTFORMAT", 
                      "INSERT", "INTERSECT", "INTERVAL", "INTO", "IS", "ITEMS", 
                      "JOIN", "KEYS", "LAST", "LATERAL", "LAZY", "LEADING", 
                      "LEFT", "LIKE", "LIMIT", "LINES", "LIST", "LOAD", 
                      "LOCAL", "LOCATION", "LOCK", "LOCKS", "LOGICAL", "MACRO", 
                      "MAP", "MATCHED", "MERGE", "MINUTE", "MONTH", "MSCK", 
                      "NAMESPACE", "NAMESPACES", "NATURAL", "NO", "NOT", 
                      "NULL", "NULLS", "OF", "ON", "ONLY", "OPTION", "OPTIONS", 
                      "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", "OVER", 
                      "OVERLAPS", "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", 
                      "PARTITIONS", "PERCENTLIT", "PIVOT", "PLACING", "POSITION", 
                      "PRECEDING", "PRIMARY", "PRINCIPALS", "PROPERTIES", 
                      "PURGE", "QUERY", "RANGE", "RECORDREADER", "RECORDWRITER", 
                      "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME", 
                      "REPAIR", "REPLACE", "RESET", "RESTRICT", "REVOKE", 
                      "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
                      "ROW", "ROWS", "SCHEMA", "SECOND", "SELECT", "SEMI", 
                      "SEPARATED", "SERDE", "SERDEPROPERTIES", "SESSION_USER", 
                      "SET", "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", 
                      "SORT", "SORTED", "START", "STATISTICS", "STORED", 
                      "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING", "TABLE", 
                      "TABLES", "TABLESAMPLE", "TBLPROPERTIES", "TEMPORARY", 
                      "TERMINATED", "THEN", "TO", "TOUCH", "TRAILING", "TRANSACTION", 
                      "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", "UNION", 
                      "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", "UPDATE", 
                      "USE", "USER", "USING", "VALUES", "VIEW", "VIEWS", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "YEAR", "EQUAL", 
                      "DOUBLEEQUAL", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_fugueLanguage = 0
    RULE_fugueSingleStatement = 1
    RULE_fugueSingleTask = 2
    RULE_fugueNestableTask = 3
    RULE_fugueNestableTaskCollectionNoSelect = 4
    RULE_fugueTransformTask = 5
    RULE_fugueProcessTask = 6
    RULE_fugueSaveAndUseTask = 7
    RULE_fugueRenameColumnsTask = 8
    RULE_fugueAlterColumnsTask = 9
    RULE_fugueDropColumnsTask = 10
    RULE_fugueDropnaTask = 11
    RULE_fugueFillnaTask = 12
    RULE_fugueZipTask = 13
    RULE_fugueCreateTask = 14
    RULE_fugueCreateDataTask = 15
    RULE_fugueLoadTask = 16
    RULE_fugueOutputTask = 17
    RULE_fuguePrintTask = 18
    RULE_fugueSaveTask = 19
    RULE_fugueOutputTransformTask = 20
    RULE_fugueSingleFile = 21
    RULE_fugueLoadColumns = 22
    RULE_fugueSaveMode = 23
    RULE_fugueFileFormat = 24
    RULE_fuguePath = 25
    RULE_fugueCheckpoint = 26
    RULE_fugueCheckpointNamespace = 27
    RULE_fugueYield = 28
    RULE_fugueBroadcast = 29
    RULE_fugueDataFrames = 30
    RULE_fugueDataFramePair = 31
    RULE_fugueDataFrame = 32
    RULE_fugueAssignment = 33
    RULE_fugueAssignmentSign = 34
    RULE_fugueSingleOutputExtensionCommonWild = 35
    RULE_fugueSingleOutputExtensionCommon = 36
    RULE_fugueExtension = 37
    RULE_fugueZipType = 38
    RULE_fuguePrepartition = 39
    RULE_fuguePartitionAlgo = 40
    RULE_fuguePartitionNum = 41
    RULE_fuguePartitionNumber = 42
    RULE_fugueParams = 43
    RULE_fugueCols = 44
    RULE_fugueColsSort = 45
    RULE_fugueColSort = 46
    RULE_fugueColumnIdentifier = 47
    RULE_fugueRenameExpression = 48
    RULE_fugueWildSchema = 49
    RULE_fugueWildSchemaPair = 50
    RULE_fugueSchema = 51
    RULE_fugueSchemaPair = 52
    RULE_fugueSchemaKey = 53
    RULE_fugueSchemaType = 54
    RULE_fugueRenamePair = 55
    RULE_fugueJson = 56
    RULE_fugueJsonObj = 57
    RULE_fugueJsonPairs = 58
    RULE_fugueJsonPair = 59
    RULE_fugueJsonKey = 60
    RULE_fugueJsonArray = 61
    RULE_fugueJsonValue = 62
    RULE_fugueJsonNumber = 63
    RULE_fugueJsonString = 64
    RULE_fugueJsonBool = 65
    RULE_fugueJsonNull = 66
    RULE_fugueIdentifier = 67
    RULE_singleStatement = 68
    RULE_singleExpression = 69
    RULE_singleTableIdentifier = 70
    RULE_singleMultipartIdentifier = 71
    RULE_singleFunctionIdentifier = 72
    RULE_singleDataType = 73
    RULE_singleTableSchema = 74
    RULE_statement = 75
    RULE_unsupportedHiveNativeCommands = 76
    RULE_createTableHeader = 77
    RULE_replaceTableHeader = 78
    RULE_bucketSpec = 79
    RULE_skewSpec = 80
    RULE_locationSpec = 81
    RULE_commentSpec = 82
    RULE_query = 83
    RULE_insertInto = 84
    RULE_partitionSpecLocation = 85
    RULE_partitionSpec = 86
    RULE_partitionVal = 87
    RULE_namespace = 88
    RULE_describeFuncName = 89
    RULE_describeColName = 90
    RULE_ctes = 91
    RULE_namedQuery = 92
    RULE_tableProvider = 93
    RULE_createTableClauses = 94
    RULE_tablePropertyList = 95
    RULE_tableProperty = 96
    RULE_tablePropertyKey = 97
    RULE_tablePropertyValue = 98
    RULE_constantList = 99
    RULE_nestedConstantList = 100
    RULE_createFileFormat = 101
    RULE_fileFormat = 102
    RULE_storageHandler = 103
    RULE_resource = 104
    RULE_dmlStatementNoWith = 105
    RULE_queryOrganization = 106
    RULE_multiInsertQueryBody = 107
    RULE_queryTerm = 108
    RULE_queryPrimary = 109
    RULE_sortItem = 110
    RULE_fromStatement = 111
    RULE_fromStatementBody = 112
    RULE_querySpecification = 113
    RULE_optionalFromClause = 114
    RULE_transformClause = 115
    RULE_selectClause = 116
    RULE_setClause = 117
    RULE_matchedClause = 118
    RULE_notMatchedClause = 119
    RULE_matchedAction = 120
    RULE_notMatchedAction = 121
    RULE_assignmentList = 122
    RULE_assignment = 123
    RULE_whereClause = 124
    RULE_havingClause = 125
    RULE_hint = 126
    RULE_hintStatement = 127
    RULE_fromClause = 128
    RULE_aggregationClause = 129
    RULE_groupingSet = 130
    RULE_pivotClause = 131
    RULE_pivotColumn = 132
    RULE_pivotValue = 133
    RULE_lateralView = 134
    RULE_setQuantifier = 135
    RULE_relation = 136
    RULE_joinRelation = 137
    RULE_joinType = 138
    RULE_joinCriteria = 139
    RULE_sample = 140
    RULE_sampleMethod = 141
    RULE_identifierList = 142
    RULE_identifierSeq = 143
    RULE_orderedIdentifierList = 144
    RULE_orderedIdentifier = 145
    RULE_identifierCommentList = 146
    RULE_identifierComment = 147
    RULE_relationPrimary = 148
    RULE_inlineTable = 149
    RULE_functionTable = 150
    RULE_tableAlias = 151
    RULE_rowFormat = 152
    RULE_multipartIdentifierList = 153
    RULE_multipartIdentifier = 154
    RULE_tableIdentifier = 155
    RULE_functionIdentifier = 156
    RULE_namedExpression = 157
    RULE_namedExpressionSeq = 158
    RULE_transformList = 159
    RULE_transform = 160
    RULE_transformArgument = 161
    RULE_expression = 162
    RULE_booleanExpression = 163
    RULE_predicate = 164
    RULE_valueExpression = 165
    RULE_primaryExpression = 166
    RULE_constant = 167
    RULE_comparisonOperator = 168
    RULE_comparisonEqualOperator = 169
    RULE_arithmeticOperator = 170
    RULE_predicateOperator = 171
    RULE_booleanValue = 172
    RULE_interval = 173
    RULE_errorCapturingMultiUnitsInterval = 174
    RULE_multiUnitsInterval = 175
    RULE_errorCapturingUnitToUnitInterval = 176
    RULE_unitToUnitInterval = 177
    RULE_intervalValue = 178
    RULE_intervalUnit = 179
    RULE_colPosition = 180
    RULE_dataType = 181
    RULE_qualifiedColTypeWithPositionList = 182
    RULE_qualifiedColTypeWithPosition = 183
    RULE_colTypeList = 184
    RULE_colType = 185
    RULE_complexColTypeList = 186
    RULE_complexColType = 187
    RULE_whenClause = 188
    RULE_windowClause = 189
    RULE_namedWindow = 190
    RULE_windowSpec = 191
    RULE_windowFrame = 192
    RULE_frameBound = 193
    RULE_qualifiedNameList = 194
    RULE_functionName = 195
    RULE_qualifiedName = 196
    RULE_errorCapturingIdentifier = 197
    RULE_errorCapturingIdentifierExtra = 198
    RULE_identifier = 199
    RULE_strictIdentifier = 200
    RULE_quotedIdentifier = 201
    RULE_number = 202
    RULE_alterColumnAction = 203
    RULE_ansiNonReserved = 204
    RULE_strictNonReserved = 205
    RULE_nonReserved = 206

    ruleNames =  [ "fugueLanguage", "fugueSingleStatement", "fugueSingleTask", 
                   "fugueNestableTask", "fugueNestableTaskCollectionNoSelect", 
                   "fugueTransformTask", "fugueProcessTask", "fugueSaveAndUseTask", 
                   "fugueRenameColumnsTask", "fugueAlterColumnsTask", "fugueDropColumnsTask", 
                   "fugueDropnaTask", "fugueFillnaTask", "fugueZipTask", 
                   "fugueCreateTask", "fugueCreateDataTask", "fugueLoadTask", 
                   "fugueOutputTask", "fuguePrintTask", "fugueSaveTask", 
                   "fugueOutputTransformTask", "fugueSingleFile", "fugueLoadColumns", 
                   "fugueSaveMode", "fugueFileFormat", "fuguePath", "fugueCheckpoint", 
                   "fugueCheckpointNamespace", "fugueYield", "fugueBroadcast", 
                   "fugueDataFrames", "fugueDataFramePair", "fugueDataFrame", 
                   "fugueAssignment", "fugueAssignmentSign", "fugueSingleOutputExtensionCommonWild", 
                   "fugueSingleOutputExtensionCommon", "fugueExtension", 
                   "fugueZipType", "fuguePrepartition", "fuguePartitionAlgo", 
                   "fuguePartitionNum", "fuguePartitionNumber", "fugueParams", 
                   "fugueCols", "fugueColsSort", "fugueColSort", "fugueColumnIdentifier", 
                   "fugueRenameExpression", "fugueWildSchema", "fugueWildSchemaPair", 
                   "fugueSchema", "fugueSchemaPair", "fugueSchemaKey", "fugueSchemaType", 
                   "fugueRenamePair", "fugueJson", "fugueJsonObj", "fugueJsonPairs", 
                   "fugueJsonPair", "fugueJsonKey", "fugueJsonArray", "fugueJsonValue", 
                   "fugueJsonNumber", "fugueJsonString", "fugueJsonBool", 
                   "fugueJsonNull", "fugueIdentifier", "singleStatement", 
                   "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "singleTableSchema", 
                   "statement", "unsupportedHiveNativeCommands", "createTableHeader", 
                   "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
                   "commentSpec", "query", "insertInto", "partitionSpecLocation", 
                   "partitionSpec", "partitionVal", "namespace", "describeFuncName", 
                   "describeColName", "ctes", "namedQuery", "tableProvider", 
                   "createTableClauses", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "dmlStatementNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "fromStatement", "fromStatementBody", "querySpecification", 
                   "optionalFromClause", "transformClause", "selectClause", 
                   "setClause", "matchedClause", "notMatchedClause", "matchedAction", 
                   "notMatchedAction", "assignmentList", "assignment", "whereClause", 
                   "havingClause", "hint", "hintStatement", "fromClause", 
                   "aggregationClause", "groupingSet", "pivotClause", "pivotColumn", 
                   "pivotValue", "lateralView", "setQuantifier", "relation", 
                   "joinRelation", "joinType", "joinCriteria", "sample", 
                   "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTable", "tableAlias", 
                   "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
                   "tableIdentifier", "functionIdentifier", "namedExpression", 
                   "namedExpressionSeq", "transformList", "transform", "transformArgument", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "comparisonEqualOperator", "arithmeticOperator", "predicateOperator", 
                   "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "intervalUnit", 
                   "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
                   "qualifiedColTypeWithPosition", "colTypeList", "colType", 
                   "complexColTypeList", "complexColType", "whenClause", 
                   "windowClause", "namedWindow", "windowSpec", "windowFrame", 
                   "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
                   "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "alterColumnAction", "ansiNonReserved", "strictNonReserved", 
                   "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    FILL=17
    HASH=18
    RAND=19
    EVEN=20
    PRESORT=21
    PERSIST=22
    BROADCAST=23
    PARAMS=24
    PROCESS=25
    OUTPUT=26
    OUTTRANSFORM=27
    ROWCOUNT=28
    CONCURRENCY=29
    PREPARTITION=30
    ZIP=31
    PRINT=32
    TITLE=33
    SAVE=34
    APPEND=35
    PARQUET=36
    CSV=37
    JSON=38
    SINGLE=39
    COLONEQUAL=40
    CHECKPOINT=41
    WEAK=42
    STRONG=43
    DETERMINISTIC=44
    YIELD=45
    ADD=46
    AFTER=47
    ALL=48
    ALTER=49
    ANALYZE=50
    AND=51
    ANTI=52
    ANY=53
    ARCHIVE=54
    ARRAY=55
    AS=56
    ASC=57
    AT=58
    AUTHORIZATION=59
    BETWEEN=60
    BOTH=61
    BUCKET=62
    BUCKETS=63
    BY=64
    CACHE=65
    CASCADE=66
    CASE=67
    CAST=68
    CHANGE=69
    CHECK=70
    CLEAR=71
    CLUSTER=72
    CLUSTERED=73
    CODEGEN=74
    COLLATE=75
    COLLECTION=76
    COLUMN=77
    COLUMNS=78
    COMMENT=79
    COMMIT=80
    COMPACT=81
    COMPACTIONS=82
    COMPUTE=83
    CONCATENATE=84
    CONSTRAINT=85
    COST=86
    CREATE=87
    CROSS=88
    CUBE=89
    CURRENT=90
    CURRENT_DATE=91
    CURRENT_TIME=92
    CURRENT_TIMESTAMP=93
    CURRENT_USER=94
    DATA=95
    DATABASE=96
    DATABASES=97
    DAY=98
    DBPROPERTIES=99
    DEFINED=100
    DELETE=101
    DELIMITED=102
    DESC=103
    DESCRIBE=104
    DFS=105
    DIRECTORIES=106
    DIRECTORY=107
    DISTINCT=108
    DISTRIBUTE=109
    DROP=110
    ELSE=111
    END=112
    ESCAPE=113
    ESCAPED=114
    EXCEPT=115
    EXCHANGE=116
    EXISTS=117
    EXPLAIN=118
    EXPORT=119
    EXTENDED=120
    EXTERNAL=121
    EXTRACT=122
    FALSE=123
    FETCH=124
    FIELDS=125
    FILTER=126
    FILEFORMAT=127
    FIRST=128
    FOLLOWING=129
    FOR=130
    FOREIGN=131
    FORMAT=132
    FORMATTED=133
    FROM=134
    FULL=135
    FUNCTION=136
    FUNCTIONS=137
    GLOBAL=138
    GRANT=139
    GROUP=140
    GROUPING=141
    HAVING=142
    HOUR=143
    IF=144
    IGNORE=145
    IMPORT=146
    IN=147
    INDEX=148
    INDEXES=149
    INNER=150
    INPATH=151
    INPUTFORMAT=152
    INSERT=153
    INTERSECT=154
    INTERVAL=155
    INTO=156
    IS=157
    ITEMS=158
    JOIN=159
    KEYS=160
    LAST=161
    LATERAL=162
    LAZY=163
    LEADING=164
    LEFT=165
    LIKE=166
    LIMIT=167
    LINES=168
    LIST=169
    LOAD=170
    LOCAL=171
    LOCATION=172
    LOCK=173
    LOCKS=174
    LOGICAL=175
    MACRO=176
    MAP=177
    MATCHED=178
    MERGE=179
    MINUTE=180
    MONTH=181
    MSCK=182
    NAMESPACE=183
    NAMESPACES=184
    NATURAL=185
    NO=186
    NOT=187
    NULL=188
    NULLS=189
    OF=190
    ON=191
    ONLY=192
    OPTION=193
    OPTIONS=194
    OR=195
    ORDER=196
    OUT=197
    OUTER=198
    OUTPUTFORMAT=199
    OVER=200
    OVERLAPS=201
    OVERLAY=202
    OVERWRITE=203
    PARTITION=204
    PARTITIONED=205
    PARTITIONS=206
    PERCENTLIT=207
    PIVOT=208
    PLACING=209
    POSITION=210
    PRECEDING=211
    PRIMARY=212
    PRINCIPALS=213
    PROPERTIES=214
    PURGE=215
    QUERY=216
    RANGE=217
    RECORDREADER=218
    RECORDWRITER=219
    RECOVER=220
    REDUCE=221
    REFERENCES=222
    REFRESH=223
    RENAME=224
    REPAIR=225
    REPLACE=226
    RESET=227
    RESTRICT=228
    REVOKE=229
    RIGHT=230
    RLIKE=231
    ROLE=232
    ROLES=233
    ROLLBACK=234
    ROLLUP=235
    ROW=236
    ROWS=237
    SCHEMA=238
    SECOND=239
    SELECT=240
    SEMI=241
    SEPARATED=242
    SERDE=243
    SERDEPROPERTIES=244
    SESSION_USER=245
    SET=246
    SETMINUS=247
    SETS=248
    SHOW=249
    SKEWED=250
    SOME=251
    SORT=252
    SORTED=253
    START=254
    STATISTICS=255
    STORED=256
    STRATIFY=257
    STRUCT=258
    SUBSTR=259
    SUBSTRING=260
    TABLE=261
    TABLES=262
    TABLESAMPLE=263
    TBLPROPERTIES=264
    TEMPORARY=265
    TERMINATED=266
    THEN=267
    TO=268
    TOUCH=269
    TRAILING=270
    TRANSACTION=271
    TRANSACTIONS=272
    TRANSFORM=273
    TRIM=274
    TRUE=275
    TRUNCATE=276
    TYPE=277
    UNARCHIVE=278
    UNBOUNDED=279
    UNCACHE=280
    UNION=281
    UNIQUE=282
    UNKNOWN=283
    UNLOCK=284
    UNSET=285
    UPDATE=286
    USE=287
    USER=288
    USING=289
    VALUES=290
    VIEW=291
    VIEWS=292
    WHEN=293
    WHERE=294
    WINDOW=295
    WITH=296
    YEAR=297
    EQUAL=298
    DOUBLEEQUAL=299
    NSEQ=300
    NEQ=301
    NEQJ=302
    LT=303
    LTE=304
    GT=305
    GTE=306
    PLUS=307
    MINUS=308
    ASTERISK=309
    SLASH=310
    PERCENT=311
    DIV=312
    TILDE=313
    AMPERSAND=314
    PIPE=315
    CONCAT_PIPE=316
    HAT=317
    STRING=318
    BIGINT_LITERAL=319
    SMALLINT_LITERAL=320
    TINYINT_LITERAL=321
    INTEGER_VALUE=322
    EXPONENT_VALUE=323
    DECIMAL_VALUE=324
    DOUBLE_LITERAL=325
    BIGDECIMAL_LITERAL=326
    IDENTIFIER=327
    BACKQUOTED_IDENTIFIER=328
    SIMPLE_COMMENT=329
    BRACKETED_COMMENT=330
    WS=331
    UNRECOGNIZED=332

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    # When false, INTERSECT is given the greater precedence over the other set
    # operations (UNION, EXCEPT and MINUS) as per the SQL standard.
    legacy_setops_precedence_enbled = False

    # When false, a literal with an exponent would be converted into
    # double type rather than decimal type.
    legacy_exponent_literal_as_decimal_enabled = False

    # Verify whether current token is a valid decimal token (which contains dot).
    # Returns true if the character that follows the token is not a digit or letter or underscore.

    #  For example:
    # For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
    # For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
    # For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
    # For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is followed
    # by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
    # which is not a digit or letter or underscore.
    def isValidDecimal(self):
        return True  # TODO: remove this
        nextChar = self._input.LA(1);
        if (nextChar >= 'A' and nextChar <= 'Z') or (nextChar >= '0' and nextChar <= '9') or nextChar == '_':
            return False
        else:
            return True

    # When true, the behavior of keywords follows ANSI SQL standard.
    @property
    def SQL_standard_keyword_behavior(self):
        if "_ansi_sql" in self.__dict__:
            return self._ansi_sql
        return False

    # This method will be called when we see '/ *' and try to match it as a bracketed comment.
    # If the next character is '+', it should be parsed as hint later, and we cannot match
    # it as a bracketed comment.

    # Returns true if the next character is '+'.
    def isHint(self):
        return False  # TODO: remove this
        nextChar = self._input.LA(1);
        if nextChar == '+':
            return True
        else:
            return False


    @property
    def allUpperCase(self):
        if "_all_upper_case" in self.__dict__:
            return self._all_upper_case
        return False

    @property
    def simpleAssign(self):
        if "_simple_assign" in self.__dict__:
            return self._simple_assign
        return False




    class FugueLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def fugueSingleTask(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSingleTaskContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLanguage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLanguage" ):
                return visitor.visitFugueLanguage(self)
            else:
                return visitor.visitChildren(self)




    def fugueLanguage(self):

        localctx = fugue_sqlParser.FugueLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fugueLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 414
                    self.fugueSingleTask()

                else:
                    raise NoViableAltException(self)
                self.state = 417 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 419
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSingleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleStatement" ):
                return visitor.visitFugueSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleStatement(self):

        localctx = fugue_sqlParser.FugueSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fugueSingleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.fugueSingleTask()
            self.state = 422
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def fugueOutputTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTransformTaskContext,0)


        def fugueOutputTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTaskContext,0)


        def fuguePrintTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrintTaskContext,0)


        def fugueSaveTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleTask" ):
                return visitor.visitFugueSingleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleTask(self):

        localctx = fugue_sqlParser.FugueSingleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_fugueSingleTask)
        try:
            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.fugueNestableTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.fugueOutputTransformTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 426
                self.fugueOutputTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 427
                self.fuguePrintTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 428
                self.fugueSaveTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.q = None # QueryContext
            self.checkpoint = None # FugueCheckpointContext
            self.broadcast = None # FugueBroadcastContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def fugueCheckpoint(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCheckpointContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTask" ):
                return visitor.visitFugueNestableTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTask(self):

        localctx = fugue_sqlParser.FugueNestableTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fugueNestableTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 431
                localctx.assign = self.fugueAssignment()


            self.state = 434
            localctx.q = self.query()
            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 435
                localctx.checkpoint = self.fugueCheckpoint()


            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 438
                localctx.broadcast = self.fugueBroadcast()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskCollectionNoSelectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTransformTaskContext,0)


        def fugueProcessTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueProcessTaskContext,0)


        def fugueZipTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTaskContext,0)


        def fugueCreateTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateTaskContext,0)


        def fugueCreateDataTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateDataTaskContext,0)


        def fugueLoadTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueLoadTaskContext,0)


        def fugueSaveAndUseTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveAndUseTaskContext,0)


        def fugueRenameColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueRenameColumnsTaskContext,0)


        def fugueAlterColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAlterColumnsTaskContext,0)


        def fugueDropColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDropColumnsTaskContext,0)


        def fugueDropnaTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDropnaTaskContext,0)


        def fugueFillnaTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFillnaTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTaskCollectionNoSelect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTaskCollectionNoSelect" ):
                return visitor.visitFugueNestableTaskCollectionNoSelect(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTaskCollectionNoSelect(self):

        localctx = fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fugueNestableTaskCollectionNoSelect)
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.fugueTransformTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.fugueProcessTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 443
                self.fugueZipTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 444
                self.fugueCreateTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 445
                self.fugueCreateDataTask()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 446
                self.fugueLoadTask()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 447
                self.fugueSaveAndUseTask()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 448
                self.fugueRenameColumnsTask()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 449
                self.fugueAlterColumnsTask()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 450
                self.fugueDropColumnsTask()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 451
                self.fugueDropnaTask()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 452
                self.fugueFillnaTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTransformTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.params = None # FugueSingleOutputExtensionCommonWildContext

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def fugueSingleOutputExtensionCommonWild(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTransformTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTransformTask" ):
                return visitor.visitFugueTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueTransformTask(self):

        localctx = fugue_sqlParser.FugueTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_fugueTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(fugue_sqlParser.TRANSFORM)
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 456
                localctx.dfs = self.fugueDataFrames()


            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 459
                localctx.partition = self.fuguePrepartition()


            self.state = 462
            localctx.params = self.fugueSingleOutputExtensionCommonWild()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueProcessTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.params = None # FugueSingleOutputExtensionCommonContext

        def PROCESS(self):
            return self.getToken(fugue_sqlParser.PROCESS, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueProcessTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueProcessTask" ):
                return visitor.visitFugueProcessTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueProcessTask(self):

        localctx = fugue_sqlParser.FugueProcessTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fugueProcessTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(fugue_sqlParser.PROCESS)
            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 465
                localctx.dfs = self.fugueDataFrames()


            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 468
                localctx.partition = self.fuguePrepartition()


            self.state = 471
            localctx.params = self.fugueSingleOutputExtensionCommon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveAndUseTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.m = None # FugueSaveModeContext
            self.single = None # FugueSingleFileContext
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext

        def SAVE(self):
            return self.getToken(fugue_sqlParser.SAVE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def fugueSaveMode(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveModeContext,0)


        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)


        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveAndUseTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveAndUseTask" ):
                return visitor.visitFugueSaveAndUseTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveAndUseTask(self):

        localctx = fugue_sqlParser.FugueSaveAndUseTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_fugueSaveAndUseTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(fugue_sqlParser.SAVE)
            self.state = 474
            self.match(fugue_sqlParser.AND)
            self.state = 475
            self.match(fugue_sqlParser.USE)
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 476
                localctx.df = self.fugueDataFrame()


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 479
                localctx.partition = self.fuguePrepartition()


            self.state = 482
            localctx.m = self.fugueSaveMode()
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.SINGLE:
                self.state = 483
                localctx.single = self.fugueSingleFile()


            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.PARQUET) | (1 << fugue_sqlParser.CSV) | (1 << fugue_sqlParser.JSON))) != 0):
                self.state = 486
                localctx.fmt = self.fugueFileFormat()


            self.state = 489
            localctx.path = self.fuguePath()
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 490
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenameColumnsTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueRenameExpressionContext
            self.df = None # FugueDataFrameContext

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueRenameExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueRenameExpressionContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenameColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenameColumnsTask" ):
                return visitor.visitFugueRenameColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenameColumnsTask(self):

        localctx = fugue_sqlParser.FugueRenameColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_fugueRenameColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(fugue_sqlParser.RENAME)
            self.state = 494
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 495
            localctx.cols = self.fugueRenameExpression()
            self.state = 498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 496
                self.match(fugue_sqlParser.FROM)
                self.state = 497
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAlterColumnsTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueSchemaContext
            self.df = None # FugueDataFrameContext

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAlterColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAlterColumnsTask" ):
                return visitor.visitFugueAlterColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueAlterColumnsTask(self):

        localctx = fugue_sqlParser.FugueAlterColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_fugueAlterColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(fugue_sqlParser.ALTER)
            self.state = 501
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 502
            localctx.cols = self.fugueSchema()
            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 503
                self.match(fugue_sqlParser.FROM)
                self.state = 504
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDropColumnsTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueColsContext
            self.df = None # FugueDataFrameContext

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDropColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDropColumnsTask" ):
                return visitor.visitFugueDropColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueDropColumnsTask(self):

        localctx = fugue_sqlParser.FugueDropColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_fugueDropColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(fugue_sqlParser.DROP)
            self.state = 508
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 509
            localctx.cols = self.fugueCols()
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 510
                self.match(fugue_sqlParser.IF)
                self.state = 511
                self.match(fugue_sqlParser.EXISTS)


            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 514
                self.match(fugue_sqlParser.FROM)
                self.state = 515
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDropnaTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.how = None # Token
            self.cols = None # FugueColsContext
            self.df = None # FugueDataFrameContext

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDropnaTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDropnaTask" ):
                return visitor.visitFugueDropnaTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueDropnaTask(self):

        localctx = fugue_sqlParser.FugueDropnaTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fugueDropnaTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(fugue_sqlParser.DROP)
            self.state = 519
            self.match(fugue_sqlParser.ROWS)
            self.state = 520
            self.match(fugue_sqlParser.IF)
            self.state = 521
            localctx.how = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.ANY):
                localctx.how = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 522
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.NULL or _la==fugue_sqlParser.NULLS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 523
                self.match(fugue_sqlParser.ON)
                self.state = 524
                localctx.cols = self.fugueCols()


            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 527
                self.match(fugue_sqlParser.FROM)
                self.state = 528
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueFillnaTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueParamsContext
            self.df = None # FugueDataFrameContext

        def FILL(self):
            return self.getToken(fugue_sqlParser.FILL, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueFillnaTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueFillnaTask" ):
                return visitor.visitFugueFillnaTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueFillnaTask(self):

        localctx = fugue_sqlParser.FugueFillnaTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fugueFillnaTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(fugue_sqlParser.FILL)
            self.state = 532
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.NULL or _la==fugue_sqlParser.NULLS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 533
            localctx.params = self.fugueParams()
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 534
                self.match(fugue_sqlParser.FROM)
                self.state = 535
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.how = None # FugueZipTypeContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def ZIP(self):
            return self.getToken(fugue_sqlParser.ZIP, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fugueZipType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTypeContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipTask" ):
                return visitor.visitFugueZipTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipTask(self):

        localctx = fugue_sqlParser.FugueZipTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fugueZipTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(fugue_sqlParser.ZIP)
            self.state = 539
            localctx.dfs = self.fugueDataFrames()
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 540
                localctx.how = self.fugueZipType()


            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 543
                self.match(fugue_sqlParser.BY)
                self.state = 544
                localctx.by = self.fugueCols()


            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 547
                self.match(fugue_sqlParser.PRESORT)
                self.state = 548
                localctx.presort = self.fugueColsSort()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueSingleOutputExtensionCommonContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateTask" ):
                return visitor.visitFugueCreateTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateTask(self):

        localctx = fugue_sqlParser.FugueCreateTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fugueCreateTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(fugue_sqlParser.CREATE)
            self.state = 552
            localctx.params = self.fugueSingleOutputExtensionCommon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateDataTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data = None # FugueJsonArrayContext
            self.schema = None # FugueSchemaContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateDataTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateDataTask" ):
                return visitor.visitFugueCreateDataTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateDataTask(self):

        localctx = fugue_sqlParser.FugueCreateDataTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fugueCreateDataTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(fugue_sqlParser.CREATE)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.DATA:
                self.state = 555
                self.match(fugue_sqlParser.DATA)


            self.state = 558
            localctx.data = self.fugueJsonArray()
            self.state = 559
            self.match(fugue_sqlParser.SCHEMA)
            self.state = 560
            localctx.schema = self.fugueSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueLoadTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext
            self.columns = None # FugueLoadColumnsContext

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueLoadColumns(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueLoadColumnsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLoadTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLoadTask" ):
                return visitor.visitFugueLoadTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueLoadTask(self):

        localctx = fugue_sqlParser.FugueLoadTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fugueLoadTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(fugue_sqlParser.LOAD)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.PARQUET) | (1 << fugue_sqlParser.CSV) | (1 << fugue_sqlParser.JSON))) != 0):
                self.state = 563
                localctx.fmt = self.fugueFileFormat()


            self.state = 566
            localctx.path = self.fuguePath()
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 567
                localctx.params = self.fugueParams()


            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 570
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 571
                localctx.columns = self.fugueLoadColumns()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.using = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def OUTPUT(self):
            return self.getToken(fugue_sqlParser.OUTPUT, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTask" ):
                return visitor.visitFugueOutputTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTask(self):

        localctx = fugue_sqlParser.FugueOutputTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fugueOutputTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(fugue_sqlParser.OUTPUT)
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 575
                localctx.dfs = self.fugueDataFrames()


            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 578
                localctx.partition = self.fuguePrepartition()


            self.state = 581
            self.match(fugue_sqlParser.USING)
            self.state = 582
            localctx.using = self.fugueExtension()
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 583
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrintTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.rows = None # Token
            self.count = None # Token
            self.title = None # Token

        def PRINT(self):
            return self.getToken(fugue_sqlParser.PRINT, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def TITLE(self):
            return self.getToken(fugue_sqlParser.TITLE, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrintTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrintTask" ):
                return visitor.visitFuguePrintTask(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrintTask(self):

        localctx = fugue_sqlParser.FuguePrintTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fuguePrintTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(fugue_sqlParser.PRINT)
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 587
                localctx.dfs = self.fugueDataFrames()


            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 590
                self.match(fugue_sqlParser.ROWS)
                self.state = 591
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)


            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 594
                localctx.count = self.match(fugue_sqlParser.ROWCOUNT)


            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 597
                self.match(fugue_sqlParser.TITLE)
                self.state = 598
                localctx.title = self.match(fugue_sqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.m = None # FugueSaveModeContext
            self.single = None # FugueSingleFileContext
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext

        def SAVE(self):
            return self.getToken(fugue_sqlParser.SAVE, 0)

        def fugueSaveMode(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveModeContext,0)


        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)


        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveTask" ):
                return visitor.visitFugueSaveTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveTask(self):

        localctx = fugue_sqlParser.FugueSaveTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fugueSaveTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(fugue_sqlParser.SAVE)
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 602
                localctx.df = self.fugueDataFrame()


            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 605
                localctx.partition = self.fuguePrepartition()


            self.state = 608
            localctx.m = self.fugueSaveMode()
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.SINGLE:
                self.state = 609
                localctx.single = self.fugueSingleFile()


            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.PARQUET) | (1 << fugue_sqlParser.CSV) | (1 << fugue_sqlParser.JSON))) != 0):
                self.state = 612
                localctx.fmt = self.fugueFileFormat()


            self.state = 615
            localctx.path = self.fuguePath()
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 616
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTransformTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.using = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def OUTTRANSFORM(self):
            return self.getToken(fugue_sqlParser.OUTTRANSFORM, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTransformTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTransformTask" ):
                return visitor.visitFugueOutputTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTransformTask(self):

        localctx = fugue_sqlParser.FugueOutputTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fugueOutputTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(fugue_sqlParser.OUTTRANSFORM)
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 620
                localctx.dfs = self.fugueDataFrames()


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 623
                localctx.partition = self.fuguePrepartition()


            self.state = 626
            self.match(fugue_sqlParser.USING)
            self.state = 627
            localctx.using = self.fugueExtension()
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 628
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleFileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.single = None # Token

        def SINGLE(self):
            return self.getToken(fugue_sqlParser.SINGLE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleFile

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleFile" ):
                return visitor.visitFugueSingleFile(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleFile(self):

        localctx = fugue_sqlParser.FugueSingleFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_fugueSingleFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            localctx.single = self.match(fugue_sqlParser.SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueLoadColumnsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # FugueSchemaContext
            self.cols = None # FugueColsContext

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLoadColumns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLoadColumns" ):
                return visitor.visitFugueLoadColumns(self)
            else:
                return visitor.visitChildren(self)




    def fugueLoadColumns(self):

        localctx = fugue_sqlParser.FugueLoadColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fugueLoadColumns)
        try:
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                localctx.schema = self.fugueSchema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                localctx.cols = self.fugueCols()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveModeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def APPEND(self):
            return self.getToken(fugue_sqlParser.APPEND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveMode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveMode" ):
                return visitor.visitFugueSaveMode(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveMode(self):

        localctx = fugue_sqlParser.FugueSaveModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fugueSaveMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.APPEND or _la==fugue_sqlParser.OVERWRITE or _la==fugue_sqlParser.TO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueFileFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARQUET(self):
            return self.getToken(fugue_sqlParser.PARQUET, 0)

        def CSV(self):
            return self.getToken(fugue_sqlParser.CSV, 0)

        def JSON(self):
            return self.getToken(fugue_sqlParser.JSON, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueFileFormat" ):
                return visitor.visitFugueFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def fugueFileFormat(self):

        localctx = fugue_sqlParser.FugueFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fugueFileFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.PARQUET) | (1 << fugue_sqlParser.CSV) | (1 << fugue_sqlParser.JSON))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePath

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePath" ):
                return visitor.visitFuguePath(self)
            else:
                return visitor.visitChildren(self)




    def fuguePath(self):

        localctx = fugue_sqlParser.FuguePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fuguePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCheckpointContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCheckpoint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueCheckpointYieldContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueYield(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueYieldContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointYield" ):
                return visitor.visitFugueCheckpointYield(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointDeterministicContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.ns = None # FugueCheckpointNamespaceContext
            self.partition = None # FuguePrepartitionContext
            self.single = None # FugueSingleFileContext
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(fugue_sqlParser.DETERMINISTIC, 0)
        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def fugueYield(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueYieldContext,0)

        def fugueCheckpointNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCheckpointNamespaceContext,0)

        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)

        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointDeterministic" ):
                return visitor.visitFugueCheckpointDeterministic(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointWeakContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def PERSIST(self):
            return self.getToken(fugue_sqlParser.PERSIST, 0)
        def WEAK(self):
            return self.getToken(fugue_sqlParser.WEAK, 0)
        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointWeak" ):
                return visitor.visitFugueCheckpointWeak(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointStrongContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.partition = None # FuguePrepartitionContext
            self.single = None # FugueSingleFileContext
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def STRONG(self):
            return self.getToken(fugue_sqlParser.STRONG, 0)
        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)

        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointStrong" ):
                return visitor.visitFugueCheckpointStrong(self)
            else:
                return visitor.visitChildren(self)



    def fugueCheckpoint(self):

        localctx = fugue_sqlParser.FugueCheckpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fugueCheckpoint)
        self._la = 0 # Token type
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueCheckpointWeakContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 643
                    self.match(fugue_sqlParser.LAZY)


                self.state = 649
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.PERSIST]:
                    self.state = 646
                    self.match(fugue_sqlParser.PERSIST)
                    pass
                elif token in [fugue_sqlParser.WEAK]:
                    self.state = 647
                    self.match(fugue_sqlParser.WEAK)
                    self.state = 648
                    self.match(fugue_sqlParser.CHECKPOINT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 651
                    localctx.params = self.fugueParams()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueCheckpointStrongContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 654
                    self.match(fugue_sqlParser.LAZY)


                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STRONG:
                    self.state = 657
                    self.match(fugue_sqlParser.STRONG)


                self.state = 660
                self.match(fugue_sqlParser.CHECKPOINT)
                self.state = 662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 661
                    localctx.partition = self.fuguePrepartition()


                self.state = 665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 664
                    localctx.single = self.fugueSingleFile()


                self.state = 668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 667
                    localctx.params = self.fugueParams()


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.FugueCheckpointDeterministicContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 670
                    self.match(fugue_sqlParser.LAZY)


                self.state = 673
                self.match(fugue_sqlParser.DETERMINISTIC)
                self.state = 674
                self.match(fugue_sqlParser.CHECKPOINT)
                self.state = 676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 675
                    localctx.ns = self.fugueCheckpointNamespace()


                self.state = 679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 678
                    localctx.partition = self.fuguePrepartition()


                self.state = 682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 681
                    localctx.single = self.fugueSingleFile()


                self.state = 685
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 684
                    localctx.params = self.fugueParams()


                self.state = 688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 687
                    self.fugueYield()


                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.FugueCheckpointYieldContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 690
                self.fugueYield()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCheckpointNamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCheckpointNamespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointNamespace" ):
                return visitor.visitFugueCheckpointNamespace(self)
            else:
                return visitor.visitChildren(self)




    def fugueCheckpointNamespace(self):

        localctx = fugue_sqlParser.FugueCheckpointNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fugueCheckpointNamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueYieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # FugueIdentifierContext

        def YIELD(self):
            return self.getToken(fugue_sqlParser.YIELD, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueYield

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueYield" ):
                return visitor.visitFugueYield(self)
            else:
                return visitor.visitChildren(self)




    def fugueYield(self):

        localctx = fugue_sqlParser.FugueYieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fugueYield)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(fugue_sqlParser.YIELD)
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 696
                self.match(fugue_sqlParser.AS)
                self.state = 697
                localctx.name = self.fugueIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueBroadcastContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BROADCAST(self):
            return self.getToken(fugue_sqlParser.BROADCAST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueBroadcast

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueBroadcast" ):
                return visitor.visitFugueBroadcast(self)
            else:
                return visitor.visitChildren(self)




    def fugueBroadcast(self):

        localctx = fugue_sqlParser.FugueBroadcastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fugueBroadcast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(fugue_sqlParser.BROADCAST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrames

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFramesDictContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFramePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFramePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramePairContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesDict" ):
                return visitor.visitFugueDataFramesDict(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFramesListContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFrame(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFrameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesList" ):
                return visitor.visitFugueDataFramesList(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrames(self):

        localctx = fugue_sqlParser.FugueDataFramesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fugueDataFrames)
        try:
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueDataFramesListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.fugueDataFrame()
                self.state = 707
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 703
                        self.match(fugue_sqlParser.T__0)
                        self.state = 704
                        self.fugueDataFrame() 
                    self.state = 709
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueDataFramesDictContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.fugueDataFramePair()
                self.state = 715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 711
                        self.match(fugue_sqlParser.T__0)
                        self.state = 712
                        self.fugueDataFramePair() 
                    self.state = 717
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramePairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueIdentifierContext
            self.value = None # FugueDataFrameContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFramePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramePair" ):
                return visitor.visitFugueDataFramePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueDataFramePair(self):

        localctx = fugue_sqlParser.FugueDataFramePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fugueDataFramePair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            localctx.key = self.fugueIdentifier()
            self.state = 721
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.EQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 722
            localctx.value = self.fugueDataFrame()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrame

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFrameSourceContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameSource" ):
                return visitor.visitFugueDataFrameSource(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFrameNestedContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.task = None # FugueNestableTaskContext
            self.copyFrom(ctx)

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameNested" ):
                return visitor.visitFugueDataFrameNested(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrame(self):

        localctx = fugue_sqlParser.FugueDataFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fugueDataFrame)
        try:
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueDataFrameSourceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.fugueIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueDataFrameNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.match(fugue_sqlParser.T__2)
                self.state = 726
                localctx.task = self.fugueNestableTask()
                self.state = 727
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.varname = None # FugueIdentifierContext
            self.sign = None # FugueAssignmentSignContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueAssignmentSign(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentSignContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignment" ):
                return visitor.visitFugueAssignment(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignment(self):

        localctx = fugue_sqlParser.FugueAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fugueAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            localctx.varname = self.fugueIdentifier()
            self.state = 732
            localctx.sign = self.fugueAssignmentSign()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentSignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONEQUAL(self):
            return self.getToken(fugue_sqlParser.COLONEQUAL, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignmentSign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignmentSign" ):
                return visitor.visitFugueAssignmentSign(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignmentSign(self):

        localctx = fugue_sqlParser.FugueAssignmentSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fugueAssignmentSign)
        try:
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.match(fugue_sqlParser.COLONEQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                if not self.simpleAssign:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.simpleAssign")
                self.state = 736
                self.match(fugue_sqlParser.EQUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonWildContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueWildSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueWildSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommonWild

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommonWild" ):
                return visitor.visitFugueSingleOutputExtensionCommonWild(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommonWild(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fugueSingleOutputExtensionCommonWild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(fugue_sqlParser.USING)
            self.state = 740
            localctx.using = self.fugueExtension()
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 741
                localctx.params = self.fugueParams()


            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 744
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 745
                localctx.schema = self.fugueWildSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommon" ):
                return visitor.visitFugueSingleOutputExtensionCommon(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommon(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_fugueSingleOutputExtensionCommon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(fugue_sqlParser.USING)
            self.state = 749
            localctx.using = self.fugueExtension()
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 750
                localctx.params = self.fugueParams()


            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 753
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 754
                localctx.schema = self.fugueSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueExtension

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueExtension" ):
                return visitor.visitFugueExtension(self)
            else:
                return visitor.visitChildren(self)




    def fugueExtension(self):

        localctx = fugue_sqlParser.FugueExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fugueExtension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.fugueIdentifier()
            self.state = 762
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 758
                    self.match(fugue_sqlParser.T__4)
                    self.state = 759
                    self.fugueIdentifier() 
                self.state = 764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipType" ):
                return visitor.visitFugueZipType(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipType(self):

        localctx = fugue_sqlParser.FugueZipTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fugueZipType)
        try:
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.CROSS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.match(fugue_sqlParser.CROSS)
                pass
            elif token in [fugue_sqlParser.INNER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.match(fugue_sqlParser.INNER)
                pass
            elif token in [fugue_sqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 767
                self.match(fugue_sqlParser.LEFT)
                self.state = 768
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [fugue_sqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 769
                self.match(fugue_sqlParser.RIGHT)
                self.state = 770
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [fugue_sqlParser.FULL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 771
                self.match(fugue_sqlParser.FULL)
                self.state = 772
                self.match(fugue_sqlParser.OUTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrepartitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algo = None # FuguePartitionAlgoContext
            self.num = None # FuguePartitionNumContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def PREPARTITION(self):
            return self.getToken(fugue_sqlParser.PREPARTITION, 0)

        def fuguePartitionNum(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fuguePartitionAlgo(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionAlgoContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrepartition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrepartition" ):
                return visitor.visitFuguePrepartition(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrepartition(self):

        localctx = fugue_sqlParser.FuguePrepartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_fuguePrepartition)
        self._la = 0 # Token type
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0):
                    self.state = 775
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 778
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 779
                localctx.num = self.fuguePartitionNum(0)
                self.state = 782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.match(fugue_sqlParser.BY)
                    self.state = 781
                    localctx.by = self.fugueCols()


                self.state = 786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 784
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 785
                    localctx.presort = self.fugueColsSort()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0):
                    self.state = 788
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 791
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 792
                self.match(fugue_sqlParser.BY)
                self.state = 793
                localctx.by = self.fugueCols()
                self.state = 796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 794
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 795
                    localctx.presort = self.fugueColsSort()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionAlgoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(fugue_sqlParser.HASH, 0)

        def RAND(self):
            return self.getToken(fugue_sqlParser.RAND, 0)

        def EVEN(self):
            return self.getToken(fugue_sqlParser.EVEN, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionAlgo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionAlgo" ):
                return visitor.visitFuguePartitionAlgo(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionAlgo(self):

        localctx = fugue_sqlParser.FuguePartitionAlgoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fuguePartitionAlgo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionNumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fuguePartitionNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumberContext,0)


        def fuguePartitionNum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FuguePartitionNumContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,i)


        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNum" ):
                return visitor.visitFuguePartitionNum(self)
            else:
                return visitor.visitChildren(self)



    def fuguePartitionNum(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.FuguePartitionNumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_fuguePartitionNum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ROWCOUNT, fugue_sqlParser.CONCURRENCY, fugue_sqlParser.MINUS, fugue_sqlParser.INTEGER_VALUE, fugue_sqlParser.DECIMAL_VALUE]:
                self.state = 803
                self.fuguePartitionNumber()
                pass
            elif token in [fugue_sqlParser.T__2]:
                self.state = 804
                self.match(fugue_sqlParser.T__2)
                self.state = 805
                self.fuguePartitionNum(0)
                self.state = 806
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 815
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = fugue_sqlParser.FuguePartitionNumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fuguePartitionNum)
                    self.state = 810
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 811
                    _la = self._input.LA(1)
                    if not(((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & ((1 << (fugue_sqlParser.PLUS - 307)) | (1 << (fugue_sqlParser.MINUS - 307)) | (1 << (fugue_sqlParser.ASTERISK - 307)) | (1 << (fugue_sqlParser.SLASH - 307)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 812
                    self.fuguePartitionNum(2) 
                self.state = 817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FuguePartitionNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def CONCURRENCY(self):
            return self.getToken(fugue_sqlParser.CONCURRENCY, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNumber" ):
                return visitor.visitFuguePartitionNumber(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionNumber(self):

        localctx = fugue_sqlParser.FuguePartitionNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fuguePartitionNumber)
        self._la = 0 # Token type
        try:
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 818
                    self.match(fugue_sqlParser.MINUS)


                self.state = 821
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 822
                    self.match(fugue_sqlParser.MINUS)


                self.state = 825
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 826
                self.match(fugue_sqlParser.ROWCOUNT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 827
                self.match(fugue_sqlParser.CONCURRENCY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueParamsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueParams

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueParamsPairsContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.pairs = None # FugueJsonPairsContext
            self.copyFrom(ctx)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)
        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsPairs" ):
                return visitor.visitFugueParamsPairs(self)
            else:
                return visitor.visitChildren(self)


    class FugueParamsObjContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.obj = None # FugueJsonObjContext
            self.copyFrom(ctx)

        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsObj" ):
                return visitor.visitFugueParamsObj(self)
            else:
                return visitor.visitChildren(self)



    def fugueParams(self):

        localctx = fugue_sqlParser.FugueParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fugueParams)
        self._la = 0 # Token type
        try:
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueParamsPairsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.match(fugue_sqlParser.PARAMS)
                self.state = 831
                localctx.pairs = self.fugueJsonPairs()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueParamsObjContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARAMS:
                    self.state = 832
                    self.match(fugue_sqlParser.PARAMS)


                self.state = 835
                localctx.obj = self.fugueJsonObj()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColumnIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCols

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCols" ):
                return visitor.visitFugueCols(self)
            else:
                return visitor.visitChildren(self)




    def fugueCols(self):

        localctx = fugue_sqlParser.FugueColsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fugueCols)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.fugueColumnIdentifier()
            self.state = 843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 839
                    self.match(fugue_sqlParser.T__0)
                    self.state = 840
                    self.fugueColumnIdentifier() 
                self.state = 845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsSortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColSort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColSortContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColSortContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColsSort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColsSort" ):
                return visitor.visitFugueColsSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColsSort(self):

        localctx = fugue_sqlParser.FugueColsSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_fugueColsSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.fugueColSort()
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 847
                    self.match(fugue_sqlParser.T__0)
                    self.state = 848
                    self.fugueColSort() 
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColSortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColSort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColSort" ):
                return visitor.visitFugueColSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColSort(self):

        localctx = fugue_sqlParser.FugueColSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_fugueColSort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.fugueColumnIdentifier()
            self.state = 856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 855
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColumnIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColumnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColumnIdentifier" ):
                return visitor.visitFugueColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueColumnIdentifier(self):

        localctx = fugue_sqlParser.FugueColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_fugueColumnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenameExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueRenamePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueRenamePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueRenamePairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenameExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenameExpression" ):
                return visitor.visitFugueRenameExpression(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenameExpression(self):

        localctx = fugue_sqlParser.FugueRenameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_fugueRenameExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.fugueRenamePair()
            self.state = 865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 861
                    self.match(fugue_sqlParser.T__0)
                    self.state = 862
                    self.fugueRenamePair() 
                self.state = 867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueWildSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueWildSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchema" ):
                return visitor.visitFugueWildSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchema(self):

        localctx = fugue_sqlParser.FugueWildSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fugueWildSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.fugueWildSchemaPair()
            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 869
                    self.match(fugue_sqlParser.T__0)
                    self.state = 870
                    self.fugueWildSchemaPair() 
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pair = None # FugueSchemaPairContext

        def fugueSchemaPair(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,0)


        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchemaPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchemaPair" ):
                return visitor.visitFugueWildSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchemaPair(self):

        localctx = fugue_sqlParser.FugueWildSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fugueWildSchemaPair)
        try:
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                localctx.pair = self.fugueSchemaPair()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.match(fugue_sqlParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchema" ):
                return visitor.visitFugueSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchema(self):

        localctx = fugue_sqlParser.FugueSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_fugueSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.fugueSchemaPair()
            self.state = 885
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 881
                    self.match(fugue_sqlParser.T__0)
                    self.state = 882
                    self.fugueSchemaPair() 
                self.state = 887
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaTypeContext

        def fugueSchemaKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,0)


        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaPair" ):
                return visitor.visitFugueSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaPair(self):

        localctx = fugue_sqlParser.FugueSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fugueSchemaPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            localctx.key = self.fugueSchemaKey()
            self.state = 889
            self.match(fugue_sqlParser.T__1)
            self.state = 890
            localctx.value = self.fugueSchemaType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaKey" ):
                return visitor.visitFugueSchemaKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaKey(self):

        localctx = fugue_sqlParser.FugueSchemaKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fugueSchemaKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueSchemaSimpleTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaSimpleType" ):
                return visitor.visitFugueSchemaSimpleType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaStructTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaStructType" ):
                return visitor.visitFugueSchemaStructType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaListTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaListType" ):
                return visitor.visitFugueSchemaListType(self)
            else:
                return visitor.visitChildren(self)



    def fugueSchemaType(self):

        localctx = fugue_sqlParser.FugueSchemaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_fugueSchemaType)
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueSchemaSimpleTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.fugueIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueSchemaListTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self.match(fugue_sqlParser.T__5)
                self.state = 896
                self.fugueSchemaType()
                self.state = 897
                self.match(fugue_sqlParser.T__6)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.FugueSchemaStructTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 899
                self.match(fugue_sqlParser.T__7)
                self.state = 900
                self.fugueSchema()
                self.state = 901
                self.match(fugue_sqlParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenamePairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaKeyContext

        def fugueSchemaKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaKeyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenamePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenamePair" ):
                return visitor.visitFugueRenamePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenamePair(self):

        localctx = fugue_sqlParser.FugueRenamePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_fugueRenamePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            localctx.key = self.fugueSchemaKey()
            self.state = 906
            self.match(fugue_sqlParser.T__1)
            self.state = 907
            localctx.value = self.fugueSchemaKey()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJson

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJson" ):
                return visitor.visitFugueJson(self)
            else:
                return visitor.visitChildren(self)




    def fugueJson(self):

        localctx = fugue_sqlParser.FugueJsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_fugueJson)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonObjContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonObj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonObj" ):
                return visitor.visitFugueJsonObj(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonObj(self):

        localctx = fugue_sqlParser.FugueJsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fugueJsonObj)
        self._la = 0 # Token type
        try:
            self.state = 929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self.match(fugue_sqlParser.T__7)
                self.state = 912
                self.fugueJsonPairs()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 913
                    self.match(fugue_sqlParser.T__0)


                self.state = 916
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.match(fugue_sqlParser.T__7)
                self.state = 919
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 920
                self.match(fugue_sqlParser.T__2)
                self.state = 921
                self.fugueJsonPairs()
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 922
                    self.match(fugue_sqlParser.T__0)


                self.state = 925
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 927
                self.match(fugue_sqlParser.T__2)
                self.state = 928
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPairs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPairs" ):
                return visitor.visitFugueJsonPairs(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPairs(self):

        localctx = fugue_sqlParser.FugueJsonPairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_fugueJsonPairs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.fugueJsonPair()
            self.state = 936
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 932
                    self.match(fugue_sqlParser.T__0)
                    self.state = 933
                    self.fugueJsonPair() 
                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueJsonKeyContext
            self.value = None # FugueJsonValueContext

        def fugueJsonKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonKeyContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPair" ):
                return visitor.visitFugueJsonPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPair(self):

        localctx = fugue_sqlParser.FugueJsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fugueJsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            localctx.key = self.fugueJsonKey()
            self.state = 940
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.EQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 941
            localctx.value = self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonKey" ):
                return visitor.visitFugueJsonKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonKey(self):

        localctx = fugue_sqlParser.FugueJsonKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_fugueJsonKey)
        try:
            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.fugueIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.fugueJsonString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonArrayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonArray

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonArray" ):
                return visitor.visitFugueJsonArray(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonArray(self):

        localctx = fugue_sqlParser.FugueJsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fugueJsonArray)
        self._la = 0 # Token type
        try:
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.match(fugue_sqlParser.T__5)
                self.state = 948
                self.fugueJsonValue()
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 949
                        self.match(fugue_sqlParser.T__0)
                        self.state = 950
                        self.fugueJsonValue() 
                    self.state = 955
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 956
                    self.match(fugue_sqlParser.T__0)


                self.state = 959
                self.match(fugue_sqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.match(fugue_sqlParser.T__5)
                self.state = 962
                self.match(fugue_sqlParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def fugueJsonNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNumberContext,0)


        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)


        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueJsonBool(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonBoolContext,0)


        def fugueJsonNull(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNullContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonValue" ):
                return visitor.visitFugueJsonValue(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonValue(self):

        localctx = fugue_sqlParser.FugueJsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_fugueJsonValue)
        try:
            self.state = 971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 965
                self.fugueJsonString()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 966
                self.fugueJsonNumber()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.fugueJsonObj()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 968
                self.fugueJsonArray()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 969
                self.fugueJsonBool()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 970
                self.fugueJsonNull()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNumber" ):
                return visitor.visitFugueJsonNumber(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNumber(self):

        localctx = fugue_sqlParser.FugueJsonNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_fugueJsonNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonString" ):
                return visitor.visitFugueJsonString(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonString(self):

        localctx = fugue_sqlParser.FugueJsonStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_fugueJsonString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonBoolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonBool" ):
                return visitor.visitFugueJsonBool(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonBool(self):

        localctx = fugue_sqlParser.FugueJsonBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fugueJsonBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__9 or _la==fugue_sqlParser.T__10 or _la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNull" ):
                return visitor.visitFugueJsonNull(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNull(self):

        localctx = fugue_sqlParser.FugueJsonNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fugueJsonNull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__11 or _la==fugue_sqlParser.NULL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueIdentifier" ):
                return visitor.visitFugueIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueIdentifier(self):

        localctx = fugue_sqlParser.FugueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_fugueIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = fugue_sqlParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.statement()
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__12:
                self.state = 984
                self.match(fugue_sqlParser.T__12)
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 990
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = fugue_sqlParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.namedExpression()
            self.state = 993
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableIdentifier" ):
                return visitor.visitSingleTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleTableIdentifier(self):

        localctx = fugue_sqlParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.tableIdentifier()
            self.state = 996
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleMultipartIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleMultipartIdentifier" ):
                return visitor.visitSingleMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleMultipartIdentifier(self):

        localctx = fugue_sqlParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.multipartIdentifier()
            self.state = 999
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleFunctionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFunctionIdentifier" ):
                return visitor.visitSingleFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleFunctionIdentifier(self):

        localctx = fugue_sqlParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.functionIdentifier()
            self.state = 1002
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleDataType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDataType" ):
                return visitor.visitSingleDataType(self)
            else:
                return visitor.visitChildren(self)




    def singleDataType(self):

        localctx = fugue_sqlParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.dataType()
            self.state = 1005
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableSchema" ):
                return visitor.visitSingleTableSchema(self)
            else:
                return visitor.visitChildren(self)




    def singleTableSchema(self):

        localctx = fugue_sqlParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.colTypeList()
            self.state = 1008
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetConfiguration" ):
                return visitor.visitResetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewQuery" ):
                return visitor.visitAlterViewQuery(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropNamespace" ):
                return visitor.visitDropNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTempViewUsing" ):
                return visitor.visitCreateTempViewUsing(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnsupportedHiveNativeCommandsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailNativeCommand" ):
                return visitor.visitFailNativeCommand(self)
            else:
                return visitor.visitChildren(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearCache" ):
                return visitor.visitClearCache(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecoverPartitions" ):
                return visitor.visitRecoverPartitions(self)
            else:
                return visitor.visitChildren(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)
        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentNamespace" ):
                return visitor.visitShowCurrentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTablePartition" ):
                return visitor.visitRenameTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshResource" ):
                return visitor.visitRefreshResource(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)
        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowNamespaces" ):
                return visitor.visitShowNamespaces(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.FROM)
            else:
                return self.getToken(fugue_sqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.IN)
            else:
                return self.getToken(fugue_sqlParser.IN, i)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.ReplaceTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTable" ):
                return visitor.visitReplaceTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecLocationContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTablePartition" ):
                return visitor.visitAddTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceLocation" ):
                return visitor.visitSetNamespaceLocation(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceProperties" ):
                return visitor.visitSetNamespaceProperties(self)
            else:
                return visitor.visitChildren(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManageResource" ):
                return visitor.visitManageResource(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.partitionColumns = None # ColTypeListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SkewSpecContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateHiveTable" ):
                return visitor.visitCreateHiveTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ResourceContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ResourceContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTable" ):
                return visitor.visitShowTable(self)
            else:
                return visitor.visitChildren(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveReplaceColumns" ):
                return visitor.visitHiveReplaceColumns(self)
            else:
                return visitor.visitChildren(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentNamespace" ):
                return visitor.visitCommentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(fugue_sqlParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableLike" ):
                return visitor.visitCreateTableLike(self)
            else:
                return visitor.visitChildren(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncacheTable" ):
                return visitor.visitUncacheTable(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeRelation" ):
                return visitor.visitDescribeRelation(self)
            else:
                return visitor.visitChildren(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)
        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)
        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadData" ):
                return visitor.visitLoadData(self)
            else:
                return visitor.visitChildren(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPartitions" ):
                return visitor.visitShowPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFunction" ):
                return visitor.visitDescribeFunction(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableColumn" ):
                return visitor.visitRenameTableColumn(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,0)

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveChangeColumn" ):
                return visitor.visitHiveChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeQuery" ):
                return visitor.visitDescribeQuery(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableSerDe" ):
                return visitor.visitSetTableSerDe(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ON)
            else:
                return self.getToken(fugue_sqlParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablePartitions" ):
                return visitor.visitDropTablePartitions(self)
            else:
                return visitor.visitChildren(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetConfiguration" ):
                return visitor.visitSetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeNamespace" ):
                return visitor.visitDescribeNamespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ALTER)
            else:
                return self.getToken(fugue_sqlParser.ALTER, i)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.AlterColumnActionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableAlterColumn" ):
                return visitor.visitAlterTableAlterColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.WITH)
            else:
                return self.getToken(fugue_sqlParser.WITH, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.DBPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.PROPERTIES, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateNamespace" ):
                return visitor.visitCreateNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTblProperties" ):
                return visitor.visitShowTblProperties(self)
            else:
                return visitor.visitChildren(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetTableProperties" ):
                return visitor.visitUnsetTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableLocation" ):
                return visitor.visitSetTableLocation(self)
            else:
                return visitor.visitChildren(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableColumns" ):
                return visitor.visitDropTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowViews" ):
                return visitor.visitShowViews(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheTable" ):
                return visitor.visitCacheTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTableColumns" ):
                return visitor.visitAddTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = fugue_sqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.query()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WITH:
                    self.state = 1011
                    self.ctes()


                self.state = 1014
                self.dmlStatementNoWith()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1015
                self.match(fugue_sqlParser.USE)
                self.state = 1017
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1016
                    self.match(fugue_sqlParser.NAMESPACE)


                self.state = 1019
                self.multipartIdentifier()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1020
                self.match(fugue_sqlParser.CREATE)
                self.state = 1021
                self.namespace()
                self.state = 1025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1022
                    self.match(fugue_sqlParser.IF)
                    self.state = 1023
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1024
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1027
                self.multipartIdentifier()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.LOCATION or _la==fugue_sqlParser.WITH:
                    self.state = 1033
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 1028
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 1029
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.WITH]:
                        self.state = 1030
                        self.match(fugue_sqlParser.WITH)
                        self.state = 1031
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.DBPROPERTIES or _la==fugue_sqlParser.PROPERTIES):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1032
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1038
                self.match(fugue_sqlParser.ALTER)
                self.state = 1039
                self.namespace()
                self.state = 1040
                self.multipartIdentifier()
                self.state = 1041
                self.match(fugue_sqlParser.SET)
                self.state = 1042
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DBPROPERTIES or _la==fugue_sqlParser.PROPERTIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1043
                self.tablePropertyList()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1045
                self.match(fugue_sqlParser.ALTER)
                self.state = 1046
                self.namespace()
                self.state = 1047
                self.multipartIdentifier()
                self.state = 1048
                self.match(fugue_sqlParser.SET)
                self.state = 1049
                self.locationSpec()
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1051
                self.match(fugue_sqlParser.DROP)
                self.state = 1052
                self.namespace()
                self.state = 1055
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1053
                    self.match(fugue_sqlParser.IF)
                    self.state = 1054
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1057
                self.multipartIdentifier()
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.CASCADE or _la==fugue_sqlParser.RESTRICT:
                    self.state = 1058
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.CASCADE or _la==fugue_sqlParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1061
                self.match(fugue_sqlParser.SHOW)
                self.state = 1062
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DATABASES or _la==fugue_sqlParser.NAMESPACES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1063
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1064
                    self.multipartIdentifier()


                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1067
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1070
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1073
                self.createTableHeader()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1074
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1075
                    self.colTypeList()
                    self.state = 1076
                    self.match(fugue_sqlParser.T__3)


                self.state = 1080
                self.tableProvider()
                self.state = 1081
                self.createTableClauses()
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.FILL) | (1 << fugue_sqlParser.PROCESS) | (1 << fugue_sqlParser.ZIP) | (1 << fugue_sqlParser.SAVE) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (fugue_sqlParser.CREATE - 87)) | (1 << (fugue_sqlParser.DROP - 87)) | (1 << (fugue_sqlParser.FROM - 87)))) != 0) or ((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & ((1 << (fugue_sqlParser.LOAD - 170)) | (1 << (fugue_sqlParser.MAP - 170)) | (1 << (fugue_sqlParser.REDUCE - 170)) | (1 << (fugue_sqlParser.RENAME - 170)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (fugue_sqlParser.SELECT - 240)) | (1 << (fugue_sqlParser.TABLE - 240)) | (1 << (fugue_sqlParser.TRANSFORM - 240)) | (1 << (fugue_sqlParser.VALUES - 240)) | (1 << (fugue_sqlParser.WITH - 240)))) != 0):
                    self.state = 1083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1082
                        self.match(fugue_sqlParser.AS)


                    self.state = 1085
                    self.query()


                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1088
                self.createTableHeader()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1089
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1090
                    localctx.columns = self.colTypeList()
                    self.state = 1091
                    self.match(fugue_sqlParser.T__3)


                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.CLUSTERED or _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.LOCATION or _la==fugue_sqlParser.PARTITIONED or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (fugue_sqlParser.ROW - 236)) | (1 << (fugue_sqlParser.SKEWED - 236)) | (1 << (fugue_sqlParser.STORED - 236)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 236)))) != 0):
                    self.state = 1114
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 1095
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.PARTITIONED]:
                        self.state = 1105
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                        if la_ == 1:
                            self.state = 1096
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 1097
                            self.match(fugue_sqlParser.BY)
                            self.state = 1098
                            self.match(fugue_sqlParser.T__2)
                            self.state = 1099
                            localctx.partitionColumns = self.colTypeList()
                            self.state = 1100
                            self.match(fugue_sqlParser.T__3)
                            pass

                        elif la_ == 2:
                            self.state = 1102
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 1103
                            self.match(fugue_sqlParser.BY)
                            self.state = 1104
                            localctx.partitionColumnNames = self.identifierList()
                            pass


                        pass
                    elif token in [fugue_sqlParser.CLUSTERED]:
                        self.state = 1107
                        self.bucketSpec()
                        pass
                    elif token in [fugue_sqlParser.SKEWED]:
                        self.state = 1108
                        self.skewSpec()
                        pass
                    elif token in [fugue_sqlParser.ROW]:
                        self.state = 1109
                        self.rowFormat()
                        pass
                    elif token in [fugue_sqlParser.STORED]:
                        self.state = 1110
                        self.createFileFormat()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 1111
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 1112
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1113
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.FILL) | (1 << fugue_sqlParser.PROCESS) | (1 << fugue_sqlParser.ZIP) | (1 << fugue_sqlParser.SAVE) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (fugue_sqlParser.CREATE - 87)) | (1 << (fugue_sqlParser.DROP - 87)) | (1 << (fugue_sqlParser.FROM - 87)))) != 0) or ((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & ((1 << (fugue_sqlParser.LOAD - 170)) | (1 << (fugue_sqlParser.MAP - 170)) | (1 << (fugue_sqlParser.REDUCE - 170)) | (1 << (fugue_sqlParser.RENAME - 170)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (fugue_sqlParser.SELECT - 240)) | (1 << (fugue_sqlParser.TABLE - 240)) | (1 << (fugue_sqlParser.TRANSFORM - 240)) | (1 << (fugue_sqlParser.VALUES - 240)) | (1 << (fugue_sqlParser.WITH - 240)))) != 0):
                    self.state = 1120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1119
                        self.match(fugue_sqlParser.AS)


                    self.state = 1122
                    self.query()


                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1125
                self.match(fugue_sqlParser.CREATE)
                self.state = 1126
                self.match(fugue_sqlParser.TABLE)
                self.state = 1130
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1127
                    self.match(fugue_sqlParser.IF)
                    self.state = 1128
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1129
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1132
                localctx.target = self.tableIdentifier()
                self.state = 1133
                self.match(fugue_sqlParser.LIKE)
                self.state = 1134
                localctx.source = self.tableIdentifier()
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.LOCATION or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (fugue_sqlParser.ROW - 236)) | (1 << (fugue_sqlParser.STORED - 236)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 236)) | (1 << (fugue_sqlParser.USING - 236)))) != 0):
                    self.state = 1141
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.USING]:
                        self.state = 1135
                        self.tableProvider()
                        pass
                    elif token in [fugue_sqlParser.ROW]:
                        self.state = 1136
                        self.rowFormat()
                        pass
                    elif token in [fugue_sqlParser.STORED]:
                        self.state = 1137
                        self.createFileFormat()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 1138
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 1139
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1140
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1146
                self.replaceTableHeader()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1147
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1148
                    self.colTypeList()
                    self.state = 1149
                    self.match(fugue_sqlParser.T__3)


                self.state = 1153
                self.tableProvider()
                self.state = 1154
                self.createTableClauses()
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.FILL) | (1 << fugue_sqlParser.PROCESS) | (1 << fugue_sqlParser.ZIP) | (1 << fugue_sqlParser.SAVE) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (fugue_sqlParser.CREATE - 87)) | (1 << (fugue_sqlParser.DROP - 87)) | (1 << (fugue_sqlParser.FROM - 87)))) != 0) or ((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & ((1 << (fugue_sqlParser.LOAD - 170)) | (1 << (fugue_sqlParser.MAP - 170)) | (1 << (fugue_sqlParser.REDUCE - 170)) | (1 << (fugue_sqlParser.RENAME - 170)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (fugue_sqlParser.SELECT - 240)) | (1 << (fugue_sqlParser.TABLE - 240)) | (1 << (fugue_sqlParser.TRANSFORM - 240)) | (1 << (fugue_sqlParser.VALUES - 240)) | (1 << (fugue_sqlParser.WITH - 240)))) != 0):
                    self.state = 1156
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1155
                        self.match(fugue_sqlParser.AS)


                    self.state = 1158
                    self.query()


                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1161
                self.match(fugue_sqlParser.ANALYZE)
                self.state = 1162
                self.match(fugue_sqlParser.TABLE)
                self.state = 1163
                self.multipartIdentifier()
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1164
                    self.partitionSpec()


                self.state = 1167
                self.match(fugue_sqlParser.COMPUTE)
                self.state = 1168
                self.match(fugue_sqlParser.STATISTICS)
                self.state = 1176
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1169
                    self.identifier()

                elif la_ == 2:
                    self.state = 1170
                    self.match(fugue_sqlParser.FOR)
                    self.state = 1171
                    self.match(fugue_sqlParser.COLUMNS)
                    self.state = 1172
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 1173
                    self.match(fugue_sqlParser.FOR)
                    self.state = 1174
                    self.match(fugue_sqlParser.ALL)
                    self.state = 1175
                    self.match(fugue_sqlParser.COLUMNS)


                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1178
                self.match(fugue_sqlParser.ALTER)
                self.state = 1179
                self.match(fugue_sqlParser.TABLE)
                self.state = 1180
                self.multipartIdentifier()
                self.state = 1181
                self.match(fugue_sqlParser.ADD)
                self.state = 1182
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1183
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1185
                self.match(fugue_sqlParser.ALTER)
                self.state = 1186
                self.match(fugue_sqlParser.TABLE)
                self.state = 1187
                self.multipartIdentifier()
                self.state = 1188
                self.match(fugue_sqlParser.ADD)
                self.state = 1189
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1190
                self.match(fugue_sqlParser.T__2)
                self.state = 1191
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1192
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1194
                self.match(fugue_sqlParser.ALTER)
                self.state = 1195
                self.match(fugue_sqlParser.TABLE)
                self.state = 1196
                localctx.table = self.multipartIdentifier()
                self.state = 1197
                self.match(fugue_sqlParser.RENAME)
                self.state = 1198
                self.match(fugue_sqlParser.COLUMN)
                self.state = 1199
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1200
                self.match(fugue_sqlParser.TO)
                self.state = 1201
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1203
                self.match(fugue_sqlParser.ALTER)
                self.state = 1204
                self.match(fugue_sqlParser.TABLE)
                self.state = 1205
                self.multipartIdentifier()
                self.state = 1206
                self.match(fugue_sqlParser.DROP)
                self.state = 1207
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1208
                self.match(fugue_sqlParser.T__2)
                self.state = 1209
                localctx.columns = self.multipartIdentifierList()
                self.state = 1210
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1212
                self.match(fugue_sqlParser.ALTER)
                self.state = 1213
                self.match(fugue_sqlParser.TABLE)
                self.state = 1214
                self.multipartIdentifier()
                self.state = 1215
                self.match(fugue_sqlParser.DROP)
                self.state = 1216
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1217
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1219
                self.match(fugue_sqlParser.ALTER)
                self.state = 1220
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1221
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1222
                self.match(fugue_sqlParser.RENAME)
                self.state = 1223
                self.match(fugue_sqlParser.TO)
                self.state = 1224
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1226
                self.match(fugue_sqlParser.ALTER)
                self.state = 1227
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1228
                self.multipartIdentifier()
                self.state = 1229
                self.match(fugue_sqlParser.SET)
                self.state = 1230
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1231
                self.tablePropertyList()
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1233
                self.match(fugue_sqlParser.ALTER)
                self.state = 1234
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1235
                self.multipartIdentifier()
                self.state = 1236
                self.match(fugue_sqlParser.UNSET)
                self.state = 1237
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1238
                    self.match(fugue_sqlParser.IF)
                    self.state = 1239
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1242
                self.tablePropertyList()
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1244
                self.match(fugue_sqlParser.ALTER)
                self.state = 1245
                self.match(fugue_sqlParser.TABLE)
                self.state = 1246
                localctx.table = self.multipartIdentifier()
                self.state = 1247
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ALTER or _la==fugue_sqlParser.CHANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1248
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1251
                localctx.column = self.multipartIdentifier()
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AFTER or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (fugue_sqlParser.COMMENT - 79)) | (1 << (fugue_sqlParser.DROP - 79)) | (1 << (fugue_sqlParser.FIRST - 79)))) != 0) or _la==fugue_sqlParser.SET or _la==fugue_sqlParser.TYPE:
                    self.state = 1252
                    self.alterColumnAction()


                pass

            elif la_ == 23:
                localctx = fugue_sqlParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1255
                self.match(fugue_sqlParser.ALTER)
                self.state = 1256
                self.match(fugue_sqlParser.TABLE)
                self.state = 1257
                localctx.table = self.multipartIdentifier()
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1258
                    self.partitionSpec()


                self.state = 1261
                self.match(fugue_sqlParser.CHANGE)
                self.state = 1263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1262
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1265
                localctx.colName = self.multipartIdentifier()
                self.state = 1266
                self.colType()
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.FIRST:
                    self.state = 1267
                    self.colPosition()


                pass

            elif la_ == 24:
                localctx = fugue_sqlParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1270
                self.match(fugue_sqlParser.ALTER)
                self.state = 1271
                self.match(fugue_sqlParser.TABLE)
                self.state = 1272
                localctx.table = self.multipartIdentifier()
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1273
                    self.partitionSpec()


                self.state = 1276
                self.match(fugue_sqlParser.REPLACE)
                self.state = 1277
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1278
                self.match(fugue_sqlParser.T__2)
                self.state = 1279
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1280
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 25:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1282
                self.match(fugue_sqlParser.ALTER)
                self.state = 1283
                self.match(fugue_sqlParser.TABLE)
                self.state = 1284
                self.multipartIdentifier()
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1285
                    self.partitionSpec()


                self.state = 1288
                self.match(fugue_sqlParser.SET)
                self.state = 1289
                self.match(fugue_sqlParser.SERDE)
                self.state = 1290
                self.match(fugue_sqlParser.STRING)
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WITH:
                    self.state = 1291
                    self.match(fugue_sqlParser.WITH)
                    self.state = 1292
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 1293
                    self.tablePropertyList()


                pass

            elif la_ == 26:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1296
                self.match(fugue_sqlParser.ALTER)
                self.state = 1297
                self.match(fugue_sqlParser.TABLE)
                self.state = 1298
                self.multipartIdentifier()
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1299
                    self.partitionSpec()


                self.state = 1302
                self.match(fugue_sqlParser.SET)
                self.state = 1303
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 1304
                self.tablePropertyList()
                pass

            elif la_ == 27:
                localctx = fugue_sqlParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1306
                self.match(fugue_sqlParser.ALTER)
                self.state = 1307
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1308
                self.multipartIdentifier()
                self.state = 1309
                self.match(fugue_sqlParser.ADD)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1310
                    self.match(fugue_sqlParser.IF)
                    self.state = 1311
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1312
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1316 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1315
                    self.partitionSpecLocation()
                    self.state = 1318 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.PARTITION):
                        break

                pass

            elif la_ == 28:
                localctx = fugue_sqlParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1320
                self.match(fugue_sqlParser.ALTER)
                self.state = 1321
                self.match(fugue_sqlParser.TABLE)
                self.state = 1322
                self.multipartIdentifier()
                self.state = 1323
                localctx.ifrom = self.partitionSpec()
                self.state = 1324
                self.match(fugue_sqlParser.RENAME)
                self.state = 1325
                self.match(fugue_sqlParser.TO)
                self.state = 1326
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 29:
                localctx = fugue_sqlParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1328
                self.match(fugue_sqlParser.ALTER)
                self.state = 1329
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1330
                self.multipartIdentifier()
                self.state = 1331
                self.match(fugue_sqlParser.DROP)
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1332
                    self.match(fugue_sqlParser.IF)
                    self.state = 1333
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1336
                self.partitionSpec()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 1337
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1338
                    self.partitionSpec()
                    self.state = 1343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PURGE:
                    self.state = 1344
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 30:
                localctx = fugue_sqlParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1347
                self.match(fugue_sqlParser.ALTER)
                self.state = 1348
                self.match(fugue_sqlParser.TABLE)
                self.state = 1349
                self.multipartIdentifier()
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1350
                    self.partitionSpec()


                self.state = 1353
                self.match(fugue_sqlParser.SET)
                self.state = 1354
                self.locationSpec()
                pass

            elif la_ == 31:
                localctx = fugue_sqlParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 1356
                self.match(fugue_sqlParser.ALTER)
                self.state = 1357
                self.match(fugue_sqlParser.TABLE)
                self.state = 1358
                self.multipartIdentifier()
                self.state = 1359
                self.match(fugue_sqlParser.RECOVER)
                self.state = 1360
                self.match(fugue_sqlParser.PARTITIONS)
                pass

            elif la_ == 32:
                localctx = fugue_sqlParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 1362
                self.match(fugue_sqlParser.DROP)
                self.state = 1363
                self.match(fugue_sqlParser.TABLE)
                self.state = 1366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1364
                    self.match(fugue_sqlParser.IF)
                    self.state = 1365
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1368
                self.multipartIdentifier()
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PURGE:
                    self.state = 1369
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 33:
                localctx = fugue_sqlParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1372
                self.match(fugue_sqlParser.DROP)
                self.state = 1373
                self.match(fugue_sqlParser.VIEW)
                self.state = 1376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1374
                    self.match(fugue_sqlParser.IF)
                    self.state = 1375
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1378
                self.multipartIdentifier()
                pass

            elif la_ == 34:
                localctx = fugue_sqlParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1379
                self.match(fugue_sqlParser.CREATE)
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1380
                    self.match(fugue_sqlParser.OR)
                    self.state = 1381
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.GLOBAL or _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.GLOBAL:
                        self.state = 1384
                        self.match(fugue_sqlParser.GLOBAL)


                    self.state = 1387
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1390
                self.match(fugue_sqlParser.VIEW)
                self.state = 1394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1391
                    self.match(fugue_sqlParser.IF)
                    self.state = 1392
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1393
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1396
                self.multipartIdentifier()
                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1397
                    self.identifierCommentList()


                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.PARTITIONED or _la==fugue_sqlParser.TBLPROPERTIES:
                    self.state = 1406
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 1400
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.PARTITIONED]:
                        self.state = 1401
                        self.match(fugue_sqlParser.PARTITIONED)
                        self.state = 1402
                        self.match(fugue_sqlParser.ON)
                        self.state = 1403
                        self.identifierList()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 1404
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1405
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1411
                self.match(fugue_sqlParser.AS)
                self.state = 1412
                self.query()
                pass

            elif la_ == 35:
                localctx = fugue_sqlParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1414
                self.match(fugue_sqlParser.CREATE)
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1415
                    self.match(fugue_sqlParser.OR)
                    self.state = 1416
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.GLOBAL:
                    self.state = 1419
                    self.match(fugue_sqlParser.GLOBAL)


                self.state = 1422
                self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1423
                self.match(fugue_sqlParser.VIEW)
                self.state = 1424
                self.tableIdentifier()
                self.state = 1429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1425
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1426
                    self.colTypeList()
                    self.state = 1427
                    self.match(fugue_sqlParser.T__3)


                self.state = 1431
                self.tableProvider()
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1432
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1433
                    self.tablePropertyList()


                pass

            elif la_ == 36:
                localctx = fugue_sqlParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1436
                self.match(fugue_sqlParser.ALTER)
                self.state = 1437
                self.match(fugue_sqlParser.VIEW)
                self.state = 1438
                self.multipartIdentifier()
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS:
                    self.state = 1439
                    self.match(fugue_sqlParser.AS)


                self.state = 1442
                self.query()
                pass

            elif la_ == 37:
                localctx = fugue_sqlParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1444
                self.match(fugue_sqlParser.CREATE)
                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1445
                    self.match(fugue_sqlParser.OR)
                    self.state = 1446
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1449
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1452
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1453
                    self.match(fugue_sqlParser.IF)
                    self.state = 1454
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1455
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1458
                self.multipartIdentifier()
                self.state = 1459
                self.match(fugue_sqlParser.AS)
                self.state = 1460
                localctx.className = self.match(fugue_sqlParser.STRING)
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.USING:
                    self.state = 1461
                    self.match(fugue_sqlParser.USING)
                    self.state = 1462
                    self.resource()
                    self.state = 1467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 1463
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1464
                        self.resource()
                        self.state = 1469
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 38:
                localctx = fugue_sqlParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1472
                self.match(fugue_sqlParser.DROP)
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1473
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1476
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1477
                    self.match(fugue_sqlParser.IF)
                    self.state = 1478
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1481
                self.multipartIdentifier()
                pass

            elif la_ == 39:
                localctx = fugue_sqlParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1482
                self.match(fugue_sqlParser.EXPLAIN)
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (fugue_sqlParser.CODEGEN - 74)) | (1 << (fugue_sqlParser.COST - 74)) | (1 << (fugue_sqlParser.EXTENDED - 74)) | (1 << (fugue_sqlParser.FORMATTED - 74)))) != 0) or _la==fugue_sqlParser.LOGICAL:
                    self.state = 1483
                    _la = self._input.LA(1)
                    if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (fugue_sqlParser.CODEGEN - 74)) | (1 << (fugue_sqlParser.COST - 74)) | (1 << (fugue_sqlParser.EXTENDED - 74)) | (1 << (fugue_sqlParser.FORMATTED - 74)))) != 0) or _la==fugue_sqlParser.LOGICAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1486
                self.statement()
                pass

            elif la_ == 40:
                localctx = fugue_sqlParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1487
                self.match(fugue_sqlParser.SHOW)
                self.state = 1488
                self.match(fugue_sqlParser.TABLES)
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1489
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1490
                    self.multipartIdentifier()


                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1493
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1496
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 41:
                localctx = fugue_sqlParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1499
                self.match(fugue_sqlParser.SHOW)
                self.state = 1500
                self.match(fugue_sqlParser.TABLE)
                self.state = 1501
                self.match(fugue_sqlParser.EXTENDED)
                self.state = 1504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1502
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1503
                    localctx.ns = self.multipartIdentifier()


                self.state = 1506
                self.match(fugue_sqlParser.LIKE)
                self.state = 1507
                localctx.pattern = self.match(fugue_sqlParser.STRING)
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1508
                    self.partitionSpec()


                pass

            elif la_ == 42:
                localctx = fugue_sqlParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1511
                self.match(fugue_sqlParser.SHOW)
                self.state = 1512
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1513
                localctx.table = self.multipartIdentifier()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1514
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1515
                    localctx.key = self.tablePropertyKey()
                    self.state = 1516
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 43:
                localctx = fugue_sqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1520
                self.match(fugue_sqlParser.SHOW)
                self.state = 1521
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1522
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1523
                localctx.table = self.multipartIdentifier()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1524
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1525
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 44:
                localctx = fugue_sqlParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1528
                self.match(fugue_sqlParser.SHOW)
                self.state = 1529
                self.match(fugue_sqlParser.VIEWS)
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1530
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1531
                    self.multipartIdentifier()


                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1534
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1537
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 45:
                localctx = fugue_sqlParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1540
                self.match(fugue_sqlParser.SHOW)
                self.state = 1541
                self.match(fugue_sqlParser.PARTITIONS)
                self.state = 1542
                self.multipartIdentifier()
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1543
                    self.partitionSpec()


                pass

            elif la_ == 46:
                localctx = fugue_sqlParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1546
                self.match(fugue_sqlParser.SHOW)
                self.state = 1548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1547
                    self.identifier()


                self.state = 1550
                self.match(fugue_sqlParser.FUNCTIONS)
                self.state = 1558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1552
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                    if la_ == 1:
                        self.state = 1551
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1556
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                    if la_ == 1:
                        self.state = 1554
                        self.multipartIdentifier()
                        pass

                    elif la_ == 2:
                        self.state = 1555
                        localctx.pattern = self.match(fugue_sqlParser.STRING)
                        pass




                pass

            elif la_ == 47:
                localctx = fugue_sqlParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1560
                self.match(fugue_sqlParser.SHOW)
                self.state = 1561
                self.match(fugue_sqlParser.CREATE)
                self.state = 1562
                self.match(fugue_sqlParser.TABLE)
                self.state = 1563
                self.multipartIdentifier()
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS:
                    self.state = 1564
                    self.match(fugue_sqlParser.AS)
                    self.state = 1565
                    self.match(fugue_sqlParser.SERDE)


                pass

            elif la_ == 48:
                localctx = fugue_sqlParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1568
                self.match(fugue_sqlParser.SHOW)
                self.state = 1569
                self.match(fugue_sqlParser.CURRENT)
                self.state = 1570
                self.match(fugue_sqlParser.NAMESPACE)
                pass

            elif la_ == 49:
                localctx = fugue_sqlParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1571
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1572
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1573
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1576
                self.describeFuncName()
                pass

            elif la_ == 50:
                localctx = fugue_sqlParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1577
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1578
                self.namespace()
                self.state = 1580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1579
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1582
                self.multipartIdentifier()
                pass

            elif la_ == 51:
                localctx = fugue_sqlParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1584
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1585
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1588
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.EXTENDED or _la==fugue_sqlParser.FORMATTED):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1591
                self.multipartIdentifier()
                self.state = 1593
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1592
                    self.partitionSpec()


                self.state = 1596
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1595
                    self.describeColName()


                pass

            elif la_ == 52:
                localctx = fugue_sqlParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1598
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.QUERY:
                    self.state = 1599
                    self.match(fugue_sqlParser.QUERY)


                self.state = 1602
                self.query()
                pass

            elif la_ == 53:
                localctx = fugue_sqlParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1603
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1604
                self.match(fugue_sqlParser.ON)
                self.state = 1605
                self.namespace()
                self.state = 1606
                self.multipartIdentifier()
                self.state = 1607
                self.match(fugue_sqlParser.IS)
                self.state = 1608
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.NULL or _la==fugue_sqlParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 54:
                localctx = fugue_sqlParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1610
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1611
                self.match(fugue_sqlParser.ON)
                self.state = 1612
                self.match(fugue_sqlParser.TABLE)
                self.state = 1613
                self.multipartIdentifier()
                self.state = 1614
                self.match(fugue_sqlParser.IS)
                self.state = 1615
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.NULL or _la==fugue_sqlParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 55:
                localctx = fugue_sqlParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1617
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1618
                self.match(fugue_sqlParser.TABLE)
                self.state = 1619
                self.multipartIdentifier()
                pass

            elif la_ == 56:
                localctx = fugue_sqlParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1620
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1621
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1625
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1622
                            self.matchWildcard() 
                        self.state = 1627
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                    pass


                pass

            elif la_ == 57:
                localctx = fugue_sqlParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1630
                self.match(fugue_sqlParser.CACHE)
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 1631
                    self.match(fugue_sqlParser.LAZY)


                self.state = 1634
                self.match(fugue_sqlParser.TABLE)
                self.state = 1635
                self.multipartIdentifier()
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1636
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1637
                    localctx.options = self.tablePropertyList()


                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.FILL) | (1 << fugue_sqlParser.PROCESS) | (1 << fugue_sqlParser.ZIP) | (1 << fugue_sqlParser.SAVE) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (fugue_sqlParser.CREATE - 87)) | (1 << (fugue_sqlParser.DROP - 87)) | (1 << (fugue_sqlParser.FROM - 87)))) != 0) or ((((_la - 170)) & ~0x3f) == 0 and ((1 << (_la - 170)) & ((1 << (fugue_sqlParser.LOAD - 170)) | (1 << (fugue_sqlParser.MAP - 170)) | (1 << (fugue_sqlParser.REDUCE - 170)) | (1 << (fugue_sqlParser.RENAME - 170)))) != 0) or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (fugue_sqlParser.SELECT - 240)) | (1 << (fugue_sqlParser.TABLE - 240)) | (1 << (fugue_sqlParser.TRANSFORM - 240)) | (1 << (fugue_sqlParser.VALUES - 240)) | (1 << (fugue_sqlParser.WITH - 240)))) != 0):
                    self.state = 1641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1640
                        self.match(fugue_sqlParser.AS)


                    self.state = 1643
                    self.query()


                pass

            elif la_ == 58:
                localctx = fugue_sqlParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1646
                self.match(fugue_sqlParser.UNCACHE)
                self.state = 1647
                self.match(fugue_sqlParser.TABLE)
                self.state = 1650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1648
                    self.match(fugue_sqlParser.IF)
                    self.state = 1649
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1652
                self.multipartIdentifier()
                pass

            elif la_ == 59:
                localctx = fugue_sqlParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1653
                self.match(fugue_sqlParser.CLEAR)
                self.state = 1654
                self.match(fugue_sqlParser.CACHE)
                pass

            elif la_ == 60:
                localctx = fugue_sqlParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1655
                self.match(fugue_sqlParser.LOAD)
                self.state = 1656
                self.match(fugue_sqlParser.DATA)
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1657
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1660
                self.match(fugue_sqlParser.INPATH)
                self.state = 1661
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OVERWRITE:
                    self.state = 1662
                    self.match(fugue_sqlParser.OVERWRITE)


                self.state = 1665
                self.match(fugue_sqlParser.INTO)
                self.state = 1666
                self.match(fugue_sqlParser.TABLE)
                self.state = 1667
                self.multipartIdentifier()
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1668
                    self.partitionSpec()


                pass

            elif la_ == 61:
                localctx = fugue_sqlParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1671
                self.match(fugue_sqlParser.TRUNCATE)
                self.state = 1672
                self.match(fugue_sqlParser.TABLE)
                self.state = 1673
                self.multipartIdentifier()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1674
                    self.partitionSpec()


                pass

            elif la_ == 62:
                localctx = fugue_sqlParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1677
                self.match(fugue_sqlParser.MSCK)
                self.state = 1678
                self.match(fugue_sqlParser.REPAIR)
                self.state = 1679
                self.match(fugue_sqlParser.TABLE)
                self.state = 1680
                self.multipartIdentifier()
                pass

            elif la_ == 63:
                localctx = fugue_sqlParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1681
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ADD or _la==fugue_sqlParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1682
                self.identifier()
                self.state = 1690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1683
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1684
                            self.matchWildcard() 
                        self.state = 1689
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

                    pass


                pass

            elif la_ == 64:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1692
                self.match(fugue_sqlParser.SET)
                self.state = 1693
                self.match(fugue_sqlParser.ROLE)
                self.state = 1697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1694
                        self.matchWildcard() 
                    self.state = 1699
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

                pass

            elif la_ == 65:
                localctx = fugue_sqlParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1700
                self.match(fugue_sqlParser.SET)
                self.state = 1704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1701
                        self.matchWildcard() 
                    self.state = 1706
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                pass

            elif la_ == 66:
                localctx = fugue_sqlParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1707
                self.match(fugue_sqlParser.RESET)
                pass

            elif la_ == 67:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1708
                self.unsupportedHiveNativeCommands()
                self.state = 1712
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1709
                        self.matchWildcard() 
                    self.state = 1714
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unsupportedHiveNativeCommands

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsupportedHiveNativeCommands" ):
                return visitor.visitUnsupportedHiveNativeCommands(self)
            else:
                return visitor.visitChildren(self)




    def unsupportedHiveNativeCommands(self):

        localctx = fugue_sqlParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 1885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1717
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1718
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1719
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1720
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1721
                localctx.kw1 = self.match(fugue_sqlParser.GRANT)
                self.state = 1723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1722
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1725
                localctx.kw1 = self.match(fugue_sqlParser.REVOKE)
                self.state = 1727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1726
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1729
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1730
                localctx.kw2 = self.match(fugue_sqlParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1731
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1732
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                self.state = 1734
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1733
                    localctx.kw3 = self.match(fugue_sqlParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1736
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1737
                localctx.kw2 = self.match(fugue_sqlParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1738
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1739
                localctx.kw2 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1740
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1741
                localctx.kw2 = self.match(fugue_sqlParser.CURRENT)
                self.state = 1742
                localctx.kw3 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1743
                localctx.kw1 = self.match(fugue_sqlParser.EXPORT)
                self.state = 1744
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1745
                localctx.kw1 = self.match(fugue_sqlParser.IMPORT)
                self.state = 1746
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1747
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1748
                localctx.kw2 = self.match(fugue_sqlParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1749
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1750
                localctx.kw2 = self.match(fugue_sqlParser.CREATE)
                self.state = 1751
                localctx.kw3 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1752
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1753
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1754
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1755
                localctx.kw2 = self.match(fugue_sqlParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1756
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1757
                localctx.kw2 = self.match(fugue_sqlParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1758
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1759
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1760
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1761
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1762
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1763
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1764
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1765
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1766
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1767
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1768
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1769
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1770
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1771
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1772
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1773
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1774
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1775
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1776
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1777
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1778
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1779
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1780
                self.tableIdentifier()
                self.state = 1781
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1782
                localctx.kw4 = self.match(fugue_sqlParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1784
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1785
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1786
                self.tableIdentifier()
                self.state = 1787
                localctx.kw3 = self.match(fugue_sqlParser.CLUSTERED)
                self.state = 1788
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1790
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1791
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1792
                self.tableIdentifier()
                self.state = 1793
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1794
                localctx.kw4 = self.match(fugue_sqlParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1796
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1797
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1798
                self.tableIdentifier()
                self.state = 1799
                localctx.kw3 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1800
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1802
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1803
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1804
                self.tableIdentifier()
                self.state = 1805
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1806
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1808
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1809
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1810
                self.tableIdentifier()
                self.state = 1811
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1812
                localctx.kw4 = self.match(fugue_sqlParser.STORED)
                self.state = 1813
                localctx.kw5 = self.match(fugue_sqlParser.AS)
                self.state = 1814
                localctx.kw6 = self.match(fugue_sqlParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1816
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1817
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1818
                self.tableIdentifier()
                self.state = 1819
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1820
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1821
                localctx.kw5 = self.match(fugue_sqlParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1823
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1824
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1825
                self.tableIdentifier()
                self.state = 1826
                localctx.kw3 = self.match(fugue_sqlParser.EXCHANGE)
                self.state = 1827
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1829
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1830
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1831
                self.tableIdentifier()
                self.state = 1832
                localctx.kw3 = self.match(fugue_sqlParser.ARCHIVE)
                self.state = 1833
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1835
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1836
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1837
                self.tableIdentifier()
                self.state = 1838
                localctx.kw3 = self.match(fugue_sqlParser.UNARCHIVE)
                self.state = 1839
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1841
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1842
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1843
                self.tableIdentifier()
                self.state = 1844
                localctx.kw3 = self.match(fugue_sqlParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1846
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1847
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1848
                self.tableIdentifier()
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1849
                    self.partitionSpec()


                self.state = 1852
                localctx.kw3 = self.match(fugue_sqlParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1854
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1855
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1856
                self.tableIdentifier()
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1857
                    self.partitionSpec()


                self.state = 1860
                localctx.kw3 = self.match(fugue_sqlParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1862
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1863
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1864
                self.tableIdentifier()
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1865
                    self.partitionSpec()


                self.state = 1868
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1869
                localctx.kw4 = self.match(fugue_sqlParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1871
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1872
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1873
                self.tableIdentifier()
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1874
                    self.partitionSpec()


                self.state = 1877
                localctx.kw3 = self.match(fugue_sqlParser.REPLACE)
                self.state = 1878
                localctx.kw4 = self.match(fugue_sqlParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1880
                localctx.kw1 = self.match(fugue_sqlParser.START)
                self.state = 1881
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1882
                localctx.kw1 = self.match(fugue_sqlParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1883
                localctx.kw1 = self.match(fugue_sqlParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1884
                localctx.kw1 = self.match(fugue_sqlParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableHeader" ):
                return visitor.visitCreateTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def createTableHeader(self):

        localctx = fugue_sqlParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.match(fugue_sqlParser.CREATE)
            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.TEMPORARY:
                self.state = 1888
                self.match(fugue_sqlParser.TEMPORARY)


            self.state = 1892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.EXTERNAL:
                self.state = 1891
                self.match(fugue_sqlParser.EXTERNAL)


            self.state = 1894
            self.match(fugue_sqlParser.TABLE)
            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1895
                self.match(fugue_sqlParser.IF)
                self.state = 1896
                self.match(fugue_sqlParser.NOT)
                self.state = 1897
                self.match(fugue_sqlParser.EXISTS)


            self.state = 1900
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_replaceTableHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTableHeader" ):
                return visitor.visitReplaceTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def replaceTableHeader(self):

        localctx = fugue_sqlParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.CREATE:
                self.state = 1902
                self.match(fugue_sqlParser.CREATE)
                self.state = 1903
                self.match(fugue_sqlParser.OR)


            self.state = 1906
            self.match(fugue_sqlParser.REPLACE)
            self.state = 1907
            self.match(fugue_sqlParser.TABLE)
            self.state = 1908
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_bucketSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBucketSpec" ):
                return visitor.visitBucketSpec(self)
            else:
                return visitor.visitChildren(self)




    def bucketSpec(self):

        localctx = fugue_sqlParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.match(fugue_sqlParser.CLUSTERED)
            self.state = 1911
            self.match(fugue_sqlParser.BY)
            self.state = 1912
            self.identifierList()
            self.state = 1916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.SORTED:
                self.state = 1913
                self.match(fugue_sqlParser.SORTED)
                self.state = 1914
                self.match(fugue_sqlParser.BY)
                self.state = 1915
                self.orderedIdentifierList()


            self.state = 1918
            self.match(fugue_sqlParser.INTO)
            self.state = 1919
            self.match(fugue_sqlParser.INTEGER_VALUE)
            self.state = 1920
            self.match(fugue_sqlParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_skewSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewSpec" ):
                return visitor.visitSkewSpec(self)
            else:
                return visitor.visitChildren(self)




    def skewSpec(self):

        localctx = fugue_sqlParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            self.match(fugue_sqlParser.SKEWED)
            self.state = 1923
            self.match(fugue_sqlParser.BY)
            self.state = 1924
            self.identifierList()
            self.state = 1925
            self.match(fugue_sqlParser.ON)
            self.state = 1928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1926
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1927
                self.nestedConstantList()
                pass


            self.state = 1933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1930
                self.match(fugue_sqlParser.STORED)
                self.state = 1931
                self.match(fugue_sqlParser.AS)
                self.state = 1932
                self.match(fugue_sqlParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_locationSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationSpec" ):
                return visitor.visitLocationSpec(self)
            else:
                return visitor.visitChildren(self)




    def locationSpec(self):

        localctx = fugue_sqlParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.match(fugue_sqlParser.LOCATION)
            self.state = 1936
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_commentSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentSpec" ):
                return visitor.visitCommentSpec(self)
            else:
                return visitor.visitChildren(self)




    def commentSpec(self):

        localctx = fugue_sqlParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            self.match(fugue_sqlParser.COMMENT)
            self.state = 1939
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_query

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = fugue_sqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.WITH:
                self.state = 1941
                self.ctes()


            self.state = 1944
            self.queryTerm(0)
            self.state = 1945
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteHiveDir" ):
                return visitor.visitInsertOverwriteHiveDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteDir" ):
                return visitor.visitInsertOverwriteDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteTable" ):
                return visitor.visitInsertOverwriteTable(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoTable" ):
                return visitor.visitInsertIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def insertInto(self):

        localctx = fugue_sqlParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 2002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1947
                self.match(fugue_sqlParser.INSERT)
                self.state = 1948
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1949
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1952
                self.multipartIdentifier()
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1953
                    self.partitionSpec()
                    self.state = 1957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.IF:
                        self.state = 1954
                        self.match(fugue_sqlParser.IF)
                        self.state = 1955
                        self.match(fugue_sqlParser.NOT)
                        self.state = 1956
                        self.match(fugue_sqlParser.EXISTS)




                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1961
                self.match(fugue_sqlParser.INSERT)
                self.state = 1962
                self.match(fugue_sqlParser.INTO)
                self.state = 1964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1963
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1966
                self.multipartIdentifier()
                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1967
                    self.partitionSpec()


                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1970
                    self.match(fugue_sqlParser.IF)
                    self.state = 1971
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1972
                    self.match(fugue_sqlParser.EXISTS)


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1975
                self.match(fugue_sqlParser.INSERT)
                self.state = 1976
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1977
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1980
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 1981
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ROW:
                    self.state = 1982
                    self.rowFormat()


                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STORED:
                    self.state = 1985
                    self.createFileFormat()


                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1988
                self.match(fugue_sqlParser.INSERT)
                self.state = 1989
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1990
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1993
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STRING:
                    self.state = 1994
                    localctx.path = self.match(fugue_sqlParser.STRING)


                self.state = 1997
                self.tableProvider()
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1998
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1999
                    localctx.options = self.tablePropertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpecLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpecLocation" ):
                return visitor.visitPartitionSpecLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpecLocation(self):

        localctx = fugue_sqlParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.partitionSpec()
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.LOCATION:
                self.state = 2005
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionValContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = fugue_sqlParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.match(fugue_sqlParser.PARTITION)
            self.state = 2009
            self.match(fugue_sqlParser.T__2)
            self.state = 2010
            self.partitionVal()
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2011
                self.match(fugue_sqlParser.T__0)
                self.state = 2012
                self.partitionVal()
                self.state = 2017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2018
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionVal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = fugue_sqlParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.identifier()
            self.state = 2023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.EQUAL:
                self.state = 2021
                self.match(fugue_sqlParser.EQUAL)
                self.state = 2022
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace" ):
                return visitor.visitNamespace(self)
            else:
                return visitor.visitChildren(self)




    def namespace(self):

        localctx = fugue_sqlParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.DATABASE or _la==fugue_sqlParser.NAMESPACE or _la==fugue_sqlParser.SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeFuncName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFuncName" ):
                return visitor.visitDescribeFuncName(self)
            else:
                return visitor.visitChildren(self)




    def describeFuncName(self):

        localctx = fugue_sqlParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_describeFuncName)
        try:
            self.state = 2032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2027
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2028
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2029
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2030
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2031
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeColName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeColName" ):
                return visitor.visitDescribeColName(self)
            else:
                return visitor.visitChildren(self)




    def describeColName(self):

        localctx = fugue_sqlParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 2039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__4:
                self.state = 2035
                self.match(fugue_sqlParser.T__4)
                self.state = 2036
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ctes

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtes" ):
                return visitor.visitCtes(self)
            else:
                return visitor.visitChildren(self)




    def ctes(self):

        localctx = fugue_sqlParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self.match(fugue_sqlParser.WITH)
            self.state = 2043
            self.namedQuery()
            self.state = 2048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2044
                self.match(fugue_sqlParser.T__0)
                self.state = 2045
                self.namedQuery()
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedQuery

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = fugue_sqlParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            localctx.name = self.errorCapturingIdentifier()
            self.state = 2053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 2052
                localctx.columnAliases = self.identifierList()


            self.state = 2056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AS:
                self.state = 2055
                self.match(fugue_sqlParser.AS)


            self.state = 2058
            self.match(fugue_sqlParser.T__2)
            self.state = 2059
            self.query()
            self.state = 2060
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProvider

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProvider" ):
                return visitor.visitTableProvider(self)
            else:
                return visitor.visitChildren(self)




    def tableProvider(self):

        localctx = fugue_sqlParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.match(fugue_sqlParser.USING)
            self.state = 2063
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # TablePropertyListContext
            self.partitioning = None # TransformListContext
            self.tableProps = None # TablePropertyListContext

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.OPTIONS)
            else:
                return self.getToken(fugue_sqlParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def transformList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableClauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableClauses" ):
                return visitor.visitCreateTableClauses(self)
            else:
                return visitor.visitChildren(self)




    def createTableClauses(self):

        localctx = fugue_sqlParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.CLUSTERED or _la==fugue_sqlParser.COMMENT or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (fugue_sqlParser.LOCATION - 172)) | (1 << (fugue_sqlParser.OPTIONS - 172)) | (1 << (fugue_sqlParser.PARTITIONED - 172)))) != 0) or _la==fugue_sqlParser.TBLPROPERTIES:
                self.state = 2075
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.OPTIONS]:
                    self.state = 2065
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 2066
                    localctx.options = self.tablePropertyList()
                    pass
                elif token in [fugue_sqlParser.PARTITIONED]:
                    self.state = 2067
                    self.match(fugue_sqlParser.PARTITIONED)
                    self.state = 2068
                    self.match(fugue_sqlParser.BY)
                    self.state = 2069
                    localctx.partitioning = self.transformList()
                    pass
                elif token in [fugue_sqlParser.CLUSTERED]:
                    self.state = 2070
                    self.bucketSpec()
                    pass
                elif token in [fugue_sqlParser.LOCATION]:
                    self.state = 2071
                    self.locationSpec()
                    pass
                elif token in [fugue_sqlParser.COMMENT]:
                    self.state = 2072
                    self.commentSpec()
                    pass
                elif token in [fugue_sqlParser.TBLPROPERTIES]:
                    self.state = 2073
                    self.match(fugue_sqlParser.TBLPROPERTIES)
                    self.state = 2074
                    localctx.tableProps = self.tablePropertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyList" ):
                return visitor.visitTablePropertyList(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyList(self):

        localctx = fugue_sqlParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2080
            self.match(fugue_sqlParser.T__2)
            self.state = 2081
            self.tableProperty()
            self.state = 2086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2082
                self.match(fugue_sqlParser.T__0)
                self.state = 2083
                self.tableProperty()
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2089
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyValueContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProperty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProperty" ):
                return visitor.visitTableProperty(self)
            else:
                return visitor.visitChildren(self)




    def tableProperty(self):

        localctx = fugue_sqlParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2091
            localctx.key = self.tablePropertyKey()
            self.state = 2096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.FALSE or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (fugue_sqlParser.TRUE - 275)) | (1 << (fugue_sqlParser.EQUAL - 275)) | (1 << (fugue_sqlParser.STRING - 275)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 275)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 275)))) != 0):
                self.state = 2093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.EQUAL:
                    self.state = 2092
                    self.match(fugue_sqlParser.EQUAL)


                self.state = 2095
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyKey" ):
                return visitor.visitTablePropertyKey(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyKey(self):

        localctx = fugue_sqlParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 2107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2098
                self.identifier()
                self.state = 2103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__4:
                    self.state = 2099
                    self.match(fugue_sqlParser.T__4)
                    self.state = 2100
                    self.identifier()
                    self.state = 2105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2106
                self.match(fugue_sqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyValue" ):
                return visitor.visitTablePropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyValue(self):

        localctx = fugue_sqlParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_tablePropertyValue)
        try:
            self.state = 2113
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2109
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [fugue_sqlParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2110
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass
            elif token in [fugue_sqlParser.FALSE, fugue_sqlParser.TRUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2111
                self.booleanValue()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2112
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constantList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantList" ):
                return visitor.visitConstantList(self)
            else:
                return visitor.visitChildren(self)




    def constantList(self):

        localctx = fugue_sqlParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(fugue_sqlParser.T__2)
            self.state = 2116
            self.constant()
            self.state = 2121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2117
                self.match(fugue_sqlParser.T__0)
                self.state = 2118
                self.constant()
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2124
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nestedConstantList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedConstantList" ):
                return visitor.visitNestedConstantList(self)
            else:
                return visitor.visitChildren(self)




    def nestedConstantList(self):

        localctx = fugue_sqlParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            self.match(fugue_sqlParser.T__2)
            self.state = 2127
            self.constantList()
            self.state = 2132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2128
                self.match(fugue_sqlParser.T__0)
                self.state = 2129
                self.constantList()
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2135
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(fugue_sqlParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFileFormat" ):
                return visitor.visitCreateFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def createFileFormat(self):

        localctx = fugue_sqlParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_createFileFormat)
        try:
            self.state = 2143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2137
                self.match(fugue_sqlParser.STORED)
                self.state = 2138
                self.match(fugue_sqlParser.AS)
                self.state = 2139
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2140
                self.match(fugue_sqlParser.STORED)
                self.state = 2141
                self.match(fugue_sqlParser.BY)
                self.state = 2142
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFileFormat" ):
                return visitor.visitGenericFileFormat(self)
            else:
                return visitor.visitChildren(self)



    def fileFormat(self):

        localctx = fugue_sqlParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_fileFormat)
        try:
            self.state = 2150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2145
                self.match(fugue_sqlParser.INPUTFORMAT)
                self.state = 2146
                localctx.inFmt = self.match(fugue_sqlParser.STRING)
                self.state = 2147
                self.match(fugue_sqlParser.OUTPUTFORMAT)
                self.state = 2148
                localctx.outFmt = self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2149
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_storageHandler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageHandler" ):
                return visitor.visitStorageHandler(self)
            else:
                return visitor.visitChildren(self)




    def storageHandler(self):

        localctx = fugue_sqlParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            self.match(fugue_sqlParser.STRING)
            self.state = 2156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 2153
                self.match(fugue_sqlParser.WITH)
                self.state = 2154
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 2155
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_resource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = fugue_sqlParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            self.identifier()
            self.state = 2159
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteFromTable" ):
                return visitor.visitDeleteFromTable(self)
            else:
                return visitor.visitChildren(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInsertQuery" ):
                return visitor.visitSingleInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultiInsertQueryBodyContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQuery" ):
                return visitor.visitMultiInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateTable" ):
                return visitor.visitUpdateTable(self)
            else:
                return visitor.visitChildren(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # MultipartIdentifierContext
            self.targetAlias = None # TableAliasContext
            self.source = None # MultipartIdentifierContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NotMatchedClauseContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeIntoTable" ):
                return visitor.visitMergeIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def dmlStatementNoWith(self):

        localctx = fugue_sqlParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 2212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INSERT]:
                localctx = fugue_sqlParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2161
                self.insertInto()
                self.state = 2162
                self.queryTerm(0)
                self.state = 2163
                self.queryOrganization()
                pass
            elif token in [fugue_sqlParser.FROM]:
                localctx = fugue_sqlParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2165
                self.fromClause()
                self.state = 2167 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2166
                    self.multiInsertQueryBody()
                    self.state = 2169 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.INSERT):
                        break

                pass
            elif token in [fugue_sqlParser.DELETE]:
                localctx = fugue_sqlParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2171
                self.match(fugue_sqlParser.DELETE)
                self.state = 2172
                self.match(fugue_sqlParser.FROM)
                self.state = 2173
                self.multipartIdentifier()
                self.state = 2174
                self.tableAlias()
                self.state = 2176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WHERE:
                    self.state = 2175
                    self.whereClause()


                pass
            elif token in [fugue_sqlParser.UPDATE]:
                localctx = fugue_sqlParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2178
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2179
                self.multipartIdentifier()
                self.state = 2180
                self.tableAlias()
                self.state = 2181
                self.setClause()
                self.state = 2183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WHERE:
                    self.state = 2182
                    self.whereClause()


                pass
            elif token in [fugue_sqlParser.MERGE]:
                localctx = fugue_sqlParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2185
                self.match(fugue_sqlParser.MERGE)
                self.state = 2186
                self.match(fugue_sqlParser.INTO)
                self.state = 2187
                localctx.target = self.multipartIdentifier()
                self.state = 2188
                localctx.targetAlias = self.tableAlias()
                self.state = 2189
                self.match(fugue_sqlParser.USING)
                self.state = 2195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 2190
                    localctx.source = self.multipartIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2191
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2192
                    localctx.sourceQuery = self.query()
                    self.state = 2193
                    self.match(fugue_sqlParser.T__3)
                    pass


                self.state = 2197
                localctx.sourceAlias = self.tableAlias()
                self.state = 2198
                self.match(fugue_sqlParser.ON)
                self.state = 2199
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 2203
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,263,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2200
                        self.matchedClause() 
                    self.state = 2205
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

                self.state = 2209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.WHEN:
                    self.state = 2206
                    self.notMatchedClause()
                    self.state = 2211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryOrganization

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOrganization" ):
                return visitor.visitQueryOrganization(self)
            else:
                return visitor.visitChildren(self)




    def queryOrganization(self):

        localctx = fugue_sqlParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 2214
                self.match(fugue_sqlParser.ORDER)
                self.state = 2215
                self.match(fugue_sqlParser.BY)
                self.state = 2216
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 2221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2217
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2218
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 2223
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,266,self._ctx)



            self.state = 2236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2226
                self.match(fugue_sqlParser.CLUSTER)
                self.state = 2227
                self.match(fugue_sqlParser.BY)
                self.state = 2228
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 2233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2229
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2230
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 2235
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,268,self._ctx)



            self.state = 2248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2238
                self.match(fugue_sqlParser.DISTRIBUTE)
                self.state = 2239
                self.match(fugue_sqlParser.BY)
                self.state = 2240
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 2245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2241
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2242
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 2247
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,270,self._ctx)



            self.state = 2260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2250
                self.match(fugue_sqlParser.SORT)
                self.state = 2251
                self.match(fugue_sqlParser.BY)
                self.state = 2252
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 2257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2253
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2254
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 2259
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,272,self._ctx)



            self.state = 2263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 2262
                self.windowClause()


            self.state = 2270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 2265
                self.match(fugue_sqlParser.LIMIT)
                self.state = 2268
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 2266
                    self.match(fugue_sqlParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 2267
                    localctx.limit = self.expression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiInsertQueryBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQueryBody" ):
                return visitor.visitMultiInsertQueryBody(self)
            else:
                return visitor.visitChildren(self)




    def multiInsertQueryBody(self):

        localctx = fugue_sqlParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            self.insertInto()
            self.state = 2273
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryPrimaryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class FugueTermContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueNestableTaskCollectionNoSelect(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTerm" ):
                return visitor.visitFugueTerm(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 216
        self.enterRecursionRule(localctx, 216, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.FROM, fugue_sqlParser.MAP, fugue_sqlParser.REDUCE, fugue_sqlParser.SELECT, fugue_sqlParser.TABLE, fugue_sqlParser.VALUES]:
                localctx = fugue_sqlParser.QueryTermDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2276
                self.queryPrimary()
                pass
            elif token in [fugue_sqlParser.FILL, fugue_sqlParser.PROCESS, fugue_sqlParser.ZIP, fugue_sqlParser.SAVE, fugue_sqlParser.ALTER, fugue_sqlParser.CREATE, fugue_sqlParser.DROP, fugue_sqlParser.LOAD, fugue_sqlParser.RENAME, fugue_sqlParser.TRANSFORM]:
                localctx = fugue_sqlParser.FugueTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2277
                self.fugueNestableTaskCollectionNoSelect()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2303
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2301
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2280
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2281
                        if not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 2282
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.EXCEPT or _la==fugue_sqlParser.INTERSECT or _la==fugue_sqlParser.SETMINUS or _la==fugue_sqlParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2284
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2283
                            self.setQuantifier()


                        self.state = 2286
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2287
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2288
                        if not not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "not fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 2289
                        localctx.operator = self.match(fugue_sqlParser.INTERSECT)
                        self.state = 2291
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2290
                            self.setQuantifier()


                        self.state = 2293
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2294
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2295
                        if not not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "not fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 2296
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.EXCEPT or _la==fugue_sqlParser.SETMINUS or _la==fugue_sqlParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2298
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2297
                            self.setQuantifier()


                        self.state = 2300
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 2305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuerySpecificationContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault1" ):
                return visitor.visitInlineTableDefault1(self)
            else:
                return visitor.visitChildren(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStmt" ):
                return visitor.visitFromStmt(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = fugue_sqlParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_queryPrimary)
        try:
            self.state = 2311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.MAP, fugue_sqlParser.REDUCE, fugue_sqlParser.SELECT]:
                localctx = fugue_sqlParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2306
                self.querySpecification()
                pass
            elif token in [fugue_sqlParser.FROM]:
                localctx = fugue_sqlParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2307
                self.fromStatement()
                pass
            elif token in [fugue_sqlParser.TABLE]:
                localctx = fugue_sqlParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2308
                self.match(fugue_sqlParser.TABLE)
                self.state = 2309
                self.multipartIdentifier()
                pass
            elif token in [fugue_sqlParser.VALUES]:
                localctx = fugue_sqlParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2310
                self.inlineTable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sortItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = fugue_sqlParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2313
            self.expression()
            self.state = 2315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2314
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 2317
                self.match(fugue_sqlParser.NULLS)
                self.state = 2318
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FIRST or _la==fugue_sqlParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatement" ):
                return visitor.visitFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def fromStatement(self):

        localctx = fugue_sqlParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            self.fromClause()
            self.state = 2323 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2322
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 2325 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatementBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatementBody" ):
                return visitor.visitFromStatementBody(self)
            else:
                return visitor.visitChildren(self)




    def fromStatementBody(self):

        localctx = fugue_sqlParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_fromStatementBody)
        try:
            self.state = 2354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2327
                self.transformClause()
                self.state = 2329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 2328
                    self.whereClause()


                self.state = 2331
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2333
                self.selectClause()
                self.state = 2337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2334
                        self.lateralView() 
                    self.state = 2339
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

                self.state = 2341
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2340
                    self.whereClause()


                self.state = 2344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2343
                    self.aggregationClause()


                self.state = 2347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2346
                    self.havingClause()


                self.state = 2350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                if la_ == 1:
                    self.state = 2349
                    self.windowClause()


                self.state = 2352
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)

        def optionalFromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.OptionalFromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularQuerySpecification" ):
                return visitor.visitRegularQuerySpecification(self)
            else:
                return visitor.visitChildren(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)

        def optionalFromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.OptionalFromClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformQuerySpecification" ):
                return visitor.visitTransformQuerySpecification(self)
            else:
                return visitor.visitChildren(self)



    def querySpecification(self):

        localctx = fugue_sqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_querySpecification)
        try:
            self.state = 2381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2356
                self.transformClause()
                self.state = 2357
                self.optionalFromClause()
                self.state = 2359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 2358
                    self.whereClause()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2361
                self.selectClause()
                self.state = 2362
                self.optionalFromClause()
                self.state = 2366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2363
                        self.lateralView() 
                    self.state = 2368
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

                self.state = 2370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2369
                    self.whereClause()


                self.state = 2373
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2372
                    self.aggregationClause()


                self.state = 2376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2375
                    self.havingClause()


                self.state = 2379
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                if la_ == 1:
                    self.state = 2378
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalFromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_optionalFromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalFromClause" ):
                return visitor.visitOptionalFromClause(self)
            else:
                return visitor.visitChildren(self)




    def optionalFromClause(self):

        localctx = fugue_sqlParser.OptionalFromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_optionalFromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2383
                self.fromClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)


        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformClause" ):
                return visitor.visitTransformClause(self)
            else:
                return visitor.visitChildren(self)




    def transformClause(self):

        localctx = fugue_sqlParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.SELECT]:
                self.state = 2386
                self.match(fugue_sqlParser.SELECT)
                self.state = 2387
                localctx.kind = self.match(fugue_sqlParser.TRANSFORM)
                self.state = 2388
                self.match(fugue_sqlParser.T__2)
                self.state = 2389
                self.namedExpressionSeq()
                self.state = 2390
                self.match(fugue_sqlParser.T__3)
                pass
            elif token in [fugue_sqlParser.MAP]:
                self.state = 2392
                localctx.kind = self.match(fugue_sqlParser.MAP)
                self.state = 2393
                self.namedExpressionSeq()
                pass
            elif token in [fugue_sqlParser.REDUCE]:
                self.state = 2394
                localctx.kind = self.match(fugue_sqlParser.REDUCE)
                self.state = 2395
                self.namedExpressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ROW:
                self.state = 2398
                localctx.inRowFormat = self.rowFormat()


            self.state = 2403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.RECORDWRITER:
                self.state = 2401
                self.match(fugue_sqlParser.RECORDWRITER)
                self.state = 2402
                localctx.recordWriter = self.match(fugue_sqlParser.STRING)


            self.state = 2405
            self.match(fugue_sqlParser.USING)
            self.state = 2406
            localctx.script = self.match(fugue_sqlParser.STRING)
            self.state = 2419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2407
                self.match(fugue_sqlParser.AS)
                self.state = 2417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                if la_ == 1:
                    self.state = 2408
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 2409
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 2410
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2413
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
                    if la_ == 1:
                        self.state = 2411
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 2412
                        self.colTypeList()
                        pass


                    self.state = 2415
                    self.match(fugue_sqlParser.T__3)
                    pass




            self.state = 2422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2421
                localctx.outRowFormat = self.rowFormat()


            self.state = 2426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2424
                self.match(fugue_sqlParser.RECORDREADER)
                self.state = 2425
                localctx.recordReader = self.match(fugue_sqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_selectClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = fugue_sqlParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428
            self.match(fugue_sqlParser.SELECT)
            self.state = 2432
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2429
                    localctx._hint = self.hint()
                    localctx.hints.append(localctx._hint) 
                self.state = 2434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

            self.state = 2436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2435
                self.setQuantifier()


            self.state = 2438
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetClause" ):
                return visitor.visitSetClause(self)
            else:
                return visitor.visitChildren(self)




    def setClause(self):

        localctx = fugue_sqlParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            self.match(fugue_sqlParser.SET)
            self.state = 2441
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedClause" ):
                return visitor.visitMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def matchedClause(self):

        localctx = fugue_sqlParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2443
            self.match(fugue_sqlParser.WHEN)
            self.state = 2444
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AND:
                self.state = 2445
                self.match(fugue_sqlParser.AND)
                self.state = 2446
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 2449
            self.match(fugue_sqlParser.THEN)
            self.state = 2450
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.NotMatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedClause" ):
                return visitor.visitNotMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedClause(self):

        localctx = fugue_sqlParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2452
            self.match(fugue_sqlParser.WHEN)
            self.state = 2453
            self.match(fugue_sqlParser.NOT)
            self.state = 2454
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AND:
                self.state = 2455
                self.match(fugue_sqlParser.AND)
                self.state = 2456
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 2459
            self.match(fugue_sqlParser.THEN)
            self.state = 2460
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedAction" ):
                return visitor.visitMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def matchedAction(self):

        localctx = fugue_sqlParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_matchedAction)
        try:
            self.state = 2469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2462
                self.match(fugue_sqlParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2463
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2464
                self.match(fugue_sqlParser.SET)
                self.state = 2465
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2466
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2467
                self.match(fugue_sqlParser.SET)
                self.state = 2468
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedAction" ):
                return visitor.visitNotMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedAction(self):

        localctx = fugue_sqlParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2471
                self.match(fugue_sqlParser.INSERT)
                self.state = 2472
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2473
                self.match(fugue_sqlParser.INSERT)
                self.state = 2474
                self.match(fugue_sqlParser.T__2)
                self.state = 2475
                localctx.columns = self.multipartIdentifierList()
                self.state = 2476
                self.match(fugue_sqlParser.T__3)
                self.state = 2477
                self.match(fugue_sqlParser.VALUES)
                self.state = 2478
                self.match(fugue_sqlParser.T__2)
                self.state = 2479
                self.expression()
                self.state = 2484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2480
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2481
                    self.expression()
                    self.state = 2486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2487
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.AssignmentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignmentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentList" ):
                return visitor.visitAssignmentList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentList(self):

        localctx = fugue_sqlParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2491
            self.assignment()
            self.state = 2496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2492
                self.match(fugue_sqlParser.T__0)
                self.state = 2493
                self.assignment()
                self.state = 2498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = fugue_sqlParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            localctx.key = self.multipartIdentifier()
            self.state = 2500
            self.match(fugue_sqlParser.EQUAL)
            self.state = 2501
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = fugue_sqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2503
            self.match(fugue_sqlParser.WHERE)
            self.state = 2504
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = fugue_sqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            self.match(fugue_sqlParser.HAVING)
            self.state = 2507
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintStatementContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHint" ):
                return visitor.visitHint(self)
            else:
                return visitor.visitChildren(self)




    def hint(self):

        localctx = fugue_sqlParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2509
            self.match(fugue_sqlParser.T__13)
            self.state = 2510
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2512
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                    if la_ == 1:
                        self.state = 2511
                        self.match(fugue_sqlParser.T__0)


                    self.state = 2514
                    localctx._hintStatement = self.hintStatement()
                    localctx.hintStatements.append(localctx._hintStatement) 
                self.state = 2519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

            self.state = 2520
            self.match(fugue_sqlParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hintStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHintStatement" ):
                return visitor.visitHintStatement(self)
            else:
                return visitor.visitChildren(self)




    def hintStatement(self):

        localctx = fugue_sqlParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2522
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2523
                localctx.hintName = self.identifier()
                self.state = 2524
                self.match(fugue_sqlParser.T__2)
                self.state = 2525
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2526
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2527
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2533
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = fugue_sqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2537
            self.match(fugue_sqlParser.FROM)
            self.state = 2538
            self.relation()
            self.state = 2543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2539
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2540
                    self.relation() 
                self.state = 2545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

            self.state = 2549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2546
                    self.lateralView() 
                self.state = 2551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

            self.state = 2553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.state = 2552
                self.pivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_aggregationClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregationClause" ):
                return visitor.visitAggregationClause(self)
            else:
                return visitor.visitChildren(self)




    def aggregationClause(self):

        localctx = fugue_sqlParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2555
                self.match(fugue_sqlParser.GROUP)
                self.state = 2556
                self.match(fugue_sqlParser.BY)
                self.state = 2557
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2562
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2558
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2559
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2564
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

                self.state = 2582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                if la_ == 1:
                    self.state = 2565
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2566
                    localctx.kind = self.match(fugue_sqlParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2567
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2568
                    localctx.kind = self.match(fugue_sqlParser.CUBE)

                elif la_ == 3:
                    self.state = 2569
                    localctx.kind = self.match(fugue_sqlParser.GROUPING)
                    self.state = 2570
                    self.match(fugue_sqlParser.SETS)
                    self.state = 2571
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2572
                    self.groupingSet()
                    self.state = 2577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 2573
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2574
                        self.groupingSet()
                        self.state = 2579
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2580
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2584
                self.match(fugue_sqlParser.GROUP)
                self.state = 2585
                self.match(fugue_sqlParser.BY)
                self.state = 2586
                localctx.kind = self.match(fugue_sqlParser.GROUPING)
                self.state = 2587
                self.match(fugue_sqlParser.SETS)
                self.state = 2588
                self.match(fugue_sqlParser.T__2)
                self.state = 2589
                self.groupingSet()
                self.state = 2594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2590
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2591
                    self.groupingSet()
                    self.state = 2596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2597
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_groupingSet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = fugue_sqlParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2601
                self.match(fugue_sqlParser.T__2)
                self.state = 2610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 2602
                    self.expression()
                    self.state = 2607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 2603
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2604
                        self.expression()
                        self.state = 2609
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2612
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2613
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PivotValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotClause" ):
                return visitor.visitPivotClause(self)
            else:
                return visitor.visitChildren(self)




    def pivotClause(self):

        localctx = fugue_sqlParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            self.match(fugue_sqlParser.PIVOT)
            self.state = 2617
            self.match(fugue_sqlParser.T__2)
            self.state = 2618
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2619
            self.match(fugue_sqlParser.FOR)
            self.state = 2620
            self.pivotColumn()
            self.state = 2621
            self.match(fugue_sqlParser.IN)
            self.state = 2622
            self.match(fugue_sqlParser.T__2)
            self.state = 2623
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2624
                self.match(fugue_sqlParser.T__0)
                self.state = 2625
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2631
            self.match(fugue_sqlParser.T__3)
            self.state = 2632
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotColumn

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotColumn" ):
                return visitor.visitPivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def pivotColumn(self):

        localctx = fugue_sqlParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2634
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2635
                self.match(fugue_sqlParser.T__2)
                self.state = 2636
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 2641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2637
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2638
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 2643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2644
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotValue" ):
                return visitor.visitPivotValue(self)
            else:
                return visitor.visitChildren(self)




    def pivotValue(self):

        localctx = fugue_sqlParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_pivotValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2648
            self.expression()
            self.state = 2653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                if la_ == 1:
                    self.state = 2649
                    self.match(fugue_sqlParser.AS)


                self.state = 2652
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_lateralView

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralView" ):
                return visitor.visitLateralView(self)
            else:
                return visitor.visitChildren(self)




    def lateralView(self):

        localctx = fugue_sqlParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2655
            self.match(fugue_sqlParser.LATERAL)
            self.state = 2656
            self.match(fugue_sqlParser.VIEW)
            self.state = 2658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.state = 2657
                self.match(fugue_sqlParser.OUTER)


            self.state = 2660
            self.qualifiedName()
            self.state = 2661
            self.match(fugue_sqlParser.T__2)
            self.state = 2670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2662
                self.expression()
                self.state = 2667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2663
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2664
                    self.expression()
                    self.state = 2669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2672
            self.match(fugue_sqlParser.T__3)
            self.state = 2673
            localctx.tblName = self.identifier()
            self.state = 2685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2675
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2674
                    self.match(fugue_sqlParser.AS)


                self.state = 2677
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2678
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2679
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2684
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,342,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setQuantifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = fugue_sqlParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2687
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)




    def relation(self):

        localctx = fugue_sqlParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2689
            self.relationPrimary()
            self.state = 2693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2690
                    self.joinRelation() 
                self.state = 2695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinTypeContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinRelation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)




    def joinRelation(self):

        localctx = fugue_sqlParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_joinRelation)
        try:
            self.state = 2707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ANTI, fugue_sqlParser.CROSS, fugue_sqlParser.FULL, fugue_sqlParser.INNER, fugue_sqlParser.JOIN, fugue_sqlParser.LEFT, fugue_sqlParser.RIGHT, fugue_sqlParser.SEMI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2696
                self.joinType()
                self.state = 2697
                self.match(fugue_sqlParser.JOIN)
                self.state = 2698
                localctx.right = self.relationPrimary()
                self.state = 2700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 2699
                    self.joinCriteria()


                pass
            elif token in [fugue_sqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2702
                self.match(fugue_sqlParser.NATURAL)
                self.state = 2703
                self.joinType()
                self.state = 2704
                self.match(fugue_sqlParser.JOIN)
                self.state = 2705
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = fugue_sqlParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.INNER:
                    self.state = 2709
                    self.match(fugue_sqlParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2712
                self.match(fugue_sqlParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2713
                self.match(fugue_sqlParser.LEFT)
                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2714
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LEFT:
                    self.state = 2717
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2720
                self.match(fugue_sqlParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2721
                self.match(fugue_sqlParser.RIGHT)
                self.state = 2723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2722
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2725
                self.match(fugue_sqlParser.FULL)
                self.state = 2727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2726
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LEFT:
                    self.state = 2729
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2732
                self.match(fugue_sqlParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinCriteria

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = fugue_sqlParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_joinCriteria)
        try:
            self.state = 2739
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2735
                self.match(fugue_sqlParser.ON)
                self.state = 2736
                self.booleanExpression(0)
                pass
            elif token in [fugue_sqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2737
                self.match(fugue_sqlParser.USING)
                self.state = 2738
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleMethodContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sample

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample" ):
                return visitor.visitSample(self)
            else:
                return visitor.visitChildren(self)




    def sample(self):

        localctx = fugue_sqlParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_sample)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2741
            self.match(fugue_sqlParser.TABLESAMPLE)
            self.state = 2742
            self.match(fugue_sqlParser.T__2)
            self.state = 2744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2743
                self.sampleMethod()


            self.state = 2746
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByRows" ):
                return visitor.visitSampleByRows(self)
            else:
                return visitor.visitChildren(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByPercentile" ):
                return visitor.visitSampleByPercentile(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)
        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)
        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBucket" ):
                return visitor.visitSampleByBucket(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBytes" ):
                return visitor.visitSampleByBytes(self)
            else:
                return visitor.visitChildren(self)



    def sampleMethod(self):

        localctx = fugue_sqlParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 2748
                    localctx.negativeSign = self.match(fugue_sqlParser.MINUS)


                self.state = 2751
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2752
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2753
                self.expression()
                self.state = 2754
                self.match(fugue_sqlParser.ROWS)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2756
                localctx.sampleType = self.match(fugue_sqlParser.BUCKET)
                self.state = 2757
                localctx.numerator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2758
                self.match(fugue_sqlParser.OUT)
                self.state = 2759
                self.match(fugue_sqlParser.OF)
                self.state = 2760
                localctx.denominator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ON:
                    self.state = 2761
                    self.match(fugue_sqlParser.ON)
                    self.state = 2767
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                    if la_ == 1:
                        self.state = 2762
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2763
                        self.qualifiedName()
                        self.state = 2764
                        self.match(fugue_sqlParser.T__2)
                        self.state = 2765
                        self.match(fugue_sqlParser.T__3)
                        pass




                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2771
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = fugue_sqlParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2774
            self.match(fugue_sqlParser.T__2)
            self.state = 2775
            self.identifierSeq()
            self.state = 2776
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierSeq" ):
                return visitor.visitIdentifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def identifierSeq(self):

        localctx = fugue_sqlParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2778
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,360,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2779
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2780
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,360,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifierList" ):
                return visitor.visitOrderedIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifierList(self):

        localctx = fugue_sqlParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            self.match(fugue_sqlParser.T__2)
            self.state = 2787
            self.orderedIdentifier()
            self.state = 2792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2788
                self.match(fugue_sqlParser.T__0)
                self.state = 2789
                self.orderedIdentifier()
                self.state = 2794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2795
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifier" ):
                return visitor.visitOrderedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifier(self):

        localctx = fugue_sqlParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2797
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC:
                self.state = 2798
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierCommentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierCommentList" ):
                return visitor.visitIdentifierCommentList(self)
            else:
                return visitor.visitChildren(self)




    def identifierCommentList(self):

        localctx = fugue_sqlParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.match(fugue_sqlParser.T__2)
            self.state = 2802
            self.identifierComment()
            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2803
                self.match(fugue_sqlParser.T__0)
                self.state = 2804
                self.identifierComment()
                self.state = 2809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2810
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierComment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierComment" ):
                return visitor.visitIdentifierComment(self)
            else:
                return visitor.visitChildren(self)




    def identifierComment(self):

        localctx = fugue_sqlParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2812
            self.identifier()
            self.state = 2814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 2813
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault2" ):
                return visitor.visitInlineTableDefault2(self)
            else:
                return visitor.visitChildren(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuery" ):
                return visitor.visitAliasedQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = fugue_sqlParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_relationPrimary)
        try:
            self.state = 2840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2816
                self.multipartIdentifier()
                self.state = 2818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 2817
                    self.sample()


                self.state = 2820
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2822
                self.match(fugue_sqlParser.T__2)
                self.state = 2823
                self.query()
                self.state = 2824
                self.match(fugue_sqlParser.T__3)
                self.state = 2826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 2825
                    self.sample()


                self.state = 2828
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2830
                self.match(fugue_sqlParser.T__2)
                self.state = 2831
                self.relation()
                self.state = 2832
                self.match(fugue_sqlParser.T__3)
                self.state = 2834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 2833
                    self.sample()


                self.state = 2836
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2838
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2839
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_inlineTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)




    def inlineTable(self):

        localctx = fugue_sqlParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2842
            self.match(fugue_sqlParser.VALUES)
            self.state = 2843
            self.expression()
            self.state = 2848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2844
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2845
                    self.expression() 
                self.state = 2850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

            self.state = 2851
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # ErrorCapturingIdentifierContext

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTable" ):
                return visitor.visitFunctionTable(self)
            else:
                return visitor.visitChildren(self)




    def functionTable(self):

        localctx = fugue_sqlParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2853
            localctx.funcName = self.errorCapturingIdentifier()
            self.state = 2854
            self.match(fugue_sqlParser.T__2)
            self.state = 2863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 2855
                self.expression()
                self.state = 2860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2856
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2857
                    self.expression()
                    self.state = 2862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2865
            self.match(fugue_sqlParser.T__3)
            self.state = 2866
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = fugue_sqlParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.state = 2869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
                if la_ == 1:
                    self.state = 2868
                    self.match(fugue_sqlParser.AS)


                self.state = 2871
                self.strictIdentifier()
                self.state = 2873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                if la_ == 1:
                    self.state = 2872
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TERMINATED)
            else:
                return self.getToken(fugue_sqlParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)
        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)
        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)



    def rowFormat(self):

        localctx = fugue_sqlParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_rowFormat)
        try:
            self.state = 2926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2877
                self.match(fugue_sqlParser.ROW)
                self.state = 2878
                self.match(fugue_sqlParser.FORMAT)
                self.state = 2879
                self.match(fugue_sqlParser.SERDE)
                self.state = 2880
                localctx.name = self.match(fugue_sqlParser.STRING)
                self.state = 2884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
                if la_ == 1:
                    self.state = 2881
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2882
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 2883
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2886
                self.match(fugue_sqlParser.ROW)
                self.state = 2887
                self.match(fugue_sqlParser.FORMAT)
                self.state = 2888
                self.match(fugue_sqlParser.DELIMITED)
                self.state = 2898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                if la_ == 1:
                    self.state = 2889
                    self.match(fugue_sqlParser.FIELDS)
                    self.state = 2890
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2891
                    self.match(fugue_sqlParser.BY)
                    self.state = 2892
                    localctx.fieldsTerminatedBy = self.match(fugue_sqlParser.STRING)
                    self.state = 2896
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
                    if la_ == 1:
                        self.state = 2893
                        self.match(fugue_sqlParser.ESCAPED)
                        self.state = 2894
                        self.match(fugue_sqlParser.BY)
                        self.state = 2895
                        localctx.escapedBy = self.match(fugue_sqlParser.STRING)




                self.state = 2905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
                if la_ == 1:
                    self.state = 2900
                    self.match(fugue_sqlParser.COLLECTION)
                    self.state = 2901
                    self.match(fugue_sqlParser.ITEMS)
                    self.state = 2902
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2903
                    self.match(fugue_sqlParser.BY)
                    self.state = 2904
                    localctx.collectionItemsTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
                if la_ == 1:
                    self.state = 2907
                    self.match(fugue_sqlParser.MAP)
                    self.state = 2908
                    self.match(fugue_sqlParser.KEYS)
                    self.state = 2909
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2910
                    self.match(fugue_sqlParser.BY)
                    self.state = 2911
                    localctx.keysTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 2914
                    self.match(fugue_sqlParser.LINES)
                    self.state = 2915
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2916
                    self.match(fugue_sqlParser.BY)
                    self.state = 2917
                    localctx.linesSeparatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
                if la_ == 1:
                    self.state = 2920
                    self.match(fugue_sqlParser.NULL)
                    self.state = 2921
                    self.match(fugue_sqlParser.DEFINED)
                    self.state = 2922
                    self.match(fugue_sqlParser.AS)
                    self.state = 2923
                    localctx.nullDefinedAs = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierList" ):
                return visitor.visitMultipartIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierList(self):

        localctx = fugue_sqlParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2928
            self.multipartIdentifier()
            self.state = 2933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2929
                self.match(fugue_sqlParser.T__0)
                self.state = 2930
                self.multipartIdentifier()
                self.state = 2935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifier" ):
                return visitor.visitMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifier(self):

        localctx = fugue_sqlParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2936
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 2941
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,384,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2937
                    self.match(fugue_sqlParser.T__4)
                    self.state = 2938
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 2943
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,384,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = fugue_sqlParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.state = 2944
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2945
                self.match(fugue_sqlParser.T__4)


            self.state = 2949
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = fugue_sqlParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.state = 2951
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2952
                self.match(fugue_sqlParser.T__4)


            self.state = 2956
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = fugue_sqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.expression()
            self.state = 2966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.state = 2960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 2959
                    self.match(fugue_sqlParser.AS)


                self.state = 2964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 2962
                    localctx.name = self.errorCapturingIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2963
                    self.identifierList()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpressionSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionSeq" ):
                return visitor.visitNamedExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionSeq(self):

        localctx = fugue_sqlParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2968
            self.namedExpression()
            self.state = 2973
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2969
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2970
                    self.namedExpression() 
                self.state = 2975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._transform = None # TransformContext
            self.transforms = list() # of TransformContexts

        def transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformList" ):
                return visitor.visitTransformList(self)
            else:
                return visitor.visitChildren(self)




    def transformList(self):

        localctx = fugue_sqlParser.TransformListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_transformList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2976
            self.match(fugue_sqlParser.T__2)
            self.state = 2977
            localctx._transform = self.transform()
            localctx.transforms.append(localctx._transform)
            self.state = 2982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2978
                self.match(fugue_sqlParser.T__0)
                self.state = 2979
                localctx._transform = self.transform()
                localctx.transforms.append(localctx._transform)
                self.state = 2984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2985
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentityTransform" ):
                return visitor.visitIdentityTransform(self)
            else:
                return visitor.visitChildren(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformArgumentContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApplyTransform" ):
                return visitor.visitApplyTransform(self)
            else:
                return visitor.visitChildren(self)



    def transform(self):

        localctx = fugue_sqlParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 3000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2987
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2988
                localctx.transformName = self.identifier()
                self.state = 2989
                self.match(fugue_sqlParser.T__2)
                self.state = 2990
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 2995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2991
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2992
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 2997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2998
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformArgument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformArgument" ):
                return visitor.visitTransformArgument(self)
            else:
                return visitor.visitChildren(self)




    def transformArgument(self):

        localctx = fugue_sqlParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_transformArgument)
        try:
            self.state = 3004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3002
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3003
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = fugue_sqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3006
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 326
        self.enterRecursionRule(localctx, 326, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3009
                self.match(fugue_sqlParser.NOT)
                self.state = 3010
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3011
                self.match(fugue_sqlParser.EXISTS)
                self.state = 3012
                self.match(fugue_sqlParser.T__2)
                self.state = 3013
                self.query()
                self.state = 3014
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3016
                self.valueExpression(0)
                self.state = 3018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
                if la_ == 1:
                    self.state = 3017
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3030
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3028
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3022
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3023
                        localctx.operator = self.match(fugue_sqlParser.AND)
                        self.state = 3024
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3025
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3026
                        localctx.operator = self.match(fugue_sqlParser.OR)
                        self.state = 3027
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 3032
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # Token
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = fugue_sqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 3115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3033
                    self.match(fugue_sqlParser.NOT)


                self.state = 3036
                localctx.kind = self.match(fugue_sqlParser.BETWEEN)
                self.state = 3037
                localctx.lower = self.valueExpression(0)
                self.state = 3038
                self.match(fugue_sqlParser.AND)
                self.state = 3039
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3041
                    self.match(fugue_sqlParser.NOT)


                self.state = 3044
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 3045
                self.match(fugue_sqlParser.T__2)
                self.state = 3046
                self.expression()
                self.state = 3051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 3047
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3048
                    self.expression()
                    self.state = 3053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3054
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3056
                    self.match(fugue_sqlParser.NOT)


                self.state = 3059
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 3060
                self.match(fugue_sqlParser.T__2)
                self.state = 3061
                self.query()
                self.state = 3062
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3064
                    self.match(fugue_sqlParser.NOT)


                self.state = 3067
                localctx.kind = self.match(fugue_sqlParser.RLIKE)
                self.state = 3068
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3069
                    self.match(fugue_sqlParser.NOT)


                self.state = 3072
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 3073
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.ANY or _la==fugue_sqlParser.SOME):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3087
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3074
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3075
                    self.match(fugue_sqlParser.T__3)
                    pass

                elif la_ == 2:
                    self.state = 3076
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3077
                    self.expression()
                    self.state = 3082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3078
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3079
                        self.expression()
                        self.state = 3084
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3085
                    self.match(fugue_sqlParser.T__3)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3089
                    self.match(fugue_sqlParser.NOT)


                self.state = 3092
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 3093
                localctx.pattern = self.valueExpression(0)
                self.state = 3096
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
                if la_ == 1:
                    self.state = 3094
                    self.match(fugue_sqlParser.ESCAPE)
                    self.state = 3095
                    localctx.escapeChar = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3098
                self.match(fugue_sqlParser.IS)
                self.state = 3100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3099
                    self.match(fugue_sqlParser.NOT)


                self.state = 3102
                localctx.kind = self.match(fugue_sqlParser.NULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3103
                self.match(fugue_sqlParser.IS)
                self.state = 3105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3104
                    self.match(fugue_sqlParser.NOT)


                self.state = 3107
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE or _la==fugue_sqlParser.UNKNOWN):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3108
                self.match(fugue_sqlParser.IS)
                self.state = 3110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3109
                    self.match(fugue_sqlParser.NOT)


                self.state = 3112
                localctx.kind = self.match(fugue_sqlParser.DISTINCT)
                self.state = 3113
                self.match(fugue_sqlParser.FROM)
                self.state = 3114
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)
        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 330
        self.enterRecursionRule(localctx, 330, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3118
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3119
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & ((1 << (fugue_sqlParser.PLUS - 307)) | (1 << (fugue_sqlParser.MINUS - 307)) | (1 << (fugue_sqlParser.TILDE - 307)))) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3120
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3144
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,415,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3142
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3123
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3124
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (fugue_sqlParser.ASTERISK - 309)) | (1 << (fugue_sqlParser.SLASH - 309)) | (1 << (fugue_sqlParser.PERCENT - 309)) | (1 << (fugue_sqlParser.DIV - 309)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3125
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3126
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3127
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & ((1 << (fugue_sqlParser.PLUS - 307)) | (1 << (fugue_sqlParser.MINUS - 307)) | (1 << (fugue_sqlParser.CONCAT_PIPE - 307)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3128
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3129
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3130
                        localctx.operator = self.match(fugue_sqlParser.AMPERSAND)
                        self.state = 3131
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3132
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3133
                        localctx.operator = self.match(fugue_sqlParser.HAT)
                        self.state = 3134
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3135
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3136
                        localctx.operator = self.match(fugue_sqlParser.PIPE)
                        self.state = 3137
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = fugue_sqlParser.ComparisonContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3138
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3139
                        self.comparisonOperator()
                        self.state = 3140
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 3146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,415,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast" ):
                return visitor.visitLast(self)
            else:
                return visitor.visitChildren(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.iinput = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)
        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlay" ):
                return visitor.visitOverlay(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.istr = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.ilen = None # ValueExpressionContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CurrentDatetimeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentDatetime" ):
                return visitor.visitCurrentDatetime(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDefault" ):
                return visitor.visitConstantDefault(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionNameContext,0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)
        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.istr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst" ):
                return visitor.visitFirst(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 332
        self.enterRecursionRule(localctx, 332, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.CurrentDatetimeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3148
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.CURRENT_DATE or _la==fugue_sqlParser.CURRENT_TIMESTAMP):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3149
                self.match(fugue_sqlParser.CASE)
                self.state = 3151 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3150
                    self.whenClause()
                    self.state = 3153 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.WHEN):
                        break

                self.state = 3157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ELSE:
                    self.state = 3155
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 3156
                    localctx.elseExpression = self.expression()


                self.state = 3159
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3161
                self.match(fugue_sqlParser.CASE)
                self.state = 3162
                localctx.value = self.expression()
                self.state = 3164 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3163
                    self.whenClause()
                    self.state = 3166 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.WHEN):
                        break

                self.state = 3170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ELSE:
                    self.state = 3168
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 3169
                    localctx.elseExpression = self.expression()


                self.state = 3172
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3174
                self.match(fugue_sqlParser.CAST)
                self.state = 3175
                self.match(fugue_sqlParser.T__2)
                self.state = 3176
                self.expression()
                self.state = 3177
                self.match(fugue_sqlParser.AS)
                self.state = 3178
                self.dataType()
                self.state = 3179
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3181
                self.match(fugue_sqlParser.STRUCT)
                self.state = 3182
                self.match(fugue_sqlParser.T__2)
                self.state = 3191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 3183
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 3188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3184
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3185
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 3190
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3193
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3194
                self.match(fugue_sqlParser.FIRST)
                self.state = 3195
                self.match(fugue_sqlParser.T__2)
                self.state = 3196
                self.expression()
                self.state = 3199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IGNORE:
                    self.state = 3197
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3198
                    self.match(fugue_sqlParser.NULLS)


                self.state = 3201
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3203
                self.match(fugue_sqlParser.LAST)
                self.state = 3204
                self.match(fugue_sqlParser.T__2)
                self.state = 3205
                self.expression()
                self.state = 3208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IGNORE:
                    self.state = 3206
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3207
                    self.match(fugue_sqlParser.NULLS)


                self.state = 3210
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3212
                self.match(fugue_sqlParser.POSITION)
                self.state = 3213
                self.match(fugue_sqlParser.T__2)
                self.state = 3214
                localctx.substr = self.valueExpression(0)
                self.state = 3215
                self.match(fugue_sqlParser.IN)
                self.state = 3216
                localctx.istr = self.valueExpression(0)
                self.state = 3217
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3219
                self.constant()
                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3220
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3221
                self.qualifiedName()
                self.state = 3222
                self.match(fugue_sqlParser.T__4)
                self.state = 3223
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3225
                self.match(fugue_sqlParser.T__2)
                self.state = 3226
                self.namedExpression()
                self.state = 3229 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3227
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3228
                    self.namedExpression()
                    self.state = 3231 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.T__0):
                        break

                self.state = 3233
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3235
                self.match(fugue_sqlParser.T__2)
                self.state = 3236
                self.query()
                self.state = 3237
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3239
                self.functionName()
                self.state = 3240
                self.match(fugue_sqlParser.T__2)
                self.state = 3252
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
                if la_ == 1:
                    self.state = 3242
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
                    if la_ == 1:
                        self.state = 3241
                        self.setQuantifier()


                    self.state = 3244
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 3249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3245
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3246
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 3251
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3254
                self.match(fugue_sqlParser.T__3)
                self.state = 3261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
                if la_ == 1:
                    self.state = 3255
                    self.match(fugue_sqlParser.FILTER)
                    self.state = 3256
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3257
                    self.match(fugue_sqlParser.WHERE)
                    self.state = 3258
                    localctx.where = self.booleanExpression(0)
                    self.state = 3259
                    self.match(fugue_sqlParser.T__3)


                self.state = 3265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                if la_ == 1:
                    self.state = 3263
                    self.match(fugue_sqlParser.OVER)
                    self.state = 3264
                    self.windowSpec()


                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3267
                self.identifier()
                self.state = 3268
                self.match(fugue_sqlParser.T__15)
                self.state = 3269
                self.expression()
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3271
                self.match(fugue_sqlParser.T__2)
                self.state = 3272
                self.identifier()
                self.state = 3275 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3273
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3274
                    self.identifier()
                    self.state = 3277 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.T__0):
                        break

                self.state = 3279
                self.match(fugue_sqlParser.T__3)
                self.state = 3280
                self.match(fugue_sqlParser.T__15)
                self.state = 3281
                self.expression()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3283
                self.identifier()
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3284
                self.match(fugue_sqlParser.T__2)
                self.state = 3285
                self.expression()
                self.state = 3286
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3288
                self.match(fugue_sqlParser.EXTRACT)
                self.state = 3289
                self.match(fugue_sqlParser.T__2)
                self.state = 3290
                localctx.field = self.identifier()
                self.state = 3291
                self.match(fugue_sqlParser.FROM)
                self.state = 3292
                localctx.source = self.valueExpression(0)
                self.state = 3293
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3295
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.SUBSTR or _la==fugue_sqlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3296
                self.match(fugue_sqlParser.T__2)
                self.state = 3297
                localctx.istr = self.valueExpression(0)
                self.state = 3298
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FROM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3299
                localctx.pos = self.valueExpression(0)
                self.state = 3302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FOR:
                    self.state = 3300
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FOR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3301
                    localctx.ilen = self.valueExpression(0)


                self.state = 3304
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3306
                self.match(fugue_sqlParser.TRIM)
                self.state = 3307
                self.match(fugue_sqlParser.T__2)
                self.state = 3309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
                if la_ == 1:
                    self.state = 3308
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.BOTH or _la==fugue_sqlParser.LEADING or _la==fugue_sqlParser.TRAILING):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                if la_ == 1:
                    self.state = 3311
                    localctx.trimStr = self.valueExpression(0)


                self.state = 3314
                self.match(fugue_sqlParser.FROM)
                self.state = 3315
                localctx.srcStr = self.valueExpression(0)
                self.state = 3316
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3318
                self.match(fugue_sqlParser.OVERLAY)
                self.state = 3319
                self.match(fugue_sqlParser.T__2)
                self.state = 3320
                localctx.iinput = self.valueExpression(0)
                self.state = 3321
                self.match(fugue_sqlParser.PLACING)
                self.state = 3322
                localctx.replace = self.valueExpression(0)
                self.state = 3323
                self.match(fugue_sqlParser.FROM)
                self.state = 3324
                localctx.position = self.valueExpression(0)
                self.state = 3327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FOR:
                    self.state = 3325
                    self.match(fugue_sqlParser.FOR)
                    self.state = 3326
                    localctx.length = self.valueExpression(0)


                self.state = 3329
                self.match(fugue_sqlParser.T__3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3343
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,437,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3341
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SubscriptContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3333
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3334
                        self.match(fugue_sqlParser.T__5)
                        self.state = 3335
                        localctx.index = self.valueExpression(0)
                        self.state = 3336
                        self.match(fugue_sqlParser.T__6)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.DereferenceContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3338
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3339
                        self.match(fugue_sqlParser.T__4)
                        self.state = 3340
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 3345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,437,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = fugue_sqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_constant)
        try:
            self.state = 3358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3346
                self.match(fugue_sqlParser.NULL)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3347
                self.interval()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3348
                self.identifier()
                self.state = 3349
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3351
                self.number()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3352
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3354 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3353
                        self.match(fugue_sqlParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 3356 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,438,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonEqualOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonEqualOperatorContext,0)


        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(fugue_sqlParser.NEQJ, 0)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)

        def LTE(self):
            return self.getToken(fugue_sqlParser.LTE, 0)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)

        def GTE(self):
            return self.getToken(fugue_sqlParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(fugue_sqlParser.NSEQ, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = fugue_sqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_comparisonOperator)
        try:
            self.state = 3368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.EQUAL, fugue_sqlParser.DOUBLEEQUAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3360
                self.comparisonEqualOperator()
                pass
            elif token in [fugue_sqlParser.NEQ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3361
                self.match(fugue_sqlParser.NEQ)
                pass
            elif token in [fugue_sqlParser.NEQJ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3362
                self.match(fugue_sqlParser.NEQJ)
                pass
            elif token in [fugue_sqlParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3363
                self.match(fugue_sqlParser.LT)
                pass
            elif token in [fugue_sqlParser.LTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3364
                self.match(fugue_sqlParser.LTE)
                pass
            elif token in [fugue_sqlParser.GT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3365
                self.match(fugue_sqlParser.GT)
                pass
            elif token in [fugue_sqlParser.GTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3366
                self.match(fugue_sqlParser.GTE)
                pass
            elif token in [fugue_sqlParser.NSEQ]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3367
                self.match(fugue_sqlParser.NSEQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonEqualOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUAL(self):
            return self.getToken(fugue_sqlParser.DOUBLEEQUAL, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonEqualOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonEqualOperator" ):
                return visitor.visitComparisonEqualOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonEqualOperator(self):

        localctx = fugue_sqlParser.ComparisonEqualOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_comparisonEqualOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3370
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.EQUAL or _la==fugue_sqlParser.DOUBLEEQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_arithmeticOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOperator" ):
                return visitor.visitArithmeticOperator(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOperator(self):

        localctx = fugue_sqlParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3372
            _la = self._input.LA(1)
            if not(((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & ((1 << (fugue_sqlParser.PLUS - 307)) | (1 << (fugue_sqlParser.MINUS - 307)) | (1 << (fugue_sqlParser.ASTERISK - 307)) | (1 << (fugue_sqlParser.SLASH - 307)) | (1 << (fugue_sqlParser.PERCENT - 307)) | (1 << (fugue_sqlParser.DIV - 307)) | (1 << (fugue_sqlParser.TILDE - 307)) | (1 << (fugue_sqlParser.AMPERSAND - 307)) | (1 << (fugue_sqlParser.PIPE - 307)) | (1 << (fugue_sqlParser.CONCAT_PIPE - 307)) | (1 << (fugue_sqlParser.HAT - 307)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicateOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateOperator" ):
                return visitor.visitPredicateOperator(self)
            else:
                return visitor.visitChildren(self)




    def predicateOperator(self):

        localctx = fugue_sqlParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3374
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.AND or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (fugue_sqlParser.IN - 147)) | (1 << (fugue_sqlParser.NOT - 147)) | (1 << (fugue_sqlParser.OR - 147)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = fugue_sqlParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3376
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = fugue_sqlParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3378
            self.match(fugue_sqlParser.INTERVAL)
            self.state = 3381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3379
                self.errorCapturingMultiUnitsInterval()

            elif la_ == 2:
                self.state = 3380
                self.errorCapturingUnitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingMultiUnitsInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingMultiUnitsInterval" ):
                return visitor.visitErrorCapturingMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3383
            self.multiUnitsInterval()
            self.state = 3385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 3384
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,i)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiUnitsInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiUnitsInterval" ):
                return visitor.visitMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def multiUnitsInterval(self):

        localctx = fugue_sqlParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3390 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3387
                    self.intervalValue()
                    self.state = 3388
                    self.intervalUnit()

                else:
                    raise NoViableAltException(self)
                self.state = 3392 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,443,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingUnitToUnitInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingUnitToUnitInterval" ):
                return visitor.visitErrorCapturingUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3394
            localctx.body = self.unitToUnitInterval()
            self.state = 3397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.state = 3395
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3396
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.ifrom = None # IntervalUnitContext
            self.to = None # IntervalUnitContext

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,0)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unitToUnitInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitToUnitInterval" ):
                return visitor.visitUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def unitToUnitInterval(self):

        localctx = fugue_sqlParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3399
            localctx.value = self.intervalValue()
            self.state = 3400
            localctx.ifrom = self.intervalUnit()
            self.state = 3401
            self.match(fugue_sqlParser.TO)
            self.state = 3402
            localctx.to = self.intervalUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = fugue_sqlParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 3409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.PLUS, fugue_sqlParser.MINUS, fugue_sqlParser.INTEGER_VALUE, fugue_sqlParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PLUS or _la==fugue_sqlParser.MINUS:
                    self.state = 3404
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.PLUS or _la==fugue_sqlParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3407
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3408
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalUnit" ):
                return visitor.visitIntervalUnit(self)
            else:
                return visitor.visitChildren(self)




    def intervalUnit(self):

        localctx = fugue_sqlParser.IntervalUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_intervalUnit)
        try:
            self.state = 3418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3411
                self.match(fugue_sqlParser.DAY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3412
                self.match(fugue_sqlParser.HOUR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3413
                self.match(fugue_sqlParser.MINUTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3414
                self.match(fugue_sqlParser.MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3415
                self.match(fugue_sqlParser.SECOND)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3416
                self.match(fugue_sqlParser.YEAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3417
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColPosition" ):
                return visitor.visitColPosition(self)
            else:
                return visitor.visitChildren(self)




    def colPosition(self):

        localctx = fugue_sqlParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_colPosition)
        try:
            self.state = 3423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3420
                localctx.position = self.match(fugue_sqlParser.FIRST)
                pass
            elif token in [fugue_sqlParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3421
                localctx.position = self.match(fugue_sqlParser.AFTER)
                self.state = 3422
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.icomplex = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)
        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDataType" ):
                return visitor.visitComplexDataType(self)
            else:
                return visitor.visitChildren(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveDataType" ):
                return visitor.visitPrimitiveDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = fugue_sqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3425
                localctx.icomplex = self.match(fugue_sqlParser.ARRAY)
                self.state = 3426
                self.match(fugue_sqlParser.LT)
                self.state = 3427
                self.dataType()
                self.state = 3428
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3430
                localctx.icomplex = self.match(fugue_sqlParser.MAP)
                self.state = 3431
                self.match(fugue_sqlParser.LT)
                self.state = 3432
                self.dataType()
                self.state = 3433
                self.match(fugue_sqlParser.T__0)
                self.state = 3434
                self.dataType()
                self.state = 3435
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3437
                localctx.icomplex = self.match(fugue_sqlParser.STRUCT)
                self.state = 3444
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.LT]:
                    self.state = 3438
                    self.match(fugue_sqlParser.LT)
                    self.state = 3440
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                    if la_ == 1:
                        self.state = 3439
                        self.complexColTypeList()


                    self.state = 3442
                    self.match(fugue_sqlParser.GT)
                    pass
                elif token in [fugue_sqlParser.NEQ]:
                    self.state = 3443
                    self.match(fugue_sqlParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3446
                self.identifier()
                self.state = 3457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                if la_ == 1:
                    self.state = 3447
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3448
                    self.match(fugue_sqlParser.INTEGER_VALUE)
                    self.state = 3453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3449
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3450
                        self.match(fugue_sqlParser.INTEGER_VALUE)
                        self.state = 3455
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3456
                    self.match(fugue_sqlParser.T__3)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPositionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPositionList" ):
                return visitor.visitQualifiedColTypeWithPositionList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3461
            self.qualifiedColTypeWithPosition()
            self.state = 3466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3462
                self.match(fugue_sqlParser.T__0)
                self.state = 3463
                self.qualifiedColTypeWithPosition()
                self.state = 3468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPosition" ):
                return visitor.visitQualifiedColTypeWithPosition(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPosition(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3469
            localctx.name = self.multipartIdentifier()
            self.state = 3470
            self.dataType()
            self.state = 3473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.NOT:
                self.state = 3471
                self.match(fugue_sqlParser.NOT)
                self.state = 3472
                self.match(fugue_sqlParser.NULL)


            self.state = 3476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 3475
                self.commentSpec()


            self.state = 3479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.FIRST:
                self.state = 3478
                self.colPosition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = fugue_sqlParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3481
            self.colType()
            self.state = 3486
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,458,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3482
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3483
                    self.colType() 
                self.state = 3488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,458,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = fugue_sqlParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3489
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3490
            self.dataType()
            self.state = 3493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3491
                self.match(fugue_sqlParser.NOT)
                self.state = 3492
                self.match(fugue_sqlParser.NULL)


            self.state = 3496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 3495
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColTypeList" ):
                return visitor.visitComplexColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def complexColTypeList(self):

        localctx = fugue_sqlParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3498
            self.complexColType()
            self.state = 3503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3499
                self.match(fugue_sqlParser.T__0)
                self.state = 3500
                self.complexColType()
                self.state = 3505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColType" ):
                return visitor.visitComplexColType(self)
            else:
                return visitor.visitChildren(self)




    def complexColType(self):

        localctx = fugue_sqlParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3506
            self.identifier()
            self.state = 3507
            self.match(fugue_sqlParser.T__1)
            self.state = 3508
            self.dataType()
            self.state = 3511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.NOT:
                self.state = 3509
                self.match(fugue_sqlParser.NOT)
                self.state = 3510
                self.match(fugue_sqlParser.NULL)


            self.state = 3514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 3513
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whenClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = fugue_sqlParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3516
            self.match(fugue_sqlParser.WHEN)
            self.state = 3517
            localctx.condition = self.expression()
            self.state = 3518
            self.match(fugue_sqlParser.THEN)
            self.state = 3519
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = fugue_sqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3521
            self.match(fugue_sqlParser.WINDOW)
            self.state = 3522
            self.namedWindow()
            self.state = 3527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,464,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3523
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3524
                    self.namedWindow() 
                self.state = 3529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,464,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedWindow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = fugue_sqlParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3530
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3531
            self.match(fugue_sqlParser.AS)
            self.state = 3532
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowRef" ):
                return visitor.visitWindowRef(self)
            else:
                return visitor.visitChildren(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)
        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDef" ):
                return visitor.visitWindowDef(self)
            else:
                return visitor.visitChildren(self)



    def windowSpec(self):

        localctx = fugue_sqlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3534
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3535
                self.match(fugue_sqlParser.T__2)
                self.state = 3536
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3537
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3539
                self.match(fugue_sqlParser.T__2)
                self.state = 3574
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.CLUSTER]:
                    self.state = 3540
                    self.match(fugue_sqlParser.CLUSTER)
                    self.state = 3541
                    self.match(fugue_sqlParser.BY)
                    self.state = 3542
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3543
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3544
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3549
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [fugue_sqlParser.T__3, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.ORDER, fugue_sqlParser.PARTITION, fugue_sqlParser.RANGE, fugue_sqlParser.ROWS, fugue_sqlParser.SORT]:
                    self.state = 3560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.DISTRIBUTE or _la==fugue_sqlParser.PARTITION:
                        self.state = 3550
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.DISTRIBUTE or _la==fugue_sqlParser.PARTITION):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3551
                        self.match(fugue_sqlParser.BY)
                        self.state = 3552
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3557
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==fugue_sqlParser.T__0:
                            self.state = 3553
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3554
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3559
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.ORDER or _la==fugue_sqlParser.SORT:
                        self.state = 3562
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.ORDER or _la==fugue_sqlParser.SORT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3563
                        self.match(fugue_sqlParser.BY)
                        self.state = 3564
                        self.sortItem()
                        self.state = 3569
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==fugue_sqlParser.T__0:
                            self.state = 3565
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3566
                            self.sortItem()
                            self.state = 3571
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.RANGE or _la==fugue_sqlParser.ROWS:
                    self.state = 3576
                    self.windowFrame()


                self.state = 3579
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowFrame

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = fugue_sqlParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_windowFrame)
        try:
            self.state = 3598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3582
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3583
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3584
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3585
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3586
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3587
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3588
                localctx.start = self.frameBound()
                self.state = 3589
                self.match(fugue_sqlParser.AND)
                self.state = 3590
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3592
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3593
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3594
                localctx.start = self.frameBound()
                self.state = 3595
                self.match(fugue_sqlParser.AND)
                self.state = 3596
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_frameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBound" ):
                return visitor.visitFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def frameBound(self):

        localctx = fugue_sqlParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3600
                self.match(fugue_sqlParser.UNBOUNDED)
                self.state = 3601
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FOLLOWING or _la==fugue_sqlParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3602
                localctx.boundType = self.match(fugue_sqlParser.CURRENT)
                self.state = 3603
                self.match(fugue_sqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3604
                self.expression()
                self.state = 3605
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FOLLOWING or _la==fugue_sqlParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedNameList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = fugue_sqlParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3609
            self.qualifiedName()
            self.state = 3614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3610
                self.match(fugue_sqlParser.T__0)
                self.state = 3611
                self.qualifiedName()
                self.state = 3616
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = fugue_sqlParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_functionName)
        try:
            self.state = 3621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3617
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3618
                self.match(fugue_sqlParser.FILTER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3619
                self.match(fugue_sqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3620
                self.match(fugue_sqlParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = fugue_sqlParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3623
            self.identifier()
            self.state = 3628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,477,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3624
                    self.match(fugue_sqlParser.T__4)
                    self.state = 3625
                    self.identifier() 
                self.state = 3630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,477,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def errorCapturingIdentifierExtra(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierExtraContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingIdentifier" ):
                return visitor.visitErrorCapturingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingIdentifier(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3631
            self.identifier()
            self.state = 3632
            self.errorCapturingIdentifierExtra()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.MINUS)
            else:
                return self.getToken(fugue_sqlParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorIdent" ):
                return visitor.visitErrorIdent(self)
            else:
                return visitor.visitChildren(self)


    class RealIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealIdent" ):
                return visitor.visitRealIdent(self)
            else:
                return visitor.visitChildren(self)



    def errorCapturingIdentifierExtra(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_errorCapturingIdentifierExtra)
        try:
            self.state = 3641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ErrorIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3636 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3634
                        self.match(fugue_sqlParser.MINUS)
                        self.state = 3635
                        self.identifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3638 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,478,self._ctx)

                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RealIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = fugue_sqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_identifier)
        try:
            self.state = 3646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3643
                self.strictIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3644
                if not not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.SQL_standard_keyword_behavior")
                self.state = 3645
                self.strictNonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuotedIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifierAlternative" ):
                return visitor.visitQuotedIdentifierAlternative(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.IDENTIFIER, 0)
        def ansiNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.AnsiNonReservedContext,0)

        def nonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.NonReservedContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def strictIdentifier(self):

        localctx = fugue_sqlParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_strictIdentifier)
        try:
            self.state = 3654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3648
                self.match(fugue_sqlParser.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3649
                self.quotedIdentifier()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3650
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.SQL_standard_keyword_behavior")
                self.state = 3651
                self.ansiNonReserved()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3652
                if not not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.SQL_standard_keyword_behavior")
                self.state = 3653
                self.nonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_quotedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def quotedIdentifier(self):

        localctx = fugue_sqlParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3656
            self.match(fugue_sqlParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigIntLiteral" ):
                return visitor.visitBigIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTinyIntLiteral" ):
                return visitor.visitTinyIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyDecimalLiteral" ):
                return visitor.visitLegacyDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigDecimalLiteral" ):
                return visitor.visitBigDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentLiteral" ):
                return visitor.visitExponentLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(fugue_sqlParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallIntLiteral" ):
                return visitor.visitSmallIntLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = fugue_sqlParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3658
                if not not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3659
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3662
                self.match(fugue_sqlParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3663
                if not not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3664
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3667
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3668
                if not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3669
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3672
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.EXPONENT_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3673
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3676
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3677
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3680
                self.match(fugue_sqlParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3681
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3684
                self.match(fugue_sqlParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3685
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3688
                self.match(fugue_sqlParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3689
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3692
                self.match(fugue_sqlParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3693
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3696
                self.match(fugue_sqlParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_alterColumnAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColumnAction" ):
                return visitor.visitAlterColumnAction(self)
            else:
                return visitor.visitChildren(self)




    def alterColumnAction(self):

        localctx = fugue_sqlParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.TYPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3699
                self.match(fugue_sqlParser.TYPE)
                self.state = 3700
                self.dataType()
                pass
            elif token in [fugue_sqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3701
                self.commentSpec()
                pass
            elif token in [fugue_sqlParser.AFTER, fugue_sqlParser.FIRST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3702
                self.colPosition()
                pass
            elif token in [fugue_sqlParser.DROP, fugue_sqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3703
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DROP or _la==fugue_sqlParser.SET):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3704
                self.match(fugue_sqlParser.NOT)
                self.state = 3705
                self.match(fugue_sqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ansiNonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnsiNonReserved" ):
                return visitor.visitAnsiNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def ansiNonReserved(self):

        localctx = fugue_sqlParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3708
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.ASC) | (1 << fugue_sqlParser.AT) | (1 << fugue_sqlParser.BETWEEN) | (1 << fugue_sqlParser.BUCKET) | (1 << fugue_sqlParser.BUCKETS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)) | (1 << (fugue_sqlParser.EXTERNAL - 64)) | (1 << (fugue_sqlParser.EXTRACT - 64)) | (1 << (fugue_sqlParser.FIELDS - 64)) | (1 << (fugue_sqlParser.FILEFORMAT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)) | (1 << (fugue_sqlParser.NO - 128)) | (1 << (fugue_sqlParser.NULLS - 128)) | (1 << (fugue_sqlParser.OF - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (fugue_sqlParser.OPTION - 193)) | (1 << (fugue_sqlParser.OPTIONS - 193)) | (1 << (fugue_sqlParser.OUT - 193)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 193)) | (1 << (fugue_sqlParser.OVER - 193)) | (1 << (fugue_sqlParser.OVERLAY - 193)) | (1 << (fugue_sqlParser.OVERWRITE - 193)) | (1 << (fugue_sqlParser.PARTITION - 193)) | (1 << (fugue_sqlParser.PARTITIONED - 193)) | (1 << (fugue_sqlParser.PARTITIONS - 193)) | (1 << (fugue_sqlParser.PERCENTLIT - 193)) | (1 << (fugue_sqlParser.PIVOT - 193)) | (1 << (fugue_sqlParser.PLACING - 193)) | (1 << (fugue_sqlParser.POSITION - 193)) | (1 << (fugue_sqlParser.PRECEDING - 193)) | (1 << (fugue_sqlParser.PRINCIPALS - 193)) | (1 << (fugue_sqlParser.PROPERTIES - 193)) | (1 << (fugue_sqlParser.PURGE - 193)) | (1 << (fugue_sqlParser.QUERY - 193)) | (1 << (fugue_sqlParser.RANGE - 193)) | (1 << (fugue_sqlParser.RECORDREADER - 193)) | (1 << (fugue_sqlParser.RECORDWRITER - 193)) | (1 << (fugue_sqlParser.RECOVER - 193)) | (1 << (fugue_sqlParser.REDUCE - 193)) | (1 << (fugue_sqlParser.REFRESH - 193)) | (1 << (fugue_sqlParser.RENAME - 193)) | (1 << (fugue_sqlParser.REPAIR - 193)) | (1 << (fugue_sqlParser.REPLACE - 193)) | (1 << (fugue_sqlParser.RESET - 193)) | (1 << (fugue_sqlParser.RESTRICT - 193)) | (1 << (fugue_sqlParser.REVOKE - 193)) | (1 << (fugue_sqlParser.RLIKE - 193)) | (1 << (fugue_sqlParser.ROLE - 193)) | (1 << (fugue_sqlParser.ROLES - 193)) | (1 << (fugue_sqlParser.ROLLBACK - 193)) | (1 << (fugue_sqlParser.ROLLUP - 193)) | (1 << (fugue_sqlParser.ROW - 193)) | (1 << (fugue_sqlParser.ROWS - 193)) | (1 << (fugue_sqlParser.SCHEMA - 193)) | (1 << (fugue_sqlParser.SEPARATED - 193)) | (1 << (fugue_sqlParser.SERDE - 193)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 193)) | (1 << (fugue_sqlParser.SET - 193)) | (1 << (fugue_sqlParser.SETS - 193)) | (1 << (fugue_sqlParser.SHOW - 193)) | (1 << (fugue_sqlParser.SKEWED - 193)) | (1 << (fugue_sqlParser.SORT - 193)) | (1 << (fugue_sqlParser.SORTED - 193)) | (1 << (fugue_sqlParser.START - 193)) | (1 << (fugue_sqlParser.STATISTICS - 193)) | (1 << (fugue_sqlParser.STORED - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (fugue_sqlParser.STRATIFY - 257)) | (1 << (fugue_sqlParser.STRUCT - 257)) | (1 << (fugue_sqlParser.SUBSTR - 257)) | (1 << (fugue_sqlParser.SUBSTRING - 257)) | (1 << (fugue_sqlParser.TABLES - 257)) | (1 << (fugue_sqlParser.TABLESAMPLE - 257)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 257)) | (1 << (fugue_sqlParser.TEMPORARY - 257)) | (1 << (fugue_sqlParser.TERMINATED - 257)) | (1 << (fugue_sqlParser.TOUCH - 257)) | (1 << (fugue_sqlParser.TRANSACTION - 257)) | (1 << (fugue_sqlParser.TRANSACTIONS - 257)) | (1 << (fugue_sqlParser.TRANSFORM - 257)) | (1 << (fugue_sqlParser.TRIM - 257)) | (1 << (fugue_sqlParser.TRUE - 257)) | (1 << (fugue_sqlParser.TRUNCATE - 257)) | (1 << (fugue_sqlParser.UNARCHIVE - 257)) | (1 << (fugue_sqlParser.UNBOUNDED - 257)) | (1 << (fugue_sqlParser.UNCACHE - 257)) | (1 << (fugue_sqlParser.UNLOCK - 257)) | (1 << (fugue_sqlParser.UNSET - 257)) | (1 << (fugue_sqlParser.UPDATE - 257)) | (1 << (fugue_sqlParser.USE - 257)) | (1 << (fugue_sqlParser.VALUES - 257)) | (1 << (fugue_sqlParser.VIEW - 257)) | (1 << (fugue_sqlParser.VIEWS - 257)) | (1 << (fugue_sqlParser.WINDOW - 257)) | (1 << (fugue_sqlParser.DIV - 257)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictNonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictNonReserved" ):
                return visitor.visitStrictNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def strictNonReserved(self):

        localctx = fugue_sqlParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3710
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (fugue_sqlParser.ANTI - 52)) | (1 << (fugue_sqlParser.CROSS - 52)) | (1 << (fugue_sqlParser.EXCEPT - 52)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (fugue_sqlParser.FULL - 135)) | (1 << (fugue_sqlParser.INNER - 135)) | (1 << (fugue_sqlParser.INTERSECT - 135)) | (1 << (fugue_sqlParser.JOIN - 135)) | (1 << (fugue_sqlParser.LEFT - 135)) | (1 << (fugue_sqlParser.NATURAL - 135)) | (1 << (fugue_sqlParser.ON - 135)))) != 0) or ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (fugue_sqlParser.RIGHT - 230)) | (1 << (fugue_sqlParser.SEMI - 230)) | (1 << (fugue_sqlParser.SETMINUS - 230)) | (1 << (fugue_sqlParser.UNION - 230)) | (1 << (fugue_sqlParser.USING - 230)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(fugue_sqlParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CHECK(self):
            return self.getToken(fugue_sqlParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(fugue_sqlParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(fugue_sqlParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(fugue_sqlParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(fugue_sqlParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(fugue_sqlParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def ONLY(self):
            return self.getToken(fugue_sqlParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(fugue_sqlParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(fugue_sqlParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(fugue_sqlParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(fugue_sqlParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(fugue_sqlParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def USER(self):
            return self.getToken(fugue_sqlParser.USER, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = fugue_sqlParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3712
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS) | (1 << fugue_sqlParser.ASC) | (1 << fugue_sqlParser.AT) | (1 << fugue_sqlParser.AUTHORIZATION) | (1 << fugue_sqlParser.BETWEEN) | (1 << fugue_sqlParser.BOTH) | (1 << fugue_sqlParser.BUCKET) | (1 << fugue_sqlParser.BUCKETS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)) | (1 << (fugue_sqlParser.EXTERNAL - 64)) | (1 << (fugue_sqlParser.EXTRACT - 64)) | (1 << (fugue_sqlParser.FALSE - 64)) | (1 << (fugue_sqlParser.FETCH - 64)) | (1 << (fugue_sqlParser.FIELDS - 64)) | (1 << (fugue_sqlParser.FILTER - 64)) | (1 << (fugue_sqlParser.FILEFORMAT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)) | (1 << (fugue_sqlParser.NO - 128)) | (1 << (fugue_sqlParser.NOT - 128)) | (1 << (fugue_sqlParser.NULL - 128)) | (1 << (fugue_sqlParser.NULLS - 128)) | (1 << (fugue_sqlParser.OF - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.ONLY - 192)) | (1 << (fugue_sqlParser.OPTION - 192)) | (1 << (fugue_sqlParser.OPTIONS - 192)) | (1 << (fugue_sqlParser.OR - 192)) | (1 << (fugue_sqlParser.ORDER - 192)) | (1 << (fugue_sqlParser.OUT - 192)) | (1 << (fugue_sqlParser.OUTER - 192)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 192)) | (1 << (fugue_sqlParser.OVER - 192)) | (1 << (fugue_sqlParser.OVERLAPS - 192)) | (1 << (fugue_sqlParser.OVERLAY - 192)) | (1 << (fugue_sqlParser.OVERWRITE - 192)) | (1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETS - 192)) | (1 << (fugue_sqlParser.SHOW - 192)) | (1 << (fugue_sqlParser.SKEWED - 192)) | (1 << (fugue_sqlParser.SOME - 192)) | (1 << (fugue_sqlParser.SORT - 192)) | (1 << (fugue_sqlParser.SORTED - 192)) | (1 << (fugue_sqlParser.START - 192)) | (1 << (fugue_sqlParser.STATISTICS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.STORED - 256)) | (1 << (fugue_sqlParser.STRATIFY - 256)) | (1 << (fugue_sqlParser.STRUCT - 256)) | (1 << (fugue_sqlParser.SUBSTR - 256)) | (1 << (fugue_sqlParser.SUBSTRING - 256)) | (1 << (fugue_sqlParser.TABLE - 256)) | (1 << (fugue_sqlParser.TABLES - 256)) | (1 << (fugue_sqlParser.TABLESAMPLE - 256)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 256)) | (1 << (fugue_sqlParser.TEMPORARY - 256)) | (1 << (fugue_sqlParser.TERMINATED - 256)) | (1 << (fugue_sqlParser.THEN - 256)) | (1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.fugueAssignmentSign_sempred
        self._predicates[41] = self.fuguePartitionNum_sempred
        self._predicates[108] = self.queryTerm_sempred
        self._predicates[163] = self.booleanExpression_sempred
        self._predicates[165] = self.valueExpression_sempred
        self._predicates[166] = self.primaryExpression_sempred
        self._predicates[199] = self.identifier_sempred
        self._predicates[200] = self.strictIdentifier_sempred
        self._predicates[202] = self.number_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def fugueAssignmentSign_sempred(self, localctx:FugueAssignmentSignContext, predIndex:int):
            if predIndex == 0:
                return self.simpleAssign
         

    def fuguePartitionNum_sempred(self, localctx:FuguePartitionNumContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 3:
                return fugue_sqlParser.legacy_setops_precedence_enbled
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return not fugue_sqlParser.legacy_setops_precedence_enbled
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 7:
                return not fugue_sqlParser.legacy_setops_precedence_enbled
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 6)
         

    def identifier_sempred(self, localctx:IdentifierContext, predIndex:int):
            if predIndex == 18:
                return not self.SQL_standard_keyword_behavior
         

    def strictIdentifier_sempred(self, localctx:StrictIdentifierContext, predIndex:int):
            if predIndex == 19:
                return self.SQL_standard_keyword_behavior
         

            if predIndex == 20:
                return not self.SQL_standard_keyword_behavior
         

    def number_sempred(self, localctx:NumberContext, predIndex:int):
            if predIndex == 21:
                return not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 22:
                return not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 23:
                return fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         




