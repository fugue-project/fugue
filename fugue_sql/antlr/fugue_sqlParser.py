# Generated from fugue_sql/antlr/fugue_sql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0142")
        buf.write("\u0dcf\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\3\2\6\2\u0180\n\2\r\2\16\2\u0181\3\2\3\2\3\3\3\3\3\3")
        buf.write("\3\4\3\4\3\4\5\4\u018c\n\4\3\5\3\5\5\5\u0190\n\5\3\6\5")
        buf.write("\6\u0193\n\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\5\7\u019c\n\7")
        buf.write("\3\b\5\b\u019f\n\b\3\b\5\b\u01a2\n\b\3\b\3\b\5\b\u01a6")
        buf.write("\n\b\3\b\5\b\u01a9\n\b\3\t\5\t\u01ac\n\t\3\t\3\t\5\t\u01b0")
        buf.write("\n\t\3\t\3\t\5\t\u01b4\n\t\3\t\5\t\u01b7\n\t\3\n\5\n\u01ba")
        buf.write("\n\n\3\n\3\n\5\n\u01be\n\n\3\n\3\n\5\n\u01c2\n\n\3\n\5")
        buf.write("\n\u01c5\n\n\3\13\3\13\3\13\5\13\u01ca\n\13\3\13\3\13")
        buf.write("\5\13\u01ce\n\13\3\13\3\13\5\13\u01d2\n\13\3\13\5\13\u01d5")
        buf.write("\n\13\3\13\5\13\u01d8\n\13\3\f\3\f\3\f\5\f\u01dd\n\f\3")
        buf.write("\f\5\f\u01e0\n\f\3\r\3\r\5\r\u01e4\n\r\3\r\3\r\3\r\3\r")
        buf.write("\5\r\u01ea\n\r\3\r\5\r\u01ed\n\r\3\16\5\16\u01f0\n\16")
        buf.write("\3\16\3\16\5\16\u01f4\n\16\3\16\3\16\3\16\5\16\u01f9\n")
        buf.write("\16\3\17\3\17\5\17\u01fd\n\17\3\17\3\17\5\17\u0201\n\17")
        buf.write("\3\17\5\17\u0204\n\17\3\17\3\17\5\17\u0208\n\17\3\20\3")
        buf.write("\20\5\20\u020c\n\20\3\21\3\21\3\22\3\22\3\22\7\22\u0213")
        buf.write("\n\22\f\22\16\22\u0216\13\22\3\22\3\22\3\22\7\22\u021b")
        buf.write("\n\22\f\22\16\22\u021e\13\22\5\22\u0220\n\22\3\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u022b\n\24\3")
        buf.write("\25\3\25\3\25\3\26\3\26\3\26\5\26\u0233\n\26\3\27\3\27")
        buf.write("\3\27\5\27\u0238\n\27\3\27\3\27\5\27\u023c\n\27\3\30\3")
        buf.write("\30\3\30\5\30\u0241\n\30\3\30\3\30\5\30\u0245\n\30\3\31")
        buf.write("\3\31\3\31\7\31\u024a\n\31\f\31\16\31\u024d\13\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0257\n\32\3")
        buf.write("\33\5\33\u025a\n\33\3\33\3\33\3\33\3\33\5\33\u0260\n\33")
        buf.write("\3\33\3\33\5\33\u0264\n\33\3\33\5\33\u0267\n\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\5\33\u026e\n\33\5\33\u0270\n\33\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u027a\n\35\3")
        buf.write("\35\3\35\3\35\7\35\u027f\n\35\f\35\16\35\u0282\13\35\3")
        buf.write("\36\5\36\u0285\n\36\3\36\3\36\5\36\u0289\n\36\3\36\3\36")
        buf.write("\3\36\5\36\u028e\n\36\3\37\3\37\3\37\5\37\u0293\n\37\3")
        buf.write("\37\5\37\u0296\n\37\3 \3 \3 \7 \u029b\n \f \16 \u029e")
        buf.write("\13 \3!\3!\3!\7!\u02a3\n!\f!\16!\u02a6\13!\3\"\3\"\5\"")
        buf.write("\u02aa\n\"\3#\3#\3$\3$\3$\7$\u02b1\n$\f$\16$\u02b4\13")
        buf.write("$\3%\3%\5%\u02b8\n%\3&\3&\3&\7&\u02bd\n&\f&\16&\u02c0")
        buf.write("\13&\3\'\3\'\3\'\3\'\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3)")
        buf.write("\5)\u02d1\n)\3*\3*\3+\3+\3+\5+\u02d8\n+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\5+\u02e1\n+\3+\3+\3+\3+\5+\u02e7\n+\3,\3,\3,\7")
        buf.write(",\u02ec\n,\f,\16,\u02ef\13,\3-\3-\3-\3-\3.\3.\5.\u02f7")
        buf.write("\n.\3/\3/\3/\3/\7/\u02fd\n/\f/\16/\u0300\13/\3/\5/\u0303")
        buf.write("\n/\3/\3/\3/\3/\5/\u0309\n/\3\60\3\60\3\60\3\60\3\60\3")
        buf.write("\60\5\60\u0311\n\60\3\61\3\61\3\62\3\62\3\63\3\63\3\64")
        buf.write("\3\64\3\65\3\65\3\66\3\66\7\66\u031f\n\66\f\66\16\66\u0322")
        buf.write("\13\66\3\66\3\66\3\67\3\67\3\67\38\38\38\39\39\39\3:\3")
        buf.write(":\3:\3;\3;\3;\3<\3<\3<\3=\3=\5=\u033a\n=\3=\3=\3=\5=\u033f")
        buf.write("\n=\3=\3=\3=\3=\3=\3=\5=\u0347\n=\3=\3=\3=\3=\3=\3=\7")
        buf.write("=\u034f\n=\f=\16=\u0352\13=\3=\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0365\n=\3=\3=\5=\u0369\n")
        buf.write("=\3=\3=\3=\3=\5=\u036f\n=\3=\5=\u0372\n=\3=\5=\u0375\n")
        buf.write("=\3=\3=\3=\3=\3=\5=\u037c\n=\3=\3=\3=\5=\u0381\n=\3=\5")
        buf.write("=\u0384\n=\3=\3=\3=\3=\3=\5=\u038b\n=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\5=\u0397\n=\3=\3=\3=\3=\3=\3=\3=\7=\u03a0")
        buf.write("\n=\f=\16=\u03a3\13=\3=\5=\u03a6\n=\3=\5=\u03a9\n=\3=")
        buf.write("\3=\3=\3=\3=\5=\u03b0\n=\3=\3=\3=\3=\3=\3=\3=\3=\3=\7")
        buf.write("=\u03bb\n=\f=\16=\u03be\13=\3=\3=\3=\3=\3=\5=\u03c5\n")
        buf.write("=\3=\3=\3=\5=\u03ca\n=\3=\5=\u03cd\n=\3=\3=\3=\3=\5=\u03d3")
        buf.write("\n=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u03de\n=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\5=\u041e\n=\3=\3=\3=\3=\3=\3=\3=\5=\u0427")
        buf.write("\n=\3=\3=\5=\u042b\n=\3=\3=\3=\3=\5=\u0431\n=\3=\3=\5")
        buf.write("=\u0435\n=\3=\3=\3=\5=\u043a\n=\3=\3=\3=\3=\5=\u0440\n")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u044c\n=\3=\3=\3=\3")
        buf.write("=\3=\3=\5=\u0454\n=\3=\3=\3=\3=\5=\u045a\n=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\5=\u0467\n=\3=\6=\u046a\n=\r=\16")
        buf.write("=\u046b\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u047c")
        buf.write("\n=\3=\3=\3=\7=\u0481\n=\f=\16=\u0484\13=\3=\5=\u0487")
        buf.write("\n=\3=\3=\3=\3=\5=\u048d\n=\3=\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\5=\u049c\n=\3=\3=\5=\u04a0\n=\3=\3=\3=\3")
        buf.write("=\5=\u04a6\n=\3=\3=\3=\3=\5=\u04ac\n=\3=\5=\u04af\n=\3")
        buf.write("=\5=\u04b2\n=\3=\3=\3=\3=\5=\u04b8\n=\3=\3=\5=\u04bc\n")
        buf.write("=\3=\3=\3=\3=\3=\3=\7=\u04c4\n=\f=\16=\u04c7\13=\3=\3")
        buf.write("=\3=\3=\3=\3=\5=\u04cf\n=\3=\5=\u04d2\n=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\5=\u04db\n=\3=\3=\3=\5=\u04e0\n=\3=\3=\3=\3=\5")
        buf.write("=\u04e6\n=\3=\3=\3=\3=\3=\5=\u04ed\n=\3=\5=\u04f0\n=\3")
        buf.write("=\3=\3=\3=\5=\u04f6\n=\3=\3=\3=\3=\3=\3=\3=\7=\u04ff\n")
        buf.write("=\f=\16=\u0502\13=\5=\u0504\n=\3=\3=\5=\u0508\n=\3=\3")
        buf.write("=\3=\5=\u050d\n=\3=\3=\3=\5=\u0512\n=\3=\3=\3=\3=\3=\5")
        buf.write("=\u0519\n=\3=\5=\u051c\n=\3=\5=\u051f\n=\3=\3=\3=\3=\3")
        buf.write("=\5=\u0526\n=\3=\3=\3=\5=\u052b\n=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\5=\u0534\n=\3=\3=\3=\3=\3=\3=\5=\u053c\n=\3=\3=\3=\3")
        buf.write("=\5=\u0542\n=\3=\5=\u0545\n=\3=\5=\u0548\n=\3=\3=\3=\3")
        buf.write("=\5=\u054e\n=\3=\3=\5=\u0552\n=\3=\3=\5=\u0556\n=\3=\3")
        buf.write("=\5=\u055a\n=\5=\u055c\n=\3=\3=\3=\3=\3=\3=\5=\u0564\n")
        buf.write("=\3=\3=\3=\3=\3=\3=\5=\u056c\n=\3=\3=\3=\3=\5=\u0572\n")
        buf.write("=\3=\3=\3=\3=\5=\u0578\n=\3=\5=\u057b\n=\3=\3=\5=\u057f")
        buf.write("\n=\3=\5=\u0582\n=\3=\3=\5=\u0586\n=\3=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\7=\u059d")
        buf.write("\n=\f=\16=\u05a0\13=\5=\u05a2\n=\3=\3=\5=\u05a6\n=\3=")
        buf.write("\3=\3=\3=\5=\u05ac\n=\3=\5=\u05af\n=\3=\5=\u05b2\n=\3")
        buf.write("=\3=\3=\3=\5=\u05b8\n=\3=\3=\3=\3=\3=\3=\5=\u05c0\n=\3")
        buf.write("=\3=\3=\5=\u05c5\n=\3=\3=\3=\3=\5=\u05cb\n=\3=\3=\3=\3")
        buf.write("=\5=\u05d1\n=\3=\3=\3=\3=\3=\3=\3=\3=\7=\u05db\n=\f=\16")
        buf.write("=\u05de\13=\5=\u05e0\n=\3=\3=\3=\7=\u05e5\n=\f=\16=\u05e8")
        buf.write("\13=\3=\3=\7=\u05ec\n=\f=\16=\u05ef\13=\3=\3=\3=\7=\u05f4")
        buf.write("\n=\f=\16=\u05f7\13=\5=\u05f9\n=\3>\3>\3>\3>\3>\3>\5>")
        buf.write("\u0601\n>\3>\3>\5>\u0605\n>\3>\3>\3>\3>\3>\5>\u060c\n")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\5>\u0680\n>\3>\3>\3>\3>\3>\3>\5>\u0688")
        buf.write("\n>\3>\3>\3>\3>\3>\3>\5>\u0690\n>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\5>\u0699\n>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u06a3\n>\3?\3")
        buf.write("?\5?\u06a7\n?\3?\5?\u06aa\n?\3?\3?\3?\3?\5?\u06b0\n?\3")
        buf.write("?\3?\3@\3@\5@\u06b6\n@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3A\5")
        buf.write("A\u06c2\nA\3A\3A\3A\3A\3B\3B\3B\3B\3B\3B\5B\u06ce\nB\3")
        buf.write("B\3B\3B\5B\u06d3\nB\3C\3C\3C\3D\3D\3D\3E\5E\u06dc\nE\3")
        buf.write("E\3E\3E\3F\3F\3F\5F\u06e4\nF\3F\3F\3F\3F\3F\5F\u06eb\n")
        buf.write("F\5F\u06ed\nF\3F\3F\3F\5F\u06f2\nF\3F\3F\5F\u06f6\nF\3")
        buf.write("F\3F\3F\5F\u06fb\nF\3F\3F\3F\5F\u0700\nF\3F\3F\3F\5F\u0705")
        buf.write("\nF\3F\5F\u0708\nF\3F\3F\3F\5F\u070d\nF\3F\3F\5F\u0711")
        buf.write("\nF\3F\3F\3F\5F\u0716\nF\5F\u0718\nF\3G\3G\5G\u071c\n")
        buf.write("G\3H\3H\3H\3H\3H\7H\u0723\nH\fH\16H\u0726\13H\3H\3H\3")
        buf.write("I\3I\3I\5I\u072d\nI\3J\3J\3K\3K\3K\3K\3K\5K\u0736\nK\3")
        buf.write("L\3L\3L\7L\u073b\nL\fL\16L\u073e\13L\3M\3M\3M\3M\7M\u0744")
        buf.write("\nM\fM\16M\u0747\13M\3N\3N\5N\u074b\nN\3N\5N\u074e\nN")
        buf.write("\3N\3N\3N\3N\3O\3O\3O\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\7")
        buf.write("P\u0761\nP\fP\16P\u0764\13P\3Q\3Q\3Q\3Q\7Q\u076a\nQ\f")
        buf.write("Q\16Q\u076d\13Q\3Q\3Q\3R\3R\5R\u0773\nR\3R\5R\u0776\n")
        buf.write("R\3S\3S\3S\7S\u077b\nS\fS\16S\u077e\13S\3S\5S\u0781\n")
        buf.write("S\3T\3T\3T\3T\5T\u0787\nT\3U\3U\3U\3U\7U\u078d\nU\fU\16")
        buf.write("U\u0790\13U\3U\3U\3V\3V\3V\3V\7V\u0798\nV\fV\16V\u079b")
        buf.write("\13V\3V\3V\3W\3W\3W\3W\3W\3W\5W\u07a5\nW\3X\3X\3X\3X\3")
        buf.write("X\5X\u07ac\nX\3Y\3Y\3Y\3Y\5Y\u07b2\nY\3Z\3Z\3Z\3[\3[\3")
        buf.write("[\3[\3[\3[\6[\u07bd\n[\r[\16[\u07be\3[\3[\3[\3[\3[\5[")
        buf.write("\u07c6\n[\3[\3[\3[\3[\3[\5[\u07cd\n[\3[\3[\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\3[\5[\u07d9\n[\3[\3[\3[\3[\7[\u07df\n[\f[\16")
        buf.write("[\u07e2\13[\3[\7[\u07e5\n[\f[\16[\u07e8\13[\5[\u07ea\n")
        buf.write("[\3\\\3\\\3\\\3\\\3\\\7\\\u07f1\n\\\f\\\16\\\u07f4\13")
        buf.write("\\\5\\\u07f6\n\\\3\\\3\\\3\\\3\\\3\\\7\\\u07fd\n\\\f\\")
        buf.write("\16\\\u0800\13\\\5\\\u0802\n\\\3\\\3\\\3\\\3\\\3\\\7\\")
        buf.write("\u0809\n\\\f\\\16\\\u080c\13\\\5\\\u080e\n\\\3\\\3\\\3")
        buf.write("\\\3\\\3\\\7\\\u0815\n\\\f\\\16\\\u0818\13\\\5\\\u081a")
        buf.write("\n\\\3\\\5\\\u081d\n\\\3\\\3\\\3\\\5\\\u0822\n\\\5\\\u0824")
        buf.write("\n\\\3]\3]\3]\3^\3^\3^\3^\3^\3^\3^\5^\u0830\n^\3^\3^\3")
        buf.write("^\3^\3^\5^\u0837\n^\3^\3^\3^\3^\3^\5^\u083e\n^\3^\7^\u0841")
        buf.write("\n^\f^\16^\u0844\13^\3_\3_\3_\3_\3_\5_\u084b\n_\3`\3`")
        buf.write("\5`\u084f\n`\3`\3`\5`\u0853\n`\3a\3a\6a\u0857\na\ra\16")
        buf.write("a\u0858\3b\3b\5b\u085d\nb\3b\3b\3b\3b\7b\u0863\nb\fb\16")
        buf.write("b\u0866\13b\3b\5b\u0869\nb\3b\5b\u086c\nb\3b\5b\u086f")
        buf.write("\nb\3b\5b\u0872\nb\3b\3b\5b\u0876\nb\3c\3c\5c\u087a\n")
        buf.write("c\3c\5c\u087d\nc\3c\3c\5c\u0881\nc\3c\7c\u0884\nc\fc\16")
        buf.write("c\u0887\13c\3c\5c\u088a\nc\3c\5c\u088d\nc\3c\5c\u0890")
        buf.write("\nc\3c\5c\u0893\nc\5c\u0895\nc\3d\3d\3d\3d\3d\3d\3d\3")
        buf.write("d\3d\3d\5d\u08a1\nd\3d\5d\u08a4\nd\3d\3d\5d\u08a8\nd\3")
        buf.write("d\3d\3d\3d\3d\3d\3d\3d\5d\u08b2\nd\3d\3d\5d\u08b6\nd\5")
        buf.write("d\u08b8\nd\3d\5d\u08bb\nd\3d\3d\5d\u08bf\nd\3e\3e\7e\u08c3")
        buf.write("\ne\fe\16e\u08c6\13e\3e\5e\u08c9\ne\3e\3e\3f\3f\3f\3g")
        buf.write("\3g\3g\3g\5g\u08d4\ng\3g\3g\3g\3h\3h\3h\3h\3h\5h\u08de")
        buf.write("\nh\3h\3h\3h\3i\3i\3i\3i\3i\3i\3i\5i\u08ea\ni\3j\3j\3")
        buf.write("j\3j\3j\3j\3j\3j\3j\3j\3j\7j\u08f7\nj\fj\16j\u08fa\13")
        buf.write("j\3j\3j\5j\u08fe\nj\3k\3k\3k\7k\u0903\nk\fk\16k\u0906")
        buf.write("\13k\3l\3l\3l\3l\3m\3m\3m\3n\3n\3n\3o\3o\3o\5o\u0915\n")
        buf.write("o\3o\7o\u0918\no\fo\16o\u091b\13o\3o\3o\3p\3p\3p\3p\3")
        buf.write("p\3p\7p\u0925\np\fp\16p\u0928\13p\3p\3p\5p\u092c\np\3")
        buf.write("q\3q\3q\3q\7q\u0932\nq\fq\16q\u0935\13q\3q\7q\u0938\n")
        buf.write("q\fq\16q\u093b\13q\3q\5q\u093e\nq\3r\3r\3r\3r\3r\7r\u0945")
        buf.write("\nr\fr\16r\u0948\13r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\7r")
        buf.write("\u0954\nr\fr\16r\u0957\13r\3r\3r\5r\u095b\nr\3r\3r\3r")
        buf.write("\3r\3r\3r\3r\3r\7r\u0965\nr\fr\16r\u0968\13r\3r\3r\5r")
        buf.write("\u096c\nr\3s\3s\3s\3s\7s\u0972\ns\fs\16s\u0975\13s\5s")
        buf.write("\u0977\ns\3s\3s\5s\u097b\ns\3t\3t\3t\3t\3t\3t\3t\3t\3")
        buf.write("t\3t\7t\u0987\nt\ft\16t\u098a\13t\3t\3t\3t\3u\3u\3u\3")
        buf.write("u\3u\7u\u0994\nu\fu\16u\u0997\13u\3u\3u\5u\u099b\nu\3")
        buf.write("v\3v\5v\u099f\nv\3v\5v\u09a2\nv\3w\3w\3w\5w\u09a7\nw\3")
        buf.write("w\3w\3w\3w\3w\7w\u09ae\nw\fw\16w\u09b1\13w\5w\u09b3\n")
        buf.write("w\3w\3w\3w\5w\u09b8\nw\3w\3w\3w\7w\u09bd\nw\fw\16w\u09c0")
        buf.write("\13w\5w\u09c2\nw\3x\3x\3y\3y\7y\u09c8\ny\fy\16y\u09cb")
        buf.write("\13y\3z\3z\3z\3z\5z\u09d1\nz\3z\3z\3z\3z\3z\5z\u09d8\n")
        buf.write("z\3{\5{\u09db\n{\3{\3{\3{\5{\u09e0\n{\3{\5{\u09e3\n{\3")
        buf.write("{\3{\3{\5{\u09e8\n{\3{\3{\5{\u09ec\n{\3{\5{\u09ef\n{\3")
        buf.write("{\5{\u09f2\n{\3|\3|\3|\3|\5|\u09f8\n|\3}\3}\3}\5}\u09fd")
        buf.write("\n}\3}\3}\3~\5~\u0a02\n~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3")
        buf.write("~\3~\3~\3~\3~\3~\3~\5~\u0a14\n~\5~\u0a16\n~\3~\5~\u0a19")
        buf.write("\n~\3\177\3\177\3\177\3\177\3\u0080\3\u0080\3\u0080\7")
        buf.write("\u0080\u0a22\n\u0080\f\u0080\16\u0080\u0a25\13\u0080\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0081\7\u0081\u0a2b\n\u0081\f")
        buf.write("\u0081\16\u0081\u0a2e\13\u0081\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\5\u0082\u0a34\n\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\7\u0083\u0a3a\n\u0083\f\u0083\16\u0083\u0a3d")
        buf.write("\13\u0083\3\u0083\3\u0083\3\u0084\3\u0084\5\u0084\u0a43")
        buf.write("\n\u0084\3\u0085\3\u0085\5\u0085\u0a47\n\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0a4f")
        buf.write("\n\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\5\u0085\u0a57\n\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\5\u0085\u0a5f\n\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\5\u0085\u0a65\n\u0085\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\7\u0086\u0a6b\n\u0086\f\u0086\16\u0086")
        buf.write("\u0a6e\13\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\7\u0087\u0a77\n\u0087\f\u0087\16\u0087")
        buf.write("\u0a7a\13\u0087\5\u0087\u0a7c\n\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0088\5\u0088\u0a82\n\u0088\3\u0088\3\u0088")
        buf.write("\5\u0088\u0a86\n\u0088\5\u0088\u0a88\n\u0088\3\u0089\3")
        buf.write("\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u0a91\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0a9d")
        buf.write("\n\u0089\5\u0089\u0a9f\n\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\5\u0089\u0aa6\n\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\5\u0089\u0aad\n\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\5\u0089\u0ab3\n\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\5\u0089\u0ab9\n\u0089\5\u0089")
        buf.write("\u0abb\n\u0089\3\u008a\3\u008a\3\u008a\7\u008a\u0ac0\n")
        buf.write("\u008a\f\u008a\16\u008a\u0ac3\13\u008a\3\u008b\3\u008b")
        buf.write("\3\u008b\7\u008b\u0ac8\n\u008b\f\u008b\16\u008b\u0acb")
        buf.write("\13\u008b\3\u008c\3\u008c\3\u008c\5\u008c\u0ad0\n\u008c")
        buf.write("\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\5\u008d\u0ad7")
        buf.write("\n\u008d\3\u008d\3\u008d\3\u008e\3\u008e\5\u008e\u0add")
        buf.write("\n\u008e\3\u008e\3\u008e\5\u008e\u0ae1\n\u008e\5\u008e")
        buf.write("\u0ae3\n\u008e\3\u008f\3\u008f\3\u008f\7\u008f\u0ae8\n")
        buf.write("\u008f\f\u008f\16\u008f\u0aeb\13\u008f\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\7\u0090\u0af1\n\u0090\f\u0090\16\u0090")
        buf.write("\u0af4\13\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\7\u0091\u0afe\n\u0091\f\u0091")
        buf.write("\16\u0091\u0b01\13\u0091\3\u0091\3\u0091\5\u0091\u0b05")
        buf.write("\n\u0091\3\u0092\3\u0092\5\u0092\u0b09\n\u0092\3\u0093")
        buf.write("\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b17\n\u0094")
        buf.write("\5\u0094\u0b19\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\7\u0094\u0b21\n\u0094\f\u0094\16\u0094")
        buf.write("\u0b24\13\u0094\3\u0095\5\u0095\u0b27\n\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0b2f")
        buf.write("\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\7\u0095")
        buf.write("\u0b36\n\u0095\f\u0095\16\u0095\u0b39\13\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\5\u0095\u0b3e\n\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0b46\n\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\5\u0095\u0b4b\n\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\7\u0095\u0b55\n\u0095\f\u0095\16\u0095\u0b58\13\u0095")
        buf.write("\3\u0095\3\u0095\5\u0095\u0b5c\n\u0095\3\u0095\5\u0095")
        buf.write("\u0b5f\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095")
        buf.write("\u0b65\n\u0095\3\u0095\3\u0095\5\u0095\u0b69\n\u0095\3")
        buf.write("\u0095\3\u0095\3\u0095\5\u0095\u0b6e\n\u0095\3\u0095\3")
        buf.write("\u0095\3\u0095\5\u0095\u0b73\n\u0095\3\u0095\3\u0095\3")
        buf.write("\u0095\5\u0095\u0b78\n\u0095\3\u0096\3\u0096\3\u0096\3")
        buf.write("\u0096\5\u0096\u0b7e\n\u0096\3\u0096\3\u0096\3\u0096\3")
        buf.write("\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\7\u0096\u0b93\n\u0096\f\u0096\16\u0096")
        buf.write("\u0b96\13\u0096\3\u0097\3\u0097\3\u0097\3\u0097\6\u0097")
        buf.write("\u0b9c\n\u0097\r\u0097\16\u0097\u0b9d\3\u0097\3\u0097")
        buf.write("\5\u0097\u0ba2\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\6\u0097\u0ba9\n\u0097\r\u0097\16\u0097\u0baa")
        buf.write("\3\u0097\3\u0097\5\u0097\u0baf\n\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0bbf")
        buf.write("\n\u0097\f\u0097\16\u0097\u0bc2\13\u0097\5\u0097\u0bc4")
        buf.write("\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\5\u0097\u0bcc\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\5\u0097\u0bd5\n\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\6\u0097\u0bea\n\u0097")
        buf.write("\r\u0097\16\u0097\u0beb\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0bf7")
        buf.write("\n\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0bfc\n\u0097")
        buf.write("\f\u0097\16\u0097\u0bff\13\u0097\5\u0097\u0c01\n\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\5\u0097\u0c0a\n\u0097\3\u0097\3\u0097\5\u0097\u0c0e\n")
        buf.write("\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\6\u0097\u0c18\n\u0097\r\u0097\16\u0097")
        buf.write("\u0c19\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\5\u0097\u0c33\n\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0c3a\n\u0097")
        buf.write("\3\u0097\5\u0097\u0c3d\n\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\5\u0097\u0c4c\n\u0097\3\u0097")
        buf.write("\3\u0097\5\u0097\u0c50\n\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0c5a")
        buf.write("\n\u0097\f\u0097\16\u0097\u0c5d\13\u0097\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\6\u0098")
        buf.write("\u0c67\n\u0098\r\u0098\16\u0098\u0c68\5\u0098\u0c6b\n")
        buf.write("\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\5\u0099\u0c75\n\u0099\3\u009a\3\u009a")
        buf.write("\3\u009b\3\u009b\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u0c82\n\u009e\3\u009f\3\u009f")
        buf.write("\5\u009f\u0c86\n\u009f\3\u00a0\3\u00a0\3\u00a0\6\u00a0")
        buf.write("\u0c8b\n\u00a0\r\u00a0\16\u00a0\u0c8c\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\5\u00a1\u0c92\n\u00a1\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a3\5\u00a3\u0c9a\n\u00a3\3\u00a3")
        buf.write("\3\u00a3\5\u00a3\u0c9e\n\u00a3\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0ca7\n\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0cac\n\u00a5\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\5\u00a6\u0cbd\n\u00a6\3\u00a6\3\u00a6\5\u00a6\u0cc1\n")
        buf.write("\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\7\u00a6")
        buf.write("\u0cc8\n\u00a6\f\u00a6\16\u00a6\u0ccb\13\u00a6\3\u00a6")
        buf.write("\5\u00a6\u0cce\n\u00a6\5\u00a6\u0cd0\n\u00a6\3\u00a7\3")
        buf.write("\u00a7\3\u00a7\7\u00a7\u0cd5\n\u00a7\f\u00a7\16\u00a7")
        buf.write("\u0cd8\13\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8")
        buf.write("\u0cde\n\u00a8\3\u00a8\5\u00a8\u0ce1\n\u00a8\3\u00a8\5")
        buf.write("\u00a8\u0ce4\n\u00a8\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0ce9")
        buf.write("\n\u00a9\f\u00a9\16\u00a9\u0cec\13\u00a9\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\5\u00aa\u0cf2\n\u00aa\3\u00aa\5\u00aa")
        buf.write("\u0cf5\n\u00aa\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0cfa\n")
        buf.write("\u00ab\f\u00ab\16\u00ab\u0cfd\13\u00ab\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0d04\n\u00ac\3\u00ac")
        buf.write("\5\u00ac\u0d07\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0d12")
        buf.write("\n\u00ae\f\u00ae\16\u00ae\u0d15\13\u00ae\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0")
        buf.write("\u0d26\n\u00b0\f\u00b0\16\u00b0\u0d29\13\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0d30\n\u00b0")
        buf.write("\f\u00b0\16\u00b0\u0d33\13\u00b0\5\u00b0\u0d35\n\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0d3c")
        buf.write("\n\u00b0\f\u00b0\16\u00b0\u0d3f\13\u00b0\5\u00b0\u0d41")
        buf.write("\n\u00b0\5\u00b0\u0d43\n\u00b0\3\u00b0\5\u00b0\u0d46\n")
        buf.write("\u00b0\3\u00b0\5\u00b0\u0d49\n\u00b0\3\u00b1\3\u00b1\3")
        buf.write("\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\5\u00b1\u0d5b\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0d64\n\u00b2\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\7\u00b3\u0d69\n\u00b3\f\u00b3\16\u00b3")
        buf.write("\u0d6c\13\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4")
        buf.write("\u0d72\n\u00b4\3\u00b5\3\u00b5\3\u00b5\7\u00b5\u0d77\n")
        buf.write("\u00b5\f\u00b5\16\u00b5\u0d7a\13\u00b5\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b7\3\u00b7\6\u00b7\u0d81\n\u00b7\r\u00b7")
        buf.write("\16\u00b7\u0d82\3\u00b7\5\u00b7\u0d86\n\u00b7\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\5\u00b8\u0d8b\n\u00b8\3\u00b9\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0d93\n\u00b9")
        buf.write("\3\u00ba\3\u00ba\3\u00bb\3\u00bb\5\u00bb\u0d99\n\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0d9e\n\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\5\u00bb\u0da3\n\u00bb\3\u00bb\3\u00bb")
        buf.write("\5\u00bb\u0da7\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u0dab\n")
        buf.write("\u00bb\3\u00bb\3\u00bb\5\u00bb\u0daf\n\u00bb\3\u00bb\3")
        buf.write("\u00bb\5\u00bb\u0db3\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u0db7")
        buf.write("\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u0dbb\n\u00bb\3\u00bb")
        buf.write("\5\u00bb\u0dbe\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0dc7\n\u00bc\3\u00bd")
        buf.write("\3\u00bd\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\7\u059e")
        buf.write("\u05dc\u05e6\u05ed\u05f5\78\u00ba\u0126\u012a\u012c\u00c0")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\2\62")
        buf.write("\4\2\66\66\u0117\u0117\4\2\4\4\u0120\u0120\3\2\23\25\3")
        buf.write("\2\u0129\u012c\4\2//]]\5\2\f\rqq\u0109\u0109\4\2\16\16")
        buf.write("\u00b2\u00b2\4\2YY\u00cc\u00cc\4\288\u00da\u00da\4\2W")
        buf.write("W\u00ae\u00ae\4\2||\u0089\u0089\3\2CD\4\2\u00fb\u00fb")
        buf.write("\u0119\u0119\4\2\'\';;\7\2@@LLnn{{\u00a5\u00a5\3\2]^\4")
        buf.write("\2nn{{\4\2\u00b2\u00b2\u0134\u0134\4\2$$\u009f\u009f\5")
        buf.write("\2VV\u00ad\u00ad\u00e4\u00e4\6\2ii\u0090\u0090\u00ed\u00ed")
        buf.write("\u010f\u010f\5\2ii\u00ed\u00ed\u010f\u010f\4\2vv\u0097")
        buf.write("\u0097\4\2&&bb\4\2\u0138\u0138\u013a\u013a\5\2&&++\u00f1")
        buf.write("\u00f1\5\2qq\u0109\u0109\u0111\u0111\4\2\u0129\u012a\u012f")
        buf.write("\u012f\3\2\u012b\u012e\4\2\u0129\u012a\u0132\u0132\4\2")
        buf.write("QQSS\3\2\u00f9\u00fa\4\2\3\3||\4\2\3\3xx\5\2\63\63\u009a")
        buf.write("\u009a\u0104\u0104\3\2\u0120\u0121\3\2\u0129\u0133\6\2")
        buf.write("))\u0089\u0089\u00b1\u00b1\u00b9\u00b9\4\2qq\u0109\u0109")
        buf.write("\3\2\u0129\u012a\4\2cc\u00c2\u00c2\4\2\u00ba\u00ba\u00f2")
        buf.write("\u00f2\4\2ww\u00c9\u00c9\3\2\u0139\u013a\4\2dd\u00ec\u00ec")
        buf.write("\65\2$%\'(,-/\60\62\62\648;;=@BBDJLLOPUWYacdhhjpssuwz")
        buf.write("{~\u0080\u0083\u0083\u0086\u0088\u008a\u008b\u008d\u008f")
        buf.write("\u0091\u0091\u0094\u0094\u0096\u0099\u009c\u00a9\u00ac")
        buf.write("\u00ae\u00b0\u00b0\u00b3\u00b4\u00b7\u00b8\u00bb\u00bb")
        buf.write("\u00bd\u00be\u00c0\u00c9\u00cb\u00d3\u00d5\u00db\u00dd")
        buf.write("\u00e4\u00e8\u00ea\u00ec\u00ec\u00ee\u00f0\u00f2\u00fa")
        buf.write("\u00fc\u0100\u0103\u0103\u0105\u010a\u010c\u010e\u0112")
        buf.write("\u0115\u0118\u011a\u011d\u011d\u012e\u012e\21\2**NNii")
        buf.write("}}\u008c\u008c\u0090\u0090\u0095\u0095\u009b\u009b\u00af")
        buf.write("\u00af\u00b5\u00b5\u00dc\u00dc\u00e7\u00e7\u00ed\u00ed")
        buf.write("\u010f\u010f\u0117\u0117\23\2$)+MOhj|~\u008b\u008d\u008f")
        buf.write("\u0091\u0094\u0096\u009a\u009c\u00ae\u00b0\u00b4\u00b6")
        buf.write("\u00db\u00dd\u00e6\u00e8\u00ec\u00ee\u010e\u0110\u0116")
        buf.write("\u0118\u011f\u012e\u012e\2\u0fd0\2\u017f\3\2\2\2\4\u0185")
        buf.write("\3\2\2\2\6\u018b\3\2\2\2\b\u018f\3\2\2\2\n\u0192\3\2\2")
        buf.write("\2\f\u019b\3\2\2\2\16\u019e\3\2\2\2\20\u01ab\3\2\2\2\22")
        buf.write("\u01b9\3\2\2\2\24\u01c6\3\2\2\2\26\u01d9\3\2\2\2\30\u01e1")
        buf.write("\3\2\2\2\32\u01ef\3\2\2\2\34\u01fa\3\2\2\2\36\u0209\3")
        buf.write("\2\2\2 \u020d\3\2\2\2\"\u021f\3\2\2\2$\u0221\3\2\2\2&")
        buf.write("\u022a\3\2\2\2(\u022c\3\2\2\2*\u0232\3\2\2\2,\u0234\3")
        buf.write("\2\2\2.\u023d\3\2\2\2\60\u0246\3\2\2\2\62\u0256\3\2\2")
        buf.write("\2\64\u026f\3\2\2\2\66\u0271\3\2\2\28\u0279\3\2\2\2:\u028d")
        buf.write("\3\2\2\2<\u0295\3\2\2\2>\u0297\3\2\2\2@\u029f\3\2\2\2")
        buf.write("B\u02a7\3\2\2\2D\u02ab\3\2\2\2F\u02ad\3\2\2\2H\u02b7\3")
        buf.write("\2\2\2J\u02b9\3\2\2\2L\u02c1\3\2\2\2N\u02c5\3\2\2\2P\u02d0")
        buf.write("\3\2\2\2R\u02d2\3\2\2\2T\u02e6\3\2\2\2V\u02e8\3\2\2\2")
        buf.write("X\u02f0\3\2\2\2Z\u02f6\3\2\2\2\\\u0308\3\2\2\2^\u0310")
        buf.write("\3\2\2\2`\u0312\3\2\2\2b\u0314\3\2\2\2d\u0316\3\2\2\2")
        buf.write("f\u0318\3\2\2\2h\u031a\3\2\2\2j\u031c\3\2\2\2l\u0325\3")
        buf.write("\2\2\2n\u0328\3\2\2\2p\u032b\3\2\2\2r\u032e\3\2\2\2t\u0331")
        buf.write("\3\2\2\2v\u0334\3\2\2\2x\u05f8\3\2\2\2z\u06a2\3\2\2\2")
        buf.write("|\u06a4\3\2\2\2~\u06b5\3\2\2\2\u0080\u06bb\3\2\2\2\u0082")
        buf.write("\u06c7\3\2\2\2\u0084\u06d4\3\2\2\2\u0086\u06d7\3\2\2\2")
        buf.write("\u0088\u06db\3\2\2\2\u008a\u0717\3\2\2\2\u008c\u0719\3")
        buf.write("\2\2\2\u008e\u071d\3\2\2\2\u0090\u0729\3\2\2\2\u0092\u072e")
        buf.write("\3\2\2\2\u0094\u0735\3\2\2\2\u0096\u0737\3\2\2\2\u0098")
        buf.write("\u073f\3\2\2\2\u009a\u0748\3\2\2\2\u009c\u0753\3\2\2\2")
        buf.write("\u009e\u0762\3\2\2\2\u00a0\u0765\3\2\2\2\u00a2\u0770\3")
        buf.write("\2\2\2\u00a4\u0780\3\2\2\2\u00a6\u0786\3\2\2\2\u00a8\u0788")
        buf.write("\3\2\2\2\u00aa\u0793\3\2\2\2\u00ac\u07a4\3\2\2\2\u00ae")
        buf.write("\u07ab\3\2\2\2\u00b0\u07ad\3\2\2\2\u00b2\u07b3\3\2\2\2")
        buf.write("\u00b4\u07e9\3\2\2\2\u00b6\u07f5\3\2\2\2\u00b8\u0825\3")
        buf.write("\2\2\2\u00ba\u0828\3\2\2\2\u00bc\u084a\3\2\2\2\u00be\u084c")
        buf.write("\3\2\2\2\u00c0\u0854\3\2\2\2\u00c2\u0875\3\2\2\2\u00c4")
        buf.write("\u0894\3\2\2\2\u00c6\u08a0\3\2\2\2\u00c8\u08c0\3\2\2\2")
        buf.write("\u00ca\u08cc\3\2\2\2\u00cc\u08cf\3\2\2\2\u00ce\u08d8\3")
        buf.write("\2\2\2\u00d0\u08e9\3\2\2\2\u00d2\u08fd\3\2\2\2\u00d4\u08ff")
        buf.write("\3\2\2\2\u00d6\u0907\3\2\2\2\u00d8\u090b\3\2\2\2\u00da")
        buf.write("\u090e\3\2\2\2\u00dc\u0911\3\2\2\2\u00de\u092b\3\2\2\2")
        buf.write("\u00e0\u092d\3\2\2\2\u00e2\u096b\3\2\2\2\u00e4\u097a\3")
        buf.write("\2\2\2\u00e6\u097c\3\2\2\2\u00e8\u099a\3\2\2\2\u00ea\u099c")
        buf.write("\3\2\2\2\u00ec\u09a3\3\2\2\2\u00ee\u09c3\3\2\2\2\u00f0")
        buf.write("\u09c5\3\2\2\2\u00f2\u09d7\3\2\2\2\u00f4\u09f1\3\2\2\2")
        buf.write("\u00f6\u09f7\3\2\2\2\u00f8\u09f9\3\2\2\2\u00fa\u0a18\3")
        buf.write("\2\2\2\u00fc\u0a1a\3\2\2\2\u00fe\u0a1e\3\2\2\2\u0100\u0a26")
        buf.write("\3\2\2\2\u0102\u0a31\3\2\2\2\u0104\u0a35\3\2\2\2\u0106")
        buf.write("\u0a40\3\2\2\2\u0108\u0a64\3\2\2\2\u010a\u0a66\3\2\2\2")
        buf.write("\u010c\u0a71\3\2\2\2\u010e\u0a87\3\2\2\2\u0110\u0aba\3")
        buf.write("\2\2\2\u0112\u0abc\3\2\2\2\u0114\u0ac4\3\2\2\2\u0116\u0acf")
        buf.write("\3\2\2\2\u0118\u0ad6\3\2\2\2\u011a\u0ada\3\2\2\2\u011c")
        buf.write("\u0ae4\3\2\2\2\u011e\u0aec\3\2\2\2\u0120\u0b04\3\2\2\2")
        buf.write("\u0122\u0b08\3\2\2\2\u0124\u0b0a\3\2\2\2\u0126\u0b18\3")
        buf.write("\2\2\2\u0128\u0b77\3\2\2\2\u012a\u0b7d\3\2\2\2\u012c\u0c4f")
        buf.write("\3\2\2\2\u012e\u0c6a\3\2\2\2\u0130\u0c74\3\2\2\2\u0132")
        buf.write("\u0c76\3\2\2\2\u0134\u0c78\3\2\2\2\u0136\u0c7a\3\2\2\2")
        buf.write("\u0138\u0c7c\3\2\2\2\u013a\u0c7e\3\2\2\2\u013c\u0c83\3")
        buf.write("\2\2\2\u013e\u0c8a\3\2\2\2\u0140\u0c8e\3\2\2\2\u0142\u0c93")
        buf.write("\3\2\2\2\u0144\u0c9d\3\2\2\2\u0146\u0ca6\3\2\2\2\u0148")
        buf.write("\u0cab\3\2\2\2\u014a\u0ccf\3\2\2\2\u014c\u0cd1\3\2\2\2")
        buf.write("\u014e\u0cd9\3\2\2\2\u0150\u0ce5\3\2\2\2\u0152\u0ced\3")
        buf.write("\2\2\2\u0154\u0cf6\3\2\2\2\u0156\u0cfe\3\2\2\2\u0158\u0d08")
        buf.write("\3\2\2\2\u015a\u0d0d\3\2\2\2\u015c\u0d16\3\2\2\2\u015e")
        buf.write("\u0d48\3\2\2\2\u0160\u0d5a\3\2\2\2\u0162\u0d63\3\2\2\2")
        buf.write("\u0164\u0d65\3\2\2\2\u0166\u0d71\3\2\2\2\u0168\u0d73\3")
        buf.write("\2\2\2\u016a\u0d7b\3\2\2\2\u016c\u0d85\3\2\2\2\u016e\u0d8a")
        buf.write("\3\2\2\2\u0170\u0d92\3\2\2\2\u0172\u0d94\3\2\2\2\u0174")
        buf.write("\u0dbd\3\2\2\2\u0176\u0dc6\3\2\2\2\u0178\u0dc8\3\2\2\2")
        buf.write("\u017a\u0dca\3\2\2\2\u017c\u0dcc\3\2\2\2\u017e\u0180\5")
        buf.write("\6\4\2\u017f\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u017f")
        buf.write("\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183\3\2\2\2\u0183")
        buf.write("\u0184\7\2\2\3\u0184\3\3\2\2\2\u0185\u0186\5\6\4\2\u0186")
        buf.write("\u0187\7\2\2\3\u0187\5\3\2\2\2\u0188\u018c\5\b\5\2\u0189")
        buf.write("\u018c\5\32\16\2\u018a\u018c\5\34\17\2\u018b\u0188\3\2")
        buf.write("\2\2\u018b\u0189\3\2\2\2\u018b\u018a\3\2\2\2\u018c\7\3")
        buf.write("\2\2\2\u018d\u0190\5\n\6\2\u018e\u0190\5\16\b\2\u018f")
        buf.write("\u018d\3\2\2\2\u018f\u018e\3\2\2\2\u0190\t\3\2\2\2\u0191")
        buf.write("\u0193\5(\25\2\u0192\u0191\3\2\2\2\u0192\u0193\3\2\2\2")
        buf.write("\u0193\u0194\3\2\2\2\u0194\u0195\5\f\7\2\u0195\13\3\2")
        buf.write("\2\2\u0196\u019c\5\20\t\2\u0197\u019c\5\22\n\2\u0198\u019c")
        buf.write("\5\24\13\2\u0199\u019c\5\26\f\2\u019a\u019c\5\30\r\2\u019b")
        buf.write("\u0196\3\2\2\2\u019b\u0197\3\2\2\2\u019b\u0198\3\2\2\2")
        buf.write("\u019b\u0199\3\2\2\2\u019b\u019a\3\2\2\2\u019c\r\3\2\2")
        buf.write("\2\u019d\u019f\5(\25\2\u019e\u019d\3\2\2\2\u019e\u019f")
        buf.write("\3\2\2\2\u019f\u01a1\3\2\2\2\u01a0\u01a2\5\64\33\2\u01a1")
        buf.write("\u01a0\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a3\3\2\2\2")
        buf.write("\u01a3\u01a5\5\u0088E\2\u01a4\u01a6\5\36\20\2\u01a5\u01a4")
        buf.write("\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01a8\3\2\2\2\u01a7")
        buf.write("\u01a9\5 \21\2\u01a8\u01a7\3\2\2\2\u01a8\u01a9\3\2\2\2")
        buf.write("\u01a9\17\3\2\2\2\u01aa\u01ac\5\64\33\2\u01ab\u01aa\3")
        buf.write("\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01af")
        buf.write("\7\u0107\2\2\u01ae\u01b0\5\"\22\2\u01af\u01ae\3\2\2\2")
        buf.write("\u01af\u01b0\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b3\5")
        buf.write(",\27\2\u01b2\u01b4\5\36\20\2\u01b3\u01b2\3\2\2\2\u01b3")
        buf.write("\u01b4\3\2\2\2\u01b4\u01b6\3\2\2\2\u01b5\u01b7\5 \21\2")
        buf.write("\u01b6\u01b5\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\21\3\2")
        buf.write("\2\2\u01b8\u01ba\5\64\33\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba")
        buf.write("\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bd\7\32\2\2\u01bc")
        buf.write("\u01be\5\"\22\2\u01bd\u01bc\3\2\2\2\u01bd\u01be\3\2\2")
        buf.write("\2\u01be\u01bf\3\2\2\2\u01bf\u01c1\5.\30\2\u01c0\u01c2")
        buf.write("\5\36\20\2\u01c1\u01c0\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2")
        buf.write("\u01c4\3\2\2\2\u01c3\u01c5\5 \21\2\u01c4\u01c3\3\2\2\2")
        buf.write("\u01c4\u01c5\3\2\2\2\u01c5\23\3\2\2\2\u01c6\u01c7\7\37")
        buf.write("\2\2\u01c7\u01c9\5\"\22\2\u01c8\u01ca\5\62\32\2\u01c9")
        buf.write("\u01c8\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cd\3\2\2\2")
        buf.write("\u01cb\u01cc\7\66\2\2\u01cc\u01ce\5> \2\u01cd\u01cb\3")
        buf.write("\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01d0")
        buf.write("\7\26\2\2\u01d0\u01d2\5@!\2\u01d1\u01cf\3\2\2\2\u01d1")
        buf.write("\u01d2\3\2\2\2\u01d2\u01d4\3\2\2\2\u01d3\u01d5\5\36\20")
        buf.write("\2\u01d4\u01d3\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d7")
        buf.write("\3\2\2\2\u01d6\u01d8\5 \21\2\u01d7\u01d6\3\2\2\2\u01d7")
        buf.write("\u01d8\3\2\2\2\u01d8\25\3\2\2\2\u01d9\u01da\7M\2\2\u01da")
        buf.write("\u01dc\5.\30\2\u01db\u01dd\5\36\20\2\u01dc\u01db\3\2\2")
        buf.write("\2\u01dc\u01dd\3\2\2\2\u01dd\u01df\3\2\2\2\u01de\u01e0")
        buf.write("\5 \21\2\u01df\u01de\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0")
        buf.write("\27\3\2\2\2\u01e1\u01e3\7M\2\2\u01e2\u01e4\7U\2\2\u01e3")
        buf.write("\u01e2\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\3\2\2\2")
        buf.write("\u01e5\u01e6\5\\/\2\u01e6\u01e7\7\u00e4\2\2\u01e7\u01e9")
        buf.write("\5J&\2\u01e8\u01ea\5\36\20\2\u01e9\u01e8\3\2\2\2\u01e9")
        buf.write("\u01ea\3\2\2\2\u01ea\u01ec\3\2\2\2\u01eb\u01ed\5 \21\2")
        buf.write("\u01ec\u01eb\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\31\3\2")
        buf.write("\2\2\u01ee\u01f0\5\64\33\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0")
        buf.write("\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\7\33\2\2\u01f2")
        buf.write("\u01f4\5\"\22\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2")
        buf.write("\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\t\2\2\2\u01f6\u01f8")
        buf.write("\5\60\31\2\u01f7\u01f9\5<\37\2\u01f8\u01f7\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\33\3\2\2\2\u01fa\u01fc\7 \2\2\u01fb")
        buf.write("\u01fd\5\"\22\2\u01fc\u01fb\3\2\2\2\u01fc\u01fd\3\2\2")
        buf.write("\2\u01fd\u0200\3\2\2\2\u01fe\u01ff\7\u00e3\2\2\u01ff\u0201")
        buf.write("\7\u0138\2\2\u0200\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write("\u0203\3\2\2\2\u0202\u0204\7\34\2\2\u0203\u0202\3\2\2")
        buf.write("\2\u0203\u0204\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0206")
        buf.write("\7!\2\2\u0206\u0208\7\u0134\2\2\u0207\u0205\3\2\2\2\u0207")
        buf.write("\u0208\3\2\2\2\u0208\35\3\2\2\2\u0209\u020b\7\27\2\2\u020a")
        buf.write("\u020c\5\u016e\u00b8\2\u020b\u020a\3\2\2\2\u020b\u020c")
        buf.write("\3\2\2\2\u020c\37\3\2\2\2\u020d\u020e\7\30\2\2\u020e!")
        buf.write("\3\2\2\2\u020f\u0214\5&\24\2\u0210\u0211\7\3\2\2\u0211")
        buf.write("\u0213\5&\24\2\u0212\u0210\3\2\2\2\u0213\u0216\3\2\2\2")
        buf.write("\u0214\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0220\3")
        buf.write("\2\2\2\u0216\u0214\3\2\2\2\u0217\u021c\5$\23\2\u0218\u0219")
        buf.write("\7\3\2\2\u0219\u021b\5$\23\2\u021a\u0218\3\2\2\2\u021b")
        buf.write("\u021e\3\2\2\2\u021c\u021a\3\2\2\2\u021c\u021d\3\2\2\2")
        buf.write("\u021d\u0220\3\2\2\2\u021e\u021c\3\2\2\2\u021f\u020f\3")
        buf.write("\2\2\2\u021f\u0217\3\2\2\2\u0220#\3\2\2\2\u0221\u0222")
        buf.write("\5h\65\2\u0222\u0223\t\3\2\2\u0223\u0224\5&\24\2\u0224")
        buf.write("%\3\2\2\2\u0225\u022b\5h\65\2\u0226\u0227\7\5\2\2\u0227")
        buf.write("\u0228\5\b\5\2\u0228\u0229\7\6\2\2\u0229\u022b\3\2\2\2")
        buf.write("\u022a\u0225\3\2\2\2\u022a\u0226\3\2\2\2\u022b\'\3\2\2")
        buf.write("\2\u022c\u022d\5h\65\2\u022d\u022e\5*\26\2\u022e)\3\2")
        buf.write("\2\2\u022f\u0233\7\"\2\2\u0230\u0231\6\26\2\2\u0231\u0233")
        buf.write("\7\u0120\2\2\u0232\u022f\3\2\2\2\u0232\u0230\3\2\2\2\u0233")
        buf.write("+\3\2\2\2\u0234\u0235\t\2\2\2\u0235\u0237\5\60\31\2\u0236")
        buf.write("\u0238\5<\37\2\u0237\u0236\3\2\2\2\u0237\u0238\3\2\2\2")
        buf.write("\u0238\u023b\3\2\2\2\u0239\u023a\7\u00e4\2\2\u023a\u023c")
        buf.write("\5F$\2\u023b\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023c-")
        buf.write("\3\2\2\2\u023d\u023e\t\2\2\2\u023e\u0240\5\60\31\2\u023f")
        buf.write("\u0241\5<\37\2\u0240\u023f\3\2\2\2\u0240\u0241\3\2\2\2")
        buf.write("\u0241\u0244\3\2\2\2\u0242\u0243\7\u00e4\2\2\u0243\u0245")
        buf.write("\5J&\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245/")
        buf.write("\3\2\2\2\u0246\u024b\5h\65\2\u0247\u0248\7\7\2\2\u0248")
        buf.write("\u024a\5h\65\2\u0249\u0247\3\2\2\2\u024a\u024d\3\2\2\2")
        buf.write("\u024b\u0249\3\2\2\2\u024b\u024c\3\2\2\2\u024c\61\3\2")
        buf.write("\2\2\u024d\u024b\3\2\2\2\u024e\u0257\7N\2\2\u024f\u0257")
        buf.write("\7\u008c\2\2\u0250\u0251\7\u009b\2\2\u0251\u0257\7\u00bc")
        buf.write("\2\2\u0252\u0253\7\u00dc\2\2\u0253\u0257\7\u00bc\2\2\u0254")
        buf.write("\u0255\7}\2\2\u0255\u0257\7\u00bc\2\2\u0256\u024e\3\2")
        buf.write("\2\2\u0256\u024f\3\2\2\2\u0256\u0250\3\2\2\2\u0256\u0252")
        buf.write("\3\2\2\2\u0256\u0254\3\2\2\2\u0257\63\3\2\2\2\u0258\u025a")
        buf.write("\5\66\34\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2\2\2\u025a")
        buf.write("\u025b\3\2\2\2\u025b\u025c\7\36\2\2\u025c\u025f\58\35")
        buf.write("\2\u025d\u025e\7\66\2\2\u025e\u0260\5> \2\u025f\u025d")
        buf.write("\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u0263\3\2\2\2\u0261")
        buf.write("\u0262\7\26\2\2\u0262\u0264\5@!\2\u0263\u0261\3\2\2\2")
        buf.write("\u0263\u0264\3\2\2\2\u0264\u0270\3\2\2\2\u0265\u0267\5")
        buf.write("\66\34\2\u0266\u0265\3\2\2\2\u0266\u0267\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u0269\7\36\2\2\u0269\u026a\7\66\2")
        buf.write("\2\u026a\u026d\5> \2\u026b\u026c\7\26\2\2\u026c\u026e")
        buf.write("\5@!\2\u026d\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0270")
        buf.write("\3\2\2\2\u026f\u0259\3\2\2\2\u026f\u0266\3\2\2\2\u0270")
        buf.write("\65\3\2\2\2\u0271\u0272\t\4\2\2\u0272\67\3\2\2\2\u0273")
        buf.write("\u0274\b\35\1\2\u0274\u027a\5:\36\2\u0275\u0276\7\5\2")
        buf.write("\2\u0276\u0277\58\35\2\u0277\u0278\7\6\2\2\u0278\u027a")
        buf.write("\3\2\2\2\u0279\u0273\3\2\2\2\u0279\u0275\3\2\2\2\u027a")
        buf.write("\u0280\3\2\2\2\u027b\u027c\f\3\2\2\u027c\u027d\t\5\2\2")
        buf.write("\u027d\u027f\58\35\4\u027e\u027b\3\2\2\2\u027f\u0282\3")
        buf.write("\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2\u02819")
        buf.write("\3\2\2\2\u0282\u0280\3\2\2\2\u0283\u0285\7\u012a\2\2\u0284")
        buf.write("\u0283\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\3\2\2\2")
        buf.write("\u0286\u028e\7\u013a\2\2\u0287\u0289\7\u012a\2\2\u0288")
        buf.write("\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a\3\2\2\2")
        buf.write("\u028a\u028e\7\u0138\2\2\u028b\u028e\7\34\2\2\u028c\u028e")
        buf.write("\7\35\2\2\u028d\u0284\3\2\2\2\u028d\u0288\3\2\2\2\u028d")
        buf.write("\u028b\3\2\2\2\u028d\u028c\3\2\2\2\u028e;\3\2\2\2\u028f")
        buf.write("\u0290\7\31\2\2\u0290\u0296\5V,\2\u0291\u0293\7\31\2\2")
        buf.write("\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294\3")
        buf.write("\2\2\2\u0294\u0296\5T+\2\u0295\u028f\3\2\2\2\u0295\u0292")
        buf.write("\3\2\2\2\u0296=\3\2\2\2\u0297\u029c\5D#\2\u0298\u0299")
        buf.write("\7\3\2\2\u0299\u029b\5D#\2\u029a\u0298\3\2\2\2\u029b\u029e")
        buf.write("\3\2\2\2\u029c\u029a\3\2\2\2\u029c\u029d\3\2\2\2\u029d")
        buf.write("?\3\2\2\2\u029e\u029c\3\2\2\2\u029f\u02a4\5B\"\2\u02a0")
        buf.write("\u02a1\7\3\2\2\u02a1\u02a3\5B\"\2\u02a2\u02a0\3\2\2\2")
        buf.write("\u02a3\u02a6\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3")
        buf.write("\2\2\2\u02a5A\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02a9")
        buf.write("\5D#\2\u02a8\u02aa\t\6\2\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa")
        buf.write("\3\2\2\2\u02aaC\3\2\2\2\u02ab\u02ac\5h\65\2\u02acE\3\2")
        buf.write("\2\2\u02ad\u02b2\5H%\2\u02ae\u02af\7\3\2\2\u02af\u02b1")
        buf.write("\5H%\2\u02b0\u02ae\3\2\2\2\u02b1\u02b4\3\2\2\2\u02b2\u02b0")
        buf.write("\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3G\3\2\2\2\u02b4\u02b2")
        buf.write("\3\2\2\2\u02b5\u02b8\5L\'\2\u02b6\u02b8\7\u012b\2\2\u02b7")
        buf.write("\u02b5\3\2\2\2\u02b7\u02b6\3\2\2\2\u02b8I\3\2\2\2\u02b9")
        buf.write("\u02be\5L\'\2\u02ba\u02bb\7\3\2\2\u02bb\u02bd\5L\'\2\u02bc")
        buf.write("\u02ba\3\2\2\2\u02bd\u02c0\3\2\2\2\u02be\u02bc\3\2\2\2")
        buf.write("\u02be\u02bf\3\2\2\2\u02bfK\3\2\2\2\u02c0\u02be\3\2\2")
        buf.write("\2\u02c1\u02c2\5N(\2\u02c2\u02c3\7\4\2\2\u02c3\u02c4\5")
        buf.write("P)\2\u02c4M\3\2\2\2\u02c5\u02c6\5h\65\2\u02c6O\3\2\2\2")
        buf.write("\u02c7\u02d1\5h\65\2\u02c8\u02c9\7\b\2\2\u02c9\u02ca\5")
        buf.write("P)\2\u02ca\u02cb\7\t\2\2\u02cb\u02d1\3\2\2\2\u02cc\u02cd")
        buf.write("\7\n\2\2\u02cd\u02ce\5J&\2\u02ce\u02cf\7\13\2\2\u02cf")
        buf.write("\u02d1\3\2\2\2\u02d0\u02c7\3\2\2\2\u02d0\u02c8\3\2\2\2")
        buf.write("\u02d0\u02cc\3\2\2\2\u02d1Q\3\2\2\2\u02d2\u02d3\5^\60")
        buf.write("\2\u02d3S\3\2\2\2\u02d4\u02d5\7\n\2\2\u02d5\u02d7\5V,")
        buf.write("\2\u02d6\u02d8\7\3\2\2\u02d7\u02d6\3\2\2\2\u02d7\u02d8")
        buf.write("\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da\7\13\2\2\u02da")
        buf.write("\u02e7\3\2\2\2\u02db\u02dc\7\n\2\2\u02dc\u02e7\7\13\2")
        buf.write("\2\u02dd\u02de\7\5\2\2\u02de\u02e0\5V,\2\u02df\u02e1\7")
        buf.write("\3\2\2\u02e0\u02df\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e2")
        buf.write("\3\2\2\2\u02e2\u02e3\7\6\2\2\u02e3\u02e7\3\2\2\2\u02e4")
        buf.write("\u02e5\7\5\2\2\u02e5\u02e7\7\6\2\2\u02e6\u02d4\3\2\2\2")
        buf.write("\u02e6\u02db\3\2\2\2\u02e6\u02dd\3\2\2\2\u02e6\u02e4\3")
        buf.write("\2\2\2\u02e7U\3\2\2\2\u02e8\u02ed\5X-\2\u02e9\u02ea\7")
        buf.write("\3\2\2\u02ea\u02ec\5X-\2\u02eb\u02e9\3\2\2\2\u02ec\u02ef")
        buf.write("\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee")
        buf.write("W\3\2\2\2\u02ef\u02ed\3\2\2\2\u02f0\u02f1\5Z.\2\u02f1")
        buf.write("\u02f2\t\3\2\2\u02f2\u02f3\5^\60\2\u02f3Y\3\2\2\2\u02f4")
        buf.write("\u02f7\5h\65\2\u02f5\u02f7\5b\62\2\u02f6\u02f4\3\2\2\2")
        buf.write("\u02f6\u02f5\3\2\2\2\u02f7[\3\2\2\2\u02f8\u02f9\7\b\2")
        buf.write("\2\u02f9\u02fe\5^\60\2\u02fa\u02fb\7\3\2\2\u02fb\u02fd")
        buf.write("\5^\60\2\u02fc\u02fa\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe")
        buf.write("\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0302\3\2\2\2")
        buf.write("\u0300\u02fe\3\2\2\2\u0301\u0303\7\3\2\2\u0302\u0301\3")
        buf.write("\2\2\2\u0302\u0303\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0305")
        buf.write("\7\t\2\2\u0305\u0309\3\2\2\2\u0306\u0307\7\b\2\2\u0307")
        buf.write("\u0309\7\t\2\2\u0308\u02f8\3\2\2\2\u0308\u0306\3\2\2\2")
        buf.write("\u0309]\3\2\2\2\u030a\u0311\5b\62\2\u030b\u0311\5`\61")
        buf.write("\2\u030c\u0311\5T+\2\u030d\u0311\5\\/\2\u030e\u0311\5")
        buf.write("d\63\2\u030f\u0311\5f\64\2\u0310\u030a\3\2\2\2\u0310\u030b")
        buf.write("\3\2\2\2\u0310\u030c\3\2\2\2\u0310\u030d\3\2\2\2\u0310")
        buf.write("\u030e\3\2\2\2\u0310\u030f\3\2\2\2\u0311_\3\2\2\2\u0312")
        buf.write("\u0313\5\u0174\u00bb\2\u0313a\3\2\2\2\u0314\u0315\7\u0134")
        buf.write("\2\2\u0315c\3\2\2\2\u0316\u0317\t\7\2\2\u0317e\3\2\2\2")
        buf.write("\u0318\u0319\t\b\2\2\u0319g\3\2\2\2\u031a\u031b\5\u016e")
        buf.write("\u00b8\2\u031bi\3\2\2\2\u031c\u0320\5x=\2\u031d\u031f")
        buf.write("\7\17\2\2\u031e\u031d\3\2\2\2\u031f\u0322\3\2\2\2\u0320")
        buf.write("\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0323\3\2\2\2")
        buf.write("\u0322\u0320\3\2\2\2\u0323\u0324\7\2\2\3\u0324k\3\2\2")
        buf.write("\2\u0325\u0326\5\u011a\u008e\2\u0326\u0327\7\2\2\3\u0327")
        buf.write("m\3\2\2\2\u0328\u0329\5\u0116\u008c\2\u0329\u032a\7\2")
        buf.write("\2\3\u032ao\3\2\2\2\u032b\u032c\5\u0114\u008b\2\u032c")
        buf.write("\u032d\7\2\2\3\u032dq\3\2\2\2\u032e\u032f\5\u0118\u008d")
        buf.write("\2\u032f\u0330\7\2\2\3\u0330s\3\2\2\2\u0331\u0332\5\u014a")
        buf.write("\u00a6\2\u0332\u0333\7\2\2\3\u0333u\3\2\2\2\u0334\u0335")
        buf.write("\5\u0150\u00a9\2\u0335\u0336\7\2\2\3\u0336w\3\2\2\2\u0337")
        buf.write("\u05f9\5\u0088E\2\u0338\u033a\5\u0098M\2\u0339\u0338\3")
        buf.write("\2\2\2\u0339\u033a\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u05f9")
        buf.write("\5\u00b4[\2\u033c\u033e\7\u0115\2\2\u033d\u033f\7\u00ad")
        buf.write("\2\2\u033e\u033d\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340")
        buf.write("\3\2\2\2\u0340\u05f9\5\u0114\u008b\2\u0341\u0342\7M\2")
        buf.write("\2\u0342\u0346\5\u0092J\2\u0343\u0344\7\u0086\2\2\u0344")
        buf.write("\u0345\7\u00b1\2\2\u0345\u0347\7k\2\2\u0346\u0343\3\2")
        buf.write("\2\2\u0346\u0347\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0350")
        buf.write("\5\u0114\u008b\2\u0349\u034f\5\u0086D\2\u034a\u034f\5")
        buf.write("\u0084C\2\u034b\u034c\7\u011e\2\2\u034c\u034d\t\t\2\2")
        buf.write("\u034d\u034f\5\u00a0Q\2\u034e\u0349\3\2\2\2\u034e\u034a")
        buf.write("\3\2\2\2\u034e\u034b\3\2\2\2\u034f\u0352\3\2\2\2\u0350")
        buf.write("\u034e\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u05f9\3\2\2\2")
        buf.write("\u0352\u0350\3\2\2\2\u0353\u0354\7\'\2\2\u0354\u0355\5")
        buf.write("\u0092J\2\u0355\u0356\5\u0114\u008b\2\u0356\u0357\7\u00ec")
        buf.write("\2\2\u0357\u0358\t\t\2\2\u0358\u0359\5\u00a0Q\2\u0359")
        buf.write("\u05f9\3\2\2\2\u035a\u035b\7\'\2\2\u035b\u035c\5\u0092")
        buf.write("J\2\u035c\u035d\5\u0114\u008b\2\u035d\u035e\7\u00ec\2")
        buf.write("\2\u035e\u035f\5\u0084C\2\u035f\u05f9\3\2\2\2\u0360\u0361")
        buf.write("\7d\2\2\u0361\u0364\5\u0092J\2\u0362\u0363\7\u0086\2\2")
        buf.write("\u0363\u0365\7k\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3")
        buf.write("\2\2\2\u0365\u0366\3\2\2\2\u0366\u0368\5\u0114\u008b\2")
        buf.write("\u0367\u0369\t\n\2\2\u0368\u0367\3\2\2\2\u0368\u0369\3")
        buf.write("\2\2\2\u0369\u05f9\3\2\2\2\u036a\u036b\7\u00ef\2\2\u036b")
        buf.write("\u036e\t\13\2\2\u036c\u036d\t\f\2\2\u036d\u036f\5\u0114")
        buf.write("\u008b\2\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f")
        buf.write("\u0374\3\2\2\2\u0370\u0372\7\u009c\2\2\u0371\u0370\3\2")
        buf.write("\2\2\u0371\u0372\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375")
        buf.write("\7\u0134\2\2\u0374\u0371\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("\u05f9\3\2\2\2\u0376\u037b\5|?\2\u0377\u0378\7\5\2\2\u0378")
        buf.write("\u0379\5\u0150\u00a9\2\u0379\u037a\7\6\2\2\u037a\u037c")
        buf.write("\3\2\2\2\u037b\u0377\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write("\u037d\3\2\2\2\u037d\u037e\5\u009cO\2\u037e\u0383\5\u009e")
        buf.write("P\2\u037f\u0381\7.\2\2\u0380\u037f\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0384\5\u0088E\2\u0383")
        buf.write("\u0380\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u05f9\3\2\2\2")
        buf.write("\u0385\u038a\5|?\2\u0386\u0387\7\5\2\2\u0387\u0388\5\u0150")
        buf.write("\u00a9\2\u0388\u0389\7\6\2\2\u0389\u038b\3\2\2\2\u038a")
        buf.write("\u0386\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u03a1\3\2\2\2")
        buf.write("\u038c\u03a0\5\u0086D\2\u038d\u038e\7\u00c3\2\2\u038e")
        buf.write("\u038f\7\66\2\2\u038f\u0390\7\5\2\2\u0390\u0391\5\u0150")
        buf.write("\u00a9\2\u0391\u0392\7\6\2\2\u0392\u0397\3\2\2\2\u0393")
        buf.write("\u0394\7\u00c3\2\2\u0394\u0395\7\66\2\2\u0395\u0397\5")
        buf.write("\u00fc\177\2\u0396\u038d\3\2\2\2\u0396\u0393\3\2\2\2\u0397")
        buf.write("\u03a0\3\2\2\2\u0398\u03a0\5\u0080A\2\u0399\u03a0\5\u0082")
        buf.write("B\2\u039a\u03a0\5\u0110\u0089\2\u039b\u03a0\5\u00acW\2")
        buf.write("\u039c\u03a0\5\u0084C\2\u039d\u039e\7\u00fe\2\2\u039e")
        buf.write("\u03a0\5\u00a0Q\2\u039f\u038c\3\2\2\2\u039f\u0396\3\2")
        buf.write("\2\2\u039f\u0398\3\2\2\2\u039f\u0399\3\2\2\2\u039f\u039a")
        buf.write("\3\2\2\2\u039f\u039b\3\2\2\2\u039f\u039c\3\2\2\2\u039f")
        buf.write("\u039d\3\2\2\2\u03a0\u03a3\3\2\2\2\u03a1\u039f\3\2\2\2")
        buf.write("\u03a1\u03a2\3\2\2\2\u03a2\u03a8\3\2\2\2\u03a3\u03a1\3")
        buf.write("\2\2\2\u03a4\u03a6\7.\2\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6")
        buf.write("\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a9\5\u0088E\2\u03a8")
        buf.write("\u03a5\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u05f9\3\2\2\2")
        buf.write("\u03aa\u03ab\7M\2\2\u03ab\u03af\7\u00fb\2\2\u03ac\u03ad")
        buf.write("\7\u0086\2\2\u03ad\u03ae\7\u00b1\2\2\u03ae\u03b0\7k\2")
        buf.write("\2\u03af\u03ac\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1")
        buf.write("\3\2\2\2\u03b1\u03b2\5\u0116\u008c\2\u03b2\u03b3\7\u009c")
        buf.write("\2\2\u03b3\u03bc\5\u0116\u008c\2\u03b4\u03bb\5\u009cO")
        buf.write("\2\u03b5\u03bb\5\u0110\u0089\2\u03b6\u03bb\5\u00acW\2")
        buf.write("\u03b7\u03bb\5\u0084C\2\u03b8\u03b9\7\u00fe\2\2\u03b9")
        buf.write("\u03bb\5\u00a0Q\2\u03ba\u03b4\3\2\2\2\u03ba\u03b5\3\2")
        buf.write("\2\2\u03ba\u03b6\3\2\2\2\u03ba\u03b7\3\2\2\2\u03ba\u03b8")
        buf.write("\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u05f9\3\2\2\2\u03be\u03bc\3\2\2\2")
        buf.write("\u03bf\u03c4\5~@\2\u03c0\u03c1\7\5\2\2\u03c1\u03c2\5\u0150")
        buf.write("\u00a9\2\u03c2\u03c3\7\6\2\2\u03c3\u03c5\3\2\2\2\u03c4")
        buf.write("\u03c0\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6\3\2\2\2")
        buf.write("\u03c6\u03c7\5\u009cO\2\u03c7\u03cc\5\u009eP\2\u03c8\u03ca")
        buf.write("\7.\2\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca")
        buf.write("\u03cb\3\2\2\2\u03cb\u03cd\5\u0088E\2\u03cc\u03c9\3\2")
        buf.write("\2\2\u03cc\u03cd\3\2\2\2\u03cd\u05f9\3\2\2\2\u03ce\u03cf")
        buf.write("\7(\2\2\u03cf\u03d0\7\u00fb\2\2\u03d0\u03d2\5\u0114\u008b")
        buf.write("\2\u03d1\u03d3\5\u008eH\2\u03d2\u03d1\3\2\2\2\u03d2\u03d3")
        buf.write("\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5\7I\2\2\u03d5")
        buf.write("\u03dd\7\u00f5\2\2\u03d6\u03de\5\u016e\u00b8\2\u03d7\u03d8")
        buf.write("\7x\2\2\u03d8\u03d9\7D\2\2\u03d9\u03de\5\u00fe\u0080\2")
        buf.write("\u03da\u03db\7x\2\2\u03db\u03dc\7&\2\2\u03dc\u03de\7D")
        buf.write("\2\2\u03dd\u03d6\3\2\2\2\u03dd\u03d7\3\2\2\2\u03dd\u03da")
        buf.write("\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u05f9\3\2\2\2\u03df")
        buf.write("\u03e0\7\'\2\2\u03e0\u03e1\7\u00fb\2\2\u03e1\u03e2\5\u0114")
        buf.write("\u008b\2\u03e2\u03e3\7$\2\2\u03e3\u03e4\t\r\2\2\u03e4")
        buf.write("\u03e5\5\u014c\u00a7\2\u03e5\u05f9\3\2\2\2\u03e6\u03e7")
        buf.write("\7\'\2\2\u03e7\u03e8\7\u00fb\2\2\u03e8\u03e9\5\u0114\u008b")
        buf.write("\2\u03e9\u03ea\7$\2\2\u03ea\u03eb\t\r\2\2\u03eb\u03ec")
        buf.write("\7\5\2\2\u03ec\u03ed\5\u014c\u00a7\2\u03ed\u03ee\7\6\2")
        buf.write("\2\u03ee\u05f9\3\2\2\2\u03ef\u03f0\7\'\2\2\u03f0\u03f1")
        buf.write("\7\u00fb\2\2\u03f1\u03f2\5\u0114\u008b\2\u03f2\u03f3\7")
        buf.write("\u00d6\2\2\u03f3\u03f4\7C\2\2\u03f4\u03f5\5\u0114\u008b")
        buf.write("\2\u03f5\u03f6\7\u0102\2\2\u03f6\u03f7\5\u016a\u00b6\2")
        buf.write("\u03f7\u05f9\3\2\2\2\u03f8\u03f9\7\'\2\2\u03f9\u03fa\7")
        buf.write("\u00fb\2\2\u03fa\u03fb\5\u0114\u008b\2\u03fb\u03fc\7d")
        buf.write("\2\2\u03fc\u03fd\t\r\2\2\u03fd\u03fe\7\5\2\2\u03fe\u03ff")
        buf.write("\5\u0112\u008a\2\u03ff\u0400\7\6\2\2\u0400\u05f9\3\2\2")
        buf.write("\2\u0401\u0402\7\'\2\2\u0402\u0403\7\u00fb\2\2\u0403\u0404")
        buf.write("\5\u0114\u008b\2\u0404\u0405\7d\2\2\u0405\u0406\t\r\2")
        buf.write("\2\u0406\u0407\5\u0112\u008a\2\u0407\u05f9\3\2\2\2\u0408")
        buf.write("\u0409\7\'\2\2\u0409\u040a\t\16\2\2\u040a\u040b\5\u0114")
        buf.write("\u008b\2\u040b\u040c\7\u00d6\2\2\u040c\u040d\7\u0102\2")
        buf.write("\2\u040d\u040e\5\u0114\u008b\2\u040e\u05f9\3\2\2\2\u040f")
        buf.write("\u0410\7\'\2\2\u0410\u0411\t\16\2\2\u0411\u0412\5\u0114")
        buf.write("\u008b\2\u0412\u0413\7\u00ec\2\2\u0413\u0414\7\u00fe\2")
        buf.write("\2\u0414\u0415\5\u00a0Q\2\u0415\u05f9\3\2\2\2\u0416\u0417")
        buf.write("\7\'\2\2\u0417\u0418\t\16\2\2\u0418\u0419\5\u0114\u008b")
        buf.write("\2\u0419\u041a\7\u0113\2\2\u041a\u041d\7\u00fe\2\2\u041b")
        buf.write("\u041c\7\u0086\2\2\u041c\u041e\7k\2\2\u041d\u041b\3\2")
        buf.write("\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420")
        buf.write("\5\u00a0Q\2\u0420\u05f9\3\2\2\2\u0421\u0422\7\'\2\2\u0422")
        buf.write("\u0423\7\u00fb\2\2\u0423\u0424\5\u0114\u008b\2\u0424\u0426")
        buf.write("\t\17\2\2\u0425\u0427\7C\2\2\u0426\u0425\3\2\2\2\u0426")
        buf.write("\u0427\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u042a\5\u0114")
        buf.write("\u008b\2\u0429\u042b\5\u0176\u00bc\2\u042a\u0429\3\2\2")
        buf.write("\2\u042a\u042b\3\2\2\2\u042b\u05f9\3\2\2\2\u042c\u042d")
        buf.write("\7\'\2\2\u042d\u042e\7\u00fb\2\2\u042e\u0430\5\u0114\u008b")
        buf.write("\2\u042f\u0431\5\u008eH\2\u0430\u042f\3\2\2\2\u0430\u0431")
        buf.write("\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0434\7;\2\2\u0433")
        buf.write("\u0435\7C\2\2\u0434\u0433\3\2\2\2\u0434\u0435\3\2\2\2")
        buf.write("\u0435\u0436\3\2\2\2\u0436\u0437\5\u0114\u008b\2\u0437")
        buf.write("\u0439\5\u0152\u00aa\2\u0438\u043a\5\u0148\u00a5\2\u0439")
        buf.write("\u0438\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u05f9\3\2\2\2")
        buf.write("\u043b\u043c\7\'\2\2\u043c\u043d\7\u00fb\2\2\u043d\u043f")
        buf.write("\5\u0114\u008b\2\u043e\u0440\5\u008eH\2\u043f\u043e\3")
        buf.write("\2\2\2\u043f\u0440\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442")
        buf.write("\7\u00d8\2\2\u0442\u0443\7D\2\2\u0443\u0444\7\5\2\2\u0444")
        buf.write("\u0445\5\u014c\u00a7\2\u0445\u0446\7\6\2\2\u0446\u05f9")
        buf.write("\3\2\2\2\u0447\u0448\7\'\2\2\u0448\u0449\7\u00fb\2\2\u0449")
        buf.write("\u044b\5\u0114\u008b\2\u044a\u044c\5\u008eH\2\u044b\u044a")
        buf.write("\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write("\u044e\7\u00ec\2\2\u044e\u044f\7\u00e9\2\2\u044f\u0453")
        buf.write("\7\u0134\2\2\u0450\u0451\7\u011e\2\2\u0451\u0452\7\u00ea")
        buf.write("\2\2\u0452\u0454\5\u00a0Q\2\u0453\u0450\3\2\2\2\u0453")
        buf.write("\u0454\3\2\2\2\u0454\u05f9\3\2\2\2\u0455\u0456\7\'\2\2")
        buf.write("\u0456\u0457\7\u00fb\2\2\u0457\u0459\5\u0114\u008b\2\u0458")
        buf.write("\u045a\5\u008eH\2\u0459\u0458\3\2\2\2\u0459\u045a\3\2")
        buf.write("\2\2\u045a\u045b\3\2\2\2\u045b\u045c\7\u00ec\2\2\u045c")
        buf.write("\u045d\7\u00ea\2\2\u045d\u045e\5\u00a0Q\2\u045e\u05f9")
        buf.write("\3\2\2\2\u045f\u0460\7\'\2\2\u0460\u0461\t\16\2\2\u0461")
        buf.write("\u0462\5\u0114\u008b\2\u0462\u0466\7$\2\2\u0463\u0464")
        buf.write("\7\u0086\2\2\u0464\u0465\7\u00b1\2\2\u0465\u0467\7k\2")
        buf.write("\2\u0466\u0463\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0469")
        buf.write("\3\2\2\2\u0468\u046a\5\u008cG\2\u0469\u0468\3\2\2\2\u046a")
        buf.write("\u046b\3\2\2\2\u046b\u0469\3\2\2\2\u046b\u046c\3\2\2\2")
        buf.write("\u046c\u05f9\3\2\2\2\u046d\u046e\7\'\2\2\u046e\u046f\7")
        buf.write("\u00fb\2\2\u046f\u0470\5\u0114\u008b\2\u0470\u0471\5\u008e")
        buf.write("H\2\u0471\u0472\7\u00d6\2\2\u0472\u0473\7\u0102\2\2\u0473")
        buf.write("\u0474\5\u008eH\2\u0474\u05f9\3\2\2\2\u0475\u0476\7\'")
        buf.write("\2\2\u0476\u0477\t\16\2\2\u0477\u0478\5\u0114\u008b\2")
        buf.write("\u0478\u047b\7d\2\2\u0479\u047a\7\u0086\2\2\u047a\u047c")
        buf.write("\7k\2\2\u047b\u0479\3\2\2\2\u047b\u047c\3\2\2\2\u047c")
        buf.write("\u047d\3\2\2\2\u047d\u0482\5\u008eH\2\u047e\u047f\7\3")
        buf.write("\2\2\u047f\u0481\5\u008eH\2\u0480\u047e\3\2\2\2\u0481")
        buf.write("\u0484\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0483\3\2\2\2")
        buf.write("\u0483\u0486\3\2\2\2\u0484\u0482\3\2\2\2\u0485\u0487\7")
        buf.write("\u00cd\2\2\u0486\u0485\3\2\2\2\u0486\u0487\3\2\2\2\u0487")
        buf.write("\u05f9\3\2\2\2\u0488\u0489\7\'\2\2\u0489\u048a\7\u00fb")
        buf.write("\2\2\u048a\u048c\5\u0114\u008b\2\u048b\u048d\5\u008eH")
        buf.write("\2\u048c\u048b\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e")
        buf.write("\3\2\2\2\u048e\u048f\7\u00ec\2\2\u048f\u0490\5\u0084C")
        buf.write("\2\u0490\u05f9\3\2\2\2\u0491\u0492\7\'\2\2\u0492\u0493")
        buf.write("\7\u00fb\2\2\u0493\u0494\5\u0114\u008b\2\u0494\u0495\7")
        buf.write("\u00d2\2\2\u0495\u0496\7\u00c4\2\2\u0496\u05f9\3\2\2\2")
        buf.write("\u0497\u0498\7d\2\2\u0498\u049b\7\u00fb\2\2\u0499\u049a")
        buf.write("\7\u0086\2\2\u049a\u049c\7k\2\2\u049b\u0499\3\2\2\2\u049b")
        buf.write("\u049c\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049f\5\u0114")
        buf.write("\u008b\2\u049e\u04a0\7\u00cd\2\2\u049f\u049e\3\2\2\2\u049f")
        buf.write("\u04a0\3\2\2\2\u04a0\u05f9\3\2\2\2\u04a1\u04a2\7d\2\2")
        buf.write("\u04a2\u04a5\7\u0119\2\2\u04a3\u04a4\7\u0086\2\2\u04a4")
        buf.write("\u04a6\7k\2\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3\2\2\2")
        buf.write("\u04a6\u04a7\3\2\2\2\u04a7\u05f9\5\u0114\u008b\2\u04a8")
        buf.write("\u04ab\7M\2\2\u04a9\u04aa\7\u00b9\2\2\u04aa\u04ac\7\u00d8")
        buf.write("\2\2\u04ab\u04a9\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04b1")
        buf.write("\3\2\2\2\u04ad\u04af\7\u0080\2\2\u04ae\u04ad\3\2\2\2\u04ae")
        buf.write("\u04af\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\7\u00ff")
        buf.write("\2\2\u04b1\u04ae\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b3")
        buf.write("\3\2\2\2\u04b3\u04b7\7\u0119\2\2\u04b4\u04b5\7\u0086\2")
        buf.write("\2\u04b5\u04b6\7\u00b1\2\2\u04b6\u04b8\7k\2\2\u04b7\u04b4")
        buf.write("\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9")
        buf.write("\u04bb\5\u0114\u008b\2\u04ba\u04bc\5\u0104\u0083\2\u04bb")
        buf.write("\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04c5\3\2\2\2")
        buf.write("\u04bd\u04c4\5\u0086D\2\u04be\u04bf\7\u00c3\2\2\u04bf")
        buf.write("\u04c0\7\u00b5\2\2\u04c0\u04c4\5\u00fc\177\2\u04c1\u04c2")
        buf.write("\7\u00fe\2\2\u04c2\u04c4\5\u00a0Q\2\u04c3\u04bd\3\2\2")
        buf.write("\2\u04c3\u04be\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c4\u04c7")
        buf.write("\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6")
        buf.write("\u04c8\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c8\u04c9\7.\2\2")
        buf.write("\u04c9\u04ca\5\u0088E\2\u04ca\u05f9\3\2\2\2\u04cb\u04ce")
        buf.write("\7M\2\2\u04cc\u04cd\7\u00b9\2\2\u04cd\u04cf\7\u00d8\2")
        buf.write("\2\u04ce\u04cc\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d1")
        buf.write("\3\2\2\2\u04d0\u04d2\7\u0080\2\2\u04d1\u04d0\3\2\2\2\u04d1")
        buf.write("\u04d2\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4\7\u00ff")
        buf.write("\2\2\u04d4\u04d5\7\u0119\2\2\u04d5\u04da\5\u0116\u008c")
        buf.write("\2\u04d6\u04d7\7\5\2\2\u04d7\u04d8\5\u0150\u00a9\2\u04d8")
        buf.write("\u04d9\7\6\2\2\u04d9\u04db\3\2\2\2\u04da\u04d6\3\2\2\2")
        buf.write("\u04da\u04db\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04df\5")
        buf.write("\u009cO\2\u04dd\u04de\7\u00b8\2\2\u04de\u04e0\5\u00a0")
        buf.write("Q\2\u04df\u04dd\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u05f9")
        buf.write("\3\2\2\2\u04e1\u04e2\7\'\2\2\u04e2\u04e3\7\u0119\2\2\u04e3")
        buf.write("\u04e5\5\u0114\u008b\2\u04e4\u04e6\7.\2\2\u04e5\u04e4")
        buf.write("\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7")
        buf.write("\u04e8\5\u0088E\2\u04e8\u05f9\3\2\2\2\u04e9\u04ec\7M\2")
        buf.write("\2\u04ea\u04eb\7\u00b9\2\2\u04eb\u04ed\7\u00d8\2\2\u04ec")
        buf.write("\u04ea\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef\3\2\2\2")
        buf.write("\u04ee\u04f0\7\u00ff\2\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0")
        buf.write("\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f5\7~\2\2\u04f2")
        buf.write("\u04f3\7\u0086\2\2\u04f3\u04f4\7\u00b1\2\2\u04f4\u04f6")
        buf.write("\7k\2\2\u04f5\u04f2\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6")
        buf.write("\u04f7\3\2\2\2\u04f7\u04f8\5\u0114\u008b\2\u04f8\u04f9")
        buf.write("\7.\2\2\u04f9\u0503\7\u0134\2\2\u04fa\u04fb\7\u0117\2")
        buf.write("\2\u04fb\u0500\5\u00b2Z\2\u04fc\u04fd\7\3\2\2\u04fd\u04ff")
        buf.write("\5\u00b2Z\2\u04fe\u04fc\3\2\2\2\u04ff\u0502\3\2\2\2\u0500")
        buf.write("\u04fe\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0504\3\2\2\2")
        buf.write("\u0502\u0500\3\2\2\2\u0503\u04fa\3\2\2\2\u0503\u0504\3")
        buf.write("\2\2\2\u0504\u05f9\3\2\2\2\u0505\u0507\7d\2\2\u0506\u0508")
        buf.write("\7\u00ff\2\2\u0507\u0506\3\2\2\2\u0507\u0508\3\2\2\2\u0508")
        buf.write("\u0509\3\2\2\2\u0509\u050c\7~\2\2\u050a\u050b\7\u0086")
        buf.write("\2\2\u050b\u050d\7k\2\2\u050c\u050a\3\2\2\2\u050c\u050d")
        buf.write("\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u05f9\5\u0114\u008b")
        buf.write("\2\u050f\u0511\7l\2\2\u0510\u0512\t\20\2\2\u0511\u0510")
        buf.write("\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0513\3\2\2\2\u0513")
        buf.write("\u05f9\5x=\2\u0514\u0515\7\u00ef\2\2\u0515\u0518\7\u00fc")
        buf.write("\2\2\u0516\u0517\t\f\2\2\u0517\u0519\5\u0114\u008b\2\u0518")
        buf.write("\u0516\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u051e\3\2\2\2")
        buf.write("\u051a\u051c\7\u009c\2\2\u051b\u051a\3\2\2\2\u051b\u051c")
        buf.write("\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051f\7\u0134\2\2\u051e")
        buf.write("\u051b\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u05f9\3\2\2\2")
        buf.write("\u0520\u0521\7\u00ef\2\2\u0521\u0522\7\u00fb\2\2\u0522")
        buf.write("\u0525\7n\2\2\u0523\u0524\t\f\2\2\u0524\u0526\5\u0114")
        buf.write("\u008b\2\u0525\u0523\3\2\2\2\u0525\u0526\3\2\2\2\u0526")
        buf.write("\u0527\3\2\2\2\u0527\u0528\7\u009c\2\2\u0528\u052a\7\u0134")
        buf.write("\2\2\u0529\u052b\5\u008eH\2\u052a\u0529\3\2\2\2\u052a")
        buf.write("\u052b\3\2\2\2\u052b\u05f9\3\2\2\2\u052c\u052d\7\u00ef")
        buf.write("\2\2\u052d\u052e\7\u00fe\2\2\u052e\u0533\5\u0114\u008b")
        buf.write("\2\u052f\u0530\7\5\2\2\u0530\u0531\5\u00a4S\2\u0531\u0532")
        buf.write("\7\6\2\2\u0532\u0534\3\2\2\2\u0533\u052f\3\2\2\2\u0533")
        buf.write("\u0534\3\2\2\2\u0534\u05f9\3\2\2\2\u0535\u0536\7\u00ef")
        buf.write("\2\2\u0536\u0537\7D\2\2\u0537\u0538\t\f\2\2\u0538\u053b")
        buf.write("\5\u0114\u008b\2\u0539\u053a\t\f\2\2\u053a\u053c\5\u0114")
        buf.write("\u008b\2\u053b\u0539\3\2\2\2\u053b\u053c\3\2\2\2\u053c")
        buf.write("\u05f9\3\2\2\2\u053d\u053e\7\u00ef\2\2\u053e\u0541\7\u011a")
        buf.write("\2\2\u053f\u0540\t\f\2\2\u0540\u0542\5\u0114\u008b\2\u0541")
        buf.write("\u053f\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0547\3\2\2\2")
        buf.write("\u0543\u0545\7\u009c\2\2\u0544\u0543\3\2\2\2\u0544\u0545")
        buf.write("\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0548\7\u0134\2\2\u0547")
        buf.write("\u0544\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u05f9\3\2\2\2")
        buf.write("\u0549\u054a\7\u00ef\2\2\u054a\u054b\7\u00c4\2\2\u054b")
        buf.write("\u054d\5\u0114\u008b\2\u054c\u054e\5\u008eH\2\u054d\u054c")
        buf.write("\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u05f9\3\2\2\2\u054f")
        buf.write("\u0551\7\u00ef\2\2\u0550\u0552\5\u016e\u00b8\2\u0551\u0550")
        buf.write("\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553")
        buf.write("\u055b\7\177\2\2\u0554\u0556\7\u009c\2\2\u0555\u0554\3")
        buf.write("\2\2\2\u0555\u0556\3\2\2\2\u0556\u0559\3\2\2\2\u0557\u055a")
        buf.write("\5\u0114\u008b\2\u0558\u055a\7\u0134\2\2\u0559\u0557\3")
        buf.write("\2\2\2\u0559\u0558\3\2\2\2\u055a\u055c\3\2\2\2\u055b\u0555")
        buf.write("\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u05f9\3\2\2\2\u055d")
        buf.write("\u055e\7\u00ef\2\2\u055e\u055f\7M\2\2\u055f\u0560\7\u00fb")
        buf.write("\2\2\u0560\u0563\5\u0114\u008b\2\u0561\u0562\7.\2\2\u0562")
        buf.write("\u0564\7\u00e9\2\2\u0563\u0561\3\2\2\2\u0563\u0564\3\2")
        buf.write("\2\2\u0564\u05f9\3\2\2\2\u0565\u0566\7\u00ef\2\2\u0566")
        buf.write("\u0567\7P\2\2\u0567\u05f9\7\u00ad\2\2\u0568\u0569\t\21")
        buf.write("\2\2\u0569\u056b\7~\2\2\u056a\u056c\7n\2\2\u056b\u056a")
        buf.write("\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056d\3\2\2\2\u056d")
        buf.write("\u05f9\5\u0094K\2\u056e\u056f\t\21\2\2\u056f\u0571\5\u0092")
        buf.write("J\2\u0570\u0572\7n\2\2\u0571\u0570\3\2\2\2\u0571\u0572")
        buf.write("\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574\5\u0114\u008b")
        buf.write("\2\u0574\u05f9\3\2\2\2\u0575\u0577\t\21\2\2\u0576\u0578")
        buf.write("\7\u00fb\2\2\u0577\u0576\3\2\2\2\u0577\u0578\3\2\2\2\u0578")
        buf.write("\u057a\3\2\2\2\u0579\u057b\t\22\2\2\u057a\u0579\3\2\2")
        buf.write("\2\u057a\u057b\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057e")
        buf.write("\5\u0114\u008b\2\u057d\u057f\5\u008eH\2\u057e\u057d\3")
        buf.write("\2\2\2\u057e\u057f\3\2\2\2\u057f\u0581\3\2\2\2\u0580\u0582")
        buf.write("\5\u0096L\2\u0581\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582")
        buf.write("\u05f9\3\2\2\2\u0583\u0585\t\21\2\2\u0584\u0586\7\u00ce")
        buf.write("\2\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0587")
        buf.write("\3\2\2\2\u0587\u05f9\5\u0088E\2\u0588\u0589\7E\2\2\u0589")
        buf.write("\u058a\7\u00b5\2\2\u058a\u058b\5\u0092J\2\u058b\u058c")
        buf.write("\5\u0114\u008b\2\u058c\u058d\7\u0093\2\2\u058d\u058e\t")
        buf.write("\23\2\2\u058e\u05f9\3\2\2\2\u058f\u0590\7E\2\2\u0590\u0591")
        buf.write("\7\u00b5\2\2\u0591\u0592\7\u00fb\2\2\u0592\u0593\5\u0114")
        buf.write("\u008b\2\u0593\u0594\7\u0093\2\2\u0594\u0595\t\23\2\2")
        buf.write("\u0595\u05f9\3\2\2\2\u0596\u0597\7\u00d5\2\2\u0597\u0598")
        buf.write("\7\u00fb\2\2\u0598\u05f9\5\u0114\u008b\2\u0599\u05a1\7")
        buf.write("\u00d5\2\2\u059a\u05a2\7\u0134\2\2\u059b\u059d\13\2\2")
        buf.write("\2\u059c\u059b\3\2\2\2\u059d\u05a0\3\2\2\2\u059e\u059f")
        buf.write("\3\2\2\2\u059e\u059c\3\2\2\2\u059f\u05a2\3\2\2\2\u05a0")
        buf.write("\u059e\3\2\2\2\u05a1\u059a\3\2\2\2\u05a1\u059e\3\2\2\2")
        buf.write("\u05a2\u05f9\3\2\2\2\u05a3\u05a5\7\67\2\2\u05a4\u05a6")
        buf.write("\7\u0099\2\2\u05a5\u05a4\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6")
        buf.write("\u05a7\3\2\2\2\u05a7\u05a8\7\u00fb\2\2\u05a8\u05ab\5\u0114")
        buf.write("\u008b\2\u05a9\u05aa\7\u00b8\2\2\u05aa\u05ac\5\u00a0Q")
        buf.write("\2\u05ab\u05a9\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05b1")
        buf.write("\3\2\2\2\u05ad\u05af\7.\2\2\u05ae\u05ad\3\2\2\2\u05ae")
        buf.write("\u05af\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u05b2\5\u0088")
        buf.write("E\2\u05b1\u05ae\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05f9")
        buf.write("\3\2\2\2\u05b3\u05b4\7\u010e\2\2\u05b4\u05b7\7\u00fb\2")
        buf.write("\2\u05b5\u05b6\7\u0086\2\2\u05b6\u05b8\7k\2\2\u05b7\u05b5")
        buf.write("\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9")
        buf.write("\u05f9\5\u0114\u008b\2\u05ba\u05bb\7=\2\2\u05bb\u05f9")
        buf.write("\7\67\2\2\u05bc\u05bd\7\u00a0\2\2\u05bd\u05bf\7U\2\2\u05be")
        buf.write("\u05c0\7\u00a1\2\2\u05bf\u05be\3\2\2\2\u05bf\u05c0\3\2")
        buf.write("\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c2\7\u008d\2\2\u05c2")
        buf.write("\u05c4\7\u0134\2\2\u05c3\u05c5\7\u00c1\2\2\u05c4\u05c3")
        buf.write("\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6")
        buf.write("\u05c7\7\u0092\2\2\u05c7\u05c8\7\u00fb\2\2\u05c8\u05ca")
        buf.write("\5\u0114\u008b\2\u05c9\u05cb\5\u008eH\2\u05ca\u05c9\3")
        buf.write("\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05f9\3\2\2\2\u05cc\u05cd")
        buf.write("\7\u010a\2\2\u05cd\u05ce\7\u00fb\2\2\u05ce\u05d0\5\u0114")
        buf.write("\u008b\2\u05cf\u05d1\5\u008eH\2\u05d0\u05cf\3\2\2\2\u05d0")
        buf.write("\u05d1\3\2\2\2\u05d1\u05f9\3\2\2\2\u05d2\u05d3\7\u00ac")
        buf.write("\2\2\u05d3\u05d4\7\u00d7\2\2\u05d4\u05d5\7\u00fb\2\2\u05d5")
        buf.write("\u05f9\5\u0114\u008b\2\u05d6\u05d7\t\24\2\2\u05d7\u05df")
        buf.write("\5\u016e\u00b8\2\u05d8\u05e0\7\u0134\2\2\u05d9\u05db\13")
        buf.write("\2\2\2\u05da\u05d9\3\2\2\2\u05db\u05de\3\2\2\2\u05dc\u05dd")
        buf.write("\3\2\2\2\u05dc\u05da\3\2\2\2\u05dd\u05e0\3\2\2\2\u05de")
        buf.write("\u05dc\3\2\2\2\u05df\u05d8\3\2\2\2\u05df\u05dc\3\2\2\2")
        buf.write("\u05e0\u05f9\3\2\2\2\u05e1\u05e2\7\u00ec\2\2\u05e2\u05e6")
        buf.write("\7\u00de\2\2\u05e3\u05e5\13\2\2\2\u05e4\u05e3\3\2\2\2")
        buf.write("\u05e5\u05e8\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e6\u05e4\3")
        buf.write("\2\2\2\u05e7\u05f9\3\2\2\2\u05e8\u05e6\3\2\2\2\u05e9\u05ed")
        buf.write("\7\u00ec\2\2\u05ea\u05ec\13\2\2\2\u05eb\u05ea\3\2\2\2")
        buf.write("\u05ec\u05ef\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ed\u05eb\3")
        buf.write("\2\2\2\u05ee\u05f9\3\2\2\2\u05ef\u05ed\3\2\2\2\u05f0\u05f9")
        buf.write("\7\u00d9\2\2\u05f1\u05f5\5z>\2\u05f2\u05f4\13\2\2\2\u05f3")
        buf.write("\u05f2\3\2\2\2\u05f4\u05f7\3\2\2\2\u05f5\u05f6\3\2\2\2")
        buf.write("\u05f5\u05f3\3\2\2\2\u05f6\u05f9\3\2\2\2\u05f7\u05f5\3")
        buf.write("\2\2\2\u05f8\u0337\3\2\2\2\u05f8\u0339\3\2\2\2\u05f8\u033c")
        buf.write("\3\2\2\2\u05f8\u0341\3\2\2\2\u05f8\u0353\3\2\2\2\u05f8")
        buf.write("\u035a\3\2\2\2\u05f8\u0360\3\2\2\2\u05f8\u036a\3\2\2\2")
        buf.write("\u05f8\u0376\3\2\2\2\u05f8\u0385\3\2\2\2\u05f8\u03aa\3")
        buf.write("\2\2\2\u05f8\u03bf\3\2\2\2\u05f8\u03ce\3\2\2\2\u05f8\u03df")
        buf.write("\3\2\2\2\u05f8\u03e6\3\2\2\2\u05f8\u03ef\3\2\2\2\u05f8")
        buf.write("\u03f8\3\2\2\2\u05f8\u0401\3\2\2\2\u05f8\u0408\3\2\2\2")
        buf.write("\u05f8\u040f\3\2\2\2\u05f8\u0416\3\2\2\2\u05f8\u0421\3")
        buf.write("\2\2\2\u05f8\u042c\3\2\2\2\u05f8\u043b\3\2\2\2\u05f8\u0447")
        buf.write("\3\2\2\2\u05f8\u0455\3\2\2\2\u05f8\u045f\3\2\2\2\u05f8")
        buf.write("\u046d\3\2\2\2\u05f8\u0475\3\2\2\2\u05f8\u0488\3\2\2\2")
        buf.write("\u05f8\u0491\3\2\2\2\u05f8\u0497\3\2\2\2\u05f8\u04a1\3")
        buf.write("\2\2\2\u05f8\u04a8\3\2\2\2\u05f8\u04cb\3\2\2\2\u05f8\u04e1")
        buf.write("\3\2\2\2\u05f8\u04e9\3\2\2\2\u05f8\u0505\3\2\2\2\u05f8")
        buf.write("\u050f\3\2\2\2\u05f8\u0514\3\2\2\2\u05f8\u0520\3\2\2\2")
        buf.write("\u05f8\u052c\3\2\2\2\u05f8\u0535\3\2\2\2\u05f8\u053d\3")
        buf.write("\2\2\2\u05f8\u0549\3\2\2\2\u05f8\u054f\3\2\2\2\u05f8\u055d")
        buf.write("\3\2\2\2\u05f8\u0565\3\2\2\2\u05f8\u0568\3\2\2\2\u05f8")
        buf.write("\u056e\3\2\2\2\u05f8\u0575\3\2\2\2\u05f8\u0583\3\2\2\2")
        buf.write("\u05f8\u0588\3\2\2\2\u05f8\u058f\3\2\2\2\u05f8\u0596\3")
        buf.write("\2\2\2\u05f8\u0599\3\2\2\2\u05f8\u05a3\3\2\2\2\u05f8\u05b3")
        buf.write("\3\2\2\2\u05f8\u05ba\3\2\2\2\u05f8\u05bc\3\2\2\2\u05f8")
        buf.write("\u05cc\3\2\2\2\u05f8\u05d2\3\2\2\2\u05f8\u05d6\3\2\2\2")
        buf.write("\u05f8\u05e1\3\2\2\2\u05f8\u05e9\3\2\2\2\u05f8\u05f0\3")
        buf.write("\2\2\2\u05f8\u05f1\3\2\2\2\u05f9y\3\2\2\2\u05fa\u05fb")
        buf.write("\7M\2\2\u05fb\u06a3\7\u00de\2\2\u05fc\u05fd\7d\2\2\u05fd")
        buf.write("\u06a3\7\u00de\2\2\u05fe\u0600\7\u0081\2\2\u05ff\u0601")
        buf.write("\7\u00de\2\2\u0600\u05ff\3\2\2\2\u0600\u0601\3\2\2\2\u0601")
        buf.write("\u06a3\3\2\2\2\u0602\u0604\7\u00db\2\2\u0603\u0605\7\u00de")
        buf.write("\2\2\u0604\u0603\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u06a3")
        buf.write("\3\2\2\2\u0606\u0607\7\u00ef\2\2\u0607\u06a3\7\u0081\2")
        buf.write("\2\u0608\u0609\7\u00ef\2\2\u0609\u060b\7\u00de\2\2\u060a")
        buf.write("\u060c\7\u0081\2\2\u060b\u060a\3\2\2\2\u060b\u060c\3\2")
        buf.write("\2\2\u060c\u06a3\3\2\2\2\u060d\u060e\7\u00ef\2\2\u060e")
        buf.write("\u06a3\7\u00cb\2\2\u060f\u0610\7\u00ef\2\2\u0610\u06a3")
        buf.write("\7\u00df\2\2\u0611\u0612\7\u00ef\2\2\u0612\u0613\7P\2")
        buf.write("\2\u0613\u06a3\7\u00df\2\2\u0614\u0615\7m\2\2\u0615\u06a3")
        buf.write("\7\u00fb\2\2\u0616\u0617\7\u0088\2\2\u0617\u06a3\7\u00fb")
        buf.write("\2\2\u0618\u0619\7\u00ef\2\2\u0619\u06a3\7H\2\2\u061a")
        buf.write("\u061b\7\u00ef\2\2\u061b\u061c\7M\2\2\u061c\u06a3\7\u00fb")
        buf.write("\2\2\u061d\u061e\7\u00ef\2\2\u061e\u06a3\7\u0106\2\2\u061f")
        buf.write("\u0620\7\u00ef\2\2\u0620\u06a3\7\u008b\2\2\u0621\u0622")
        buf.write("\7\u00ef\2\2\u0622\u06a3\7\u00a4\2\2\u0623\u0624\7M\2")
        buf.write("\2\u0624\u06a3\7\u008a\2\2\u0625\u0626\7d\2\2\u0626\u06a3")
        buf.write("\7\u008a\2\2\u0627\u0628\7\'\2\2\u0628\u06a3\7\u008a\2")
        buf.write("\2\u0629\u062a\7\u00a3\2\2\u062a\u06a3\7\u00fb\2\2\u062b")
        buf.write("\u062c\7\u00a3\2\2\u062c\u06a3\7V\2\2\u062d\u062e\7\u0112")
        buf.write("\2\2\u062e\u06a3\7\u00fb\2\2\u062f\u0630\7\u0112\2\2\u0630")
        buf.write("\u06a3\7V\2\2\u0631\u0632\7M\2\2\u0632\u0633\7\u00ff\2")
        buf.write("\2\u0633\u06a3\7\u00a6\2\2\u0634\u0635\7d\2\2\u0635\u0636")
        buf.write("\7\u00ff\2\2\u0636\u06a3\7\u00a6\2\2\u0637\u0638\7\'\2")
        buf.write("\2\u0638\u0639\7\u00fb\2\2\u0639\u063a\5\u0116\u008c\2")
        buf.write("\u063a\u063b\7\u00b1\2\2\u063b\u063c\7?\2\2\u063c\u06a3")
        buf.write("\3\2\2\2\u063d\u063e\7\'\2\2\u063e\u063f\7\u00fb\2\2\u063f")
        buf.write("\u0640\5\u0116\u008c\2\u0640\u0641\7?\2\2\u0641\u0642")
        buf.write("\7\66\2\2\u0642\u06a3\3\2\2\2\u0643\u0644\7\'\2\2\u0644")
        buf.write("\u0645\7\u00fb\2\2\u0645\u0646\5\u0116\u008c\2\u0646\u0647")
        buf.write("\7\u00b1\2\2\u0647\u0648\7\u00f3\2\2\u0648\u06a3\3\2\2")
        buf.write("\2\u0649\u064a\7\'\2\2\u064a\u064b\7\u00fb\2\2\u064b\u064c")
        buf.write("\5\u0116\u008c\2\u064c\u064d\7\u00f0\2\2\u064d\u064e\7")
        buf.write("\66\2\2\u064e\u06a3\3\2\2\2\u064f\u0650\7\'\2\2\u0650")
        buf.write("\u0651\7\u00fb\2\2\u0651\u0652\5\u0116\u008c\2\u0652\u0653")
        buf.write("\7\u00b1\2\2\u0653\u0654\7\u00f0\2\2\u0654\u06a3\3\2\2")
        buf.write("\2\u0655\u0656\7\'\2\2\u0656\u0657\7\u00fb\2\2\u0657\u0658")
        buf.write("\5\u0116\u008c\2\u0658\u0659\7\u00b1\2\2\u0659\u065a\7")
        buf.write("\u00f6\2\2\u065a\u065b\7.\2\2\u065b\u065c\7`\2\2\u065c")
        buf.write("\u06a3\3\2\2\2\u065d\u065e\7\'\2\2\u065e\u065f\7\u00fb")
        buf.write("\2\2\u065f\u0660\5\u0116\u008c\2\u0660\u0661\7\u00ec\2")
        buf.write("\2\u0661\u0662\7\u00f0\2\2\u0662\u0663\7\u00a2\2\2\u0663")
        buf.write("\u06a3\3\2\2\2\u0664\u0665\7\'\2\2\u0665\u0666\7\u00fb")
        buf.write("\2\2\u0666\u0667\5\u0116\u008c\2\u0667\u0668\7j\2\2\u0668")
        buf.write("\u0669\7\u00c2\2\2\u0669\u06a3\3\2\2\2\u066a\u066b\7\'")
        buf.write("\2\2\u066b\u066c\7\u00fb\2\2\u066c\u066d\5\u0116\u008c")
        buf.write("\2\u066d\u066e\7,\2\2\u066e\u066f\7\u00c2\2\2\u066f\u06a3")
        buf.write("\3\2\2\2\u0670\u0671\7\'\2\2\u0671\u0672\7\u00fb\2\2\u0672")
        buf.write("\u0673\5\u0116\u008c\2\u0673\u0674\7\u010c\2\2\u0674\u0675")
        buf.write("\7\u00c2\2\2\u0675\u06a3\3\2\2\2\u0676\u0677\7\'\2\2\u0677")
        buf.write("\u0678\7\u00fb\2\2\u0678\u0679\5\u0116\u008c\2\u0679\u067a")
        buf.write("\7\u0103\2\2\u067a\u06a3\3\2\2\2\u067b\u067c\7\'\2\2\u067c")
        buf.write("\u067d\7\u00fb\2\2\u067d\u067f\5\u0116\u008c\2\u067e\u0680")
        buf.write("\5\u008eH\2\u067f\u067e\3\2\2\2\u067f\u0680\3\2\2\2\u0680")
        buf.write("\u0681\3\2\2\2\u0681\u0682\7G\2\2\u0682\u06a3\3\2\2\2")
        buf.write("\u0683\u0684\7\'\2\2\u0684\u0685\7\u00fb\2\2\u0685\u0687")
        buf.write("\5\u0116\u008c\2\u0686\u0688\5\u008eH\2\u0687\u0686\3")
        buf.write("\2\2\2\u0687\u0688\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068a")
        buf.write("\7J\2\2\u068a\u06a3\3\2\2\2\u068b\u068c\7\'\2\2\u068c")
        buf.write("\u068d\7\u00fb\2\2\u068d\u068f\5\u0116\u008c\2\u068e\u0690")
        buf.write("\5\u008eH\2\u068f\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690")
        buf.write("\u0691\3\2\2\2\u0691\u0692\7\u00ec\2\2\u0692\u0693\7u")
        buf.write("\2\2\u0693\u06a3\3\2\2\2\u0694\u0695\7\'\2\2\u0695\u0696")
        buf.write("\7\u00fb\2\2\u0696\u0698\5\u0116\u008c\2\u0697\u0699\5")
        buf.write("\u008eH\2\u0698\u0697\3\2\2\2\u0698\u0699\3\2\2\2\u0699")
        buf.write("\u069a\3\2\2\2\u069a\u069b\7\u00d8\2\2\u069b\u069c\7D")
        buf.write("\2\2\u069c\u06a3\3\2\2\2\u069d\u069e\7\u00f4\2\2\u069e")
        buf.write("\u06a3\7\u0105\2\2\u069f\u06a3\7F\2\2\u06a0\u06a3\7\u00e0")
        buf.write("\2\2\u06a1\u06a3\7_\2\2\u06a2\u05fa\3\2\2\2\u06a2\u05fc")
        buf.write("\3\2\2\2\u06a2\u05fe\3\2\2\2\u06a2\u0602\3\2\2\2\u06a2")
        buf.write("\u0606\3\2\2\2\u06a2\u0608\3\2\2\2\u06a2\u060d\3\2\2\2")
        buf.write("\u06a2\u060f\3\2\2\2\u06a2\u0611\3\2\2\2\u06a2\u0614\3")
        buf.write("\2\2\2\u06a2\u0616\3\2\2\2\u06a2\u0618\3\2\2\2\u06a2\u061a")
        buf.write("\3\2\2\2\u06a2\u061d\3\2\2\2\u06a2\u061f\3\2\2\2\u06a2")
        buf.write("\u0621\3\2\2\2\u06a2\u0623\3\2\2\2\u06a2\u0625\3\2\2\2")
        buf.write("\u06a2\u0627\3\2\2\2\u06a2\u0629\3\2\2\2\u06a2\u062b\3")
        buf.write("\2\2\2\u06a2\u062d\3\2\2\2\u06a2\u062f\3\2\2\2\u06a2\u0631")
        buf.write("\3\2\2\2\u06a2\u0634\3\2\2\2\u06a2\u0637\3\2\2\2\u06a2")
        buf.write("\u063d\3\2\2\2\u06a2\u0643\3\2\2\2\u06a2\u0649\3\2\2\2")
        buf.write("\u06a2\u064f\3\2\2\2\u06a2\u0655\3\2\2\2\u06a2\u065d\3")
        buf.write("\2\2\2\u06a2\u0664\3\2\2\2\u06a2\u066a\3\2\2\2\u06a2\u0670")
        buf.write("\3\2\2\2\u06a2\u0676\3\2\2\2\u06a2\u067b\3\2\2\2\u06a2")
        buf.write("\u0683\3\2\2\2\u06a2\u068b\3\2\2\2\u06a2\u0694\3\2\2\2")
        buf.write("\u06a2\u069d\3\2\2\2\u06a2\u069f\3\2\2\2\u06a2\u06a0\3")
        buf.write("\2\2\2\u06a2\u06a1\3\2\2\2\u06a3{\3\2\2\2\u06a4\u06a6")
        buf.write("\7M\2\2\u06a5\u06a7\7\u00ff\2\2\u06a6\u06a5\3\2\2\2\u06a6")
        buf.write("\u06a7\3\2\2\2\u06a7\u06a9\3\2\2\2\u06a8\u06aa\7o\2\2")
        buf.write("\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab\3")
        buf.write("\2\2\2\u06ab\u06af\7\u00fb\2\2\u06ac\u06ad\7\u0086\2\2")
        buf.write("\u06ad\u06ae\7\u00b1\2\2\u06ae\u06b0\7k\2\2\u06af\u06ac")
        buf.write("\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1")
        buf.write("\u06b2\5\u0114\u008b\2\u06b2}\3\2\2\2\u06b3\u06b4\7M\2")
        buf.write("\2\u06b4\u06b6\7\u00b9\2\2\u06b5\u06b3\3\2\2\2\u06b5\u06b6")
        buf.write("\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06b8\7\u00d8\2\2\u06b8")
        buf.write("\u06b9\7\u00fb\2\2\u06b9\u06ba\5\u0114\u008b\2\u06ba\177")
        buf.write("\3\2\2\2\u06bb\u06bc\7?\2\2\u06bc\u06bd\7\66\2\2\u06bd")
        buf.write("\u06c1\5\u00fc\177\2\u06be\u06bf\7\u00f3\2\2\u06bf\u06c0")
        buf.write("\7\66\2\2\u06c0\u06c2\5\u0100\u0081\2\u06c1\u06be\3\2")
        buf.write("\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4")
        buf.write("\7\u0092\2\2\u06c4\u06c5\7\u0138\2\2\u06c5\u06c6\7\65")
        buf.write("\2\2\u06c6\u0081\3\2\2\2\u06c7\u06c8\7\u00f0\2\2\u06c8")
        buf.write("\u06c9\7\66\2\2\u06c9\u06ca\5\u00fc\177\2\u06ca\u06cd")
        buf.write("\7\u00b5\2\2\u06cb\u06ce\5\u00a8U\2\u06cc\u06ce\5\u00aa")
        buf.write("V\2\u06cd\u06cb\3\2\2\2\u06cd\u06cc\3\2\2\2\u06ce\u06d2")
        buf.write("\3\2\2\2\u06cf\u06d0\7\u00f6\2\2\u06d0\u06d1\7.\2\2\u06d1")
        buf.write("\u06d3\7`\2\2\u06d2\u06cf\3\2\2\2\u06d2\u06d3\3\2\2\2")
        buf.write("\u06d3\u0083\3\2\2\2\u06d4\u06d5\7\u00a2\2\2\u06d5\u06d6")
        buf.write("\7\u0134\2\2\u06d6\u0085\3\2\2\2\u06d7\u06d8\7E\2\2\u06d8")
        buf.write("\u06d9\7\u0134\2\2\u06d9\u0087\3\2\2\2\u06da\u06dc\5\u0098")
        buf.write("M\2\u06db\u06da\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u06dd")
        buf.write("\3\2\2\2\u06dd\u06de\5\u00ba^\2\u06de\u06df\5\u00b6\\")
        buf.write("\2\u06df\u0089\3\2\2\2\u06e0\u06e1\7\u008f\2\2\u06e1\u06e3")
        buf.write("\7\u00c1\2\2\u06e2\u06e4\7\u00fb\2\2\u06e3\u06e2\3\2\2")
        buf.write("\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06ec")
        buf.write("\5\u0114\u008b\2\u06e6\u06ea\5\u008eH\2\u06e7\u06e8\7")
        buf.write("\u0086\2\2\u06e8\u06e9\7\u00b1\2\2\u06e9\u06eb\7k\2\2")
        buf.write("\u06ea\u06e7\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ed\3")
        buf.write("\2\2\2\u06ec\u06e6\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u0718")
        buf.write("\3\2\2\2\u06ee\u06ef\7\u008f\2\2\u06ef\u06f1\7\u0092\2")
        buf.write("\2\u06f0\u06f2\7\u00fb\2\2\u06f1\u06f0\3\2\2\2\u06f1\u06f2")
        buf.write("\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f5\5\u0114\u008b")
        buf.write("\2\u06f4\u06f6\5\u008eH\2\u06f5\u06f4\3\2\2\2\u06f5\u06f6")
        buf.write("\3\2\2\2\u06f6\u06fa\3\2\2\2\u06f7\u06f8\7\u0086\2\2\u06f8")
        buf.write("\u06f9\7\u00b1\2\2\u06f9\u06fb\7k\2\2\u06fa\u06f7\3\2")
        buf.write("\2\2\u06fa\u06fb\3\2\2\2\u06fb\u0718\3\2\2\2\u06fc\u06fd")
        buf.write("\7\u008f\2\2\u06fd\u06ff\7\u00c1\2\2\u06fe\u0700\7\u00a1")
        buf.write("\2\2\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701")
        buf.write("\3\2\2\2\u0701\u0702\7a\2\2\u0702\u0704\7\u0134\2\2\u0703")
        buf.write("\u0705\5\u0110\u0089\2\u0704\u0703\3\2\2\2\u0704\u0705")
        buf.write("\3\2\2\2\u0705\u0707\3\2\2\2\u0706\u0708\5\u00acW\2\u0707")
        buf.write("\u0706\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u0718\3\2\2\2")
        buf.write("\u0709\u070a\7\u008f\2\2\u070a\u070c\7\u00c1\2\2\u070b")
        buf.write("\u070d\7\u00a1\2\2\u070c\u070b\3\2\2\2\u070c\u070d\3\2")
        buf.write("\2\2\u070d\u070e\3\2\2\2\u070e\u0710\7a\2\2\u070f\u0711")
        buf.write("\7\u0134\2\2\u0710\u070f\3\2\2\2\u0710\u0711\3\2\2\2\u0711")
        buf.write("\u0712\3\2\2\2\u0712\u0715\5\u009cO\2\u0713\u0714\7\u00b8")
        buf.write("\2\2\u0714\u0716\5\u00a0Q\2\u0715\u0713\3\2\2\2\u0715")
        buf.write("\u0716\3\2\2\2\u0716\u0718\3\2\2\2\u0717\u06e0\3\2\2\2")
        buf.write("\u0717\u06ee\3\2\2\2\u0717\u06fc\3\2\2\2\u0717\u0709\3")
        buf.write("\2\2\2\u0718\u008b\3\2\2\2\u0719\u071b\5\u008eH\2\u071a")
        buf.write("\u071c\5\u0084C\2\u071b\u071a\3\2\2\2\u071b\u071c\3\2")
        buf.write("\2\2\u071c\u008d\3\2\2\2\u071d\u071e\7\u00c2\2\2\u071e")
        buf.write("\u071f\7\5\2\2\u071f\u0724\5\u0090I\2\u0720\u0721\7\3")
        buf.write("\2\2\u0721\u0723\5\u0090I\2\u0722\u0720\3\2\2\2\u0723")
        buf.write("\u0726\3\2\2\2\u0724\u0722\3\2\2\2\u0724\u0725\3\2\2\2")
        buf.write("\u0725\u0727\3\2\2\2\u0726\u0724\3\2\2\2\u0727\u0728\7")
        buf.write("\6\2\2\u0728\u008f\3\2\2\2\u0729\u072c\5\u016e\u00b8\2")
        buf.write("\u072a\u072b\7\u0120\2\2\u072b\u072d\5\u012e\u0098\2\u072c")
        buf.write("\u072a\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u0091\3\2\2\2")
        buf.write("\u072e\u072f\t\25\2\2\u072f\u0093\3\2\2\2\u0730\u0736")
        buf.write("\5\u0168\u00b5\2\u0731\u0736\7\u0134\2\2\u0732\u0736\5")
        buf.write("\u0130\u0099\2\u0733\u0736\5\u0134\u009b\2\u0734\u0736")
        buf.write("\5\u0136\u009c\2\u0735\u0730\3\2\2\2\u0735\u0731\3\2\2")
        buf.write("\2\u0735\u0732\3\2\2\2\u0735\u0733\3\2\2\2\u0735\u0734")
        buf.write("\3\2\2\2\u0736\u0095\3\2\2\2\u0737\u073c\5\u016e\u00b8")
        buf.write("\2\u0738\u0739\7\7\2\2\u0739\u073b\5\u016e\u00b8\2\u073a")
        buf.write("\u0738\3\2\2\2\u073b\u073e\3\2\2\2\u073c\u073a\3\2\2\2")
        buf.write("\u073c\u073d\3\2\2\2\u073d\u0097\3\2\2\2\u073e\u073c\3")
        buf.write("\2\2\2\u073f\u0740\7\u011e\2\2\u0740\u0745\5\u009aN\2")
        buf.write("\u0741\u0742\7\3\2\2\u0742\u0744\5\u009aN\2\u0743\u0741")
        buf.write("\3\2\2\2\u0744\u0747\3\2\2\2\u0745\u0743\3\2\2\2\u0745")
        buf.write("\u0746\3\2\2\2\u0746\u0099\3\2\2\2\u0747\u0745\3\2\2\2")
        buf.write("\u0748\u074a\5\u016a\u00b6\2\u0749\u074b\5\u00fc\177\2")
        buf.write("\u074a\u0749\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u074d\3")
        buf.write("\2\2\2\u074c\u074e\7.\2\2\u074d\u074c\3\2\2\2\u074d\u074e")
        buf.write("\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0750\7\5\2\2\u0750")
        buf.write("\u0751\5\u0088E\2\u0751\u0752\7\6\2\2\u0752\u009b\3\2")
        buf.write("\2\2\u0753\u0754\7\u0117\2\2\u0754\u0755\5\u0114\u008b")
        buf.write("\2\u0755\u009d\3\2\2\2\u0756\u0757\7\u00b8\2\2\u0757\u0761")
        buf.write("\5\u00a0Q\2\u0758\u0759\7\u00c3\2\2\u0759\u075a\7\66\2")
        buf.write("\2\u075a\u0761\5\u011e\u0090\2\u075b\u0761\5\u0080A\2")
        buf.write("\u075c\u0761\5\u0084C\2\u075d\u0761\5\u0086D\2\u075e\u075f")
        buf.write("\7\u00fe\2\2\u075f\u0761\5\u00a0Q\2\u0760\u0756\3\2\2")
        buf.write("\2\u0760\u0758\3\2\2\2\u0760\u075b\3\2\2\2\u0760\u075c")
        buf.write("\3\2\2\2\u0760\u075d\3\2\2\2\u0760\u075e\3\2\2\2\u0761")
        buf.write("\u0764\3\2\2\2\u0762\u0760\3\2\2\2\u0762\u0763\3\2\2\2")
        buf.write("\u0763\u009f\3\2\2\2\u0764\u0762\3\2\2\2\u0765\u0766\7")
        buf.write("\5\2\2\u0766\u076b\5\u00a2R\2\u0767\u0768\7\3\2\2\u0768")
        buf.write("\u076a\5\u00a2R\2\u0769\u0767\3\2\2\2\u076a\u076d\3\2")
        buf.write("\2\2\u076b\u0769\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076e")
        buf.write("\3\2\2\2\u076d\u076b\3\2\2\2\u076e\u076f\7\6\2\2\u076f")
        buf.write("\u00a1\3\2\2\2\u0770\u0775\5\u00a4S\2\u0771\u0773\7\u0120")
        buf.write("\2\2\u0772\u0771\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0774")
        buf.write("\3\2\2\2\u0774\u0776\5\u00a6T\2\u0775\u0772\3\2\2\2\u0775")
        buf.write("\u0776\3\2\2\2\u0776\u00a3\3\2\2\2\u0777\u077c\5\u016e")
        buf.write("\u00b8\2\u0778\u0779\7\7\2\2\u0779\u077b\5\u016e\u00b8")
        buf.write("\2\u077a\u0778\3\2\2\2\u077b\u077e\3\2\2\2\u077c\u077a")
        buf.write("\3\2\2\2\u077c\u077d\3\2\2\2\u077d\u0781\3\2\2\2\u077e")
        buf.write("\u077c\3\2\2\2\u077f\u0781\7\u0134\2\2\u0780\u0777\3\2")
        buf.write("\2\2\u0780\u077f\3\2\2\2\u0781\u00a5\3\2\2\2\u0782\u0787")
        buf.write("\7\u0138\2\2\u0783\u0787\7\u013a\2\2\u0784\u0787\5\u0138")
        buf.write("\u009d\2\u0785\u0787\7\u0134\2\2\u0786\u0782\3\2\2\2\u0786")
        buf.write("\u0783\3\2\2\2\u0786\u0784\3\2\2\2\u0786\u0785\3\2\2\2")
        buf.write("\u0787\u00a7\3\2\2\2\u0788\u0789\7\5\2\2\u0789\u078e\5")
        buf.write("\u012e\u0098\2\u078a\u078b\7\3\2\2\u078b\u078d\5\u012e")
        buf.write("\u0098\2\u078c\u078a\3\2\2\2\u078d\u0790\3\2\2\2\u078e")
        buf.write("\u078c\3\2\2\2\u078e\u078f\3\2\2\2\u078f\u0791\3\2\2\2")
        buf.write("\u0790\u078e\3\2\2\2\u0791\u0792\7\6\2\2\u0792\u00a9\3")
        buf.write("\2\2\2\u0793\u0794\7\5\2\2\u0794\u0799\5\u00a8U\2\u0795")
        buf.write("\u0796\7\3\2\2\u0796\u0798\5\u00a8U\2\u0797\u0795\3\2")
        buf.write("\2\2\u0798\u079b\3\2\2\2\u0799\u0797\3\2\2\2\u0799\u079a")
        buf.write("\3\2\2\2\u079a\u079c\3\2\2\2\u079b\u0799\3\2\2\2\u079c")
        buf.write("\u079d\7\6\2\2\u079d\u00ab\3\2\2\2\u079e\u079f\7\u00f6")
        buf.write("\2\2\u079f\u07a0\7.\2\2\u07a0\u07a5\5\u00aeX\2\u07a1\u07a2")
        buf.write("\7\u00f6\2\2\u07a2\u07a3\7\66\2\2\u07a3\u07a5\5\u00b0")
        buf.write("Y\2\u07a4\u079e\3\2\2\2\u07a4\u07a1\3\2\2\2\u07a5\u00ad")
        buf.write("\3\2\2\2\u07a6\u07a7\7\u008e\2\2\u07a7\u07a8\7\u0134\2")
        buf.write("\2\u07a8\u07a9\7\u00bd\2\2\u07a9\u07ac\7\u0134\2\2\u07aa")
        buf.write("\u07ac\5\u016e\u00b8\2\u07ab\u07a6\3\2\2\2\u07ab\u07aa")
        buf.write("\3\2\2\2\u07ac\u00af\3\2\2\2\u07ad\u07b1\7\u0134\2\2\u07ae")
        buf.write("\u07af\7\u011e\2\2\u07af\u07b0\7\u00ea\2\2\u07b0\u07b2")
        buf.write("\5\u00a0Q\2\u07b1\u07ae\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2")
        buf.write("\u00b1\3\2\2\2\u07b3\u07b4\5\u016e\u00b8\2\u07b4\u07b5")
        buf.write("\7\u0134\2\2\u07b5\u00b3\3\2\2\2\u07b6\u07b7\5\u008aF")
        buf.write("\2\u07b7\u07b8\5\u00ba^\2\u07b8\u07b9\5\u00b6\\\2\u07b9")
        buf.write("\u07ea\3\2\2\2\u07ba\u07bc\5\u00e0q\2\u07bb\u07bd\5\u00b8")
        buf.write("]\2\u07bc\u07bb\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07bc")
        buf.write("\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07ea\3\2\2\2\u07c0")
        buf.write("\u07c1\7[\2\2\u07c1\u07c2\7|\2\2\u07c2\u07c3\5\u0114\u008b")
        buf.write("\2\u07c3\u07c5\5\u010e\u0088\2\u07c4\u07c6\5\u00d8m\2")
        buf.write("\u07c5\u07c4\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07ea\3")
        buf.write("\2\2\2\u07c7\u07c8\7\u0114\2\2\u07c8\u07c9\5\u0114\u008b")
        buf.write("\2\u07c9\u07ca\5\u010e\u0088\2\u07ca\u07cc\5\u00caf\2")
        buf.write("\u07cb\u07cd\5\u00d8m\2\u07cc\u07cb\3\2\2\2\u07cc\u07cd")
        buf.write("\3\2\2\2\u07cd\u07ea\3\2\2\2\u07ce\u07cf\7\u00a9\2\2\u07cf")
        buf.write("\u07d0\7\u0092\2\2\u07d0\u07d1\5\u0114\u008b\2\u07d1\u07d2")
        buf.write("\5\u010e\u0088\2\u07d2\u07d8\7\u0117\2\2\u07d3\u07d9\5")
        buf.write("\u0114\u008b\2\u07d4\u07d5\7\5\2\2\u07d5\u07d6\5\u0088")
        buf.write("E\2\u07d6\u07d7\7\6\2\2\u07d7\u07d9\3\2\2\2\u07d8\u07d3")
        buf.write("\3\2\2\2\u07d8\u07d4\3\2\2\2\u07d9\u07da\3\2\2\2\u07da")
        buf.write("\u07db\5\u010e\u0088\2\u07db\u07dc\7\u00b5\2\2\u07dc\u07e0")
        buf.write("\5\u0126\u0094\2\u07dd\u07df\5\u00ccg\2\u07de\u07dd\3")
        buf.write("\2\2\2\u07df\u07e2\3\2\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1")
        buf.write("\3\2\2\2\u07e1\u07e6\3\2\2\2\u07e2\u07e0\3\2\2\2\u07e3")
        buf.write("\u07e5\5\u00ceh\2\u07e4\u07e3\3\2\2\2\u07e5\u07e8\3\2")
        buf.write("\2\2\u07e6\u07e4\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07ea")
        buf.write("\3\2\2\2\u07e8\u07e6\3\2\2\2\u07e9\u07b6\3\2\2\2\u07e9")
        buf.write("\u07ba\3\2\2\2\u07e9\u07c0\3\2\2\2\u07e9\u07c7\3\2\2\2")
        buf.write("\u07e9\u07ce\3\2\2\2\u07ea\u00b5\3\2\2\2\u07eb\u07ec\7")
        buf.write("\u00ba\2\2\u07ec\u07ed\7\66\2\2\u07ed\u07f2\5\u00be`\2")
        buf.write("\u07ee\u07ef\7\3\2\2\u07ef\u07f1\5\u00be`\2\u07f0\u07ee")
        buf.write("\3\2\2\2\u07f1\u07f4\3\2\2\2\u07f2\u07f0\3\2\2\2\u07f2")
        buf.write("\u07f3\3\2\2\2\u07f3\u07f6\3\2\2\2\u07f4\u07f2\3\2\2\2")
        buf.write("\u07f5\u07eb\3\2\2\2\u07f5\u07f6\3\2\2\2\u07f6\u0801\3")
        buf.write("\2\2\2\u07f7\u07f8\7>\2\2\u07f8\u07f9\7\66\2\2\u07f9\u07fe")
        buf.write("\5\u0124\u0093\2\u07fa\u07fb\7\3\2\2\u07fb\u07fd\5\u0124")
        buf.write("\u0093\2\u07fc\u07fa\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe")
        buf.write("\u07fc\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0802\3\2\2\2")
        buf.write("\u0800\u07fe\3\2\2\2\u0801\u07f7\3\2\2\2\u0801\u0802\3")
        buf.write("\2\2\2\u0802\u080d\3\2\2\2\u0803\u0804\7c\2\2\u0804\u0805")
        buf.write("\7\66\2\2\u0805\u080a\5\u0124\u0093\2\u0806\u0807\7\3")
        buf.write("\2\2\u0807\u0809\5\u0124\u0093\2\u0808\u0806\3\2\2\2\u0809")
        buf.write("\u080c\3\2\2\2\u080a\u0808\3\2\2\2\u080a\u080b\3\2\2\2")
        buf.write("\u080b\u080e\3\2\2\2\u080c\u080a\3\2\2\2\u080d\u0803\3")
        buf.write("\2\2\2\u080d\u080e\3\2\2\2\u080e\u0819\3\2\2\2\u080f\u0810")
        buf.write("\7\u00f2\2\2\u0810\u0811\7\66\2\2\u0811\u0816\5\u00be")
        buf.write("`\2\u0812\u0813\7\3\2\2\u0813\u0815\5\u00be`\2\u0814\u0812")
        buf.write("\3\2\2\2\u0815\u0818\3\2\2\2\u0816\u0814\3\2\2\2\u0816")
        buf.write("\u0817\3\2\2\2\u0817\u081a\3\2\2\2\u0818\u0816\3\2\2\2")
        buf.write("\u0819\u080f\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u081c\3")
        buf.write("\2\2\2\u081b\u081d\5\u015a\u00ae\2\u081c\u081b\3\2\2\2")
        buf.write("\u081c\u081d\3\2\2\2\u081d\u0823\3\2\2\2\u081e\u0821\7")
        buf.write("\u009d\2\2\u081f\u0822\7&\2\2\u0820\u0822\5\u0124\u0093")
        buf.write("\2\u0821\u081f\3\2\2\2\u0821\u0820\3\2\2\2\u0822\u0824")
        buf.write("\3\2\2\2\u0823\u081e\3\2\2\2\u0823\u0824\3\2\2\2\u0824")
        buf.write("\u00b7\3\2\2\2\u0825\u0826\5\u008aF\2\u0826\u0827\5\u00c2")
        buf.write("b\2\u0827\u00b9\3\2\2\2\u0828\u0829\b^\1\2\u0829\u082a")
        buf.write("\5\u00bc_\2\u082a\u0842\3\2\2\2\u082b\u082c\f\5\2\2\u082c")
        buf.write("\u082d\6^\5\2\u082d\u082f\t\26\2\2\u082e\u0830\5\u00ee")
        buf.write("x\2\u082f\u082e\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u0831")
        buf.write("\3\2\2\2\u0831\u0841\5\u00ba^\6\u0832\u0833\f\4\2\2\u0833")
        buf.write("\u0834\6^\7\2\u0834\u0836\7\u0090\2\2\u0835\u0837\5\u00ee")
        buf.write("x\2\u0836\u0835\3\2\2\2\u0836\u0837\3\2\2\2\u0837\u0838")
        buf.write("\3\2\2\2\u0838\u0841\5\u00ba^\5\u0839\u083a\f\3\2\2\u083a")
        buf.write("\u083b\6^\t\2\u083b\u083d\t\27\2\2\u083c\u083e\5\u00ee")
        buf.write("x\2\u083d\u083c\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u083f")
        buf.write("\3\2\2\2\u083f\u0841\5\u00ba^\4\u0840\u082b\3\2\2\2\u0840")
        buf.write("\u0832\3\2\2\2\u0840\u0839\3\2\2\2\u0841\u0844\3\2\2\2")
        buf.write("\u0842\u0840\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u00bb\3")
        buf.write("\2\2\2\u0844\u0842\3\2\2\2\u0845\u084b\5\u00c4c\2\u0846")
        buf.write("\u084b\5\u00c0a\2\u0847\u0848\7\u00fb\2\2\u0848\u084b")
        buf.write("\5\u0114\u008b\2\u0849\u084b\5\u010a\u0086\2\u084a\u0845")
        buf.write("\3\2\2\2\u084a\u0846\3\2\2\2\u084a\u0847\3\2\2\2\u084a")
        buf.write("\u0849\3\2\2\2\u084b\u00bd\3\2\2\2\u084c\u084e\5\u0124")
        buf.write("\u0093\2\u084d\u084f\t\6\2\2\u084e\u084d\3\2\2\2\u084e")
        buf.write("\u084f\3\2\2\2\u084f\u0852\3\2\2\2\u0850\u0851\7\u00b3")
        buf.write("\2\2\u0851\u0853\t\30\2\2\u0852\u0850\3\2\2\2\u0852\u0853")
        buf.write("\3\2\2\2\u0853\u00bf\3\2\2\2\u0854\u0856\5\u00e0q\2\u0855")
        buf.write("\u0857\5\u00c2b\2\u0856\u0855\3\2\2\2\u0857\u0858\3\2")
        buf.write("\2\2\u0858\u0856\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u00c1")
        buf.write("\3\2\2\2\u085a\u085c\5\u00c6d\2\u085b\u085d\5\u00d8m\2")
        buf.write("\u085c\u085b\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085e\3")
        buf.write("\2\2\2\u085e\u085f\5\u00b6\\\2\u085f\u0876\3\2\2\2\u0860")
        buf.write("\u0864\5\u00c8e\2\u0861\u0863\5\u00ecw\2\u0862\u0861\3")
        buf.write("\2\2\2\u0863\u0866\3\2\2\2\u0864\u0862\3\2\2\2\u0864\u0865")
        buf.write("\3\2\2\2\u0865\u0868\3\2\2\2\u0866\u0864\3\2\2\2\u0867")
        buf.write("\u0869\5\u00d8m\2\u0868\u0867\3\2\2\2\u0868\u0869\3\2")
        buf.write("\2\2\u0869\u086b\3\2\2\2\u086a\u086c\5\u00e2r\2\u086b")
        buf.write("\u086a\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086e\3\2\2\2")
        buf.write("\u086d\u086f\5\u00dan\2\u086e\u086d\3\2\2\2\u086e\u086f")
        buf.write("\3\2\2\2\u086f\u0871\3\2\2\2\u0870\u0872\5\u015a\u00ae")
        buf.write("\2\u0871\u0870\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0873")
        buf.write("\3\2\2\2\u0873\u0874\5\u00b6\\\2\u0874\u0876\3\2\2\2\u0875")
        buf.write("\u085a\3\2\2\2\u0875\u0860\3\2\2\2\u0876\u00c3\3\2\2\2")
        buf.write("\u0877\u0879\5\u00c6d\2\u0878\u087a\5\u00e0q\2\u0879\u0878")
        buf.write("\3\2\2\2\u0879\u087a\3\2\2\2\u087a\u087c\3\2\2\2\u087b")
        buf.write("\u087d\5\u00d8m\2\u087c\u087b\3\2\2\2\u087c\u087d\3\2")
        buf.write("\2\2\u087d\u0895\3\2\2\2\u087e\u0880\5\u00c8e\2\u087f")
        buf.write("\u0881\5\u00e0q\2\u0880\u087f\3\2\2\2\u0880\u0881\3\2")
        buf.write("\2\2\u0881\u0885\3\2\2\2\u0882\u0884\5\u00ecw\2\u0883")
        buf.write("\u0882\3\2\2\2\u0884\u0887\3\2\2\2\u0885\u0883\3\2\2\2")
        buf.write("\u0885\u0886\3\2\2\2\u0886\u0889\3\2\2\2\u0887\u0885\3")
        buf.write("\2\2\2\u0888\u088a\5\u00d8m\2\u0889\u0888\3\2\2\2\u0889")
        buf.write("\u088a\3\2\2\2\u088a\u088c\3\2\2\2\u088b\u088d\5\u00e2")
        buf.write("r\2\u088c\u088b\3\2\2\2\u088c\u088d\3\2\2\2\u088d\u088f")
        buf.write("\3\2\2\2\u088e\u0890\5\u00dan\2\u088f\u088e\3\2\2\2\u088f")
        buf.write("\u0890\3\2\2\2\u0890\u0892\3\2\2\2\u0891\u0893\5\u015a")
        buf.write("\u00ae\2\u0892\u0891\3\2\2\2\u0892\u0893\3\2\2\2\u0893")
        buf.write("\u0895\3\2\2\2\u0894\u0877\3\2\2\2\u0894\u087e\3\2\2\2")
        buf.write("\u0895\u00c5\3\2\2\2\u0896\u0897\7\u00e6\2\2\u0897\u0898")
        buf.write("\7\u0107\2\2\u0898\u0899\7\5\2\2\u0899\u089a\5\u011c\u008f")
        buf.write("\2\u089a\u089b\7\6\2\2\u089b\u08a1\3\2\2\2\u089c\u089d")
        buf.write("\7\u00a7\2\2\u089d\u08a1\5\u011c\u008f\2\u089e\u089f\7")
        buf.write("\u00d3\2\2\u089f\u08a1\5\u011c\u008f\2\u08a0\u0896\3\2")
        buf.write("\2\2\u08a0\u089c\3\2\2\2\u08a0\u089e\3\2\2\2\u08a1\u08a3")
        buf.write("\3\2\2\2\u08a2\u08a4\5\u0110\u0089\2\u08a3\u08a2\3\2\2")
        buf.write("\2\u08a3\u08a4\3\2\2\2\u08a4\u08a7\3\2\2\2\u08a5\u08a6")
        buf.write("\7\u00d1\2\2\u08a6\u08a8\7\u0134\2\2\u08a7\u08a5\3\2\2")
        buf.write("\2\u08a7\u08a8\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08aa")
        buf.write("\7\u0117\2\2\u08aa\u08b7\7\u0134\2\2\u08ab\u08b5\7.\2")
        buf.write("\2\u08ac\u08b6\5\u00fe\u0080\2\u08ad\u08b6\5\u0150\u00a9")
        buf.write("\2\u08ae\u08b1\7\5\2\2\u08af\u08b2\5\u00fe\u0080\2\u08b0")
        buf.write("\u08b2\5\u0150\u00a9\2\u08b1\u08af\3\2\2\2\u08b1\u08b0")
        buf.write("\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b4\7\6\2\2\u08b4")
        buf.write("\u08b6\3\2\2\2\u08b5\u08ac\3\2\2\2\u08b5\u08ad\3\2\2\2")
        buf.write("\u08b5\u08ae\3\2\2\2\u08b6\u08b8\3\2\2\2\u08b7\u08ab\3")
        buf.write("\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08ba\3\2\2\2\u08b9\u08bb")
        buf.write("\5\u0110\u0089\2\u08ba\u08b9\3\2\2\2\u08ba\u08bb\3\2\2")
        buf.write("\2\u08bb\u08be\3\2\2\2\u08bc\u08bd\7\u00d0\2\2\u08bd\u08bf")
        buf.write("\7\u0134\2\2\u08be\u08bc\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf")
        buf.write("\u00c7\3\2\2\2\u08c0\u08c4\7\u00e6\2\2\u08c1\u08c3\5\u00dc")
        buf.write("o\2\u08c2\u08c1\3\2\2\2\u08c3\u08c6\3\2\2\2\u08c4\u08c2")
        buf.write("\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c8\3\2\2\2\u08c6")
        buf.write("\u08c4\3\2\2\2\u08c7\u08c9\5\u00eex\2\u08c8\u08c7\3\2")
        buf.write("\2\2\u08c8\u08c9\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08cb")
        buf.write("\5\u011c\u008f\2\u08cb\u00c9\3\2\2\2\u08cc\u08cd\7\u00ec")
        buf.write("\2\2\u08cd\u08ce\5\u00d4k\2\u08ce\u00cb\3\2\2\2\u08cf")
        buf.write("\u08d0\7\u011b\2\2\u08d0\u08d3\7\u00a8\2\2\u08d1\u08d2")
        buf.write("\7)\2\2\u08d2\u08d4\5\u0126\u0094\2\u08d3\u08d1\3\2\2")
        buf.write("\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d6")
        buf.write("\7\u0101\2\2\u08d6\u08d7\5\u00d0i\2\u08d7\u00cd\3\2\2")
        buf.write("\2\u08d8\u08d9\7\u011b\2\2\u08d9\u08da\7\u00b1\2\2\u08da")
        buf.write("\u08dd\7\u00a8\2\2\u08db\u08dc\7)\2\2\u08dc\u08de\5\u0126")
        buf.write("\u0094\2\u08dd\u08db\3\2\2\2\u08dd\u08de\3\2\2\2\u08de")
        buf.write("\u08df\3\2\2\2\u08df\u08e0\7\u0101\2\2\u08e0\u08e1\5\u00d2")
        buf.write("j\2\u08e1\u00cf\3\2\2\2\u08e2\u08ea\7[\2\2\u08e3\u08e4")
        buf.write("\7\u0114\2\2\u08e4\u08e5\7\u00ec\2\2\u08e5\u08ea\7\u012b")
        buf.write("\2\2\u08e6\u08e7\7\u0114\2\2\u08e7\u08e8\7\u00ec\2\2\u08e8")
        buf.write("\u08ea\5\u00d4k\2\u08e9\u08e2\3\2\2\2\u08e9\u08e3\3\2")
        buf.write("\2\2\u08e9\u08e6\3\2\2\2\u08ea\u00d1\3\2\2\2\u08eb\u08ec")
        buf.write("\7\u008f\2\2\u08ec\u08fe\7\u012b\2\2\u08ed\u08ee\7\u008f")
        buf.write("\2\2\u08ee\u08ef\7\5\2\2\u08ef\u08f0\5\u0112\u008a\2\u08f0")
        buf.write("\u08f1\7\6\2\2\u08f1\u08f2\7\u0118\2\2\u08f2\u08f3\7\5")
        buf.write("\2\2\u08f3\u08f8\5\u0124\u0093\2\u08f4\u08f5\7\3\2\2\u08f5")
        buf.write("\u08f7\5\u0124\u0093\2\u08f6\u08f4\3\2\2\2\u08f7\u08fa")
        buf.write("\3\2\2\2\u08f8\u08f6\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9")
        buf.write("\u08fb\3\2\2\2\u08fa\u08f8\3\2\2\2\u08fb\u08fc\7\6\2\2")
        buf.write("\u08fc\u08fe\3\2\2\2\u08fd\u08eb\3\2\2\2\u08fd\u08ed\3")
        buf.write("\2\2\2\u08fe\u00d3\3\2\2\2\u08ff\u0904\5\u00d6l\2\u0900")
        buf.write("\u0901\7\3\2\2\u0901\u0903\5\u00d6l\2\u0902\u0900\3\2")
        buf.write("\2\2\u0903\u0906\3\2\2\2\u0904\u0902\3\2\2\2\u0904\u0905")
        buf.write("\3\2\2\2\u0905\u00d5\3\2\2\2\u0906\u0904\3\2\2\2\u0907")
        buf.write("\u0908\5\u0114\u008b\2\u0908\u0909\7\u0120\2\2\u0909\u090a")
        buf.write("\5\u0124\u0093\2\u090a\u00d7\3\2\2\2\u090b\u090c\7\u011c")
        buf.write("\2\2\u090c\u090d\5\u0126\u0094\2\u090d\u00d9\3\2\2\2\u090e")
        buf.write("\u090f\7\u0084\2\2\u090f\u0910\5\u0126\u0094\2\u0910\u00db")
        buf.write("\3\2\2\2\u0911\u0912\7\20\2\2\u0912\u0919\5\u00dep\2\u0913")
        buf.write("\u0915\7\3\2\2\u0914\u0913\3\2\2\2\u0914\u0915\3\2\2\2")
        buf.write("\u0915\u0916\3\2\2\2\u0916\u0918\5\u00dep\2\u0917\u0914")
        buf.write("\3\2\2\2\u0918\u091b\3\2\2\2\u0919\u0917\3\2\2\2\u0919")
        buf.write("\u091a\3\2\2\2\u091a\u091c\3\2\2\2\u091b\u0919\3\2\2\2")
        buf.write("\u091c\u091d\7\21\2\2\u091d\u00dd\3\2\2\2\u091e\u092c")
        buf.write("\5\u016e\u00b8\2\u091f\u0920\5\u016e\u00b8\2\u0920\u0921")
        buf.write("\7\5\2\2\u0921\u0926\5\u012c\u0097\2\u0922\u0923\7\3\2")
        buf.write("\2\u0923\u0925\5\u012c\u0097\2\u0924\u0922\3\2\2\2\u0925")
        buf.write("\u0928\3\2\2\2\u0926\u0924\3\2\2\2\u0926\u0927\3\2\2\2")
        buf.write("\u0927\u0929\3\2\2\2\u0928\u0926\3\2\2\2\u0929\u092a\7")
        buf.write("\6\2\2\u092a\u092c\3\2\2\2\u092b\u091e\3\2\2\2\u092b\u091f")
        buf.write("\3\2\2\2\u092c\u00df\3\2\2\2\u092d\u092e\7|\2\2\u092e")
        buf.write("\u0933\5\u00f0y\2\u092f\u0930\7\3\2\2\u0930\u0932\5\u00f0")
        buf.write("y\2\u0931\u092f\3\2\2\2\u0932\u0935\3\2\2\2\u0933\u0931")
        buf.write("\3\2\2\2\u0933\u0934\3\2\2\2\u0934\u0939\3\2\2\2\u0935")
        buf.write("\u0933\3\2\2\2\u0936\u0938\5\u00ecw\2\u0937\u0936\3\2")
        buf.write("\2\2\u0938\u093b\3\2\2\2\u0939\u0937\3\2\2\2\u0939\u093a")
        buf.write("\3\2\2\2\u093a\u093d\3\2\2\2\u093b\u0939\3\2\2\2\u093c")
        buf.write("\u093e\5\u00e6t\2\u093d\u093c\3\2\2\2\u093d\u093e\3\2")
        buf.write("\2\2\u093e\u00e1\3\2\2\2\u093f\u0940\7\u0082\2\2\u0940")
        buf.write("\u0941\7\66\2\2\u0941\u0946\5\u0124\u0093\2\u0942\u0943")
        buf.write("\7\3\2\2\u0943\u0945\5\u0124\u0093\2\u0944\u0942\3\2\2")
        buf.write("\2\u0945\u0948\3\2\2\2\u0946\u0944\3\2\2\2\u0946\u0947")
        buf.write("\3\2\2\2\u0947\u095a\3\2\2\2\u0948\u0946\3\2\2\2\u0949")
        buf.write("\u094a\7\u011e\2\2\u094a\u095b\7\u00e1\2\2\u094b\u094c")
        buf.write("\7\u011e\2\2\u094c\u095b\7O\2\2\u094d\u094e\7\u0083\2")
        buf.write("\2\u094e\u094f\7\u00ee\2\2\u094f\u0950\7\5\2\2\u0950\u0955")
        buf.write("\5\u00e4s\2\u0951\u0952\7\3\2\2\u0952\u0954\5\u00e4s\2")
        buf.write("\u0953\u0951\3\2\2\2\u0954\u0957\3\2\2\2\u0955\u0953\3")
        buf.write("\2\2\2\u0955\u0956\3\2\2\2\u0956\u0958\3\2\2\2\u0957\u0955")
        buf.write("\3\2\2\2\u0958\u0959\7\6\2\2\u0959\u095b\3\2\2\2\u095a")
        buf.write("\u0949\3\2\2\2\u095a\u094b\3\2\2\2\u095a\u094d\3\2\2\2")
        buf.write("\u095a\u095b\3\2\2\2\u095b\u096c\3\2\2\2\u095c\u095d\7")
        buf.write("\u0082\2\2\u095d\u095e\7\66\2\2\u095e\u095f\7\u0083\2")
        buf.write("\2\u095f\u0960\7\u00ee\2\2\u0960\u0961\7\5\2\2\u0961\u0966")
        buf.write("\5\u00e4s\2\u0962\u0963\7\3\2\2\u0963\u0965\5\u00e4s\2")
        buf.write("\u0964\u0962\3\2\2\2\u0965\u0968\3\2\2\2\u0966\u0964\3")
        buf.write("\2\2\2\u0966\u0967\3\2\2\2\u0967\u0969\3\2\2\2\u0968\u0966")
        buf.write("\3\2\2\2\u0969\u096a\7\6\2\2\u096a\u096c\3\2\2\2\u096b")
        buf.write("\u093f\3\2\2\2\u096b\u095c\3\2\2\2\u096c\u00e3\3\2\2\2")
        buf.write("\u096d\u0976\7\5\2\2\u096e\u0973\5\u0124\u0093\2\u096f")
        buf.write("\u0970\7\3\2\2\u0970\u0972\5\u0124\u0093\2\u0971\u096f")
        buf.write("\3\2\2\2\u0972\u0975\3\2\2\2\u0973\u0971\3\2\2\2\u0973")
        buf.write("\u0974\3\2\2\2\u0974\u0977\3\2\2\2\u0975\u0973\3\2\2\2")
        buf.write("\u0976\u096e\3\2\2\2\u0976\u0977\3\2\2\2\u0977\u0978\3")
        buf.write("\2\2\2\u0978\u097b\7\6\2\2\u0979\u097b\5\u0124\u0093\2")
        buf.write("\u097a\u096d\3\2\2\2\u097a\u0979\3\2\2\2\u097b\u00e5\3")
        buf.write("\2\2\2\u097c\u097d\7\u00c6\2\2\u097d\u097e\7\5\2\2\u097e")
        buf.write("\u097f\5\u011c\u008f\2\u097f\u0980\7x\2\2\u0980\u0981")
        buf.write("\5\u00e8u\2\u0981\u0982\7\u0089\2\2\u0982\u0983\7\5\2")
        buf.write("\2\u0983\u0988\5\u00eav\2\u0984\u0985\7\3\2\2\u0985\u0987")
        buf.write("\5\u00eav\2\u0986\u0984\3\2\2\2\u0987\u098a\3\2\2\2\u0988")
        buf.write("\u0986\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u098b\3\2\2\2")
        buf.write("\u098a\u0988\3\2\2\2\u098b\u098c\7\6\2\2\u098c\u098d\7")
        buf.write("\6\2\2\u098d\u00e7\3\2\2\2\u098e\u099b\5\u016e\u00b8\2")
        buf.write("\u098f\u0990\7\5\2\2\u0990\u0995\5\u016e\u00b8\2\u0991")
        buf.write("\u0992\7\3\2\2\u0992\u0994\5\u016e\u00b8\2\u0993\u0991")
        buf.write("\3\2\2\2\u0994\u0997\3\2\2\2\u0995\u0993\3\2\2\2\u0995")
        buf.write("\u0996\3\2\2\2\u0996\u0998\3\2\2\2\u0997\u0995\3\2\2\2")
        buf.write("\u0998\u0999\7\6\2\2\u0999\u099b\3\2\2\2\u099a\u098e\3")
        buf.write("\2\2\2\u099a\u098f\3\2\2\2\u099b\u00e9\3\2\2\2\u099c\u09a1")
        buf.write("\5\u0124\u0093\2\u099d\u099f\7.\2\2\u099e\u099d\3\2\2")
        buf.write("\2\u099e\u099f\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a2")
        buf.write("\5\u016e\u00b8\2\u09a1\u099e\3\2\2\2\u09a1\u09a2\3\2\2")
        buf.write("\2\u09a2\u00eb\3\2\2\2\u09a3\u09a4\7\u0098\2\2\u09a4\u09a6")
        buf.write("\7\u0119\2\2\u09a5\u09a7\7\u00bc\2\2\u09a6\u09a5\3\2\2")
        buf.write("\2\u09a6\u09a7\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u09a9")
        buf.write("\5\u0168\u00b5\2\u09a9\u09b2\7\5\2\2\u09aa\u09af\5\u0124")
        buf.write("\u0093\2\u09ab\u09ac\7\3\2\2\u09ac\u09ae\5\u0124\u0093")
        buf.write("\2\u09ad\u09ab\3\2\2\2\u09ae\u09b1\3\2\2\2\u09af\u09ad")
        buf.write("\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b3\3\2\2\2\u09b1")
        buf.write("\u09af\3\2\2\2\u09b2\u09aa\3\2\2\2\u09b2\u09b3\3\2\2\2")
        buf.write("\u09b3\u09b4\3\2\2\2\u09b4\u09b5\7\6\2\2\u09b5\u09c1\5")
        buf.write("\u016e\u00b8\2\u09b6\u09b8\7.\2\2\u09b7\u09b6\3\2\2\2")
        buf.write("\u09b7\u09b8\3\2\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09be\5")
        buf.write("\u016e\u00b8\2\u09ba\u09bb\7\3\2\2\u09bb\u09bd\5\u016e")
        buf.write("\u00b8\2\u09bc\u09ba\3\2\2\2\u09bd\u09c0\3\2\2\2\u09be")
        buf.write("\u09bc\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf\u09c2\3\2\2\2")
        buf.write("\u09c0\u09be\3\2\2\2\u09c1\u09b7\3\2\2\2\u09c1\u09c2\3")
        buf.write("\2\2\2\u09c2\u00ed\3\2\2\2\u09c3\u09c4\t\31\2\2\u09c4")
        buf.write("\u00ef\3\2\2\2\u09c5\u09c9\5\u0108\u0085\2\u09c6\u09c8")
        buf.write("\5\u00f2z\2\u09c7\u09c6\3\2\2\2\u09c8\u09cb\3\2\2\2\u09c9")
        buf.write("\u09c7\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u00f1\3\2\2\2")
        buf.write("\u09cb\u09c9\3\2\2\2\u09cc\u09cd\5\u00f4{\2\u09cd\u09ce")
        buf.write("\7\u0095\2\2\u09ce\u09d0\5\u0108\u0085\2\u09cf\u09d1\5")
        buf.write("\u00f6|\2\u09d0\u09cf\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1")
        buf.write("\u09d8\3\2\2\2\u09d2\u09d3\7\u00af\2\2\u09d3\u09d4\5\u00f4")
        buf.write("{\2\u09d4\u09d5\7\u0095\2\2\u09d5\u09d6\5\u0108\u0085")
        buf.write("\2\u09d6\u09d8\3\2\2\2\u09d7\u09cc\3\2\2\2\u09d7\u09d2")
        buf.write("\3\2\2\2\u09d8\u00f3\3\2\2\2\u09d9\u09db\7\u008c\2\2\u09da")
        buf.write("\u09d9\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09f2\3\2\2\2")
        buf.write("\u09dc\u09f2\7N\2\2\u09dd\u09df\7\u009b\2\2\u09de\u09e0")
        buf.write("\7\u00bc\2\2\u09df\u09de\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0")
        buf.write("\u09f2\3\2\2\2\u09e1\u09e3\7\u009b\2\2\u09e2\u09e1\3\2")
        buf.write("\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e4\3\2\2\2\u09e4\u09f2")
        buf.write("\7\u00e7\2\2\u09e5\u09e7\7\u00dc\2\2\u09e6\u09e8\7\u00bc")
        buf.write("\2\2\u09e7\u09e6\3\2\2\2\u09e7\u09e8\3\2\2\2\u09e8\u09f2")
        buf.write("\3\2\2\2\u09e9\u09eb\7}\2\2\u09ea\u09ec\7\u00bc\2\2\u09eb")
        buf.write("\u09ea\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec\u09f2\3\2\2\2")
        buf.write("\u09ed\u09ef\7\u009b\2\2\u09ee\u09ed\3\2\2\2\u09ee\u09ef")
        buf.write("\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f2\7*\2\2\u09f1")
        buf.write("\u09da\3\2\2\2\u09f1\u09dc\3\2\2\2\u09f1\u09dd\3\2\2\2")
        buf.write("\u09f1\u09e2\3\2\2\2\u09f1\u09e5\3\2\2\2\u09f1\u09e9\3")
        buf.write("\2\2\2\u09f1\u09ee\3\2\2\2\u09f2\u00f5\3\2\2\2\u09f3\u09f4")
        buf.write("\7\u00b5\2\2\u09f4\u09f8\5\u0126\u0094\2\u09f5\u09f6\7")
        buf.write("\u0117\2\2\u09f6\u09f8\5\u00fc\177\2\u09f7\u09f3\3\2\2")
        buf.write("\2\u09f7\u09f5\3\2\2\2\u09f8\u00f7\3\2\2\2\u09f9\u09fa")
        buf.write("\7\u00fd\2\2\u09fa\u09fc\7\5\2\2\u09fb\u09fd\5\u00fa~")
        buf.write("\2\u09fc\u09fb\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u09fe")
        buf.write("\3\2\2\2\u09fe\u09ff\7\6\2\2\u09ff\u00f9\3\2\2\2\u0a00")
        buf.write("\u0a02\7\u012a\2\2\u0a01\u0a00\3\2\2\2\u0a01\u0a02\3\2")
        buf.write("\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a04\t\32\2\2\u0a04\u0a19")
        buf.write("\7\u00c5\2\2\u0a05\u0a06\5\u0124\u0093\2\u0a06\u0a07\7")
        buf.write("\u00e3\2\2\u0a07\u0a19\3\2\2\2\u0a08\u0a09\7\64\2\2\u0a09")
        buf.write("\u0a0a\7\u0138\2\2\u0a0a\u0a0b\7\u00bb\2\2\u0a0b\u0a0c")
        buf.write("\7\u00b4\2\2\u0a0c\u0a15\7\u0138\2\2\u0a0d\u0a13\7\u00b5")
        buf.write("\2\2\u0a0e\u0a14\5\u016e\u00b8\2\u0a0f\u0a10\5\u0168\u00b5")
        buf.write("\2\u0a10\u0a11\7\5\2\2\u0a11\u0a12\7\6\2\2\u0a12\u0a14")
        buf.write("\3\2\2\2\u0a13\u0a0e\3\2\2\2\u0a13\u0a0f\3\2\2\2\u0a14")
        buf.write("\u0a16\3\2\2\2\u0a15\u0a0d\3\2\2\2\u0a15\u0a16\3\2\2\2")
        buf.write("\u0a16\u0a19\3\2\2\2\u0a17\u0a19\5\u0124\u0093\2\u0a18")
        buf.write("\u0a01\3\2\2\2\u0a18\u0a05\3\2\2\2\u0a18\u0a08\3\2\2\2")
        buf.write("\u0a18\u0a17\3\2\2\2\u0a19\u00fb\3\2\2\2\u0a1a\u0a1b\7")
        buf.write("\5\2\2\u0a1b\u0a1c\5\u00fe\u0080\2\u0a1c\u0a1d\7\6\2\2")
        buf.write("\u0a1d\u00fd\3\2\2\2\u0a1e\u0a23\5\u016a\u00b6\2\u0a1f")
        buf.write("\u0a20\7\3\2\2\u0a20\u0a22\5\u016a\u00b6\2\u0a21\u0a1f")
        buf.write("\3\2\2\2\u0a22\u0a25\3\2\2\2\u0a23\u0a21\3\2\2\2\u0a23")
        buf.write("\u0a24\3\2\2\2\u0a24\u00ff\3\2\2\2\u0a25\u0a23\3\2\2\2")
        buf.write("\u0a26\u0a27\7\5\2\2\u0a27\u0a2c\5\u0102\u0082\2\u0a28")
        buf.write("\u0a29\7\3\2\2\u0a29\u0a2b\5\u0102\u0082\2\u0a2a\u0a28")
        buf.write("\3\2\2\2\u0a2b\u0a2e\3\2\2\2\u0a2c\u0a2a\3\2\2\2\u0a2c")
        buf.write("\u0a2d\3\2\2\2\u0a2d\u0a2f\3\2\2\2\u0a2e\u0a2c\3\2\2\2")
        buf.write("\u0a2f\u0a30\7\6\2\2\u0a30\u0101\3\2\2\2\u0a31\u0a33\5")
        buf.write("\u016a\u00b6\2\u0a32\u0a34\t\6\2\2\u0a33\u0a32\3\2\2\2")
        buf.write("\u0a33\u0a34\3\2\2\2\u0a34\u0103\3\2\2\2\u0a35\u0a36\7")
        buf.write("\5\2\2\u0a36\u0a3b\5\u0106\u0084\2\u0a37\u0a38\7\3\2\2")
        buf.write("\u0a38\u0a3a\5\u0106\u0084\2\u0a39\u0a37\3\2\2\2\u0a3a")
        buf.write("\u0a3d\3\2\2\2\u0a3b\u0a39\3\2\2\2\u0a3b\u0a3c\3\2\2\2")
        buf.write("\u0a3c\u0a3e\3\2\2\2\u0a3d\u0a3b\3\2\2\2\u0a3e\u0a3f\7")
        buf.write("\6\2\2\u0a3f\u0105\3\2\2\2\u0a40\u0a42\5\u016e\u00b8\2")
        buf.write("\u0a41\u0a43\5\u0086D\2\u0a42\u0a41\3\2\2\2\u0a42\u0a43")
        buf.write("\3\2\2\2\u0a43\u0107\3\2\2\2\u0a44\u0a46\5\u0114\u008b")
        buf.write("\2\u0a45\u0a47\5\u00f8}\2\u0a46\u0a45\3\2\2\2\u0a46\u0a47")
        buf.write("\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a49\5\u010e\u0088")
        buf.write("\2\u0a49\u0a65\3\2\2\2\u0a4a\u0a4b\7\5\2\2\u0a4b\u0a4c")
        buf.write("\5\u0088E\2\u0a4c\u0a4e\7\6\2\2\u0a4d\u0a4f\5\u00f8}\2")
        buf.write("\u0a4e\u0a4d\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a50\3")
        buf.write("\2\2\2\u0a50\u0a51\5\u010e\u0088\2\u0a51\u0a65\3\2\2\2")
        buf.write("\u0a52\u0a53\7\5\2\2\u0a53\u0a54\5\n\6\2\u0a54\u0a56\7")
        buf.write("\6\2\2\u0a55\u0a57\5\u00f8}\2\u0a56\u0a55\3\2\2\2\u0a56")
        buf.write("\u0a57\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58\u0a59\5\u010e")
        buf.write("\u0088\2\u0a59\u0a65\3\2\2\2\u0a5a\u0a5b\7\5\2\2\u0a5b")
        buf.write("\u0a5c\5\u00f0y\2\u0a5c\u0a5e\7\6\2\2\u0a5d\u0a5f\5\u00f8")
        buf.write("}\2\u0a5e\u0a5d\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a60")
        buf.write("\3\2\2\2\u0a60\u0a61\5\u010e\u0088\2\u0a61\u0a65\3\2\2")
        buf.write("\2\u0a62\u0a65\5\u010a\u0086\2\u0a63\u0a65\5\u010c\u0087")
        buf.write("\2\u0a64\u0a44\3\2\2\2\u0a64\u0a4a\3\2\2\2\u0a64\u0a52")
        buf.write("\3\2\2\2\u0a64\u0a5a\3\2\2\2\u0a64\u0a62\3\2\2\2\u0a64")
        buf.write("\u0a63\3\2\2\2\u0a65\u0109\3\2\2\2\u0a66\u0a67\7\u0118")
        buf.write("\2\2\u0a67\u0a6c\5\u0124\u0093\2\u0a68\u0a69\7\3\2\2\u0a69")
        buf.write("\u0a6b\5\u0124\u0093\2\u0a6a\u0a68\3\2\2\2\u0a6b\u0a6e")
        buf.write("\3\2\2\2\u0a6c\u0a6a\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d")
        buf.write("\u0a6f\3\2\2\2\u0a6e\u0a6c\3\2\2\2\u0a6f\u0a70\5\u010e")
        buf.write("\u0088\2\u0a70\u010b\3\2\2\2\u0a71\u0a72\5\u016a\u00b6")
        buf.write("\2\u0a72\u0a7b\7\5\2\2\u0a73\u0a78\5\u0124\u0093\2\u0a74")
        buf.write("\u0a75\7\3\2\2\u0a75\u0a77\5\u0124\u0093\2\u0a76\u0a74")
        buf.write("\3\2\2\2\u0a77\u0a7a\3\2\2\2\u0a78\u0a76\3\2\2\2\u0a78")
        buf.write("\u0a79\3\2\2\2\u0a79\u0a7c\3\2\2\2\u0a7a\u0a78\3\2\2\2")
        buf.write("\u0a7b\u0a73\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7d\3")
        buf.write("\2\2\2\u0a7d\u0a7e\7\6\2\2\u0a7e\u0a7f\5\u010e\u0088\2")
        buf.write("\u0a7f\u010d\3\2\2\2\u0a80\u0a82\7.\2\2\u0a81\u0a80\3")
        buf.write("\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a85")
        buf.write("\5\u0170\u00b9\2\u0a84\u0a86\5\u00fc\177\2\u0a85\u0a84")
        buf.write("\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0a88\3\2\2\2\u0a87")
        buf.write("\u0a81\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u010f\3\2\2\2")
        buf.write("\u0a89\u0a8a\7\u00e2\2\2\u0a8a\u0a8b\7z\2\2\u0a8b\u0a8c")
        buf.write("\7\u00e9\2\2\u0a8c\u0a90\7\u0134\2\2\u0a8d\u0a8e\7\u011e")
        buf.write("\2\2\u0a8e\u0a8f\7\u00ea\2\2\u0a8f\u0a91\5\u00a0Q\2\u0a90")
        buf.write("\u0a8d\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0abb\3\2\2\2")
        buf.write("\u0a92\u0a93\7\u00e2\2\2\u0a93\u0a94\7z\2\2\u0a94\u0a9e")
        buf.write("\7\\\2\2\u0a95\u0a96\7s\2\2\u0a96\u0a97\7\u0100\2\2\u0a97")
        buf.write("\u0a98\7\66\2\2\u0a98\u0a9c\7\u0134\2\2\u0a99\u0a9a\7")
        buf.write("h\2\2\u0a9a\u0a9b\7\66\2\2\u0a9b\u0a9d\7\u0134\2\2\u0a9c")
        buf.write("\u0a99\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u0a9f\3\2\2\2")
        buf.write("\u0a9e\u0a95\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa5\3")
        buf.write("\2\2\2\u0aa0\u0aa1\7B\2\2\u0aa1\u0aa2\7\u0094\2\2\u0aa2")
        buf.write("\u0aa3\7\u0100\2\2\u0aa3\u0aa4\7\66\2\2\u0aa4\u0aa6\7")
        buf.write("\u0134\2\2\u0aa5\u0aa0\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6")
        buf.write("\u0aac\3\2\2\2\u0aa7\u0aa8\7\u00a7\2\2\u0aa8\u0aa9\7\u0096")
        buf.write("\2\2\u0aa9\u0aaa\7\u0100\2\2\u0aaa\u0aab\7\66\2\2\u0aab")
        buf.write("\u0aad\7\u0134\2\2\u0aac\u0aa7\3\2\2\2\u0aac\u0aad\3\2")
        buf.write("\2\2\u0aad\u0ab2\3\2\2\2\u0aae\u0aaf\7\u009e\2\2\u0aaf")
        buf.write("\u0ab0\7\u0100\2\2\u0ab0\u0ab1\7\66\2\2\u0ab1\u0ab3\7")
        buf.write("\u0134\2\2\u0ab2\u0aae\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3")
        buf.write("\u0ab8\3\2\2\2\u0ab4\u0ab5\7\u00b2\2\2\u0ab5\u0ab6\7Z")
        buf.write("\2\2\u0ab6\u0ab7\7.\2\2\u0ab7\u0ab9\7\u0134\2\2\u0ab8")
        buf.write("\u0ab4\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0abb\3\2\2\2")
        buf.write("\u0aba\u0a89\3\2\2\2\u0aba\u0a92\3\2\2\2\u0abb\u0111\3")
        buf.write("\2\2\2\u0abc\u0ac1\5\u0114\u008b\2\u0abd\u0abe\7\3\2\2")
        buf.write("\u0abe\u0ac0\5\u0114\u008b\2\u0abf\u0abd\3\2\2\2\u0ac0")
        buf.write("\u0ac3\3\2\2\2\u0ac1\u0abf\3\2\2\2\u0ac1\u0ac2\3\2\2\2")
        buf.write("\u0ac2\u0113\3\2\2\2\u0ac3\u0ac1\3\2\2\2\u0ac4\u0ac9\5")
        buf.write("\u016a\u00b6\2\u0ac5\u0ac6\7\7\2\2\u0ac6\u0ac8\5\u016a")
        buf.write("\u00b6\2\u0ac7\u0ac5\3\2\2\2\u0ac8\u0acb\3\2\2\2\u0ac9")
        buf.write("\u0ac7\3\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca\u0115\3\2\2\2")
        buf.write("\u0acb\u0ac9\3\2\2\2\u0acc\u0acd\5\u016a\u00b6\2\u0acd")
        buf.write("\u0ace\7\7\2\2\u0ace\u0ad0\3\2\2\2\u0acf\u0acc\3\2\2\2")
        buf.write("\u0acf\u0ad0\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0ad2\5")
        buf.write("\u016a\u00b6\2\u0ad2\u0117\3\2\2\2\u0ad3\u0ad4\5\u016a")
        buf.write("\u00b6\2\u0ad4\u0ad5\7\7\2\2\u0ad5\u0ad7\3\2\2\2\u0ad6")
        buf.write("\u0ad3\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u0ad8\3\2\2\2")
        buf.write("\u0ad8\u0ad9\5\u016a\u00b6\2\u0ad9\u0119\3\2\2\2\u0ada")
        buf.write("\u0ae2\5\u0124\u0093\2\u0adb\u0add\7.\2\2\u0adc\u0adb")
        buf.write("\3\2\2\2\u0adc\u0add\3\2\2\2\u0add\u0ae0\3\2\2\2\u0ade")
        buf.write("\u0ae1\5\u016a\u00b6\2\u0adf\u0ae1\5\u00fc\177\2\u0ae0")
        buf.write("\u0ade\3\2\2\2\u0ae0\u0adf\3\2\2\2\u0ae1\u0ae3\3\2\2\2")
        buf.write("\u0ae2\u0adc\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u011b\3")
        buf.write("\2\2\2\u0ae4\u0ae9\5\u011a\u008e\2\u0ae5\u0ae6\7\3\2\2")
        buf.write("\u0ae6\u0ae8\5\u011a\u008e\2\u0ae7\u0ae5\3\2\2\2\u0ae8")
        buf.write("\u0aeb\3\2\2\2\u0ae9\u0ae7\3\2\2\2\u0ae9\u0aea\3\2\2\2")
        buf.write("\u0aea\u011d\3\2\2\2\u0aeb\u0ae9\3\2\2\2\u0aec\u0aed\7")
        buf.write("\5\2\2\u0aed\u0af2\5\u0120\u0091\2\u0aee\u0aef\7\3\2\2")
        buf.write("\u0aef\u0af1\5\u0120\u0091\2\u0af0\u0aee\3\2\2\2\u0af1")
        buf.write("\u0af4\3\2\2\2\u0af2\u0af0\3\2\2\2\u0af2\u0af3\3\2\2\2")
        buf.write("\u0af3\u0af5\3\2\2\2\u0af4\u0af2\3\2\2\2\u0af5\u0af6\7")
        buf.write("\6\2\2\u0af6\u011f\3\2\2\2\u0af7\u0b05\5\u0168\u00b5\2")
        buf.write("\u0af8\u0af9\5\u016e\u00b8\2\u0af9\u0afa\7\5\2\2\u0afa")
        buf.write("\u0aff\5\u0122\u0092\2\u0afb\u0afc\7\3\2\2\u0afc\u0afe")
        buf.write("\5\u0122\u0092\2\u0afd\u0afb\3\2\2\2\u0afe\u0b01\3\2\2")
        buf.write("\2\u0aff\u0afd\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u0b02")
        buf.write("\3\2\2\2\u0b01\u0aff\3\2\2\2\u0b02\u0b03\7\6\2\2\u0b03")
        buf.write("\u0b05\3\2\2\2\u0b04\u0af7\3\2\2\2\u0b04\u0af8\3\2\2\2")
        buf.write("\u0b05\u0121\3\2\2\2\u0b06\u0b09\5\u0168\u00b5\2\u0b07")
        buf.write("\u0b09\5\u012e\u0098\2\u0b08\u0b06\3\2\2\2\u0b08\u0b07")
        buf.write("\3\2\2\2\u0b09\u0123\3\2\2\2\u0b0a\u0b0b\5\u0126\u0094")
        buf.write("\2\u0b0b\u0125\3\2\2\2\u0b0c\u0b0d\b\u0094\1\2\u0b0d\u0b0e")
        buf.write("\7\u00b1\2\2\u0b0e\u0b19\5\u0126\u0094\7\u0b0f\u0b10\7")
        buf.write("k\2\2\u0b10\u0b11\7\5\2\2\u0b11\u0b12\5\u0088E\2\u0b12")
        buf.write("\u0b13\7\6\2\2\u0b13\u0b19\3\2\2\2\u0b14\u0b16\5\u012a")
        buf.write("\u0096\2\u0b15\u0b17\5\u0128\u0095\2\u0b16\u0b15\3\2\2")
        buf.write("\2\u0b16\u0b17\3\2\2\2\u0b17\u0b19\3\2\2\2\u0b18\u0b0c")
        buf.write("\3\2\2\2\u0b18\u0b0f\3\2\2\2\u0b18\u0b14\3\2\2\2\u0b19")
        buf.write("\u0b22\3\2\2\2\u0b1a\u0b1b\f\4\2\2\u0b1b\u0b1c\7)\2\2")
        buf.write("\u0b1c\u0b21\5\u0126\u0094\5\u0b1d\u0b1e\f\3\2\2\u0b1e")
        buf.write("\u0b1f\7\u00b9\2\2\u0b1f\u0b21\5\u0126\u0094\4\u0b20\u0b1a")
        buf.write("\3\2\2\2\u0b20\u0b1d\3\2\2\2\u0b21\u0b24\3\2\2\2\u0b22")
        buf.write("\u0b20\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0127\3\2\2\2")
        buf.write("\u0b24\u0b22\3\2\2\2\u0b25\u0b27\7\u00b1\2\2\u0b26\u0b25")
        buf.write("\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28")
        buf.write("\u0b29\7\62\2\2\u0b29\u0b2a\5\u012a\u0096\2\u0b2a\u0b2b")
        buf.write("\7)\2\2\u0b2b\u0b2c\5\u012a\u0096\2\u0b2c\u0b78\3\2\2")
        buf.write("\2\u0b2d\u0b2f\7\u00b1\2\2\u0b2e\u0b2d\3\2\2\2\u0b2e\u0b2f")
        buf.write("\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0b31\7\u0089\2\2\u0b31")
        buf.write("\u0b32\7\5\2\2\u0b32\u0b37\5\u0124\u0093\2\u0b33\u0b34")
        buf.write("\7\3\2\2\u0b34\u0b36\5\u0124\u0093\2\u0b35\u0b33\3\2\2")
        buf.write("\2\u0b36\u0b39\3\2\2\2\u0b37\u0b35\3\2\2\2\u0b37\u0b38")
        buf.write("\3\2\2\2\u0b38\u0b3a\3\2\2\2\u0b39\u0b37\3\2\2\2\u0b3a")
        buf.write("\u0b3b\7\6\2\2\u0b3b\u0b78\3\2\2\2\u0b3c\u0b3e\7\u00b1")
        buf.write("\2\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b3f")
        buf.write("\3\2\2\2\u0b3f\u0b40\7\u0089\2\2\u0b40\u0b41\7\5\2\2\u0b41")
        buf.write("\u0b42\5\u0088E\2\u0b42\u0b43\7\6\2\2\u0b43\u0b78\3\2")
        buf.write("\2\2\u0b44\u0b46\7\u00b1\2\2\u0b45\u0b44\3\2\2\2\u0b45")
        buf.write("\u0b46\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47\u0b48\7\u00dd")
        buf.write("\2\2\u0b48\u0b78\5\u012a\u0096\2\u0b49\u0b4b\7\u00b1\2")
        buf.write("\2\u0b4a\u0b49\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b\u0b4c")
        buf.write("\3\2\2\2\u0b4c\u0b4d\7\u009c\2\2\u0b4d\u0b5b\t\33\2\2")
        buf.write("\u0b4e\u0b4f\7\5\2\2\u0b4f\u0b5c\7\6\2\2\u0b50\u0b51\7")
        buf.write("\5\2\2\u0b51\u0b56\5\u0124\u0093\2\u0b52\u0b53\7\3\2\2")
        buf.write("\u0b53\u0b55\5\u0124\u0093\2\u0b54\u0b52\3\2\2\2\u0b55")
        buf.write("\u0b58\3\2\2\2\u0b56\u0b54\3\2\2\2\u0b56\u0b57\3\2\2\2")
        buf.write("\u0b57\u0b59\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b59\u0b5a\7")
        buf.write("\6\2\2\u0b5a\u0b5c\3\2\2\2\u0b5b\u0b4e\3\2\2\2\u0b5b\u0b50")
        buf.write("\3\2\2\2\u0b5c\u0b78\3\2\2\2\u0b5d\u0b5f\7\u00b1\2\2\u0b5e")
        buf.write("\u0b5d\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b60\3\2\2\2")
        buf.write("\u0b60\u0b61\7\u009c\2\2\u0b61\u0b64\5\u012a\u0096\2\u0b62")
        buf.write("\u0b63\7g\2\2\u0b63\u0b65\7\u0134\2\2\u0b64\u0b62\3\2")
        buf.write("\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b78\3\2\2\2\u0b66\u0b68")
        buf.write("\7\u0093\2\2\u0b67\u0b69\7\u00b1\2\2\u0b68\u0b67\3\2\2")
        buf.write("\2\u0b68\u0b69\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b78")
        buf.write("\7\u00b2\2\2\u0b6b\u0b6d\7\u0093\2\2\u0b6c\u0b6e\7\u00b1")
        buf.write("\2\2\u0b6d\u0b6c\3\2\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b6f")
        buf.write("\3\2\2\2\u0b6f\u0b78\t\34\2\2\u0b70\u0b72\7\u0093\2\2")
        buf.write("\u0b71\u0b73\7\u00b1\2\2\u0b72\u0b71\3\2\2\2\u0b72\u0b73")
        buf.write("\3\2\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b75\7b\2\2\u0b75")
        buf.write("\u0b76\7|\2\2\u0b76\u0b78\5\u012a\u0096\2\u0b77\u0b26")
        buf.write("\3\2\2\2\u0b77\u0b2e\3\2\2\2\u0b77\u0b3d\3\2\2\2\u0b77")
        buf.write("\u0b45\3\2\2\2\u0b77\u0b4a\3\2\2\2\u0b77\u0b5e\3\2\2\2")
        buf.write("\u0b77\u0b66\3\2\2\2\u0b77\u0b6b\3\2\2\2\u0b77\u0b70\3")
        buf.write("\2\2\2\u0b78\u0129\3\2\2\2\u0b79\u0b7a\b\u0096\1\2\u0b7a")
        buf.write("\u0b7e\5\u012c\u0097\2\u0b7b\u0b7c\t\35\2\2\u0b7c\u0b7e")
        buf.write("\5\u012a\u0096\t\u0b7d\u0b79\3\2\2\2\u0b7d\u0b7b\3\2\2")
        buf.write("\2\u0b7e\u0b94\3\2\2\2\u0b7f\u0b80\f\b\2\2\u0b80\u0b81")
        buf.write("\t\36\2\2\u0b81\u0b93\5\u012a\u0096\t\u0b82\u0b83\f\7")
        buf.write("\2\2\u0b83\u0b84\t\37\2\2\u0b84\u0b93\5\u012a\u0096\b")
        buf.write("\u0b85\u0b86\f\6\2\2\u0b86\u0b87\7\u0130\2\2\u0b87\u0b93")
        buf.write("\5\u012a\u0096\7\u0b88\u0b89\f\5\2\2\u0b89\u0b8a\7\u0133")
        buf.write("\2\2\u0b8a\u0b93\5\u012a\u0096\6\u0b8b\u0b8c\f\4\2\2\u0b8c")
        buf.write("\u0b8d\7\u0131\2\2\u0b8d\u0b93\5\u012a\u0096\5\u0b8e\u0b8f")
        buf.write("\f\3\2\2\u0b8f\u0b90\5\u0130\u0099\2\u0b90\u0b91\5\u012a")
        buf.write("\u0096\4\u0b91\u0b93\3\2\2\2\u0b92\u0b7f\3\2\2\2\u0b92")
        buf.write("\u0b82\3\2\2\2\u0b92\u0b85\3\2\2\2\u0b92\u0b88\3\2\2\2")
        buf.write("\u0b92\u0b8b\3\2\2\2\u0b92\u0b8e\3\2\2\2\u0b93\u0b96\3")
        buf.write("\2\2\2\u0b94\u0b92\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u012b")
        buf.write("\3\2\2\2\u0b96\u0b94\3\2\2\2\u0b97\u0b98\b\u0097\1\2\u0b98")
        buf.write("\u0c50\t \2\2\u0b99\u0b9b\79\2\2\u0b9a\u0b9c\5\u0158\u00ad")
        buf.write("\2\u0b9b\u0b9a\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9b")
        buf.write("\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0ba1\3\2\2\2\u0b9f")
        buf.write("\u0ba0\7e\2\2\u0ba0\u0ba2\5\u0124\u0093\2\u0ba1\u0b9f")
        buf.write("\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3")
        buf.write("\u0ba4\7f\2\2\u0ba4\u0c50\3\2\2\2\u0ba5\u0ba6\79\2\2\u0ba6")
        buf.write("\u0ba8\5\u0124\u0093\2\u0ba7\u0ba9\5\u0158\u00ad\2\u0ba8")
        buf.write("\u0ba7\3\2\2\2\u0ba9\u0baa\3\2\2\2\u0baa\u0ba8\3\2\2\2")
        buf.write("\u0baa\u0bab\3\2\2\2\u0bab\u0bae\3\2\2\2\u0bac\u0bad\7")
        buf.write("e\2\2\u0bad\u0baf\5\u0124\u0093\2\u0bae\u0bac\3\2\2\2")
        buf.write("\u0bae\u0baf\3\2\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bb1\7")
        buf.write("f\2\2\u0bb1\u0c50\3\2\2\2\u0bb2\u0bb3\7:\2\2\u0bb3\u0bb4")
        buf.write("\7\5\2\2\u0bb4\u0bb5\5\u0124\u0093\2\u0bb5\u0bb6\7.\2")
        buf.write("\2\u0bb6\u0bb7\5\u014a\u00a6\2\u0bb7\u0bb8\7\6\2\2\u0bb8")
        buf.write("\u0c50\3\2\2\2\u0bb9\u0bba\7\u00f8\2\2\u0bba\u0bc3\7\5")
        buf.write("\2\2\u0bbb\u0bc0\5\u011a\u008e\2\u0bbc\u0bbd\7\3\2\2\u0bbd")
        buf.write("\u0bbf\5\u011a\u008e\2\u0bbe\u0bbc\3\2\2\2\u0bbf\u0bc2")
        buf.write("\3\2\2\2\u0bc0\u0bbe\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1")
        buf.write("\u0bc4\3\2\2\2\u0bc2\u0bc0\3\2\2\2\u0bc3\u0bbb\3\2\2\2")
        buf.write("\u0bc3\u0bc4\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0c50\7")
        buf.write("\6\2\2\u0bc6\u0bc7\7v\2\2\u0bc7\u0bc8\7\5\2\2\u0bc8\u0bcb")
        buf.write("\5\u0124\u0093\2\u0bc9\u0bca\7\u0087\2\2\u0bca\u0bcc\7")
        buf.write("\u00b3\2\2\u0bcb\u0bc9\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc")
        buf.write("\u0bcd\3\2\2\2\u0bcd\u0bce\7\6\2\2\u0bce\u0c50\3\2\2\2")
        buf.write("\u0bcf\u0bd0\7\u0097\2\2\u0bd0\u0bd1\7\5\2\2\u0bd1\u0bd4")
        buf.write("\5\u0124\u0093\2\u0bd2\u0bd3\7\u0087\2\2\u0bd3\u0bd5\7")
        buf.write("\u00b3\2\2\u0bd4\u0bd2\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5")
        buf.write("\u0bd6\3\2\2\2\u0bd6\u0bd7\7\6\2\2\u0bd7\u0c50\3\2\2\2")
        buf.write("\u0bd8\u0bd9\7\u00c8\2\2\u0bd9\u0bda\7\5\2\2\u0bda\u0bdb")
        buf.write("\5\u012a\u0096\2\u0bdb\u0bdc\7\u0089\2\2\u0bdc\u0bdd\5")
        buf.write("\u012a\u0096\2\u0bdd\u0bde\7\6\2\2\u0bde\u0c50\3\2\2\2")
        buf.write("\u0bdf\u0c50\5\u012e\u0098\2\u0be0\u0c50\7\u012b\2\2\u0be1")
        buf.write("\u0be2\5\u0168\u00b5\2\u0be2\u0be3\7\7\2\2\u0be3\u0be4")
        buf.write("\7\u012b\2\2\u0be4\u0c50\3\2\2\2\u0be5\u0be6\7\5\2\2\u0be6")
        buf.write("\u0be9\5\u011a\u008e\2\u0be7\u0be8\7\3\2\2\u0be8\u0bea")
        buf.write("\5\u011a\u008e\2\u0be9\u0be7\3\2\2\2\u0bea\u0beb\3\2\2")
        buf.write("\2\u0beb\u0be9\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u0bed")
        buf.write("\3\2\2\2\u0bed\u0bee\7\6\2\2\u0bee\u0c50\3\2\2\2\u0bef")
        buf.write("\u0bf0\7\5\2\2\u0bf0\u0bf1\5\u0088E\2\u0bf1\u0bf2\7\6")
        buf.write("\2\2\u0bf2\u0c50\3\2\2\2\u0bf3\u0bf4\5\u0166\u00b4\2\u0bf4")
        buf.write("\u0c00\7\5\2\2\u0bf5\u0bf7\5\u00eex\2\u0bf6\u0bf5\3\2")
        buf.write("\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7\u0bf8\3\2\2\2\u0bf8\u0bfd")
        buf.write("\5\u0124\u0093\2\u0bf9\u0bfa\7\3\2\2\u0bfa\u0bfc\5\u0124")
        buf.write("\u0093\2\u0bfb\u0bf9\3\2\2\2\u0bfc\u0bff\3\2\2\2\u0bfd")
        buf.write("\u0bfb\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c01\3\2\2\2")
        buf.write("\u0bff\u0bfd\3\2\2\2\u0c00\u0bf6\3\2\2\2\u0c00\u0c01\3")
        buf.write("\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c09\7\6\2\2\u0c03\u0c04")
        buf.write("\7t\2\2\u0c04\u0c05\7\5\2\2\u0c05\u0c06\7\u011c\2\2\u0c06")
        buf.write("\u0c07\5\u0126\u0094\2\u0c07\u0c08\7\6\2\2\u0c08\u0c0a")
        buf.write("\3\2\2\2\u0c09\u0c03\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a")
        buf.write("\u0c0d\3\2\2\2\u0c0b\u0c0c\7\u00be\2\2\u0c0c\u0c0e\5\u015e")
        buf.write("\u00b0\2\u0c0d\u0c0b\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e")
        buf.write("\u0c50\3\2\2\2\u0c0f\u0c10\5\u016e\u00b8\2\u0c10\u0c11")
        buf.write("\7\22\2\2\u0c11\u0c12\5\u0124\u0093\2\u0c12\u0c50\3\2")
        buf.write("\2\2\u0c13\u0c14\7\5\2\2\u0c14\u0c17\5\u016e\u00b8\2\u0c15")
        buf.write("\u0c16\7\3\2\2\u0c16\u0c18\5\u016e\u00b8\2\u0c17\u0c15")
        buf.write("\3\2\2\2\u0c18\u0c19\3\2\2\2\u0c19\u0c17\3\2\2\2\u0c19")
        buf.write("\u0c1a\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1c\7\6\2\2")
        buf.write("\u0c1c\u0c1d\7\22\2\2\u0c1d\u0c1e\5\u0124\u0093\2\u0c1e")
        buf.write("\u0c50\3\2\2\2\u0c1f\u0c50\5\u016e\u00b8\2\u0c20\u0c21")
        buf.write("\7\5\2\2\u0c21\u0c22\5\u0124\u0093\2\u0c22\u0c23\7\6\2")
        buf.write("\2\u0c23\u0c50\3\2\2\2\u0c24\u0c25\7p\2\2\u0c25\u0c26")
        buf.write("\7\5\2\2\u0c26\u0c27\5\u016e\u00b8\2\u0c27\u0c28\7|\2")
        buf.write("\2\u0c28\u0c29\5\u012a\u0096\2\u0c29\u0c2a\7\6\2\2\u0c2a")
        buf.write("\u0c50\3\2\2\2\u0c2b\u0c2c\t!\2\2\u0c2c\u0c2d\7\5\2\2")
        buf.write("\u0c2d\u0c2e\5\u012a\u0096\2\u0c2e\u0c2f\t\"\2\2\u0c2f")
        buf.write("\u0c32\5\u012a\u0096\2\u0c30\u0c31\t#\2\2\u0c31\u0c33")
        buf.write("\5\u012a\u0096\2\u0c32\u0c30\3\2\2\2\u0c32\u0c33\3\2\2")
        buf.write("\2\u0c33\u0c34\3\2\2\2\u0c34\u0c35\7\6\2\2\u0c35\u0c50")
        buf.write("\3\2\2\2\u0c36\u0c37\7\u0108\2\2\u0c37\u0c39\7\5\2\2\u0c38")
        buf.write("\u0c3a\t$\2\2\u0c39\u0c38\3\2\2\2\u0c39\u0c3a\3\2\2\2")
        buf.write("\u0c3a\u0c3c\3\2\2\2\u0c3b\u0c3d\5\u012a\u0096\2\u0c3c")
        buf.write("\u0c3b\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c3e\3\2\2\2")
        buf.write("\u0c3e\u0c3f\7|\2\2\u0c3f\u0c40\5\u012a\u0096\2\u0c40")
        buf.write("\u0c41\7\6\2\2\u0c41\u0c50\3\2\2\2\u0c42\u0c43\7\u00c0")
        buf.write("\2\2\u0c43\u0c44\7\5\2\2\u0c44\u0c45\5\u012a\u0096\2\u0c45")
        buf.write("\u0c46\7\u00c7\2\2\u0c46\u0c47\5\u012a\u0096\2\u0c47\u0c48")
        buf.write("\7|\2\2\u0c48\u0c4b\5\u012a\u0096\2\u0c49\u0c4a\7x\2\2")
        buf.write("\u0c4a\u0c4c\5\u012a\u0096\2\u0c4b\u0c49\3\2\2\2\u0c4b")
        buf.write("\u0c4c\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c4e\7\6\2\2")
        buf.write("\u0c4e\u0c50\3\2\2\2\u0c4f\u0b97\3\2\2\2\u0c4f\u0b99\3")
        buf.write("\2\2\2\u0c4f\u0ba5\3\2\2\2\u0c4f\u0bb2\3\2\2\2\u0c4f\u0bb9")
        buf.write("\3\2\2\2\u0c4f\u0bc6\3\2\2\2\u0c4f\u0bcf\3\2\2\2\u0c4f")
        buf.write("\u0bd8\3\2\2\2\u0c4f\u0bdf\3\2\2\2\u0c4f\u0be0\3\2\2\2")
        buf.write("\u0c4f\u0be1\3\2\2\2\u0c4f\u0be5\3\2\2\2\u0c4f\u0bef\3")
        buf.write("\2\2\2\u0c4f\u0bf3\3\2\2\2\u0c4f\u0c0f\3\2\2\2\u0c4f\u0c13")
        buf.write("\3\2\2\2\u0c4f\u0c1f\3\2\2\2\u0c4f\u0c20\3\2\2\2\u0c4f")
        buf.write("\u0c24\3\2\2\2\u0c4f\u0c2b\3\2\2\2\u0c4f\u0c36\3\2\2\2")
        buf.write("\u0c4f\u0c42\3\2\2\2\u0c50\u0c5b\3\2\2\2\u0c51\u0c52\f")
        buf.write("\n\2\2\u0c52\u0c53\7\b\2\2\u0c53\u0c54\5\u012a\u0096\2")
        buf.write("\u0c54\u0c55\7\t\2\2\u0c55\u0c5a\3\2\2\2\u0c56\u0c57\f")
        buf.write("\b\2\2\u0c57\u0c58\7\7\2\2\u0c58\u0c5a\5\u016e\u00b8\2")
        buf.write("\u0c59\u0c51\3\2\2\2\u0c59\u0c56\3\2\2\2\u0c5a\u0c5d\3")
        buf.write("\2\2\2\u0c5b\u0c59\3\2\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c\u012d")
        buf.write("\3\2\2\2\u0c5d\u0c5b\3\2\2\2\u0c5e\u0c6b\7\u00b2\2\2\u0c5f")
        buf.write("\u0c6b\5\u013a\u009e\2\u0c60\u0c61\5\u016e\u00b8\2\u0c61")
        buf.write("\u0c62\7\u0134\2\2\u0c62\u0c6b\3\2\2\2\u0c63\u0c6b\5\u0174")
        buf.write("\u00bb\2\u0c64\u0c6b\5\u0138\u009d\2\u0c65\u0c67\7\u0134")
        buf.write("\2\2\u0c66\u0c65\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c66")
        buf.write("\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69\u0c6b\3\2\2\2\u0c6a")
        buf.write("\u0c5e\3\2\2\2\u0c6a\u0c5f\3\2\2\2\u0c6a\u0c60\3\2\2\2")
        buf.write("\u0c6a\u0c63\3\2\2\2\u0c6a\u0c64\3\2\2\2\u0c6a\u0c66\3")
        buf.write("\2\2\2\u0c6b\u012f\3\2\2\2\u0c6c\u0c75\5\u0132\u009a\2")
        buf.write("\u0c6d\u0c75\7\u0123\2\2\u0c6e\u0c75\7\u0124\2\2\u0c6f")
        buf.write("\u0c75\7\u0125\2\2\u0c70\u0c75\7\u0126\2\2\u0c71\u0c75")
        buf.write("\7\u0127\2\2\u0c72\u0c75\7\u0128\2\2\u0c73\u0c75\7\u0122")
        buf.write("\2\2\u0c74\u0c6c\3\2\2\2\u0c74\u0c6d\3\2\2\2\u0c74\u0c6e")
        buf.write("\3\2\2\2\u0c74\u0c6f\3\2\2\2\u0c74\u0c70\3\2\2\2\u0c74")
        buf.write("\u0c71\3\2\2\2\u0c74\u0c72\3\2\2\2\u0c74\u0c73\3\2\2\2")
        buf.write("\u0c75\u0131\3\2\2\2\u0c76\u0c77\t%\2\2\u0c77\u0133\3")
        buf.write("\2\2\2\u0c78\u0c79\t&\2\2\u0c79\u0135\3\2\2\2\u0c7a\u0c7b")
        buf.write("\t\'\2\2\u0c7b\u0137\3\2\2\2\u0c7c\u0c7d\t(\2\2\u0c7d")
        buf.write("\u0139\3\2\2\2\u0c7e\u0c81\7\u0091\2\2\u0c7f\u0c82\5\u013c")
        buf.write("\u009f\2\u0c80\u0c82\5\u0140\u00a1\2\u0c81\u0c7f\3\2\2")
        buf.write("\2\u0c81\u0c80\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u013b")
        buf.write("\3\2\2\2\u0c83\u0c85\5\u013e\u00a0\2\u0c84\u0c86\5\u0142")
        buf.write("\u00a2\2\u0c85\u0c84\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86")
        buf.write("\u013d\3\2\2\2\u0c87\u0c88\5\u0144\u00a3\2\u0c88\u0c89")
        buf.write("\5\u0146\u00a4\2\u0c89\u0c8b\3\2\2\2\u0c8a\u0c87\3\2\2")
        buf.write("\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u0c8a\3\2\2\2\u0c8c\u0c8d")
        buf.write("\3\2\2\2\u0c8d\u013f\3\2\2\2\u0c8e\u0c91\5\u0142\u00a2")
        buf.write("\2\u0c8f\u0c92\5\u013e\u00a0\2\u0c90\u0c92\5\u0142\u00a2")
        buf.write("\2\u0c91\u0c8f\3\2\2\2\u0c91\u0c90\3\2\2\2\u0c91\u0c92")
        buf.write("\3\2\2\2\u0c92\u0141\3\2\2\2\u0c93\u0c94\5\u0144\u00a3")
        buf.write("\2\u0c94\u0c95\5\u0146\u00a4\2\u0c95\u0c96\7\u0102\2\2")
        buf.write("\u0c96\u0c97\5\u0146\u00a4\2\u0c97\u0143\3\2\2\2\u0c98")
        buf.write("\u0c9a\t)\2\2\u0c99\u0c98\3\2\2\2\u0c99\u0c9a\3\2\2\2")
        buf.write("\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9e\t\32\2\2\u0c9c\u0c9e")
        buf.write("\7\u0134\2\2\u0c9d\u0c99\3\2\2\2\u0c9d\u0c9c\3\2\2\2\u0c9e")
        buf.write("\u0145\3\2\2\2\u0c9f\u0ca7\7X\2\2\u0ca0\u0ca7\7\u0085")
        buf.write("\2\2\u0ca1\u0ca7\7\u00aa\2\2\u0ca2\u0ca7\7\u00ab\2\2\u0ca3")
        buf.write("\u0ca7\7\u00e5\2\2\u0ca4\u0ca7\7\u011f\2\2\u0ca5\u0ca7")
        buf.write("\5\u016e\u00b8\2\u0ca6\u0c9f\3\2\2\2\u0ca6\u0ca0\3\2\2")
        buf.write("\2\u0ca6\u0ca1\3\2\2\2\u0ca6\u0ca2\3\2\2\2\u0ca6\u0ca3")
        buf.write("\3\2\2\2\u0ca6\u0ca4\3\2\2\2\u0ca6\u0ca5\3\2\2\2\u0ca7")
        buf.write("\u0147\3\2\2\2\u0ca8\u0cac\7v\2\2\u0ca9\u0caa\7%\2\2\u0caa")
        buf.write("\u0cac\5\u016a\u00b6\2\u0cab\u0ca8\3\2\2\2\u0cab\u0ca9")
        buf.write("\3\2\2\2\u0cac\u0149\3\2\2\2\u0cad\u0cae\7-\2\2\u0cae")
        buf.write("\u0caf\7\u0125\2\2\u0caf\u0cb0\5\u014a\u00a6\2\u0cb0\u0cb1")
        buf.write("\7\u0127\2\2\u0cb1\u0cd0\3\2\2\2\u0cb2\u0cb3\7\u00a7\2")
        buf.write("\2\u0cb3\u0cb4\7\u0125\2\2\u0cb4\u0cb5\5\u014a\u00a6\2")
        buf.write("\u0cb5\u0cb6\7\3\2\2\u0cb6\u0cb7\5\u014a\u00a6\2\u0cb7")
        buf.write("\u0cb8\7\u0127\2\2\u0cb8\u0cd0\3\2\2\2\u0cb9\u0cc0\7\u00f8")
        buf.write("\2\2\u0cba\u0cbc\7\u0125\2\2\u0cbb\u0cbd\5\u0154\u00ab")
        buf.write("\2\u0cbc\u0cbb\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0cbe")
        buf.write("\3\2\2\2\u0cbe\u0cc1\7\u0127\2\2\u0cbf\u0cc1\7\u0123\2")
        buf.write("\2\u0cc0\u0cba\3\2\2\2\u0cc0\u0cbf\3\2\2\2\u0cc1\u0cd0")
        buf.write("\3\2\2\2\u0cc2\u0ccd\5\u016e\u00b8\2\u0cc3\u0cc4\7\5\2")
        buf.write("\2\u0cc4\u0cc9\7\u0138\2\2\u0cc5\u0cc6\7\3\2\2\u0cc6\u0cc8")
        buf.write("\7\u0138\2\2\u0cc7\u0cc5\3\2\2\2\u0cc8\u0ccb\3\2\2\2\u0cc9")
        buf.write("\u0cc7\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0ccc\3\2\2\2")
        buf.write("\u0ccb\u0cc9\3\2\2\2\u0ccc\u0cce\7\6\2\2\u0ccd\u0cc3\3")
        buf.write("\2\2\2\u0ccd\u0cce\3\2\2\2\u0cce\u0cd0\3\2\2\2\u0ccf\u0cad")
        buf.write("\3\2\2\2\u0ccf\u0cb2\3\2\2\2\u0ccf\u0cb9\3\2\2\2\u0ccf")
        buf.write("\u0cc2\3\2\2\2\u0cd0\u014b\3\2\2\2\u0cd1\u0cd6\5\u014e")
        buf.write("\u00a8\2\u0cd2\u0cd3\7\3\2\2\u0cd3\u0cd5\5\u014e\u00a8")
        buf.write("\2\u0cd4\u0cd2\3\2\2\2\u0cd5\u0cd8\3\2\2\2\u0cd6\u0cd4")
        buf.write("\3\2\2\2\u0cd6\u0cd7\3\2\2\2\u0cd7\u014d\3\2\2\2\u0cd8")
        buf.write("\u0cd6\3\2\2\2\u0cd9\u0cda\5\u0114\u008b\2\u0cda\u0cdd")
        buf.write("\5\u014a\u00a6\2\u0cdb\u0cdc\7\u00b1\2\2\u0cdc\u0cde\7")
        buf.write("\u00b2\2\2\u0cdd\u0cdb\3\2\2\2\u0cdd\u0cde\3\2\2\2\u0cde")
        buf.write("\u0ce0\3\2\2\2\u0cdf\u0ce1\5\u0086D\2\u0ce0\u0cdf\3\2")
        buf.write("\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce3\3\2\2\2\u0ce2\u0ce4")
        buf.write("\5\u0148\u00a5\2\u0ce3\u0ce2\3\2\2\2\u0ce3\u0ce4\3\2\2")
        buf.write("\2\u0ce4\u014f\3\2\2\2\u0ce5\u0cea\5\u0152\u00aa\2\u0ce6")
        buf.write("\u0ce7\7\3\2\2\u0ce7\u0ce9\5\u0152\u00aa\2\u0ce8\u0ce6")
        buf.write("\3\2\2\2\u0ce9\u0cec\3\2\2\2\u0cea\u0ce8\3\2\2\2\u0cea")
        buf.write("\u0ceb\3\2\2\2\u0ceb\u0151\3\2\2\2\u0cec\u0cea\3\2\2\2")
        buf.write("\u0ced\u0cee\5\u016a\u00b6\2\u0cee\u0cf1\5\u014a\u00a6")
        buf.write("\2\u0cef\u0cf0\7\u00b1\2\2\u0cf0\u0cf2\7\u00b2\2\2\u0cf1")
        buf.write("\u0cef\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf4\3\2\2\2")
        buf.write("\u0cf3\u0cf5\5\u0086D\2\u0cf4\u0cf3\3\2\2\2\u0cf4\u0cf5")
        buf.write("\3\2\2\2\u0cf5\u0153\3\2\2\2\u0cf6\u0cfb\5\u0156\u00ac")
        buf.write("\2\u0cf7\u0cf8\7\3\2\2\u0cf8\u0cfa\5\u0156\u00ac\2\u0cf9")
        buf.write("\u0cf7\3\2\2\2\u0cfa\u0cfd\3\2\2\2\u0cfb\u0cf9\3\2\2\2")
        buf.write("\u0cfb\u0cfc\3\2\2\2\u0cfc\u0155\3\2\2\2\u0cfd\u0cfb\3")
        buf.write("\2\2\2\u0cfe\u0cff\5\u016e\u00b8\2\u0cff\u0d00\7\4\2\2")
        buf.write("\u0d00\u0d03\5\u014a\u00a6\2\u0d01\u0d02\7\u00b1\2\2\u0d02")
        buf.write("\u0d04\7\u00b2\2\2\u0d03\u0d01\3\2\2\2\u0d03\u0d04\3\2")
        buf.write("\2\2\u0d04\u0d06\3\2\2\2\u0d05\u0d07\5\u0086D\2\u0d06")
        buf.write("\u0d05\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0157\3\2\2\2")
        buf.write("\u0d08\u0d09\7\u011b\2\2\u0d09\u0d0a\5\u0124\u0093\2\u0d0a")
        buf.write("\u0d0b\7\u0101\2\2\u0d0b\u0d0c\5\u0124\u0093\2\u0d0c\u0159")
        buf.write("\3\2\2\2\u0d0d\u0d0e\7\u011d\2\2\u0d0e\u0d13\5\u015c\u00af")
        buf.write("\2\u0d0f\u0d10\7\3\2\2\u0d10\u0d12\5\u015c\u00af\2\u0d11")
        buf.write("\u0d0f\3\2\2\2\u0d12\u0d15\3\2\2\2\u0d13\u0d11\3\2\2\2")
        buf.write("\u0d13\u0d14\3\2\2\2\u0d14\u015b\3\2\2\2\u0d15\u0d13\3")
        buf.write("\2\2\2\u0d16\u0d17\5\u016a\u00b6\2\u0d17\u0d18\7.\2\2")
        buf.write("\u0d18\u0d19\5\u015e\u00b0\2\u0d19\u015d\3\2\2\2\u0d1a")
        buf.write("\u0d49\5\u016a\u00b6\2\u0d1b\u0d1c\7\5\2\2\u0d1c\u0d1d")
        buf.write("\5\u016a\u00b6\2\u0d1d\u0d1e\7\6\2\2\u0d1e\u0d49\3\2\2")
        buf.write("\2\u0d1f\u0d42\7\5\2\2\u0d20\u0d21\7>\2\2\u0d21\u0d22")
        buf.write("\7\66\2\2\u0d22\u0d27\5\u0124\u0093\2\u0d23\u0d24\7\3")
        buf.write("\2\2\u0d24\u0d26\5\u0124\u0093\2\u0d25\u0d23\3\2\2\2\u0d26")
        buf.write("\u0d29\3\2\2\2\u0d27\u0d25\3\2\2\2\u0d27\u0d28\3\2\2\2")
        buf.write("\u0d28\u0d43\3\2\2\2\u0d29\u0d27\3\2\2\2\u0d2a\u0d2b\t")
        buf.write("*\2\2\u0d2b\u0d2c\7\66\2\2\u0d2c\u0d31\5\u0124\u0093\2")
        buf.write("\u0d2d\u0d2e\7\3\2\2\u0d2e\u0d30\5\u0124\u0093\2\u0d2f")
        buf.write("\u0d2d\3\2\2\2\u0d30\u0d33\3\2\2\2\u0d31\u0d2f\3\2\2\2")
        buf.write("\u0d31\u0d32\3\2\2\2\u0d32\u0d35\3\2\2\2\u0d33\u0d31\3")
        buf.write("\2\2\2\u0d34\u0d2a\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d40")
        buf.write("\3\2\2\2\u0d36\u0d37\t+\2\2\u0d37\u0d38\7\66\2\2\u0d38")
        buf.write("\u0d3d\5\u00be`\2\u0d39\u0d3a\7\3\2\2\u0d3a\u0d3c\5\u00be")
        buf.write("`\2\u0d3b\u0d39\3\2\2\2\u0d3c\u0d3f\3\2\2\2\u0d3d\u0d3b")
        buf.write("\3\2\2\2\u0d3d\u0d3e\3\2\2\2\u0d3e\u0d41\3\2\2\2\u0d3f")
        buf.write("\u0d3d\3\2\2\2\u0d40\u0d36\3\2\2\2\u0d40\u0d41\3\2\2\2")
        buf.write("\u0d41\u0d43\3\2\2\2\u0d42\u0d20\3\2\2\2\u0d42\u0d34\3")
        buf.write("\2\2\2\u0d43\u0d45\3\2\2\2\u0d44\u0d46\5\u0160\u00b1\2")
        buf.write("\u0d45\u0d44\3\2\2\2\u0d45\u0d46\3\2\2\2\u0d46\u0d47\3")
        buf.write("\2\2\2\u0d47\u0d49\7\6\2\2\u0d48\u0d1a\3\2\2\2\u0d48\u0d1b")
        buf.write("\3\2\2\2\u0d48\u0d1f\3\2\2\2\u0d49\u015f\3\2\2\2\u0d4a")
        buf.write("\u0d4b\7\u00cf\2\2\u0d4b\u0d5b\5\u0162\u00b2\2\u0d4c\u0d4d")
        buf.write("\7\u00e3\2\2\u0d4d\u0d5b\5\u0162\u00b2\2\u0d4e\u0d4f\7")
        buf.write("\u00cf\2\2\u0d4f\u0d50\7\62\2\2\u0d50\u0d51\5\u0162\u00b2")
        buf.write("\2\u0d51\u0d52\7)\2\2\u0d52\u0d53\5\u0162\u00b2\2\u0d53")
        buf.write("\u0d5b\3\2\2\2\u0d54\u0d55\7\u00e3\2\2\u0d55\u0d56\7\62")
        buf.write("\2\2\u0d56\u0d57\5\u0162\u00b2\2\u0d57\u0d58\7)\2\2\u0d58")
        buf.write("\u0d59\5\u0162\u00b2\2\u0d59\u0d5b\3\2\2\2\u0d5a\u0d4a")
        buf.write("\3\2\2\2\u0d5a\u0d4c\3\2\2\2\u0d5a\u0d4e\3\2\2\2\u0d5a")
        buf.write("\u0d54\3\2\2\2\u0d5b\u0161\3\2\2\2\u0d5c\u0d5d\7\u010d")
        buf.write("\2\2\u0d5d\u0d64\t,\2\2\u0d5e\u0d5f\7P\2\2\u0d5f\u0d64")
        buf.write("\7\u00e2\2\2\u0d60\u0d61\5\u0124\u0093\2\u0d61\u0d62\t")
        buf.write(",\2\2\u0d62\u0d64\3\2\2\2\u0d63\u0d5c\3\2\2\2\u0d63\u0d5e")
        buf.write("\3\2\2\2\u0d63\u0d60\3\2\2\2\u0d64\u0163\3\2\2\2\u0d65")
        buf.write("\u0d6a\5\u0168\u00b5\2\u0d66\u0d67\7\3\2\2\u0d67\u0d69")
        buf.write("\5\u0168\u00b5\2\u0d68\u0d66\3\2\2\2\u0d69\u0d6c\3\2\2")
        buf.write("\2\u0d6a\u0d68\3\2\2\2\u0d6a\u0d6b\3\2\2\2\u0d6b\u0165")
        buf.write("\3\2\2\2\u0d6c\u0d6a\3\2\2\2\u0d6d\u0d72\5\u0168\u00b5")
        buf.write("\2\u0d6e\u0d72\7t\2\2\u0d6f\u0d72\7\u009b\2\2\u0d70\u0d72")
        buf.write("\7\u00dc\2\2\u0d71\u0d6d\3\2\2\2\u0d71\u0d6e\3\2\2\2\u0d71")
        buf.write("\u0d6f\3\2\2\2\u0d71\u0d70\3\2\2\2\u0d72\u0167\3\2\2\2")
        buf.write("\u0d73\u0d78\5\u016e\u00b8\2\u0d74\u0d75\7\7\2\2\u0d75")
        buf.write("\u0d77\5\u016e\u00b8\2\u0d76\u0d74\3\2\2\2\u0d77\u0d7a")
        buf.write("\3\2\2\2\u0d78\u0d76\3\2\2\2\u0d78\u0d79\3\2\2\2\u0d79")
        buf.write("\u0169\3\2\2\2\u0d7a\u0d78\3\2\2\2\u0d7b\u0d7c\5\u016e")
        buf.write("\u00b8\2\u0d7c\u0d7d\5\u016c\u00b7\2\u0d7d\u016b\3\2\2")
        buf.write("\2\u0d7e\u0d7f\7\u012a\2\2\u0d7f\u0d81\5\u016e\u00b8\2")
        buf.write("\u0d80\u0d7e\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d80\3")
        buf.write("\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d86\3\2\2\2\u0d84\u0d86")
        buf.write("\3\2\2\2\u0d85\u0d80\3\2\2\2\u0d85\u0d84\3\2\2\2\u0d86")
        buf.write("\u016d\3\2\2\2\u0d87\u0d8b\5\u0170\u00b9\2\u0d88\u0d89")
        buf.write("\6\u00b8\24\2\u0d89\u0d8b\5\u017a\u00be\2\u0d8a\u0d87")
        buf.write("\3\2\2\2\u0d8a\u0d88\3\2\2\2\u0d8b\u016f\3\2\2\2\u0d8c")
        buf.write("\u0d93\7\u013d\2\2\u0d8d\u0d93\5\u0172\u00ba\2\u0d8e\u0d8f")
        buf.write("\6\u00b9\25\2\u0d8f\u0d93\5\u0178\u00bd\2\u0d90\u0d91")
        buf.write("\6\u00b9\26\2\u0d91\u0d93\5\u017c\u00bf\2\u0d92\u0d8c")
        buf.write("\3\2\2\2\u0d92\u0d8d\3\2\2\2\u0d92\u0d8e\3\2\2\2\u0d92")
        buf.write("\u0d90\3\2\2\2\u0d93\u0171\3\2\2\2\u0d94\u0d95\7\u013e")
        buf.write("\2\2\u0d95\u0173\3\2\2\2\u0d96\u0d98\6\u00bb\27\2\u0d97")
        buf.write("\u0d99\7\u012a\2\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2")
        buf.write("\2\2\u0d99\u0d9a\3\2\2\2\u0d9a\u0dbe\7\u0139\2\2\u0d9b")
        buf.write("\u0d9d\6\u00bb\30\2\u0d9c\u0d9e\7\u012a\2\2\u0d9d\u0d9c")
        buf.write("\3\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0d9f\3\2\2\2\u0d9f")
        buf.write("\u0dbe\7\u013a\2\2\u0da0\u0da2\6\u00bb\31\2\u0da1\u0da3")
        buf.write("\7\u012a\2\2\u0da2\u0da1\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3")
        buf.write("\u0da4\3\2\2\2\u0da4\u0dbe\t-\2\2\u0da5\u0da7\7\u012a")
        buf.write("\2\2\u0da6\u0da5\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u0da8")
        buf.write("\3\2\2\2\u0da8\u0dbe\7\u0138\2\2\u0da9\u0dab\7\u012a\2")
        buf.write("\2\u0daa\u0da9\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0dac")
        buf.write("\3\2\2\2\u0dac\u0dbe\7\u0135\2\2\u0dad\u0daf\7\u012a\2")
        buf.write("\2\u0dae\u0dad\3\2\2\2\u0dae\u0daf\3\2\2\2\u0daf\u0db0")
        buf.write("\3\2\2\2\u0db0\u0dbe\7\u0136\2\2\u0db1\u0db3\7\u012a\2")
        buf.write("\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db4")
        buf.write("\3\2\2\2\u0db4\u0dbe\7\u0137\2\2\u0db5\u0db7\7\u012a\2")
        buf.write("\2\u0db6\u0db5\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db8")
        buf.write("\3\2\2\2\u0db8\u0dbe\7\u013b\2\2\u0db9\u0dbb\7\u012a\2")
        buf.write("\2\u0dba\u0db9\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0dbc")
        buf.write("\3\2\2\2\u0dbc\u0dbe\7\u013c\2\2\u0dbd\u0d96\3\2\2\2\u0dbd")
        buf.write("\u0d9b\3\2\2\2\u0dbd\u0da0\3\2\2\2\u0dbd\u0da6\3\2\2\2")
        buf.write("\u0dbd\u0daa\3\2\2\2\u0dbd\u0dae\3\2\2\2\u0dbd\u0db2\3")
        buf.write("\2\2\2\u0dbd\u0db6\3\2\2\2\u0dbd\u0dba\3\2\2\2\u0dbe\u0175")
        buf.write("\3\2\2\2\u0dbf\u0dc0\7\u010b\2\2\u0dc0\u0dc7\5\u014a\u00a6")
        buf.write("\2\u0dc1\u0dc7\5\u0086D\2\u0dc2\u0dc7\5\u0148\u00a5\2")
        buf.write("\u0dc3\u0dc4\t.\2\2\u0dc4\u0dc5\7\u00b1\2\2\u0dc5\u0dc7")
        buf.write("\7\u00b2\2\2\u0dc6\u0dbf\3\2\2\2\u0dc6\u0dc1\3\2\2\2\u0dc6")
        buf.write("\u0dc2\3\2\2\2\u0dc6\u0dc3\3\2\2\2\u0dc7\u0177\3\2\2\2")
        buf.write("\u0dc8\u0dc9\t/\2\2\u0dc9\u0179\3\2\2\2\u0dca\u0dcb\t")
        buf.write("\60\2\2\u0dcb\u017b\3\2\2\2\u0dcc\u0dcd\t\61\2\2\u0dcd")
        buf.write("\u017d\3\2\2\2\u01d5\u0181\u018b\u018f\u0192\u019b\u019e")
        buf.write("\u01a1\u01a5\u01a8\u01ab\u01af\u01b3\u01b6\u01b9\u01bd")
        buf.write("\u01c1\u01c4\u01c9\u01cd\u01d1\u01d4\u01d7\u01dc\u01df")
        buf.write("\u01e3\u01e9\u01ec\u01ef\u01f3\u01f8\u01fc\u0200\u0203")
        buf.write("\u0207\u020b\u0214\u021c\u021f\u022a\u0232\u0237\u023b")
        buf.write("\u0240\u0244\u024b\u0256\u0259\u025f\u0263\u0266\u026d")
        buf.write("\u026f\u0279\u0280\u0284\u0288\u028d\u0292\u0295\u029c")
        buf.write("\u02a4\u02a9\u02b2\u02b7\u02be\u02d0\u02d7\u02e0\u02e6")
        buf.write("\u02ed\u02f6\u02fe\u0302\u0308\u0310\u0320\u0339\u033e")
        buf.write("\u0346\u034e\u0350\u0364\u0368\u036e\u0371\u0374\u037b")
        buf.write("\u0380\u0383\u038a\u0396\u039f\u03a1\u03a5\u03a8\u03af")
        buf.write("\u03ba\u03bc\u03c4\u03c9\u03cc\u03d2\u03dd\u041d\u0426")
        buf.write("\u042a\u0430\u0434\u0439\u043f\u044b\u0453\u0459\u0466")
        buf.write("\u046b\u047b\u0482\u0486\u048c\u049b\u049f\u04a5\u04ab")
        buf.write("\u04ae\u04b1\u04b7\u04bb\u04c3\u04c5\u04ce\u04d1\u04da")
        buf.write("\u04df\u04e5\u04ec\u04ef\u04f5\u0500\u0503\u0507\u050c")
        buf.write("\u0511\u0518\u051b\u051e\u0525\u052a\u0533\u053b\u0541")
        buf.write("\u0544\u0547\u054d\u0551\u0555\u0559\u055b\u0563\u056b")
        buf.write("\u0571\u0577\u057a\u057e\u0581\u0585\u059e\u05a1\u05a5")
        buf.write("\u05ab\u05ae\u05b1\u05b7\u05bf\u05c4\u05ca\u05d0\u05dc")
        buf.write("\u05df\u05e6\u05ed\u05f5\u05f8\u0600\u0604\u060b\u067f")
        buf.write("\u0687\u068f\u0698\u06a2\u06a6\u06a9\u06af\u06b5\u06c1")
        buf.write("\u06cd\u06d2\u06db\u06e3\u06ea\u06ec\u06f1\u06f5\u06fa")
        buf.write("\u06ff\u0704\u0707\u070c\u0710\u0715\u0717\u071b\u0724")
        buf.write("\u072c\u0735\u073c\u0745\u074a\u074d\u0760\u0762\u076b")
        buf.write("\u0772\u0775\u077c\u0780\u0786\u078e\u0799\u07a4\u07ab")
        buf.write("\u07b1\u07be\u07c5\u07cc\u07d8\u07e0\u07e6\u07e9\u07f2")
        buf.write("\u07f5\u07fe\u0801\u080a\u080d\u0816\u0819\u081c\u0821")
        buf.write("\u0823\u082f\u0836\u083d\u0840\u0842\u084a\u084e\u0852")
        buf.write("\u0858\u085c\u0864\u0868\u086b\u086e\u0871\u0875\u0879")
        buf.write("\u087c\u0880\u0885\u0889\u088c\u088f\u0892\u0894\u08a0")
        buf.write("\u08a3\u08a7\u08b1\u08b5\u08b7\u08ba\u08be\u08c4\u08c8")
        buf.write("\u08d3\u08dd\u08e9\u08f8\u08fd\u0904\u0914\u0919\u0926")
        buf.write("\u092b\u0933\u0939\u093d\u0946\u0955\u095a\u0966\u096b")
        buf.write("\u0973\u0976\u097a\u0988\u0995\u099a\u099e\u09a1\u09a6")
        buf.write("\u09af\u09b2\u09b7\u09be\u09c1\u09c9\u09d0\u09d7\u09da")
        buf.write("\u09df\u09e2\u09e7\u09eb\u09ee\u09f1\u09f7\u09fc\u0a01")
        buf.write("\u0a13\u0a15\u0a18\u0a23\u0a2c\u0a33\u0a3b\u0a42\u0a46")
        buf.write("\u0a4e\u0a56\u0a5e\u0a64\u0a6c\u0a78\u0a7b\u0a81\u0a85")
        buf.write("\u0a87\u0a90\u0a9c\u0a9e\u0aa5\u0aac\u0ab2\u0ab8\u0aba")
        buf.write("\u0ac1\u0ac9\u0acf\u0ad6\u0adc\u0ae0\u0ae2\u0ae9\u0af2")
        buf.write("\u0aff\u0b04\u0b08\u0b16\u0b18\u0b20\u0b22\u0b26\u0b2e")
        buf.write("\u0b37\u0b3d\u0b45\u0b4a\u0b56\u0b5b\u0b5e\u0b64\u0b68")
        buf.write("\u0b6d\u0b72\u0b77\u0b7d\u0b92\u0b94\u0b9d\u0ba1\u0baa")
        buf.write("\u0bae\u0bc0\u0bc3\u0bcb\u0bd4\u0beb\u0bf6\u0bfd\u0c00")
        buf.write("\u0c09\u0c0d\u0c19\u0c32\u0c39\u0c3c\u0c4b\u0c4f\u0c59")
        buf.write("\u0c5b\u0c68\u0c6a\u0c74\u0c81\u0c85\u0c8c\u0c91\u0c99")
        buf.write("\u0c9d\u0ca6\u0cab\u0cbc\u0cc0\u0cc9\u0ccd\u0ccf\u0cd6")
        buf.write("\u0cdd\u0ce0\u0ce3\u0cea\u0cf1\u0cf4\u0cfb\u0d03\u0d06")
        buf.write("\u0d13\u0d27\u0d31\u0d34\u0d3d\u0d40\u0d42\u0d45\u0d48")
        buf.write("\u0d5a\u0d63\u0d6a\u0d71\u0d78\u0d82\u0d85\u0d8a\u0d92")
        buf.write("\u0d98\u0d9d\u0da2\u0da6\u0daa\u0dae\u0db2\u0db6\u0dba")
        buf.write("\u0dbd\u0dc6")
        return buf.getvalue()


class fugue_sqlParser ( Parser ):

    grammarFileName = "fugue_sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "':'", "'('", "')'", "'.'", "'['", 
                     "']'", "'{'", "'}'", "'true'", "'false'", "'null'", 
                     "';'", "'/*+'", "'*/'", "'->'", "'HASH'", "'RAND'", 
                     "'EVEN'", "'PRESORT'", "'PERSIST'", "'BROADCAST'", 
                     "'PARAMS'", "'PROCESS'", "'OUTPUT'", "'ROWCOUNT'", 
                     "'CONCURRENCY'", "'PREPARTITION'", "'ZIP'", "'PRINT'", 
                     "'TITLE'", "':='", "'??'", "'ADD'", "'AFTER'", "'ALL'", 
                     "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", 
                     "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
                     "'BETWEEN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", 
                     "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", 
                     "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", 
                     "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
                     "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", 
                     "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'DATA'", "'DATABASE'", "<INVALID>", "'DAY'", "'DBPROPERTIES'", 
                     "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
                     "'DISTRIBUTE'", "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", 
                     "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", "'EXISTS'", 
                     "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", 
                     "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", 
                     "'FILEFORMAT'", "'FIRST'", "'FOLLOWING'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", "'FULL'", 
                     "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", 
                     "'GROUP'", "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", 
                     "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", 
                     "'INNER'", "'INPATH'", "'INPUTFORMAT'", "'INSERT'", 
                     "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITEMS'", 
                     "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", "'LAZY'", 
                     "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINES'", 
                     "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", 
                     "'LOCKS'", "'LOGICAL'", "'MACRO'", "'MAP'", "'MATCHED'", 
                     "'MERGE'", "'MINUTE'", "'MONTH'", "'MSCK'", "'NAMESPACE'", 
                     "'NAMESPACES'", "'NATURAL'", "'NO'", "<INVALID>", "'NULL'", 
                     "'NULLS'", "'OF'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", 
                     "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", 
                     "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
                     "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENT'", 
                     "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", 
                     "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", 
                     "'QUERY'", "'RANGE'", "'RECORDREADER'", "'RECORDWRITER'", 
                     "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
                     "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", "'RESTRICT'", 
                     "'REVOKE'", "'RIGHT'", "<INVALID>", "'ROLE'", "'ROLES'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEMA'", 
                     "'SECOND'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
                     "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", "'SORT'", 
                     "'SORTED'", "'START'", "'STATISTICS'", "'STORED'", 
                     "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TO'", "'TOUCH'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNSET'", "'UPDATE'", "'USE'", 
                     "'USER'", "'USING'", "'VALUES'", "'VIEW'", "'VIEWS'", 
                     "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'YEAR'", 
                     "'='", "'=='", "'<=>'", "'<>'", "'!='", "'<'", "<INVALID>", 
                     "'>'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'DIV'", "'~'", "'&'", "'|'", "'||'", "'^'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "HASH", "RAND", "EVEN", "PRESORT", "PERSIST", 
                      "BROADCAST", "PARAMS", "PROCESS", "OUTPUT", "ROWCOUNT", 
                      "CONCURRENCY", "PREPARTITION", "ZIP", "PRINT", "TITLE", 
                      "COLONEQUAL", "CHECKPOINT", "ADD", "AFTER", "ALL", 
                      "ALTER", "ANALYZE", "AND", "ANTI", "ANY", "ARCHIVE", 
                      "ARRAY", "AS", "ASC", "AT", "AUTHORIZATION", "BETWEEN", 
                      "BOTH", "BUCKET", "BUCKETS", "BY", "CACHE", "CASCADE", 
                      "CASE", "CAST", "CHANGE", "CHECK", "CLEAR", "CLUSTER", 
                      "CLUSTERED", "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", 
                      "COLUMNS", "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", 
                      "COMPUTE", "CONCATENATE", "CONSTRAINT", "COST", "CREATE", 
                      "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATABASE", 
                      "DATABASES", "DAY", "DBPROPERTIES", "DEFINED", "DELETE", 
                      "DELIMITED", "DESC", "DESCRIBE", "DFS", "DIRECTORIES", 
                      "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DROP", "ELSE", 
                      "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", 
                      "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL", 
                      "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT", 
                      "FIRST", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", 
                      "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", 
                      "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", 
                      "HOUR", "IF", "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", 
                      "INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", 
                      "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", "KEYS", 
                      "LAST", "LATERAL", "LAZY", "LEADING", "LEFT", "LIKE", 
                      "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", 
                      "LOCK", "LOCKS", "LOGICAL", "MACRO", "MAP", "MATCHED", 
                      "MERGE", "MINUTE", "MONTH", "MSCK", "NAMESPACE", "NAMESPACES", 
                      "NATURAL", "NO", "NOT", "NULL", "NULLS", "OF", "ON", 
                      "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", "OUT", 
                      "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", "OVERLAY", 
                      "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", 
                      "PERCENTLIT", "PIVOT", "PLACING", "POSITION", "PRECEDING", 
                      "PRIMARY", "PRINCIPALS", "PROPERTIES", "PURGE", "QUERY", 
                      "RANGE", "RECORDREADER", "RECORDWRITER", "RECOVER", 
                      "REDUCE", "REFERENCES", "REFRESH", "RENAME", "REPAIR", 
                      "REPLACE", "RESET", "RESTRICT", "REVOKE", "RIGHT", 
                      "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", 
                      "ROWS", "SCHEMA", "SECOND", "SELECT", "SEMI", "SEPARATED", 
                      "SERDE", "SERDEPROPERTIES", "SESSION_USER", "SET", 
                      "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", "SORT", 
                      "SORTED", "START", "STATISTICS", "STORED", "STRATIFY", 
                      "STRUCT", "SUBSTR", "SUBSTRING", "TABLE", "TABLES", 
                      "TABLESAMPLE", "TBLPROPERTIES", "TEMPORARY", "TERMINATED", 
                      "THEN", "TO", "TOUCH", "TRAILING", "TRANSACTION", 
                      "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", "UNION", 
                      "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", "UPDATE", 
                      "USE", "USER", "USING", "VALUES", "VIEW", "VIEWS", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "YEAR", "EQUAL", 
                      "DOUBLEEQUAL", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_fugueLanguage = 0
    RULE_fugueSingleStatement = 1
    RULE_fugueSingleTask = 2
    RULE_fugueNestableTask = 3
    RULE_fugueNestableTaskNoSelect = 4
    RULE_fugueNestableTaskCollectionNoSelect = 5
    RULE_fugueSelectTask = 6
    RULE_fugueTransformTask = 7
    RULE_fugueProcessTask = 8
    RULE_fugueZipTask = 9
    RULE_fugueCreateTask = 10
    RULE_fugueCreateDataTask = 11
    RULE_fugueOutputTask = 12
    RULE_fuguePrintTask = 13
    RULE_fuguePersist = 14
    RULE_fugueBroadcast = 15
    RULE_fugueDataFrames = 16
    RULE_fugueDataFramePair = 17
    RULE_fugueDataFrame = 18
    RULE_fugueAssignment = 19
    RULE_fugueAssignmentSign = 20
    RULE_fugueSingleOutputExtensionCommonWild = 21
    RULE_fugueSingleOutputExtensionCommon = 22
    RULE_fugueExtension = 23
    RULE_fugueZipType = 24
    RULE_fuguePrepartition = 25
    RULE_fuguePartitionAlgo = 26
    RULE_fuguePartitionNum = 27
    RULE_fuguePartitionNumber = 28
    RULE_fugueParams = 29
    RULE_fugueCols = 30
    RULE_fugueColsSort = 31
    RULE_fugueColSort = 32
    RULE_fugueColumnIdentifier = 33
    RULE_fugueWildSchema = 34
    RULE_fugueWildSchemaPair = 35
    RULE_fugueSchema = 36
    RULE_fugueSchemaPair = 37
    RULE_fugueSchemaKey = 38
    RULE_fugueSchemaType = 39
    RULE_fugueJson = 40
    RULE_fugueJsonObj = 41
    RULE_fugueJsonPairs = 42
    RULE_fugueJsonPair = 43
    RULE_fugueJsonKey = 44
    RULE_fugueJsonArray = 45
    RULE_fugueJsonValue = 46
    RULE_fugueJsonNumber = 47
    RULE_fugueJsonString = 48
    RULE_fugueJsonBool = 49
    RULE_fugueJsonNull = 50
    RULE_fugueIdentifier = 51
    RULE_singleStatement = 52
    RULE_singleExpression = 53
    RULE_singleTableIdentifier = 54
    RULE_singleMultipartIdentifier = 55
    RULE_singleFunctionIdentifier = 56
    RULE_singleDataType = 57
    RULE_singleTableSchema = 58
    RULE_statement = 59
    RULE_unsupportedHiveNativeCommands = 60
    RULE_createTableHeader = 61
    RULE_replaceTableHeader = 62
    RULE_bucketSpec = 63
    RULE_skewSpec = 64
    RULE_locationSpec = 65
    RULE_commentSpec = 66
    RULE_query = 67
    RULE_insertInto = 68
    RULE_partitionSpecLocation = 69
    RULE_partitionSpec = 70
    RULE_partitionVal = 71
    RULE_namespace = 72
    RULE_describeFuncName = 73
    RULE_describeColName = 74
    RULE_ctes = 75
    RULE_namedQuery = 76
    RULE_tableProvider = 77
    RULE_createTableClauses = 78
    RULE_tablePropertyList = 79
    RULE_tableProperty = 80
    RULE_tablePropertyKey = 81
    RULE_tablePropertyValue = 82
    RULE_constantList = 83
    RULE_nestedConstantList = 84
    RULE_createFileFormat = 85
    RULE_fileFormat = 86
    RULE_storageHandler = 87
    RULE_resource = 88
    RULE_dmlStatementNoWith = 89
    RULE_queryOrganization = 90
    RULE_multiInsertQueryBody = 91
    RULE_queryTerm = 92
    RULE_queryPrimary = 93
    RULE_sortItem = 94
    RULE_fromStatement = 95
    RULE_fromStatementBody = 96
    RULE_querySpecification = 97
    RULE_transformClause = 98
    RULE_selectClause = 99
    RULE_setClause = 100
    RULE_matchedClause = 101
    RULE_notMatchedClause = 102
    RULE_matchedAction = 103
    RULE_notMatchedAction = 104
    RULE_assignmentList = 105
    RULE_assignment = 106
    RULE_whereClause = 107
    RULE_havingClause = 108
    RULE_hint = 109
    RULE_hintStatement = 110
    RULE_fromClause = 111
    RULE_aggregationClause = 112
    RULE_groupingSet = 113
    RULE_pivotClause = 114
    RULE_pivotColumn = 115
    RULE_pivotValue = 116
    RULE_lateralView = 117
    RULE_setQuantifier = 118
    RULE_relation = 119
    RULE_joinRelation = 120
    RULE_joinType = 121
    RULE_joinCriteria = 122
    RULE_sample = 123
    RULE_sampleMethod = 124
    RULE_identifierList = 125
    RULE_identifierSeq = 126
    RULE_orderedIdentifierList = 127
    RULE_orderedIdentifier = 128
    RULE_identifierCommentList = 129
    RULE_identifierComment = 130
    RULE_relationPrimary = 131
    RULE_inlineTable = 132
    RULE_functionTable = 133
    RULE_tableAlias = 134
    RULE_rowFormat = 135
    RULE_multipartIdentifierList = 136
    RULE_multipartIdentifier = 137
    RULE_tableIdentifier = 138
    RULE_functionIdentifier = 139
    RULE_namedExpression = 140
    RULE_namedExpressionSeq = 141
    RULE_transformList = 142
    RULE_transform = 143
    RULE_transformArgument = 144
    RULE_expression = 145
    RULE_booleanExpression = 146
    RULE_predicate = 147
    RULE_valueExpression = 148
    RULE_primaryExpression = 149
    RULE_constant = 150
    RULE_comparisonOperator = 151
    RULE_comparisonEqualOperator = 152
    RULE_arithmeticOperator = 153
    RULE_predicateOperator = 154
    RULE_booleanValue = 155
    RULE_interval = 156
    RULE_errorCapturingMultiUnitsInterval = 157
    RULE_multiUnitsInterval = 158
    RULE_errorCapturingUnitToUnitInterval = 159
    RULE_unitToUnitInterval = 160
    RULE_intervalValue = 161
    RULE_intervalUnit = 162
    RULE_colPosition = 163
    RULE_dataType = 164
    RULE_qualifiedColTypeWithPositionList = 165
    RULE_qualifiedColTypeWithPosition = 166
    RULE_colTypeList = 167
    RULE_colType = 168
    RULE_complexColTypeList = 169
    RULE_complexColType = 170
    RULE_whenClause = 171
    RULE_windowClause = 172
    RULE_namedWindow = 173
    RULE_windowSpec = 174
    RULE_windowFrame = 175
    RULE_frameBound = 176
    RULE_qualifiedNameList = 177
    RULE_functionName = 178
    RULE_qualifiedName = 179
    RULE_errorCapturingIdentifier = 180
    RULE_errorCapturingIdentifierExtra = 181
    RULE_identifier = 182
    RULE_strictIdentifier = 183
    RULE_quotedIdentifier = 184
    RULE_number = 185
    RULE_alterColumnAction = 186
    RULE_ansiNonReserved = 187
    RULE_strictNonReserved = 188
    RULE_nonReserved = 189

    ruleNames =  [ "fugueLanguage", "fugueSingleStatement", "fugueSingleTask", 
                   "fugueNestableTask", "fugueNestableTaskNoSelect", "fugueNestableTaskCollectionNoSelect", 
                   "fugueSelectTask", "fugueTransformTask", "fugueProcessTask", 
                   "fugueZipTask", "fugueCreateTask", "fugueCreateDataTask", 
                   "fugueOutputTask", "fuguePrintTask", "fuguePersist", 
                   "fugueBroadcast", "fugueDataFrames", "fugueDataFramePair", 
                   "fugueDataFrame", "fugueAssignment", "fugueAssignmentSign", 
                   "fugueSingleOutputExtensionCommonWild", "fugueSingleOutputExtensionCommon", 
                   "fugueExtension", "fugueZipType", "fuguePrepartition", 
                   "fuguePartitionAlgo", "fuguePartitionNum", "fuguePartitionNumber", 
                   "fugueParams", "fugueCols", "fugueColsSort", "fugueColSort", 
                   "fugueColumnIdentifier", "fugueWildSchema", "fugueWildSchemaPair", 
                   "fugueSchema", "fugueSchemaPair", "fugueSchemaKey", "fugueSchemaType", 
                   "fugueJson", "fugueJsonObj", "fugueJsonPairs", "fugueJsonPair", 
                   "fugueJsonKey", "fugueJsonArray", "fugueJsonValue", "fugueJsonNumber", 
                   "fugueJsonString", "fugueJsonBool", "fugueJsonNull", 
                   "fugueIdentifier", "singleStatement", "singleExpression", 
                   "singleTableIdentifier", "singleMultipartIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "singleTableSchema", 
                   "statement", "unsupportedHiveNativeCommands", "createTableHeader", 
                   "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
                   "commentSpec", "query", "insertInto", "partitionSpecLocation", 
                   "partitionSpec", "partitionVal", "namespace", "describeFuncName", 
                   "describeColName", "ctes", "namedQuery", "tableProvider", 
                   "createTableClauses", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "dmlStatementNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "fromStatement", "fromStatementBody", "querySpecification", 
                   "transformClause", "selectClause", "setClause", "matchedClause", 
                   "notMatchedClause", "matchedAction", "notMatchedAction", 
                   "assignmentList", "assignment", "whereClause", "havingClause", 
                   "hint", "hintStatement", "fromClause", "aggregationClause", 
                   "groupingSet", "pivotClause", "pivotColumn", "pivotValue", 
                   "lateralView", "setQuantifier", "relation", "joinRelation", 
                   "joinType", "joinCriteria", "sample", "sampleMethod", 
                   "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTable", "tableAlias", 
                   "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
                   "tableIdentifier", "functionIdentifier", "namedExpression", 
                   "namedExpressionSeq", "transformList", "transform", "transformArgument", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "comparisonEqualOperator", "arithmeticOperator", "predicateOperator", 
                   "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "intervalUnit", 
                   "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
                   "qualifiedColTypeWithPosition", "colTypeList", "colType", 
                   "complexColTypeList", "complexColType", "whenClause", 
                   "windowClause", "namedWindow", "windowSpec", "windowFrame", 
                   "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
                   "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "alterColumnAction", "ansiNonReserved", "strictNonReserved", 
                   "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    HASH=17
    RAND=18
    EVEN=19
    PRESORT=20
    PERSIST=21
    BROADCAST=22
    PARAMS=23
    PROCESS=24
    OUTPUT=25
    ROWCOUNT=26
    CONCURRENCY=27
    PREPARTITION=28
    ZIP=29
    PRINT=30
    TITLE=31
    COLONEQUAL=32
    CHECKPOINT=33
    ADD=34
    AFTER=35
    ALL=36
    ALTER=37
    ANALYZE=38
    AND=39
    ANTI=40
    ANY=41
    ARCHIVE=42
    ARRAY=43
    AS=44
    ASC=45
    AT=46
    AUTHORIZATION=47
    BETWEEN=48
    BOTH=49
    BUCKET=50
    BUCKETS=51
    BY=52
    CACHE=53
    CASCADE=54
    CASE=55
    CAST=56
    CHANGE=57
    CHECK=58
    CLEAR=59
    CLUSTER=60
    CLUSTERED=61
    CODEGEN=62
    COLLATE=63
    COLLECTION=64
    COLUMN=65
    COLUMNS=66
    COMMENT=67
    COMMIT=68
    COMPACT=69
    COMPACTIONS=70
    COMPUTE=71
    CONCATENATE=72
    CONSTRAINT=73
    COST=74
    CREATE=75
    CROSS=76
    CUBE=77
    CURRENT=78
    CURRENT_DATE=79
    CURRENT_TIME=80
    CURRENT_TIMESTAMP=81
    CURRENT_USER=82
    DATA=83
    DATABASE=84
    DATABASES=85
    DAY=86
    DBPROPERTIES=87
    DEFINED=88
    DELETE=89
    DELIMITED=90
    DESC=91
    DESCRIBE=92
    DFS=93
    DIRECTORIES=94
    DIRECTORY=95
    DISTINCT=96
    DISTRIBUTE=97
    DROP=98
    ELSE=99
    END=100
    ESCAPE=101
    ESCAPED=102
    EXCEPT=103
    EXCHANGE=104
    EXISTS=105
    EXPLAIN=106
    EXPORT=107
    EXTENDED=108
    EXTERNAL=109
    EXTRACT=110
    FALSE=111
    FETCH=112
    FIELDS=113
    FILTER=114
    FILEFORMAT=115
    FIRST=116
    FOLLOWING=117
    FOR=118
    FOREIGN=119
    FORMAT=120
    FORMATTED=121
    FROM=122
    FULL=123
    FUNCTION=124
    FUNCTIONS=125
    GLOBAL=126
    GRANT=127
    GROUP=128
    GROUPING=129
    HAVING=130
    HOUR=131
    IF=132
    IGNORE=133
    IMPORT=134
    IN=135
    INDEX=136
    INDEXES=137
    INNER=138
    INPATH=139
    INPUTFORMAT=140
    INSERT=141
    INTERSECT=142
    INTERVAL=143
    INTO=144
    IS=145
    ITEMS=146
    JOIN=147
    KEYS=148
    LAST=149
    LATERAL=150
    LAZY=151
    LEADING=152
    LEFT=153
    LIKE=154
    LIMIT=155
    LINES=156
    LIST=157
    LOAD=158
    LOCAL=159
    LOCATION=160
    LOCK=161
    LOCKS=162
    LOGICAL=163
    MACRO=164
    MAP=165
    MATCHED=166
    MERGE=167
    MINUTE=168
    MONTH=169
    MSCK=170
    NAMESPACE=171
    NAMESPACES=172
    NATURAL=173
    NO=174
    NOT=175
    NULL=176
    NULLS=177
    OF=178
    ON=179
    ONLY=180
    OPTION=181
    OPTIONS=182
    OR=183
    ORDER=184
    OUT=185
    OUTER=186
    OUTPUTFORMAT=187
    OVER=188
    OVERLAPS=189
    OVERLAY=190
    OVERWRITE=191
    PARTITION=192
    PARTITIONED=193
    PARTITIONS=194
    PERCENTLIT=195
    PIVOT=196
    PLACING=197
    POSITION=198
    PRECEDING=199
    PRIMARY=200
    PRINCIPALS=201
    PROPERTIES=202
    PURGE=203
    QUERY=204
    RANGE=205
    RECORDREADER=206
    RECORDWRITER=207
    RECOVER=208
    REDUCE=209
    REFERENCES=210
    REFRESH=211
    RENAME=212
    REPAIR=213
    REPLACE=214
    RESET=215
    RESTRICT=216
    REVOKE=217
    RIGHT=218
    RLIKE=219
    ROLE=220
    ROLES=221
    ROLLBACK=222
    ROLLUP=223
    ROW=224
    ROWS=225
    SCHEMA=226
    SECOND=227
    SELECT=228
    SEMI=229
    SEPARATED=230
    SERDE=231
    SERDEPROPERTIES=232
    SESSION_USER=233
    SET=234
    SETMINUS=235
    SETS=236
    SHOW=237
    SKEWED=238
    SOME=239
    SORT=240
    SORTED=241
    START=242
    STATISTICS=243
    STORED=244
    STRATIFY=245
    STRUCT=246
    SUBSTR=247
    SUBSTRING=248
    TABLE=249
    TABLES=250
    TABLESAMPLE=251
    TBLPROPERTIES=252
    TEMPORARY=253
    TERMINATED=254
    THEN=255
    TO=256
    TOUCH=257
    TRAILING=258
    TRANSACTION=259
    TRANSACTIONS=260
    TRANSFORM=261
    TRIM=262
    TRUE=263
    TRUNCATE=264
    TYPE=265
    UNARCHIVE=266
    UNBOUNDED=267
    UNCACHE=268
    UNION=269
    UNIQUE=270
    UNKNOWN=271
    UNLOCK=272
    UNSET=273
    UPDATE=274
    USE=275
    USER=276
    USING=277
    VALUES=278
    VIEW=279
    VIEWS=280
    WHEN=281
    WHERE=282
    WINDOW=283
    WITH=284
    YEAR=285
    EQUAL=286
    DOUBLEEQUAL=287
    NSEQ=288
    NEQ=289
    NEQJ=290
    LT=291
    LTE=292
    GT=293
    GTE=294
    PLUS=295
    MINUS=296
    ASTERISK=297
    SLASH=298
    PERCENT=299
    DIV=300
    TILDE=301
    AMPERSAND=302
    PIPE=303
    CONCAT_PIPE=304
    HAT=305
    STRING=306
    BIGINT_LITERAL=307
    SMALLINT_LITERAL=308
    TINYINT_LITERAL=309
    INTEGER_VALUE=310
    EXPONENT_VALUE=311
    DECIMAL_VALUE=312
    DOUBLE_LITERAL=313
    BIGDECIMAL_LITERAL=314
    IDENTIFIER=315
    BACKQUOTED_IDENTIFIER=316
    SIMPLE_COMMENT=317
    BRACKETED_COMMENT=318
    WS=319
    UNRECOGNIZED=320

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    # When false, INTERSECT is given the greater precedence over the other set
    # operations (UNION, EXCEPT and MINUS) as per the SQL standard.
    legacy_setops_precedence_enbled = False

    # When false, a literal with an exponent would be converted into
    # double type rather than decimal type.
    legacy_exponent_literal_as_decimal_enabled = False

    # Verify whether current token is a valid decimal token (which contains dot).
    # Returns true if the character that follows the token is not a digit or letter or underscore.

    #  For example:
    # For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
    # For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
    # For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
    # For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is followed
    # by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
    # which is not a digit or letter or underscore.
    def isValidDecimal(self):
        return True  # TODO: remove this
        nextChar = self._input.LA(1);
        if (nextChar >= 'A' and nextChar <= 'Z') or (nextChar >= '0' and nextChar <= '9') or nextChar == '_':
            return False
        else:
            return True

    # When true, the behavior of keywords follows ANSI SQL standard.
    @property
    def SQL_standard_keyword_behavior(self):
        if "_ansi_sql" in self.__dict__:
            return self._ansi_sql
        return False

    # This method will be called when we see '/ *' and try to match it as a bracketed comment.
    # If the next character is '+', it should be parsed as hint later, and we cannot match
    # it as a bracketed comment.

    # Returns true if the next character is '+'.
    def isHint(self):
        return False  # TODO: remove this
        nextChar = self._input.LA(1);
        if nextChar == '+':
            return True
        else:
            return False


    @property
    def allUpperCase(self):
        if "_all_upper_case" in self.__dict__:
            return self._all_upper_case
        return False

    @property
    def simpleAssign(self):
        if "_simple_assign" in self.__dict__:
            return self._simple_assign
        return False




    class FugueLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def fugueSingleTask(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSingleTaskContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLanguage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueLanguage" ):
                listener.enterFugueLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueLanguage" ):
                listener.exitFugueLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLanguage" ):
                return visitor.visitFugueLanguage(self)
            else:
                return visitor.visitChildren(self)




    def fugueLanguage(self):

        localctx = fugue_sqlParser.FugueLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fugueLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 380
                    self.fugueSingleTask()

                else:
                    raise NoViableAltException(self)
                self.state = 383 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 385
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSingleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSingleStatement" ):
                listener.enterFugueSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSingleStatement" ):
                listener.exitFugueSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleStatement" ):
                return visitor.visitFugueSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleStatement(self):

        localctx = fugue_sqlParser.FugueSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fugueSingleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.fugueSingleTask()
            self.state = 388
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def fugueOutputTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTaskContext,0)


        def fuguePrintTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrintTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSingleTask" ):
                listener.enterFugueSingleTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSingleTask" ):
                listener.exitFugueSingleTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleTask" ):
                return visitor.visitFugueSingleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleTask(self):

        localctx = fugue_sqlParser.FugueSingleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_fugueSingleTask)
        try:
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self.fugueNestableTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.fugueOutputTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 392
                self.fuguePrintTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueNestableTaskNoSelect(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskNoSelectContext,0)


        def fugueSelectTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSelectTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueNestableTask" ):
                listener.enterFugueNestableTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueNestableTask" ):
                listener.exitFugueNestableTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTask" ):
                return visitor.visitFugueNestableTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTask(self):

        localctx = fugue_sqlParser.FugueNestableTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fugueNestableTask)
        try:
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 395
                self.fugueNestableTaskNoSelect()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.fugueSelectTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskNoSelectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.df = None # FugueNestableTaskCollectionNoSelectContext

        def fugueNestableTaskCollectionNoSelect(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTaskNoSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueNestableTaskNoSelect" ):
                listener.enterFugueNestableTaskNoSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueNestableTaskNoSelect" ):
                listener.exitFugueNestableTaskNoSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTaskNoSelect" ):
                return visitor.visitFugueNestableTaskNoSelect(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTaskNoSelect(self):

        localctx = fugue_sqlParser.FugueNestableTaskNoSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fugueNestableTaskNoSelect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 399
                localctx.assign = self.fugueAssignment()


            self.state = 402
            localctx.df = self.fugueNestableTaskCollectionNoSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskCollectionNoSelectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTransformTaskContext,0)


        def fugueProcessTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueProcessTaskContext,0)


        def fugueZipTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTaskContext,0)


        def fugueCreateTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateTaskContext,0)


        def fugueCreateDataTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateDataTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTaskCollectionNoSelect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueNestableTaskCollectionNoSelect" ):
                listener.enterFugueNestableTaskCollectionNoSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueNestableTaskCollectionNoSelect" ):
                listener.exitFugueNestableTaskCollectionNoSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTaskCollectionNoSelect" ):
                return visitor.visitFugueNestableTaskCollectionNoSelect(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTaskCollectionNoSelect(self):

        localctx = fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_fugueNestableTaskCollectionNoSelect)
        try:
            self.state = 409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 404
                self.fugueTransformTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 405
                self.fugueProcessTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 406
                self.fugueZipTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 407
                self.fugueCreateTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 408
                self.fugueCreateDataTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSelectTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.partition = None # FuguePrepartitionContext
            self.q = None # QueryContext
            self.persist = None # FuguePersistContext
            self.broadcast = None # FugueBroadcastContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fuguePersist(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePersistContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSelectTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSelectTask" ):
                listener.enterFugueSelectTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSelectTask" ):
                listener.exitFugueSelectTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSelectTask" ):
                return visitor.visitFugueSelectTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSelectTask(self):

        localctx = fugue_sqlParser.FugueSelectTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fugueSelectTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 411
                localctx.assign = self.fugueAssignment()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 414
                localctx.partition = self.fuguePrepartition()


            self.state = 417
            localctx.q = self.query()
            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 418
                localctx.persist = self.fuguePersist()


            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 421
                localctx.broadcast = self.fugueBroadcast()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTransformTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition = None # FuguePrepartitionContext
            self.dfs = None # FugueDataFramesContext
            self.params = None # FugueSingleOutputExtensionCommonWildContext
            self.persist = None # FuguePersistContext
            self.broadcast = None # FugueBroadcastContext

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def fugueSingleOutputExtensionCommonWild(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePersist(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePersistContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTransformTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueTransformTask" ):
                listener.enterFugueTransformTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueTransformTask" ):
                listener.exitFugueTransformTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTransformTask" ):
                return visitor.visitFugueTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueTransformTask(self):

        localctx = fugue_sqlParser.FugueTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_fugueTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 424
                localctx.partition = self.fuguePrepartition()


            self.state = 427
            self.match(fugue_sqlParser.TRANSFORM)
            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 428
                localctx.dfs = self.fugueDataFrames()


            self.state = 431
            localctx.params = self.fugueSingleOutputExtensionCommonWild()
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 432
                localctx.persist = self.fuguePersist()


            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 435
                localctx.broadcast = self.fugueBroadcast()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueProcessTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition = None # FuguePrepartitionContext
            self.dfs = None # FugueDataFramesContext
            self.params = None # FugueSingleOutputExtensionCommonContext
            self.persist = None # FuguePersistContext
            self.broadcast = None # FugueBroadcastContext

        def PROCESS(self):
            return self.getToken(fugue_sqlParser.PROCESS, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePersist(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePersistContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueProcessTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueProcessTask" ):
                listener.enterFugueProcessTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueProcessTask" ):
                listener.exitFugueProcessTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueProcessTask" ):
                return visitor.visitFugueProcessTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueProcessTask(self):

        localctx = fugue_sqlParser.FugueProcessTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_fugueProcessTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 438
                localctx.partition = self.fuguePrepartition()


            self.state = 441
            self.match(fugue_sqlParser.PROCESS)
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 442
                localctx.dfs = self.fugueDataFrames()


            self.state = 445
            localctx.params = self.fugueSingleOutputExtensionCommon()
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 446
                localctx.persist = self.fuguePersist()


            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 449
                localctx.broadcast = self.fugueBroadcast()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.how = None # FugueZipTypeContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext
            self.persist = None # FuguePersistContext
            self.broadcast = None # FugueBroadcastContext

        def ZIP(self):
            return self.getToken(fugue_sqlParser.ZIP, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fugueZipType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTypeContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def fuguePersist(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePersistContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueZipTask" ):
                listener.enterFugueZipTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueZipTask" ):
                listener.exitFugueZipTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipTask" ):
                return visitor.visitFugueZipTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipTask(self):

        localctx = fugue_sqlParser.FugueZipTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_fugueZipTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(fugue_sqlParser.ZIP)
            self.state = 453
            localctx.dfs = self.fugueDataFrames()
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 454
                localctx.how = self.fugueZipType()


            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 457
                self.match(fugue_sqlParser.BY)
                self.state = 458
                localctx.by = self.fugueCols()


            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 461
                self.match(fugue_sqlParser.PRESORT)
                self.state = 462
                localctx.presort = self.fugueColsSort()


            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 465
                localctx.persist = self.fuguePersist()


            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 468
                localctx.broadcast = self.fugueBroadcast()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueSingleOutputExtensionCommonContext
            self.persist = None # FuguePersistContext
            self.broadcast = None # FugueBroadcastContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def fuguePersist(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePersistContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueCreateTask" ):
                listener.enterFugueCreateTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueCreateTask" ):
                listener.exitFugueCreateTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateTask" ):
                return visitor.visitFugueCreateTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateTask(self):

        localctx = fugue_sqlParser.FugueCreateTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_fugueCreateTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(fugue_sqlParser.CREATE)
            self.state = 472
            localctx.params = self.fugueSingleOutputExtensionCommon()
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 473
                localctx.persist = self.fuguePersist()


            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 476
                localctx.broadcast = self.fugueBroadcast()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateDataTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data = None # FugueJsonArrayContext
            self.schema = None # FugueSchemaContext
            self.persist = None # FuguePersistContext
            self.broadcast = None # FugueBroadcastContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def fuguePersist(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePersistContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateDataTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueCreateDataTask" ):
                listener.enterFugueCreateDataTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueCreateDataTask" ):
                listener.exitFugueCreateDataTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateDataTask" ):
                return visitor.visitFugueCreateDataTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateDataTask(self):

        localctx = fugue_sqlParser.FugueCreateDataTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fugueCreateDataTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(fugue_sqlParser.CREATE)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.DATA:
                self.state = 480
                self.match(fugue_sqlParser.DATA)


            self.state = 483
            localctx.data = self.fugueJsonArray()
            self.state = 484
            self.match(fugue_sqlParser.SCHEMA)
            self.state = 485
            localctx.schema = self.fugueSchema()
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 486
                localctx.persist = self.fuguePersist()


            self.state = 490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 489
                localctx.broadcast = self.fugueBroadcast()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition = None # FuguePrepartitionContext
            self.dfs = None # FugueDataFramesContext
            self.using = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def OUTPUT(self):
            return self.getToken(fugue_sqlParser.OUTPUT, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueOutputTask" ):
                listener.enterFugueOutputTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueOutputTask" ):
                listener.exitFugueOutputTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTask" ):
                return visitor.visitFugueOutputTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTask(self):

        localctx = fugue_sqlParser.FugueOutputTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fugueOutputTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 492
                localctx.partition = self.fuguePrepartition()


            self.state = 495
            self.match(fugue_sqlParser.OUTPUT)
            self.state = 497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 496
                localctx.dfs = self.fugueDataFrames()


            self.state = 499
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.BY or _la==fugue_sqlParser.USING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 500
            localctx.using = self.fugueExtension()
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 501
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrintTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.rows = None # Token
            self.count = None # Token
            self.title = None # Token

        def PRINT(self):
            return self.getToken(fugue_sqlParser.PRINT, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def TITLE(self):
            return self.getToken(fugue_sqlParser.TITLE, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrintTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePrintTask" ):
                listener.enterFuguePrintTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePrintTask" ):
                listener.exitFuguePrintTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrintTask" ):
                return visitor.visitFuguePrintTask(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrintTask(self):

        localctx = fugue_sqlParser.FuguePrintTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fuguePrintTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(fugue_sqlParser.PRINT)
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 505
                localctx.dfs = self.fugueDataFrames()


            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 508
                self.match(fugue_sqlParser.ROWS)
                self.state = 509
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)


            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 512
                localctx.count = self.match(fugue_sqlParser.ROWCOUNT)


            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 515
                self.match(fugue_sqlParser.TITLE)
                self.state = 516
                localctx.title = self.match(fugue_sqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePersistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IdentifierContext

        def PERSIST(self):
            return self.getToken(fugue_sqlParser.PERSIST, 0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePersist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePersist" ):
                listener.enterFuguePersist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePersist" ):
                listener.exitFuguePersist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePersist" ):
                return visitor.visitFuguePersist(self)
            else:
                return visitor.visitChildren(self)




    def fuguePersist(self):

        localctx = fugue_sqlParser.FuguePersistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fuguePersist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(fugue_sqlParser.PERSIST)
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 520
                localctx.value = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueBroadcastContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BROADCAST(self):
            return self.getToken(fugue_sqlParser.BROADCAST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueBroadcast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueBroadcast" ):
                listener.enterFugueBroadcast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueBroadcast" ):
                listener.exitFugueBroadcast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueBroadcast" ):
                return visitor.visitFugueBroadcast(self)
            else:
                return visitor.visitChildren(self)




    def fugueBroadcast(self):

        localctx = fugue_sqlParser.FugueBroadcastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fugueBroadcast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(fugue_sqlParser.BROADCAST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrames

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFramesDictContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFramePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFramePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramePairContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueDataFramesDict" ):
                listener.enterFugueDataFramesDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueDataFramesDict" ):
                listener.exitFugueDataFramesDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesDict" ):
                return visitor.visitFugueDataFramesDict(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFramesListContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFrame(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFrameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueDataFramesList" ):
                listener.enterFugueDataFramesList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueDataFramesList" ):
                listener.exitFugueDataFramesList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesList" ):
                return visitor.visitFugueDataFramesList(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrames(self):

        localctx = fugue_sqlParser.FugueDataFramesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fugueDataFrames)
        try:
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueDataFramesListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.fugueDataFrame()
                self.state = 530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 526
                        self.match(fugue_sqlParser.T__0)
                        self.state = 527
                        self.fugueDataFrame() 
                    self.state = 532
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueDataFramesDictContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.fugueDataFramePair()
                self.state = 538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 534
                        self.match(fugue_sqlParser.T__0)
                        self.state = 535
                        self.fugueDataFramePair() 
                    self.state = 540
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramePairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueIdentifierContext
            self.value = None # FugueDataFrameContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFramePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueDataFramePair" ):
                listener.enterFugueDataFramePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueDataFramePair" ):
                listener.exitFugueDataFramePair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramePair" ):
                return visitor.visitFugueDataFramePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueDataFramePair(self):

        localctx = fugue_sqlParser.FugueDataFramePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fugueDataFramePair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            localctx.key = self.fugueIdentifier()
            self.state = 544
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.EQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 545
            localctx.value = self.fugueDataFrame()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrame

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFrameSourceContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueDataFrameSource" ):
                listener.enterFugueDataFrameSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueDataFrameSource" ):
                listener.exitFugueDataFrameSource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameSource" ):
                return visitor.visitFugueDataFrameSource(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFrameNestedContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.task = None # FugueNestableTaskContext
            self.copyFrom(ctx)

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueDataFrameNested" ):
                listener.enterFugueDataFrameNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueDataFrameNested" ):
                listener.exitFugueDataFrameNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameNested" ):
                return visitor.visitFugueDataFrameNested(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrame(self):

        localctx = fugue_sqlParser.FugueDataFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fugueDataFrame)
        try:
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueDataFrameSourceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 547
                self.fugueIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueDataFrameNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.match(fugue_sqlParser.T__2)
                self.state = 549
                localctx.task = self.fugueNestableTask()
                self.state = 550
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.varname = None # FugueIdentifierContext
            self.sign = None # FugueAssignmentSignContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueAssignmentSign(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentSignContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueAssignment" ):
                listener.enterFugueAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueAssignment" ):
                listener.exitFugueAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignment" ):
                return visitor.visitFugueAssignment(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignment(self):

        localctx = fugue_sqlParser.FugueAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fugueAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            localctx.varname = self.fugueIdentifier()
            self.state = 555
            localctx.sign = self.fugueAssignmentSign()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentSignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONEQUAL(self):
            return self.getToken(fugue_sqlParser.COLONEQUAL, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignmentSign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueAssignmentSign" ):
                listener.enterFugueAssignmentSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueAssignmentSign" ):
                listener.exitFugueAssignmentSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignmentSign" ):
                return visitor.visitFugueAssignmentSign(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignmentSign(self):

        localctx = fugue_sqlParser.FugueAssignmentSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fugueAssignmentSign)
        try:
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(fugue_sqlParser.COLONEQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                if not self.simpleAssign:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.simpleAssign")
                self.state = 559
                self.match(fugue_sqlParser.EQUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonWildContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueWildSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueWildSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommonWild

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSingleOutputExtensionCommonWild" ):
                listener.enterFugueSingleOutputExtensionCommonWild(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSingleOutputExtensionCommonWild" ):
                listener.exitFugueSingleOutputExtensionCommonWild(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommonWild" ):
                return visitor.visitFugueSingleOutputExtensionCommonWild(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommonWild(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_fugueSingleOutputExtensionCommonWild)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.BY or _la==fugue_sqlParser.USING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 563
            localctx.using = self.fugueExtension()
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 564
                localctx.params = self.fugueParams()


            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 567
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 568
                localctx.schema = self.fugueWildSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSingleOutputExtensionCommon" ):
                listener.enterFugueSingleOutputExtensionCommon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSingleOutputExtensionCommon" ):
                listener.exitFugueSingleOutputExtensionCommon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommon" ):
                return visitor.visitFugueSingleOutputExtensionCommon(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommon(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fugueSingleOutputExtensionCommon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.BY or _la==fugue_sqlParser.USING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 572
            localctx.using = self.fugueExtension()
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 573
                localctx.params = self.fugueParams()


            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 576
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 577
                localctx.schema = self.fugueSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueExtension" ):
                listener.enterFugueExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueExtension" ):
                listener.exitFugueExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueExtension" ):
                return visitor.visitFugueExtension(self)
            else:
                return visitor.visitChildren(self)




    def fugueExtension(self):

        localctx = fugue_sqlParser.FugueExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fugueExtension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.fugueIdentifier()
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 581
                    self.match(fugue_sqlParser.T__4)
                    self.state = 582
                    self.fugueIdentifier() 
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueZipType" ):
                listener.enterFugueZipType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueZipType" ):
                listener.exitFugueZipType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipType" ):
                return visitor.visitFugueZipType(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipType(self):

        localctx = fugue_sqlParser.FugueZipTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fugueZipType)
        try:
            self.state = 596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.CROSS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.match(fugue_sqlParser.CROSS)
                pass
            elif token in [fugue_sqlParser.INNER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.match(fugue_sqlParser.INNER)
                pass
            elif token in [fugue_sqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 590
                self.match(fugue_sqlParser.LEFT)
                self.state = 591
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [fugue_sqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 592
                self.match(fugue_sqlParser.RIGHT)
                self.state = 593
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [fugue_sqlParser.FULL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 594
                self.match(fugue_sqlParser.FULL)
                self.state = 595
                self.match(fugue_sqlParser.OUTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrepartitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algo = None # FuguePartitionAlgoContext
            self.num = None # FuguePartitionNumContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def PREPARTITION(self):
            return self.getToken(fugue_sqlParser.PREPARTITION, 0)

        def fuguePartitionNum(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fuguePartitionAlgo(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionAlgoContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrepartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePrepartition" ):
                listener.enterFuguePrepartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePrepartition" ):
                listener.exitFuguePrepartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrepartition" ):
                return visitor.visitFuguePrepartition(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrepartition(self):

        localctx = fugue_sqlParser.FuguePrepartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fuguePrepartition)
        self._la = 0 # Token type
        try:
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0):
                    self.state = 598
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 601
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 602
                localctx.num = self.fuguePartitionNum(0)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.BY:
                    self.state = 603
                    self.match(fugue_sqlParser.BY)
                    self.state = 604
                    localctx.by = self.fugueCols()


                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PRESORT:
                    self.state = 607
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 608
                    localctx.presort = self.fugueColsSort()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0):
                    self.state = 611
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 614
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 615
                self.match(fugue_sqlParser.BY)
                self.state = 616
                localctx.by = self.fugueCols()
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PRESORT:
                    self.state = 617
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 618
                    localctx.presort = self.fugueColsSort()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionAlgoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(fugue_sqlParser.HASH, 0)

        def RAND(self):
            return self.getToken(fugue_sqlParser.RAND, 0)

        def EVEN(self):
            return self.getToken(fugue_sqlParser.EVEN, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionAlgo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePartitionAlgo" ):
                listener.enterFuguePartitionAlgo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePartitionAlgo" ):
                listener.exitFuguePartitionAlgo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionAlgo" ):
                return visitor.visitFuguePartitionAlgo(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionAlgo(self):

        localctx = fugue_sqlParser.FuguePartitionAlgoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fuguePartitionAlgo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionNumContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fuguePartitionNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumberContext,0)


        def fuguePartitionNum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FuguePartitionNumContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,i)


        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePartitionNum" ):
                listener.enterFuguePartitionNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePartitionNum" ):
                listener.exitFuguePartitionNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNum" ):
                return visitor.visitFuguePartitionNum(self)
            else:
                return visitor.visitChildren(self)



    def fuguePartitionNum(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.FuguePartitionNumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_fuguePartitionNum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ROWCOUNT, fugue_sqlParser.CONCURRENCY, fugue_sqlParser.MINUS, fugue_sqlParser.INTEGER_VALUE, fugue_sqlParser.DECIMAL_VALUE]:
                self.state = 626
                self.fuguePartitionNumber()
                pass
            elif token in [fugue_sqlParser.T__2]:
                self.state = 627
                self.match(fugue_sqlParser.T__2)
                self.state = 628
                self.fuguePartitionNum(0)
                self.state = 629
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 638
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = fugue_sqlParser.FuguePartitionNumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fuguePartitionNum)
                    self.state = 633
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 634
                    _la = self._input.LA(1)
                    if not(((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (fugue_sqlParser.PLUS - 295)) | (1 << (fugue_sqlParser.MINUS - 295)) | (1 << (fugue_sqlParser.ASTERISK - 295)) | (1 << (fugue_sqlParser.SLASH - 295)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 635
                    self.fuguePartitionNum(2) 
                self.state = 640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FuguePartitionNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def CONCURRENCY(self):
            return self.getToken(fugue_sqlParser.CONCURRENCY, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePartitionNumber" ):
                listener.enterFuguePartitionNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePartitionNumber" ):
                listener.exitFuguePartitionNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNumber" ):
                return visitor.visitFuguePartitionNumber(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionNumber(self):

        localctx = fugue_sqlParser.FuguePartitionNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fuguePartitionNumber)
        self._la = 0 # Token type
        try:
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 641
                    self.match(fugue_sqlParser.MINUS)


                self.state = 644
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 645
                    self.match(fugue_sqlParser.MINUS)


                self.state = 648
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 649
                self.match(fugue_sqlParser.ROWCOUNT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 650
                self.match(fugue_sqlParser.CONCURRENCY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueParamsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueParams

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueParamsPairsContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.pairs = None # FugueJsonPairsContext
            self.copyFrom(ctx)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)
        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueParamsPairs" ):
                listener.enterFugueParamsPairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueParamsPairs" ):
                listener.exitFugueParamsPairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsPairs" ):
                return visitor.visitFugueParamsPairs(self)
            else:
                return visitor.visitChildren(self)


    class FugueParamsObjContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.obj = None # FugueJsonObjContext
            self.copyFrom(ctx)

        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueParamsObj" ):
                listener.enterFugueParamsObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueParamsObj" ):
                listener.exitFugueParamsObj(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsObj" ):
                return visitor.visitFugueParamsObj(self)
            else:
                return visitor.visitChildren(self)



    def fugueParams(self):

        localctx = fugue_sqlParser.FugueParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fugueParams)
        self._la = 0 # Token type
        try:
            self.state = 659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueParamsPairsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                self.match(fugue_sqlParser.PARAMS)
                self.state = 654
                localctx.pairs = self.fugueJsonPairs()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueParamsObjContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARAMS:
                    self.state = 655
                    self.match(fugue_sqlParser.PARAMS)


                self.state = 658
                localctx.obj = self.fugueJsonObj()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColumnIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCols

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueCols" ):
                listener.enterFugueCols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueCols" ):
                listener.exitFugueCols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCols" ):
                return visitor.visitFugueCols(self)
            else:
                return visitor.visitChildren(self)




    def fugueCols(self):

        localctx = fugue_sqlParser.FugueColsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fugueCols)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.fugueColumnIdentifier()
            self.state = 666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 662
                    self.match(fugue_sqlParser.T__0)
                    self.state = 663
                    self.fugueColumnIdentifier() 
                self.state = 668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsSortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColSort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColSortContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColSortContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColsSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueColsSort" ):
                listener.enterFugueColsSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueColsSort" ):
                listener.exitFugueColsSort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColsSort" ):
                return visitor.visitFugueColsSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColsSort(self):

        localctx = fugue_sqlParser.FugueColsSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fugueColsSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.fugueColSort()
            self.state = 674
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 670
                    self.match(fugue_sqlParser.T__0)
                    self.state = 671
                    self.fugueColSort() 
                self.state = 676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColSortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColSort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueColSort" ):
                listener.enterFugueColSort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueColSort" ):
                listener.exitFugueColSort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColSort" ):
                return visitor.visitFugueColSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColSort(self):

        localctx = fugue_sqlParser.FugueColSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fugueColSort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.fugueColumnIdentifier()
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 678
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColumnIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColumnIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueColumnIdentifier" ):
                listener.enterFugueColumnIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueColumnIdentifier" ):
                listener.exitFugueColumnIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColumnIdentifier" ):
                return visitor.visitFugueColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueColumnIdentifier(self):

        localctx = fugue_sqlParser.FugueColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fugueColumnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueWildSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueWildSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueWildSchema" ):
                listener.enterFugueWildSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueWildSchema" ):
                listener.exitFugueWildSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchema" ):
                return visitor.visitFugueWildSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchema(self):

        localctx = fugue_sqlParser.FugueWildSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fugueWildSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.fugueWildSchemaPair()
            self.state = 688
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 684
                    self.match(fugue_sqlParser.T__0)
                    self.state = 685
                    self.fugueWildSchemaPair() 
                self.state = 690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pair = None # FugueSchemaPairContext

        def fugueSchemaPair(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,0)


        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchemaPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueWildSchemaPair" ):
                listener.enterFugueWildSchemaPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueWildSchemaPair" ):
                listener.exitFugueWildSchemaPair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchemaPair" ):
                return visitor.visitFugueWildSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchemaPair(self):

        localctx = fugue_sqlParser.FugueWildSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fugueWildSchemaPair)
        try:
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                localctx.pair = self.fugueSchemaPair()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                self.match(fugue_sqlParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchema" ):
                listener.enterFugueSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchema" ):
                listener.exitFugueSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchema" ):
                return visitor.visitFugueSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchema(self):

        localctx = fugue_sqlParser.FugueSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_fugueSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.fugueSchemaPair()
            self.state = 700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 696
                    self.match(fugue_sqlParser.T__0)
                    self.state = 697
                    self.fugueSchemaPair() 
                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaTypeContext

        def fugueSchemaKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,0)


        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaPair" ):
                listener.enterFugueSchemaPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaPair" ):
                listener.exitFugueSchemaPair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaPair" ):
                return visitor.visitFugueSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaPair(self):

        localctx = fugue_sqlParser.FugueSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fugueSchemaPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            localctx.key = self.fugueSchemaKey()
            self.state = 704
            self.match(fugue_sqlParser.T__1)
            self.state = 705
            localctx.value = self.fugueSchemaType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaKey" ):
                listener.enterFugueSchemaKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaKey" ):
                listener.exitFugueSchemaKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaKey" ):
                return visitor.visitFugueSchemaKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaKey(self):

        localctx = fugue_sqlParser.FugueSchemaKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fugueSchemaKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueSchemaSimpleTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaSimpleType" ):
                listener.enterFugueSchemaSimpleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaSimpleType" ):
                listener.exitFugueSchemaSimpleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaSimpleType" ):
                return visitor.visitFugueSchemaSimpleType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaStructTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaStructType" ):
                listener.enterFugueSchemaStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaStructType" ):
                listener.exitFugueSchemaStructType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaStructType" ):
                return visitor.visitFugueSchemaStructType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaListTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaListType" ):
                listener.enterFugueSchemaListType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaListType" ):
                listener.exitFugueSchemaListType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaListType" ):
                return visitor.visitFugueSchemaListType(self)
            else:
                return visitor.visitChildren(self)



    def fugueSchemaType(self):

        localctx = fugue_sqlParser.FugueSchemaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_fugueSchemaType)
        try:
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueSchemaSimpleTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.fugueIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueSchemaListTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.match(fugue_sqlParser.T__5)
                self.state = 711
                self.fugueSchemaType()
                self.state = 712
                self.match(fugue_sqlParser.T__6)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.FugueSchemaStructTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 714
                self.match(fugue_sqlParser.T__7)
                self.state = 715
                self.fugueSchema()
                self.state = 716
                self.match(fugue_sqlParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJson

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJson" ):
                listener.enterFugueJson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJson" ):
                listener.exitFugueJson(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJson" ):
                return visitor.visitFugueJson(self)
            else:
                return visitor.visitChildren(self)




    def fugueJson(self):

        localctx = fugue_sqlParser.FugueJsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fugueJson)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonObjContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonObj" ):
                listener.enterFugueJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonObj" ):
                listener.exitFugueJsonObj(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonObj" ):
                return visitor.visitFugueJsonObj(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonObj(self):

        localctx = fugue_sqlParser.FugueJsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fugueJsonObj)
        self._la = 0 # Token type
        try:
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 722
                self.match(fugue_sqlParser.T__7)
                self.state = 723
                self.fugueJsonPairs()
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 724
                    self.match(fugue_sqlParser.T__0)


                self.state = 727
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self.match(fugue_sqlParser.T__7)
                self.state = 730
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 731
                self.match(fugue_sqlParser.T__2)
                self.state = 732
                self.fugueJsonPairs()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 733
                    self.match(fugue_sqlParser.T__0)


                self.state = 736
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 738
                self.match(fugue_sqlParser.T__2)
                self.state = 739
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonPairs" ):
                listener.enterFugueJsonPairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonPairs" ):
                listener.exitFugueJsonPairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPairs" ):
                return visitor.visitFugueJsonPairs(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPairs(self):

        localctx = fugue_sqlParser.FugueJsonPairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fugueJsonPairs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.fugueJsonPair()
            self.state = 747
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 743
                    self.match(fugue_sqlParser.T__0)
                    self.state = 744
                    self.fugueJsonPair() 
                self.state = 749
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueJsonKeyContext
            self.value = None # FugueJsonValueContext

        def fugueJsonKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonKeyContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonPair" ):
                listener.enterFugueJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonPair" ):
                listener.exitFugueJsonPair(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPair" ):
                return visitor.visitFugueJsonPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPair(self):

        localctx = fugue_sqlParser.FugueJsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fugueJsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            localctx.key = self.fugueJsonKey()
            self.state = 751
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.EQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 752
            localctx.value = self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonKey" ):
                listener.enterFugueJsonKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonKey" ):
                listener.exitFugueJsonKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonKey" ):
                return visitor.visitFugueJsonKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonKey(self):

        localctx = fugue_sqlParser.FugueJsonKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fugueJsonKey)
        try:
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.fugueIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.fugueJsonString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonArrayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonArray" ):
                listener.enterFugueJsonArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonArray" ):
                listener.exitFugueJsonArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonArray" ):
                return visitor.visitFugueJsonArray(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonArray(self):

        localctx = fugue_sqlParser.FugueJsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_fugueJsonArray)
        self._la = 0 # Token type
        try:
            self.state = 774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.match(fugue_sqlParser.T__5)
                self.state = 759
                self.fugueJsonValue()
                self.state = 764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 760
                        self.match(fugue_sqlParser.T__0)
                        self.state = 761
                        self.fugueJsonValue() 
                    self.state = 766
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 767
                    self.match(fugue_sqlParser.T__0)


                self.state = 770
                self.match(fugue_sqlParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.match(fugue_sqlParser.T__5)
                self.state = 773
                self.match(fugue_sqlParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def fugueJsonNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNumberContext,0)


        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)


        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueJsonBool(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonBoolContext,0)


        def fugueJsonNull(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNullContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonValue" ):
                listener.enterFugueJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonValue" ):
                listener.exitFugueJsonValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonValue" ):
                return visitor.visitFugueJsonValue(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonValue(self):

        localctx = fugue_sqlParser.FugueJsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_fugueJsonValue)
        try:
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.fugueJsonString()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.fugueJsonNumber()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 778
                self.fugueJsonObj()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 779
                self.fugueJsonArray()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 780
                self.fugueJsonBool()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 781
                self.fugueJsonNull()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonNumber" ):
                listener.enterFugueJsonNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonNumber" ):
                listener.exitFugueJsonNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNumber" ):
                return visitor.visitFugueJsonNumber(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNumber(self):

        localctx = fugue_sqlParser.FugueJsonNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_fugueJsonNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonString" ):
                listener.enterFugueJsonString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonString" ):
                listener.exitFugueJsonString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonString" ):
                return visitor.visitFugueJsonString(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonString(self):

        localctx = fugue_sqlParser.FugueJsonStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_fugueJsonString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonBoolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonBool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonBool" ):
                listener.enterFugueJsonBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonBool" ):
                listener.exitFugueJsonBool(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonBool" ):
                return visitor.visitFugueJsonBool(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonBool(self):

        localctx = fugue_sqlParser.FugueJsonBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fugueJsonBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__9 or _la==fugue_sqlParser.T__10 or _la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonNull" ):
                listener.enterFugueJsonNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonNull" ):
                listener.exitFugueJsonNull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNull" ):
                return visitor.visitFugueJsonNull(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNull(self):

        localctx = fugue_sqlParser.FugueJsonNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fugueJsonNull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__11 or _la==fugue_sqlParser.NULL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueIdentifier" ):
                listener.enterFugueIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueIdentifier" ):
                listener.exitFugueIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueIdentifier" ):
                return visitor.visitFugueIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueIdentifier(self):

        localctx = fugue_sqlParser.FugueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_fugueIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = fugue_sqlParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.statement()
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__12:
                self.state = 795
                self.match(fugue_sqlParser.T__12)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 801
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = fugue_sqlParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.namedExpression()
            self.state = 804
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableIdentifier" ):
                return visitor.visitSingleTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleTableIdentifier(self):

        localctx = fugue_sqlParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.tableIdentifier()
            self.state = 807
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleMultipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleMultipartIdentifier" ):
                listener.enterSingleMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleMultipartIdentifier" ):
                listener.exitSingleMultipartIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleMultipartIdentifier" ):
                return visitor.visitSingleMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleMultipartIdentifier(self):

        localctx = fugue_sqlParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.multipartIdentifier()
            self.state = 810
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFunctionIdentifier" ):
                return visitor.visitSingleFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleFunctionIdentifier(self):

        localctx = fugue_sqlParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.functionIdentifier()
            self.state = 813
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDataType" ):
                return visitor.visitSingleDataType(self)
            else:
                return visitor.visitChildren(self)




    def singleDataType(self):

        localctx = fugue_sqlParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.dataType()
            self.state = 816
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableSchema" ):
                listener.enterSingleTableSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableSchema" ):
                listener.exitSingleTableSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableSchema" ):
                return visitor.visitSingleTableSchema(self)
            else:
                return visitor.visitChildren(self)




    def singleTableSchema(self):

        localctx = fugue_sqlParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.colTypeList()
            self.state = 819
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetConfiguration" ):
                return visitor.visitResetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewQuery" ):
                return visitor.visitAlterViewQuery(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropNamespace" ):
                listener.enterDropNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropNamespace" ):
                listener.exitDropNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropNamespace" ):
                return visitor.visitDropNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTempViewUsing" ):
                return visitor.visitCreateTempViewUsing(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailNativeCommand" ):
                return visitor.visitFailNativeCommand(self)
            else:
                return visitor.visitChildren(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearCache" ):
                return visitor.visitClearCache(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecoverPartitions" ):
                return visitor.visitRecoverPartitions(self)
            else:
                return visitor.visitChildren(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)
        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentNamespace" ):
                listener.enterShowCurrentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentNamespace" ):
                listener.exitShowCurrentNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentNamespace" ):
                return visitor.visitShowCurrentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTablePartition" ):
                return visitor.visitRenameTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshResource" ):
                return visitor.visitRefreshResource(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)
        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowNamespaces" ):
                listener.enterShowNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowNamespaces" ):
                listener.exitShowNamespaces(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowNamespaces" ):
                return visitor.visitShowNamespaces(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.FROM)
            else:
                return self.getToken(fugue_sqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.IN)
            else:
                return self.getToken(fugue_sqlParser.IN, i)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.ReplaceTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTable" ):
                listener.enterReplaceTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTable" ):
                listener.exitReplaceTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTable" ):
                return visitor.visitReplaceTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecLocationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTablePartition" ):
                return visitor.visitAddTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceLocation" ):
                listener.enterSetNamespaceLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceLocation" ):
                listener.exitSetNamespaceLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceLocation" ):
                return visitor.visitSetNamespaceLocation(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceProperties" ):
                listener.enterSetNamespaceProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceProperties" ):
                listener.exitSetNamespaceProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceProperties" ):
                return visitor.visitSetNamespaceProperties(self)
            else:
                return visitor.visitChildren(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManageResource" ):
                return visitor.visitManageResource(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.partitionColumns = None # ColTypeListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SkewSpecContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateHiveTable" ):
                listener.enterCreateHiveTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateHiveTable" ):
                listener.exitCreateHiveTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateHiveTable" ):
                return visitor.visitCreateHiveTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ResourceContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ResourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTable" ):
                listener.enterShowTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTable" ):
                listener.exitShowTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTable" ):
                return visitor.visitShowTable(self)
            else:
                return visitor.visitChildren(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveReplaceColumns" ):
                listener.enterHiveReplaceColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveReplaceColumns" ):
                listener.exitHiveReplaceColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveReplaceColumns" ):
                return visitor.visitHiveReplaceColumns(self)
            else:
                return visitor.visitChildren(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentNamespace" ):
                listener.enterCommentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentNamespace" ):
                listener.exitCommentNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentNamespace" ):
                return visitor.visitCommentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(fugue_sqlParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableLike" ):
                return visitor.visitCreateTableLike(self)
            else:
                return visitor.visitChildren(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncacheTable" ):
                return visitor.visitUncacheTable(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeRelation" ):
                listener.enterDescribeRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeRelation" ):
                listener.exitDescribeRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeRelation" ):
                return visitor.visitDescribeRelation(self)
            else:
                return visitor.visitChildren(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)
        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)
        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadData" ):
                return visitor.visitLoadData(self)
            else:
                return visitor.visitChildren(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPartitions" ):
                return visitor.visitShowPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFunction" ):
                return visitor.visitDescribeFunction(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableColumn" ):
                listener.enterRenameTableColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableColumn" ):
                listener.exitRenameTableColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableColumn" ):
                return visitor.visitRenameTableColumn(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,0)

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveChangeColumn" ):
                listener.enterHiveChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveChangeColumn" ):
                listener.exitHiveChangeColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveChangeColumn" ):
                return visitor.visitHiveChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeQuery" ):
                listener.enterDescribeQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeQuery" ):
                listener.exitDescribeQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeQuery" ):
                return visitor.visitDescribeQuery(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableSerDe" ):
                return visitor.visitSetTableSerDe(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ON)
            else:
                return self.getToken(fugue_sqlParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablePartitions" ):
                return visitor.visitDropTablePartitions(self)
            else:
                return visitor.visitChildren(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetConfiguration" ):
                return visitor.visitSetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeNamespace" ):
                listener.enterDescribeNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeNamespace" ):
                listener.exitDescribeNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeNamespace" ):
                return visitor.visitDescribeNamespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ALTER)
            else:
                return self.getToken(fugue_sqlParser.ALTER, i)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.AlterColumnActionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableAlterColumn" ):
                listener.enterAlterTableAlterColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableAlterColumn" ):
                listener.exitAlterTableAlterColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableAlterColumn" ):
                return visitor.visitAlterTableAlterColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.WITH)
            else:
                return self.getToken(fugue_sqlParser.WITH, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.DBPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.PROPERTIES, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateNamespace" ):
                listener.enterCreateNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateNamespace" ):
                listener.exitCreateNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateNamespace" ):
                return visitor.visitCreateNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTblProperties" ):
                return visitor.visitShowTblProperties(self)
            else:
                return visitor.visitChildren(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetTableProperties" ):
                return visitor.visitUnsetTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableLocation" ):
                return visitor.visitSetTableLocation(self)
            else:
                return visitor.visitChildren(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableColumns" ):
                listener.enterDropTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableColumns" ):
                listener.exitDropTableColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableColumns" ):
                return visitor.visitDropTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowViews" ):
                listener.enterShowViews(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowViews" ):
                listener.exitShowViews(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowViews" ):
                return visitor.visitShowViews(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheTable" ):
                return visitor.visitCacheTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTableColumns" ):
                return visitor.visitAddTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = fugue_sqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.query()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WITH:
                    self.state = 822
                    self.ctes()


                self.state = 825
                self.dmlStatementNoWith()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 826
                self.match(fugue_sqlParser.USE)
                self.state = 828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 827
                    self.match(fugue_sqlParser.NAMESPACE)


                self.state = 830
                self.multipartIdentifier()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 831
                self.match(fugue_sqlParser.CREATE)
                self.state = 832
                self.namespace()
                self.state = 836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 833
                    self.match(fugue_sqlParser.IF)
                    self.state = 834
                    self.match(fugue_sqlParser.NOT)
                    self.state = 835
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 838
                self.multipartIdentifier()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.LOCATION or _la==fugue_sqlParser.WITH:
                    self.state = 844
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 839
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 840
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.WITH]:
                        self.state = 841
                        self.match(fugue_sqlParser.WITH)
                        self.state = 842
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.DBPROPERTIES or _la==fugue_sqlParser.PROPERTIES):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 843
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 849
                self.match(fugue_sqlParser.ALTER)
                self.state = 850
                self.namespace()
                self.state = 851
                self.multipartIdentifier()
                self.state = 852
                self.match(fugue_sqlParser.SET)
                self.state = 853
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DBPROPERTIES or _la==fugue_sqlParser.PROPERTIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 854
                self.tablePropertyList()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 856
                self.match(fugue_sqlParser.ALTER)
                self.state = 857
                self.namespace()
                self.state = 858
                self.multipartIdentifier()
                self.state = 859
                self.match(fugue_sqlParser.SET)
                self.state = 860
                self.locationSpec()
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 862
                self.match(fugue_sqlParser.DROP)
                self.state = 863
                self.namespace()
                self.state = 866
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 864
                    self.match(fugue_sqlParser.IF)
                    self.state = 865
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 868
                self.multipartIdentifier()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.CASCADE or _la==fugue_sqlParser.RESTRICT:
                    self.state = 869
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.CASCADE or _la==fugue_sqlParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 872
                self.match(fugue_sqlParser.SHOW)
                self.state = 873
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DATABASES or _la==fugue_sqlParser.NAMESPACES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 874
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 875
                    self.multipartIdentifier()


                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 878
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 881
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 884
                self.createTableHeader()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 885
                    self.match(fugue_sqlParser.T__2)
                    self.state = 886
                    self.colTypeList()
                    self.state = 887
                    self.match(fugue_sqlParser.T__3)


                self.state = 891
                self.tableProvider()
                self.state = 892
                self.createTableClauses()
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS or _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.MAP or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (fugue_sqlParser.REDUCE - 209)) | (1 << (fugue_sqlParser.SELECT - 209)) | (1 << (fugue_sqlParser.TABLE - 209)))) != 0) or _la==fugue_sqlParser.VALUES or _la==fugue_sqlParser.WITH:
                    self.state = 894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 893
                        self.match(fugue_sqlParser.AS)


                    self.state = 896
                    self.query()


                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 899
                self.createTableHeader()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 900
                    self.match(fugue_sqlParser.T__2)
                    self.state = 901
                    localctx.columns = self.colTypeList()
                    self.state = 902
                    self.match(fugue_sqlParser.T__3)


                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.CLUSTERED or _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.LOCATION or _la==fugue_sqlParser.PARTITIONED or ((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & ((1 << (fugue_sqlParser.ROW - 224)) | (1 << (fugue_sqlParser.SKEWED - 224)) | (1 << (fugue_sqlParser.STORED - 224)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 224)))) != 0):
                    self.state = 925
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 906
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.PARTITIONED]:
                        self.state = 916
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                        if la_ == 1:
                            self.state = 907
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 908
                            self.match(fugue_sqlParser.BY)
                            self.state = 909
                            self.match(fugue_sqlParser.T__2)
                            self.state = 910
                            localctx.partitionColumns = self.colTypeList()
                            self.state = 911
                            self.match(fugue_sqlParser.T__3)
                            pass

                        elif la_ == 2:
                            self.state = 913
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 914
                            self.match(fugue_sqlParser.BY)
                            self.state = 915
                            localctx.partitionColumnNames = self.identifierList()
                            pass


                        pass
                    elif token in [fugue_sqlParser.CLUSTERED]:
                        self.state = 918
                        self.bucketSpec()
                        pass
                    elif token in [fugue_sqlParser.SKEWED]:
                        self.state = 919
                        self.skewSpec()
                        pass
                    elif token in [fugue_sqlParser.ROW]:
                        self.state = 920
                        self.rowFormat()
                        pass
                    elif token in [fugue_sqlParser.STORED]:
                        self.state = 921
                        self.createFileFormat()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 922
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 923
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 924
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS or _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.MAP or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (fugue_sqlParser.REDUCE - 209)) | (1 << (fugue_sqlParser.SELECT - 209)) | (1 << (fugue_sqlParser.TABLE - 209)))) != 0) or _la==fugue_sqlParser.VALUES or _la==fugue_sqlParser.WITH:
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 930
                        self.match(fugue_sqlParser.AS)


                    self.state = 933
                    self.query()


                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 936
                self.match(fugue_sqlParser.CREATE)
                self.state = 937
                self.match(fugue_sqlParser.TABLE)
                self.state = 941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 938
                    self.match(fugue_sqlParser.IF)
                    self.state = 939
                    self.match(fugue_sqlParser.NOT)
                    self.state = 940
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 943
                localctx.target = self.tableIdentifier()
                self.state = 944
                self.match(fugue_sqlParser.LIKE)
                self.state = 945
                localctx.source = self.tableIdentifier()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.LOCATION or ((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & ((1 << (fugue_sqlParser.ROW - 224)) | (1 << (fugue_sqlParser.STORED - 224)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 224)) | (1 << (fugue_sqlParser.USING - 224)))) != 0):
                    self.state = 952
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.USING]:
                        self.state = 946
                        self.tableProvider()
                        pass
                    elif token in [fugue_sqlParser.ROW]:
                        self.state = 947
                        self.rowFormat()
                        pass
                    elif token in [fugue_sqlParser.STORED]:
                        self.state = 948
                        self.createFileFormat()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 949
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 950
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 951
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 957
                self.replaceTableHeader()
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 958
                    self.match(fugue_sqlParser.T__2)
                    self.state = 959
                    self.colTypeList()
                    self.state = 960
                    self.match(fugue_sqlParser.T__3)


                self.state = 964
                self.tableProvider()
                self.state = 965
                self.createTableClauses()
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS or _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.MAP or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (fugue_sqlParser.REDUCE - 209)) | (1 << (fugue_sqlParser.SELECT - 209)) | (1 << (fugue_sqlParser.TABLE - 209)))) != 0) or _la==fugue_sqlParser.VALUES or _la==fugue_sqlParser.WITH:
                    self.state = 967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 966
                        self.match(fugue_sqlParser.AS)


                    self.state = 969
                    self.query()


                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 972
                self.match(fugue_sqlParser.ANALYZE)
                self.state = 973
                self.match(fugue_sqlParser.TABLE)
                self.state = 974
                self.multipartIdentifier()
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 975
                    self.partitionSpec()


                self.state = 978
                self.match(fugue_sqlParser.COMPUTE)
                self.state = 979
                self.match(fugue_sqlParser.STATISTICS)
                self.state = 987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 980
                    self.identifier()

                elif la_ == 2:
                    self.state = 981
                    self.match(fugue_sqlParser.FOR)
                    self.state = 982
                    self.match(fugue_sqlParser.COLUMNS)
                    self.state = 983
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 984
                    self.match(fugue_sqlParser.FOR)
                    self.state = 985
                    self.match(fugue_sqlParser.ALL)
                    self.state = 986
                    self.match(fugue_sqlParser.COLUMNS)


                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 989
                self.match(fugue_sqlParser.ALTER)
                self.state = 990
                self.match(fugue_sqlParser.TABLE)
                self.state = 991
                self.multipartIdentifier()
                self.state = 992
                self.match(fugue_sqlParser.ADD)
                self.state = 993
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 994
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 996
                self.match(fugue_sqlParser.ALTER)
                self.state = 997
                self.match(fugue_sqlParser.TABLE)
                self.state = 998
                self.multipartIdentifier()
                self.state = 999
                self.match(fugue_sqlParser.ADD)
                self.state = 1000
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1001
                self.match(fugue_sqlParser.T__2)
                self.state = 1002
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1003
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1005
                self.match(fugue_sqlParser.ALTER)
                self.state = 1006
                self.match(fugue_sqlParser.TABLE)
                self.state = 1007
                localctx.table = self.multipartIdentifier()
                self.state = 1008
                self.match(fugue_sqlParser.RENAME)
                self.state = 1009
                self.match(fugue_sqlParser.COLUMN)
                self.state = 1010
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1011
                self.match(fugue_sqlParser.TO)
                self.state = 1012
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1014
                self.match(fugue_sqlParser.ALTER)
                self.state = 1015
                self.match(fugue_sqlParser.TABLE)
                self.state = 1016
                self.multipartIdentifier()
                self.state = 1017
                self.match(fugue_sqlParser.DROP)
                self.state = 1018
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1019
                self.match(fugue_sqlParser.T__2)
                self.state = 1020
                localctx.columns = self.multipartIdentifierList()
                self.state = 1021
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1023
                self.match(fugue_sqlParser.ALTER)
                self.state = 1024
                self.match(fugue_sqlParser.TABLE)
                self.state = 1025
                self.multipartIdentifier()
                self.state = 1026
                self.match(fugue_sqlParser.DROP)
                self.state = 1027
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1028
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1030
                self.match(fugue_sqlParser.ALTER)
                self.state = 1031
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1032
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1033
                self.match(fugue_sqlParser.RENAME)
                self.state = 1034
                self.match(fugue_sqlParser.TO)
                self.state = 1035
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1037
                self.match(fugue_sqlParser.ALTER)
                self.state = 1038
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1039
                self.multipartIdentifier()
                self.state = 1040
                self.match(fugue_sqlParser.SET)
                self.state = 1041
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1042
                self.tablePropertyList()
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1044
                self.match(fugue_sqlParser.ALTER)
                self.state = 1045
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1046
                self.multipartIdentifier()
                self.state = 1047
                self.match(fugue_sqlParser.UNSET)
                self.state = 1048
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1049
                    self.match(fugue_sqlParser.IF)
                    self.state = 1050
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1053
                self.tablePropertyList()
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1055
                self.match(fugue_sqlParser.ALTER)
                self.state = 1056
                self.match(fugue_sqlParser.TABLE)
                self.state = 1057
                localctx.table = self.multipartIdentifier()
                self.state = 1058
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ALTER or _la==fugue_sqlParser.CHANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1059
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1062
                localctx.column = self.multipartIdentifier()
                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AFTER or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (fugue_sqlParser.COMMENT - 67)) | (1 << (fugue_sqlParser.DROP - 67)) | (1 << (fugue_sqlParser.FIRST - 67)))) != 0) or _la==fugue_sqlParser.SET or _la==fugue_sqlParser.TYPE:
                    self.state = 1063
                    self.alterColumnAction()


                pass

            elif la_ == 23:
                localctx = fugue_sqlParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1066
                self.match(fugue_sqlParser.ALTER)
                self.state = 1067
                self.match(fugue_sqlParser.TABLE)
                self.state = 1068
                localctx.table = self.multipartIdentifier()
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1069
                    self.partitionSpec()


                self.state = 1072
                self.match(fugue_sqlParser.CHANGE)
                self.state = 1074
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1073
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1076
                localctx.colName = self.multipartIdentifier()
                self.state = 1077
                self.colType()
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.FIRST:
                    self.state = 1078
                    self.colPosition()


                pass

            elif la_ == 24:
                localctx = fugue_sqlParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1081
                self.match(fugue_sqlParser.ALTER)
                self.state = 1082
                self.match(fugue_sqlParser.TABLE)
                self.state = 1083
                localctx.table = self.multipartIdentifier()
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1084
                    self.partitionSpec()


                self.state = 1087
                self.match(fugue_sqlParser.REPLACE)
                self.state = 1088
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1089
                self.match(fugue_sqlParser.T__2)
                self.state = 1090
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1091
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 25:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1093
                self.match(fugue_sqlParser.ALTER)
                self.state = 1094
                self.match(fugue_sqlParser.TABLE)
                self.state = 1095
                self.multipartIdentifier()
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1096
                    self.partitionSpec()


                self.state = 1099
                self.match(fugue_sqlParser.SET)
                self.state = 1100
                self.match(fugue_sqlParser.SERDE)
                self.state = 1101
                self.match(fugue_sqlParser.STRING)
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WITH:
                    self.state = 1102
                    self.match(fugue_sqlParser.WITH)
                    self.state = 1103
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 1104
                    self.tablePropertyList()


                pass

            elif la_ == 26:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1107
                self.match(fugue_sqlParser.ALTER)
                self.state = 1108
                self.match(fugue_sqlParser.TABLE)
                self.state = 1109
                self.multipartIdentifier()
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1110
                    self.partitionSpec()


                self.state = 1113
                self.match(fugue_sqlParser.SET)
                self.state = 1114
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 1115
                self.tablePropertyList()
                pass

            elif la_ == 27:
                localctx = fugue_sqlParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1117
                self.match(fugue_sqlParser.ALTER)
                self.state = 1118
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1119
                self.multipartIdentifier()
                self.state = 1120
                self.match(fugue_sqlParser.ADD)
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1121
                    self.match(fugue_sqlParser.IF)
                    self.state = 1122
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1123
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1127 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1126
                    self.partitionSpecLocation()
                    self.state = 1129 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.PARTITION):
                        break

                pass

            elif la_ == 28:
                localctx = fugue_sqlParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1131
                self.match(fugue_sqlParser.ALTER)
                self.state = 1132
                self.match(fugue_sqlParser.TABLE)
                self.state = 1133
                self.multipartIdentifier()
                self.state = 1134
                localctx.ifrom = self.partitionSpec()
                self.state = 1135
                self.match(fugue_sqlParser.RENAME)
                self.state = 1136
                self.match(fugue_sqlParser.TO)
                self.state = 1137
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 29:
                localctx = fugue_sqlParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1139
                self.match(fugue_sqlParser.ALTER)
                self.state = 1140
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1141
                self.multipartIdentifier()
                self.state = 1142
                self.match(fugue_sqlParser.DROP)
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1143
                    self.match(fugue_sqlParser.IF)
                    self.state = 1144
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1147
                self.partitionSpec()
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 1148
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1149
                    self.partitionSpec()
                    self.state = 1154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PURGE:
                    self.state = 1155
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 30:
                localctx = fugue_sqlParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1158
                self.match(fugue_sqlParser.ALTER)
                self.state = 1159
                self.match(fugue_sqlParser.TABLE)
                self.state = 1160
                self.multipartIdentifier()
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1161
                    self.partitionSpec()


                self.state = 1164
                self.match(fugue_sqlParser.SET)
                self.state = 1165
                self.locationSpec()
                pass

            elif la_ == 31:
                localctx = fugue_sqlParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 1167
                self.match(fugue_sqlParser.ALTER)
                self.state = 1168
                self.match(fugue_sqlParser.TABLE)
                self.state = 1169
                self.multipartIdentifier()
                self.state = 1170
                self.match(fugue_sqlParser.RECOVER)
                self.state = 1171
                self.match(fugue_sqlParser.PARTITIONS)
                pass

            elif la_ == 32:
                localctx = fugue_sqlParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 1173
                self.match(fugue_sqlParser.DROP)
                self.state = 1174
                self.match(fugue_sqlParser.TABLE)
                self.state = 1177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1175
                    self.match(fugue_sqlParser.IF)
                    self.state = 1176
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1179
                self.multipartIdentifier()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PURGE:
                    self.state = 1180
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 33:
                localctx = fugue_sqlParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1183
                self.match(fugue_sqlParser.DROP)
                self.state = 1184
                self.match(fugue_sqlParser.VIEW)
                self.state = 1187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1185
                    self.match(fugue_sqlParser.IF)
                    self.state = 1186
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1189
                self.multipartIdentifier()
                pass

            elif la_ == 34:
                localctx = fugue_sqlParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1190
                self.match(fugue_sqlParser.CREATE)
                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1191
                    self.match(fugue_sqlParser.OR)
                    self.state = 1192
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.GLOBAL or _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.GLOBAL:
                        self.state = 1195
                        self.match(fugue_sqlParser.GLOBAL)


                    self.state = 1198
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1201
                self.match(fugue_sqlParser.VIEW)
                self.state = 1205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1202
                    self.match(fugue_sqlParser.IF)
                    self.state = 1203
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1204
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1207
                self.multipartIdentifier()
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1208
                    self.identifierCommentList()


                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.PARTITIONED or _la==fugue_sqlParser.TBLPROPERTIES:
                    self.state = 1217
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 1211
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.PARTITIONED]:
                        self.state = 1212
                        self.match(fugue_sqlParser.PARTITIONED)
                        self.state = 1213
                        self.match(fugue_sqlParser.ON)
                        self.state = 1214
                        self.identifierList()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 1215
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1216
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1222
                self.match(fugue_sqlParser.AS)
                self.state = 1223
                self.query()
                pass

            elif la_ == 35:
                localctx = fugue_sqlParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1225
                self.match(fugue_sqlParser.CREATE)
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1226
                    self.match(fugue_sqlParser.OR)
                    self.state = 1227
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.GLOBAL:
                    self.state = 1230
                    self.match(fugue_sqlParser.GLOBAL)


                self.state = 1233
                self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1234
                self.match(fugue_sqlParser.VIEW)
                self.state = 1235
                self.tableIdentifier()
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1236
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1237
                    self.colTypeList()
                    self.state = 1238
                    self.match(fugue_sqlParser.T__3)


                self.state = 1242
                self.tableProvider()
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1243
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1244
                    self.tablePropertyList()


                pass

            elif la_ == 36:
                localctx = fugue_sqlParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1247
                self.match(fugue_sqlParser.ALTER)
                self.state = 1248
                self.match(fugue_sqlParser.VIEW)
                self.state = 1249
                self.multipartIdentifier()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS:
                    self.state = 1250
                    self.match(fugue_sqlParser.AS)


                self.state = 1253
                self.query()
                pass

            elif la_ == 37:
                localctx = fugue_sqlParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1255
                self.match(fugue_sqlParser.CREATE)
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1256
                    self.match(fugue_sqlParser.OR)
                    self.state = 1257
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1260
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1263
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1264
                    self.match(fugue_sqlParser.IF)
                    self.state = 1265
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1266
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1269
                self.multipartIdentifier()
                self.state = 1270
                self.match(fugue_sqlParser.AS)
                self.state = 1271
                localctx.className = self.match(fugue_sqlParser.STRING)
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.USING:
                    self.state = 1272
                    self.match(fugue_sqlParser.USING)
                    self.state = 1273
                    self.resource()
                    self.state = 1278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 1274
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1275
                        self.resource()
                        self.state = 1280
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 38:
                localctx = fugue_sqlParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1283
                self.match(fugue_sqlParser.DROP)
                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1284
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1287
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1288
                    self.match(fugue_sqlParser.IF)
                    self.state = 1289
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1292
                self.multipartIdentifier()
                pass

            elif la_ == 39:
                localctx = fugue_sqlParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1293
                self.match(fugue_sqlParser.EXPLAIN)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (fugue_sqlParser.CODEGEN - 62)) | (1 << (fugue_sqlParser.COST - 62)) | (1 << (fugue_sqlParser.EXTENDED - 62)) | (1 << (fugue_sqlParser.FORMATTED - 62)))) != 0) or _la==fugue_sqlParser.LOGICAL:
                    self.state = 1294
                    _la = self._input.LA(1)
                    if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (fugue_sqlParser.CODEGEN - 62)) | (1 << (fugue_sqlParser.COST - 62)) | (1 << (fugue_sqlParser.EXTENDED - 62)) | (1 << (fugue_sqlParser.FORMATTED - 62)))) != 0) or _la==fugue_sqlParser.LOGICAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1297
                self.statement()
                pass

            elif la_ == 40:
                localctx = fugue_sqlParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1298
                self.match(fugue_sqlParser.SHOW)
                self.state = 1299
                self.match(fugue_sqlParser.TABLES)
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1300
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1301
                    self.multipartIdentifier()


                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1304
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1307
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 41:
                localctx = fugue_sqlParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1310
                self.match(fugue_sqlParser.SHOW)
                self.state = 1311
                self.match(fugue_sqlParser.TABLE)
                self.state = 1312
                self.match(fugue_sqlParser.EXTENDED)
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1313
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1314
                    localctx.ns = self.multipartIdentifier()


                self.state = 1317
                self.match(fugue_sqlParser.LIKE)
                self.state = 1318
                localctx.pattern = self.match(fugue_sqlParser.STRING)
                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1319
                    self.partitionSpec()


                pass

            elif la_ == 42:
                localctx = fugue_sqlParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1322
                self.match(fugue_sqlParser.SHOW)
                self.state = 1323
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1324
                localctx.table = self.multipartIdentifier()
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1325
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1326
                    localctx.key = self.tablePropertyKey()
                    self.state = 1327
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 43:
                localctx = fugue_sqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1331
                self.match(fugue_sqlParser.SHOW)
                self.state = 1332
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1333
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1334
                localctx.table = self.multipartIdentifier()
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1335
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1336
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 44:
                localctx = fugue_sqlParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1339
                self.match(fugue_sqlParser.SHOW)
                self.state = 1340
                self.match(fugue_sqlParser.VIEWS)
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1341
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1342
                    self.multipartIdentifier()


                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1345
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1348
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 45:
                localctx = fugue_sqlParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1351
                self.match(fugue_sqlParser.SHOW)
                self.state = 1352
                self.match(fugue_sqlParser.PARTITIONS)
                self.state = 1353
                self.multipartIdentifier()
                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1354
                    self.partitionSpec()


                pass

            elif la_ == 46:
                localctx = fugue_sqlParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1357
                self.match(fugue_sqlParser.SHOW)
                self.state = 1359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1358
                    self.identifier()


                self.state = 1361
                self.match(fugue_sqlParser.FUNCTIONS)
                self.state = 1369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1363
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        self.state = 1362
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1367
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1365
                        self.multipartIdentifier()
                        pass

                    elif la_ == 2:
                        self.state = 1366
                        localctx.pattern = self.match(fugue_sqlParser.STRING)
                        pass




                pass

            elif la_ == 47:
                localctx = fugue_sqlParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1371
                self.match(fugue_sqlParser.SHOW)
                self.state = 1372
                self.match(fugue_sqlParser.CREATE)
                self.state = 1373
                self.match(fugue_sqlParser.TABLE)
                self.state = 1374
                self.multipartIdentifier()
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS:
                    self.state = 1375
                    self.match(fugue_sqlParser.AS)
                    self.state = 1376
                    self.match(fugue_sqlParser.SERDE)


                pass

            elif la_ == 48:
                localctx = fugue_sqlParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1379
                self.match(fugue_sqlParser.SHOW)
                self.state = 1380
                self.match(fugue_sqlParser.CURRENT)
                self.state = 1381
                self.match(fugue_sqlParser.NAMESPACE)
                pass

            elif la_ == 49:
                localctx = fugue_sqlParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1382
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1383
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1385
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1384
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1387
                self.describeFuncName()
                pass

            elif la_ == 50:
                localctx = fugue_sqlParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1388
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1389
                self.namespace()
                self.state = 1391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1390
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1393
                self.multipartIdentifier()
                pass

            elif la_ == 51:
                localctx = fugue_sqlParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1395
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1396
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.EXTENDED or _la==fugue_sqlParser.FORMATTED):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1402
                self.multipartIdentifier()
                self.state = 1404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1403
                    self.partitionSpec()


                self.state = 1407
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1406
                    self.describeColName()


                pass

            elif la_ == 52:
                localctx = fugue_sqlParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1409
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.QUERY:
                    self.state = 1410
                    self.match(fugue_sqlParser.QUERY)


                self.state = 1413
                self.query()
                pass

            elif la_ == 53:
                localctx = fugue_sqlParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1414
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1415
                self.match(fugue_sqlParser.ON)
                self.state = 1416
                self.namespace()
                self.state = 1417
                self.multipartIdentifier()
                self.state = 1418
                self.match(fugue_sqlParser.IS)
                self.state = 1419
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.NULL or _la==fugue_sqlParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 54:
                localctx = fugue_sqlParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1421
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1422
                self.match(fugue_sqlParser.ON)
                self.state = 1423
                self.match(fugue_sqlParser.TABLE)
                self.state = 1424
                self.multipartIdentifier()
                self.state = 1425
                self.match(fugue_sqlParser.IS)
                self.state = 1426
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.NULL or _la==fugue_sqlParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 55:
                localctx = fugue_sqlParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1428
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1429
                self.match(fugue_sqlParser.TABLE)
                self.state = 1430
                self.multipartIdentifier()
                pass

            elif la_ == 56:
                localctx = fugue_sqlParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1431
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1432
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1436
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1433
                            self.matchWildcard() 
                        self.state = 1438
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                    pass


                pass

            elif la_ == 57:
                localctx = fugue_sqlParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1441
                self.match(fugue_sqlParser.CACHE)
                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 1442
                    self.match(fugue_sqlParser.LAZY)


                self.state = 1445
                self.match(fugue_sqlParser.TABLE)
                self.state = 1446
                self.multipartIdentifier()
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1447
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1448
                    localctx.options = self.tablePropertyList()


                self.state = 1455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS or _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.MAP or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (fugue_sqlParser.REDUCE - 209)) | (1 << (fugue_sqlParser.SELECT - 209)) | (1 << (fugue_sqlParser.TABLE - 209)))) != 0) or _la==fugue_sqlParser.VALUES or _la==fugue_sqlParser.WITH:
                    self.state = 1452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1451
                        self.match(fugue_sqlParser.AS)


                    self.state = 1454
                    self.query()


                pass

            elif la_ == 58:
                localctx = fugue_sqlParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1457
                self.match(fugue_sqlParser.UNCACHE)
                self.state = 1458
                self.match(fugue_sqlParser.TABLE)
                self.state = 1461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1459
                    self.match(fugue_sqlParser.IF)
                    self.state = 1460
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1463
                self.multipartIdentifier()
                pass

            elif la_ == 59:
                localctx = fugue_sqlParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1464
                self.match(fugue_sqlParser.CLEAR)
                self.state = 1465
                self.match(fugue_sqlParser.CACHE)
                pass

            elif la_ == 60:
                localctx = fugue_sqlParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1466
                self.match(fugue_sqlParser.LOAD)
                self.state = 1467
                self.match(fugue_sqlParser.DATA)
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1468
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1471
                self.match(fugue_sqlParser.INPATH)
                self.state = 1472
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OVERWRITE:
                    self.state = 1473
                    self.match(fugue_sqlParser.OVERWRITE)


                self.state = 1476
                self.match(fugue_sqlParser.INTO)
                self.state = 1477
                self.match(fugue_sqlParser.TABLE)
                self.state = 1478
                self.multipartIdentifier()
                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1479
                    self.partitionSpec()


                pass

            elif la_ == 61:
                localctx = fugue_sqlParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1482
                self.match(fugue_sqlParser.TRUNCATE)
                self.state = 1483
                self.match(fugue_sqlParser.TABLE)
                self.state = 1484
                self.multipartIdentifier()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1485
                    self.partitionSpec()


                pass

            elif la_ == 62:
                localctx = fugue_sqlParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1488
                self.match(fugue_sqlParser.MSCK)
                self.state = 1489
                self.match(fugue_sqlParser.REPAIR)
                self.state = 1490
                self.match(fugue_sqlParser.TABLE)
                self.state = 1491
                self.multipartIdentifier()
                pass

            elif la_ == 63:
                localctx = fugue_sqlParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1492
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ADD or _la==fugue_sqlParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1493
                self.identifier()
                self.state = 1501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1494
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1498
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1495
                            self.matchWildcard() 
                        self.state = 1500
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

                    pass


                pass

            elif la_ == 64:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1503
                self.match(fugue_sqlParser.SET)
                self.state = 1504
                self.match(fugue_sqlParser.ROLE)
                self.state = 1508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1505
                        self.matchWildcard() 
                    self.state = 1510
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                pass

            elif la_ == 65:
                localctx = fugue_sqlParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1511
                self.match(fugue_sqlParser.SET)
                self.state = 1515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1512
                        self.matchWildcard() 
                    self.state = 1517
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                pass

            elif la_ == 66:
                localctx = fugue_sqlParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1518
                self.match(fugue_sqlParser.RESET)
                pass

            elif la_ == 67:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1519
                self.unsupportedHiveNativeCommands()
                self.state = 1523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1520
                        self.matchWildcard() 
                    self.state = 1525
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsupportedHiveNativeCommands" ):
                return visitor.visitUnsupportedHiveNativeCommands(self)
            else:
                return visitor.visitChildren(self)




    def unsupportedHiveNativeCommands(self):

        localctx = fugue_sqlParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 1696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1528
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1529
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1531
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1532
                localctx.kw1 = self.match(fugue_sqlParser.GRANT)
                self.state = 1534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1533
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1536
                localctx.kw1 = self.match(fugue_sqlParser.REVOKE)
                self.state = 1538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1537
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1540
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1541
                localctx.kw2 = self.match(fugue_sqlParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1542
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1543
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                self.state = 1545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1544
                    localctx.kw3 = self.match(fugue_sqlParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1547
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1548
                localctx.kw2 = self.match(fugue_sqlParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1549
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1550
                localctx.kw2 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1551
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1552
                localctx.kw2 = self.match(fugue_sqlParser.CURRENT)
                self.state = 1553
                localctx.kw3 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1554
                localctx.kw1 = self.match(fugue_sqlParser.EXPORT)
                self.state = 1555
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1556
                localctx.kw1 = self.match(fugue_sqlParser.IMPORT)
                self.state = 1557
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1558
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1559
                localctx.kw2 = self.match(fugue_sqlParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1560
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1561
                localctx.kw2 = self.match(fugue_sqlParser.CREATE)
                self.state = 1562
                localctx.kw3 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1563
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1564
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1565
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1566
                localctx.kw2 = self.match(fugue_sqlParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1567
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1568
                localctx.kw2 = self.match(fugue_sqlParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1569
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1570
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1571
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1572
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1573
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1574
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1575
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1576
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1577
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1578
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1579
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1580
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1581
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1582
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1583
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1584
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1585
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1586
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1587
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1588
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1589
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1590
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1591
                self.tableIdentifier()
                self.state = 1592
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1593
                localctx.kw4 = self.match(fugue_sqlParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1595
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1596
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1597
                self.tableIdentifier()
                self.state = 1598
                localctx.kw3 = self.match(fugue_sqlParser.CLUSTERED)
                self.state = 1599
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1601
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1602
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1603
                self.tableIdentifier()
                self.state = 1604
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1605
                localctx.kw4 = self.match(fugue_sqlParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1607
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1608
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1609
                self.tableIdentifier()
                self.state = 1610
                localctx.kw3 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1611
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1613
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1614
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1615
                self.tableIdentifier()
                self.state = 1616
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1617
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1619
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1620
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1621
                self.tableIdentifier()
                self.state = 1622
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1623
                localctx.kw4 = self.match(fugue_sqlParser.STORED)
                self.state = 1624
                localctx.kw5 = self.match(fugue_sqlParser.AS)
                self.state = 1625
                localctx.kw6 = self.match(fugue_sqlParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1627
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1628
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1629
                self.tableIdentifier()
                self.state = 1630
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1631
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1632
                localctx.kw5 = self.match(fugue_sqlParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1634
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1635
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1636
                self.tableIdentifier()
                self.state = 1637
                localctx.kw3 = self.match(fugue_sqlParser.EXCHANGE)
                self.state = 1638
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1640
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1641
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1642
                self.tableIdentifier()
                self.state = 1643
                localctx.kw3 = self.match(fugue_sqlParser.ARCHIVE)
                self.state = 1644
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1646
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1647
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1648
                self.tableIdentifier()
                self.state = 1649
                localctx.kw3 = self.match(fugue_sqlParser.UNARCHIVE)
                self.state = 1650
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1652
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1653
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1654
                self.tableIdentifier()
                self.state = 1655
                localctx.kw3 = self.match(fugue_sqlParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1657
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1658
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1659
                self.tableIdentifier()
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1660
                    self.partitionSpec()


                self.state = 1663
                localctx.kw3 = self.match(fugue_sqlParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1665
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1666
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1667
                self.tableIdentifier()
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1668
                    self.partitionSpec()


                self.state = 1671
                localctx.kw3 = self.match(fugue_sqlParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1673
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1674
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1675
                self.tableIdentifier()
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1676
                    self.partitionSpec()


                self.state = 1679
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1680
                localctx.kw4 = self.match(fugue_sqlParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1682
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1683
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1684
                self.tableIdentifier()
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1685
                    self.partitionSpec()


                self.state = 1688
                localctx.kw3 = self.match(fugue_sqlParser.REPLACE)
                self.state = 1689
                localctx.kw4 = self.match(fugue_sqlParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1691
                localctx.kw1 = self.match(fugue_sqlParser.START)
                self.state = 1692
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1693
                localctx.kw1 = self.match(fugue_sqlParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1694
                localctx.kw1 = self.match(fugue_sqlParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1695
                localctx.kw1 = self.match(fugue_sqlParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableHeader" ):
                return visitor.visitCreateTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def createTableHeader(self):

        localctx = fugue_sqlParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.match(fugue_sqlParser.CREATE)
            self.state = 1700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.TEMPORARY:
                self.state = 1699
                self.match(fugue_sqlParser.TEMPORARY)


            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.EXTERNAL:
                self.state = 1702
                self.match(fugue_sqlParser.EXTERNAL)


            self.state = 1705
            self.match(fugue_sqlParser.TABLE)
            self.state = 1709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1706
                self.match(fugue_sqlParser.IF)
                self.state = 1707
                self.match(fugue_sqlParser.NOT)
                self.state = 1708
                self.match(fugue_sqlParser.EXISTS)


            self.state = 1711
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_replaceTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTableHeader" ):
                listener.enterReplaceTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTableHeader" ):
                listener.exitReplaceTableHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTableHeader" ):
                return visitor.visitReplaceTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def replaceTableHeader(self):

        localctx = fugue_sqlParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.CREATE:
                self.state = 1713
                self.match(fugue_sqlParser.CREATE)
                self.state = 1714
                self.match(fugue_sqlParser.OR)


            self.state = 1717
            self.match(fugue_sqlParser.REPLACE)
            self.state = 1718
            self.match(fugue_sqlParser.TABLE)
            self.state = 1719
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBucketSpec" ):
                return visitor.visitBucketSpec(self)
            else:
                return visitor.visitChildren(self)




    def bucketSpec(self):

        localctx = fugue_sqlParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.match(fugue_sqlParser.CLUSTERED)
            self.state = 1722
            self.match(fugue_sqlParser.BY)
            self.state = 1723
            self.identifierList()
            self.state = 1727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.SORTED:
                self.state = 1724
                self.match(fugue_sqlParser.SORTED)
                self.state = 1725
                self.match(fugue_sqlParser.BY)
                self.state = 1726
                self.orderedIdentifierList()


            self.state = 1729
            self.match(fugue_sqlParser.INTO)
            self.state = 1730
            self.match(fugue_sqlParser.INTEGER_VALUE)
            self.state = 1731
            self.match(fugue_sqlParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewSpec" ):
                return visitor.visitSkewSpec(self)
            else:
                return visitor.visitChildren(self)




    def skewSpec(self):

        localctx = fugue_sqlParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.match(fugue_sqlParser.SKEWED)
            self.state = 1734
            self.match(fugue_sqlParser.BY)
            self.state = 1735
            self.identifierList()
            self.state = 1736
            self.match(fugue_sqlParser.ON)
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1737
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1738
                self.nestedConstantList()
                pass


            self.state = 1744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1741
                self.match(fugue_sqlParser.STORED)
                self.state = 1742
                self.match(fugue_sqlParser.AS)
                self.state = 1743
                self.match(fugue_sqlParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationSpec" ):
                return visitor.visitLocationSpec(self)
            else:
                return visitor.visitChildren(self)




    def locationSpec(self):

        localctx = fugue_sqlParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            self.match(fugue_sqlParser.LOCATION)
            self.state = 1747
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_commentSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentSpec" ):
                listener.enterCommentSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentSpec" ):
                listener.exitCommentSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentSpec" ):
                return visitor.visitCommentSpec(self)
            else:
                return visitor.visitChildren(self)




    def commentSpec(self):

        localctx = fugue_sqlParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.match(fugue_sqlParser.COMMENT)
            self.state = 1750
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = fugue_sqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.WITH:
                self.state = 1752
                self.ctes()


            self.state = 1755
            self.queryTerm(0)
            self.state = 1756
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteHiveDir" ):
                listener.enterInsertOverwriteHiveDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteHiveDir" ):
                listener.exitInsertOverwriteHiveDir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteHiveDir" ):
                return visitor.visitInsertOverwriteHiveDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteDir" ):
                listener.enterInsertOverwriteDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteDir" ):
                listener.exitInsertOverwriteDir(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteDir" ):
                return visitor.visitInsertOverwriteDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteTable" ):
                listener.enterInsertOverwriteTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteTable" ):
                listener.exitInsertOverwriteTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteTable" ):
                return visitor.visitInsertOverwriteTable(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoTable" ):
                listener.enterInsertIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoTable" ):
                listener.exitInsertIntoTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoTable" ):
                return visitor.visitInsertIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def insertInto(self):

        localctx = fugue_sqlParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1758
                self.match(fugue_sqlParser.INSERT)
                self.state = 1759
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1760
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1763
                self.multipartIdentifier()
                self.state = 1770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1764
                    self.partitionSpec()
                    self.state = 1768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.IF:
                        self.state = 1765
                        self.match(fugue_sqlParser.IF)
                        self.state = 1766
                        self.match(fugue_sqlParser.NOT)
                        self.state = 1767
                        self.match(fugue_sqlParser.EXISTS)




                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1772
                self.match(fugue_sqlParser.INSERT)
                self.state = 1773
                self.match(fugue_sqlParser.INTO)
                self.state = 1775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1774
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1777
                self.multipartIdentifier()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1778
                    self.partitionSpec()


                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1781
                    self.match(fugue_sqlParser.IF)
                    self.state = 1782
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1783
                    self.match(fugue_sqlParser.EXISTS)


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1786
                self.match(fugue_sqlParser.INSERT)
                self.state = 1787
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1788
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1791
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 1792
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ROW:
                    self.state = 1793
                    self.rowFormat()


                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STORED:
                    self.state = 1796
                    self.createFileFormat()


                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1799
                self.match(fugue_sqlParser.INSERT)
                self.state = 1800
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1801
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1804
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STRING:
                    self.state = 1805
                    localctx.path = self.match(fugue_sqlParser.STRING)


                self.state = 1808
                self.tableProvider()
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1809
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1810
                    localctx.options = self.tablePropertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpecLocation" ):
                return visitor.visitPartitionSpecLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpecLocation(self):

        localctx = fugue_sqlParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.partitionSpec()
            self.state = 1817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.LOCATION:
                self.state = 1816
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionValContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = fugue_sqlParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.match(fugue_sqlParser.PARTITION)
            self.state = 1820
            self.match(fugue_sqlParser.T__2)
            self.state = 1821
            self.partitionVal()
            self.state = 1826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 1822
                self.match(fugue_sqlParser.T__0)
                self.state = 1823
                self.partitionVal()
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1829
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = fugue_sqlParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self.identifier()
            self.state = 1834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.EQUAL:
                self.state = 1832
                self.match(fugue_sqlParser.EQUAL)
                self.state = 1833
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace" ):
                return visitor.visitNamespace(self)
            else:
                return visitor.visitChildren(self)




    def namespace(self):

        localctx = fugue_sqlParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.DATABASE or _la==fugue_sqlParser.NAMESPACE or _la==fugue_sqlParser.SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFuncName" ):
                return visitor.visitDescribeFuncName(self)
            else:
                return visitor.visitChildren(self)




    def describeFuncName(self):

        localctx = fugue_sqlParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_describeFuncName)
        try:
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1839
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1840
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1841
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1842
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeColName" ):
                return visitor.visitDescribeColName(self)
            else:
                return visitor.visitChildren(self)




    def describeColName(self):

        localctx = fugue_sqlParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 1850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__4:
                self.state = 1846
                self.match(fugue_sqlParser.T__4)
                self.state = 1847
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 1852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtes" ):
                return visitor.visitCtes(self)
            else:
                return visitor.visitChildren(self)




    def ctes(self):

        localctx = fugue_sqlParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.match(fugue_sqlParser.WITH)
            self.state = 1854
            self.namedQuery()
            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 1855
                self.match(fugue_sqlParser.T__0)
                self.state = 1856
                self.namedQuery()
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = fugue_sqlParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            localctx.name = self.errorCapturingIdentifier()
            self.state = 1864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1863
                localctx.columnAliases = self.identifierList()


            self.state = 1867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AS:
                self.state = 1866
                self.match(fugue_sqlParser.AS)


            self.state = 1869
            self.match(fugue_sqlParser.T__2)
            self.state = 1870
            self.query()
            self.state = 1871
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProvider" ):
                return visitor.visitTableProvider(self)
            else:
                return visitor.visitChildren(self)




    def tableProvider(self):

        localctx = fugue_sqlParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self.match(fugue_sqlParser.USING)
            self.state = 1874
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # TablePropertyListContext
            self.partitioning = None # TransformListContext
            self.tableProps = None # TablePropertyListContext

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.OPTIONS)
            else:
                return self.getToken(fugue_sqlParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def transformList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableClauses" ):
                listener.enterCreateTableClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableClauses" ):
                listener.exitCreateTableClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableClauses" ):
                return visitor.visitCreateTableClauses(self)
            else:
                return visitor.visitChildren(self)




    def createTableClauses(self):

        localctx = fugue_sqlParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.CLUSTERED or _la==fugue_sqlParser.COMMENT or ((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & ((1 << (fugue_sqlParser.LOCATION - 160)) | (1 << (fugue_sqlParser.OPTIONS - 160)) | (1 << (fugue_sqlParser.PARTITIONED - 160)))) != 0) or _la==fugue_sqlParser.TBLPROPERTIES:
                self.state = 1886
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.OPTIONS]:
                    self.state = 1876
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1877
                    localctx.options = self.tablePropertyList()
                    pass
                elif token in [fugue_sqlParser.PARTITIONED]:
                    self.state = 1878
                    self.match(fugue_sqlParser.PARTITIONED)
                    self.state = 1879
                    self.match(fugue_sqlParser.BY)
                    self.state = 1880
                    localctx.partitioning = self.transformList()
                    pass
                elif token in [fugue_sqlParser.CLUSTERED]:
                    self.state = 1881
                    self.bucketSpec()
                    pass
                elif token in [fugue_sqlParser.LOCATION]:
                    self.state = 1882
                    self.locationSpec()
                    pass
                elif token in [fugue_sqlParser.COMMENT]:
                    self.state = 1883
                    self.commentSpec()
                    pass
                elif token in [fugue_sqlParser.TBLPROPERTIES]:
                    self.state = 1884
                    self.match(fugue_sqlParser.TBLPROPERTIES)
                    self.state = 1885
                    localctx.tableProps = self.tablePropertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyList" ):
                listener.enterTablePropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyList" ):
                listener.exitTablePropertyList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyList" ):
                return visitor.visitTablePropertyList(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyList(self):

        localctx = fugue_sqlParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self.match(fugue_sqlParser.T__2)
            self.state = 1892
            self.tableProperty()
            self.state = 1897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 1893
                self.match(fugue_sqlParser.T__0)
                self.state = 1894
                self.tableProperty()
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1900
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyValueContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperty" ):
                listener.enterTableProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperty" ):
                listener.exitTableProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProperty" ):
                return visitor.visitTableProperty(self)
            else:
                return visitor.visitChildren(self)




    def tableProperty(self):

        localctx = fugue_sqlParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            localctx.key = self.tablePropertyKey()
            self.state = 1907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.FALSE or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (fugue_sqlParser.TRUE - 263)) | (1 << (fugue_sqlParser.EQUAL - 263)) | (1 << (fugue_sqlParser.STRING - 263)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 263)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 263)))) != 0):
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.EQUAL:
                    self.state = 1903
                    self.match(fugue_sqlParser.EQUAL)


                self.state = 1906
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyKey" ):
                listener.enterTablePropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyKey" ):
                listener.exitTablePropertyKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyKey" ):
                return visitor.visitTablePropertyKey(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyKey(self):

        localctx = fugue_sqlParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 1918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1909
                self.identifier()
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__4:
                    self.state = 1910
                    self.match(fugue_sqlParser.T__4)
                    self.state = 1911
                    self.identifier()
                    self.state = 1916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1917
                self.match(fugue_sqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyValue" ):
                listener.enterTablePropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyValue" ):
                listener.exitTablePropertyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyValue" ):
                return visitor.visitTablePropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyValue(self):

        localctx = fugue_sqlParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_tablePropertyValue)
        try:
            self.state = 1924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1920
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [fugue_sqlParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1921
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass
            elif token in [fugue_sqlParser.FALSE, fugue_sqlParser.TRUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1922
                self.booleanValue()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1923
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantList" ):
                return visitor.visitConstantList(self)
            else:
                return visitor.visitChildren(self)




    def constantList(self):

        localctx = fugue_sqlParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            self.match(fugue_sqlParser.T__2)
            self.state = 1927
            self.constant()
            self.state = 1932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 1928
                self.match(fugue_sqlParser.T__0)
                self.state = 1929
                self.constant()
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1935
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedConstantList" ):
                return visitor.visitNestedConstantList(self)
            else:
                return visitor.visitChildren(self)




    def nestedConstantList(self):

        localctx = fugue_sqlParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.match(fugue_sqlParser.T__2)
            self.state = 1938
            self.constantList()
            self.state = 1943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 1939
                self.match(fugue_sqlParser.T__0)
                self.state = 1940
                self.constantList()
                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1946
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(fugue_sqlParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFileFormat" ):
                return visitor.visitCreateFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def createFileFormat(self):

        localctx = fugue_sqlParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_createFileFormat)
        try:
            self.state = 1954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1948
                self.match(fugue_sqlParser.STORED)
                self.state = 1949
                self.match(fugue_sqlParser.AS)
                self.state = 1950
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1951
                self.match(fugue_sqlParser.STORED)
                self.state = 1952
                self.match(fugue_sqlParser.BY)
                self.state = 1953
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFileFormat" ):
                return visitor.visitGenericFileFormat(self)
            else:
                return visitor.visitChildren(self)



    def fileFormat(self):

        localctx = fugue_sqlParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_fileFormat)
        try:
            self.state = 1961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1956
                self.match(fugue_sqlParser.INPUTFORMAT)
                self.state = 1957
                localctx.inFmt = self.match(fugue_sqlParser.STRING)
                self.state = 1958
                self.match(fugue_sqlParser.OUTPUTFORMAT)
                self.state = 1959
                localctx.outFmt = self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1960
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageHandler" ):
                return visitor.visitStorageHandler(self)
            else:
                return visitor.visitChildren(self)




    def storageHandler(self):

        localctx = fugue_sqlParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1963
            self.match(fugue_sqlParser.STRING)
            self.state = 1967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1964
                self.match(fugue_sqlParser.WITH)
                self.state = 1965
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 1966
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = fugue_sqlParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.identifier()
            self.state = 1970
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteFromTable" ):
                listener.enterDeleteFromTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteFromTable" ):
                listener.exitDeleteFromTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteFromTable" ):
                return visitor.visitDeleteFromTable(self)
            else:
                return visitor.visitChildren(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInsertQuery" ):
                return visitor.visitSingleInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQuery" ):
                return visitor.visitMultiInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateTable" ):
                listener.enterUpdateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateTable" ):
                listener.exitUpdateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateTable" ):
                return visitor.visitUpdateTable(self)
            else:
                return visitor.visitChildren(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # MultipartIdentifierContext
            self.targetAlias = None # TableAliasContext
            self.source = None # MultipartIdentifierContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NotMatchedClauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeIntoTable" ):
                listener.enterMergeIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeIntoTable" ):
                listener.exitMergeIntoTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeIntoTable" ):
                return visitor.visitMergeIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def dmlStatementNoWith(self):

        localctx = fugue_sqlParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 2023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INSERT]:
                localctx = fugue_sqlParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.insertInto()
                self.state = 1973
                self.queryTerm(0)
                self.state = 1974
                self.queryOrganization()
                pass
            elif token in [fugue_sqlParser.FROM]:
                localctx = fugue_sqlParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1976
                self.fromClause()
                self.state = 1978 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1977
                    self.multiInsertQueryBody()
                    self.state = 1980 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.INSERT):
                        break

                pass
            elif token in [fugue_sqlParser.DELETE]:
                localctx = fugue_sqlParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1982
                self.match(fugue_sqlParser.DELETE)
                self.state = 1983
                self.match(fugue_sqlParser.FROM)
                self.state = 1984
                self.multipartIdentifier()
                self.state = 1985
                self.tableAlias()
                self.state = 1987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WHERE:
                    self.state = 1986
                    self.whereClause()


                pass
            elif token in [fugue_sqlParser.UPDATE]:
                localctx = fugue_sqlParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1989
                self.match(fugue_sqlParser.UPDATE)
                self.state = 1990
                self.multipartIdentifier()
                self.state = 1991
                self.tableAlias()
                self.state = 1992
                self.setClause()
                self.state = 1994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WHERE:
                    self.state = 1993
                    self.whereClause()


                pass
            elif token in [fugue_sqlParser.MERGE]:
                localctx = fugue_sqlParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1996
                self.match(fugue_sqlParser.MERGE)
                self.state = 1997
                self.match(fugue_sqlParser.INTO)
                self.state = 1998
                localctx.target = self.multipartIdentifier()
                self.state = 1999
                localctx.targetAlias = self.tableAlias()
                self.state = 2000
                self.match(fugue_sqlParser.USING)
                self.state = 2006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 2001
                    localctx.source = self.multipartIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2002
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2003
                    localctx.sourceQuery = self.query()
                    self.state = 2004
                    self.match(fugue_sqlParser.T__3)
                    pass


                self.state = 2008
                localctx.sourceAlias = self.tableAlias()
                self.state = 2009
                self.match(fugue_sqlParser.ON)
                self.state = 2010
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 2014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2011
                        self.matchedClause() 
                    self.state = 2016
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                self.state = 2020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.WHEN:
                    self.state = 2017
                    self.notMatchedClause()
                    self.state = 2022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOrganization" ):
                return visitor.visitQueryOrganization(self)
            else:
                return visitor.visitChildren(self)




    def queryOrganization(self):

        localctx = fugue_sqlParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 2025
                self.match(fugue_sqlParser.ORDER)
                self.state = 2026
                self.match(fugue_sqlParser.BY)
                self.state = 2027
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 2032
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2028
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2029
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 2034
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,239,self._ctx)



            self.state = 2047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2037
                self.match(fugue_sqlParser.CLUSTER)
                self.state = 2038
                self.match(fugue_sqlParser.BY)
                self.state = 2039
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 2044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2040
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2041
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 2046
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,241,self._ctx)



            self.state = 2059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 2049
                self.match(fugue_sqlParser.DISTRIBUTE)
                self.state = 2050
                self.match(fugue_sqlParser.BY)
                self.state = 2051
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 2056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2052
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2053
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 2058
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,243,self._ctx)



            self.state = 2071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 2061
                self.match(fugue_sqlParser.SORT)
                self.state = 2062
                self.match(fugue_sqlParser.BY)
                self.state = 2063
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 2068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2064
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2065
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 2070
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,245,self._ctx)



            self.state = 2074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 2073
                self.windowClause()


            self.state = 2081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 2076
                self.match(fugue_sqlParser.LIMIT)
                self.state = 2079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 2077
                    self.match(fugue_sqlParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 2078
                    localctx.limit = self.expression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQueryBody" ):
                return visitor.visitMultiInsertQueryBody(self)
            else:
                return visitor.visitChildren(self)




    def multiInsertQueryBody(self):

        localctx = fugue_sqlParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            self.insertInto()
            self.state = 2084
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = fugue_sqlParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2087
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2110
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2089
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2090
                        if not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 2091
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.EXCEPT or _la==fugue_sqlParser.INTERSECT or _la==fugue_sqlParser.SETMINUS or _la==fugue_sqlParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2093
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2092
                            self.setQuantifier()


                        self.state = 2095
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2096
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2097
                        if not not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "not fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 2098
                        localctx.operator = self.match(fugue_sqlParser.INTERSECT)
                        self.state = 2100
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2099
                            self.setQuantifier()


                        self.state = 2102
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2103
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2104
                        if not not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "not fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 2105
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.EXCEPT or _la==fugue_sqlParser.SETMINUS or _la==fugue_sqlParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2107
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2106
                            self.setQuantifier()


                        self.state = 2109
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 2114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault1" ):
                return visitor.visitInlineTableDefault1(self)
            else:
                return visitor.visitChildren(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStmt" ):
                return visitor.visitFromStmt(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = fugue_sqlParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_queryPrimary)
        try:
            self.state = 2120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.MAP, fugue_sqlParser.REDUCE, fugue_sqlParser.SELECT]:
                localctx = fugue_sqlParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2115
                self.querySpecification()
                pass
            elif token in [fugue_sqlParser.FROM]:
                localctx = fugue_sqlParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2116
                self.fromStatement()
                pass
            elif token in [fugue_sqlParser.TABLE]:
                localctx = fugue_sqlParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2117
                self.match(fugue_sqlParser.TABLE)
                self.state = 2118
                self.multipartIdentifier()
                pass
            elif token in [fugue_sqlParser.VALUES]:
                localctx = fugue_sqlParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2119
                self.inlineTable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = fugue_sqlParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.expression()
            self.state = 2124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 2123
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 2126
                self.match(fugue_sqlParser.NULLS)
                self.state = 2127
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FIRST or _la==fugue_sqlParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatement" ):
                listener.enterFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatement" ):
                listener.exitFromStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatement" ):
                return visitor.visitFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def fromStatement(self):

        localctx = fugue_sqlParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self.fromClause()
            self.state = 2132 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2131
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 2134 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatementBody" ):
                listener.enterFromStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatementBody" ):
                listener.exitFromStatementBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatementBody" ):
                return visitor.visitFromStatementBody(self)
            else:
                return visitor.visitChildren(self)




    def fromStatementBody(self):

        localctx = fugue_sqlParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_fromStatementBody)
        try:
            self.state = 2163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2136
                self.transformClause()
                self.state = 2138
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 2137
                    self.whereClause()


                self.state = 2140
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2142
                self.selectClause()
                self.state = 2146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2143
                        self.lateralView() 
                    self.state = 2148
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

                self.state = 2150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 2149
                    self.whereClause()


                self.state = 2153
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 2152
                    self.aggregationClause()


                self.state = 2156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 2155
                    self.havingClause()


                self.state = 2159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 2158
                    self.windowClause()


                self.state = 2161
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularQuerySpecification" ):
                listener.enterRegularQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularQuerySpecification" ):
                listener.exitRegularQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularQuerySpecification" ):
                return visitor.visitRegularQuerySpecification(self)
            else:
                return visitor.visitChildren(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformQuerySpecification" ):
                listener.enterTransformQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformQuerySpecification" ):
                listener.exitTransformQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformQuerySpecification" ):
                return visitor.visitTransformQuerySpecification(self)
            else:
                return visitor.visitChildren(self)



    def querySpecification(self):

        localctx = fugue_sqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_querySpecification)
        try:
            self.state = 2194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2165
                self.transformClause()
                self.state = 2167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2166
                    self.fromClause()


                self.state = 2170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 2169
                    self.whereClause()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2172
                self.selectClause()
                self.state = 2174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 2173
                    self.fromClause()


                self.state = 2179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2176
                        self.lateralView() 
                    self.state = 2181
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

                self.state = 2183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 2182
                    self.whereClause()


                self.state = 2186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                if la_ == 1:
                    self.state = 2185
                    self.aggregationClause()


                self.state = 2189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2188
                    self.havingClause()


                self.state = 2192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                if la_ == 1:
                    self.state = 2191
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)


        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformClause" ):
                listener.enterTransformClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformClause" ):
                listener.exitTransformClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformClause" ):
                return visitor.visitTransformClause(self)
            else:
                return visitor.visitChildren(self)




    def transformClause(self):

        localctx = fugue_sqlParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.SELECT]:
                self.state = 2196
                self.match(fugue_sqlParser.SELECT)
                self.state = 2197
                localctx.kind = self.match(fugue_sqlParser.TRANSFORM)
                self.state = 2198
                self.match(fugue_sqlParser.T__2)
                self.state = 2199
                self.namedExpressionSeq()
                self.state = 2200
                self.match(fugue_sqlParser.T__3)
                pass
            elif token in [fugue_sqlParser.MAP]:
                self.state = 2202
                localctx.kind = self.match(fugue_sqlParser.MAP)
                self.state = 2203
                self.namedExpressionSeq()
                pass
            elif token in [fugue_sqlParser.REDUCE]:
                self.state = 2204
                localctx.kind = self.match(fugue_sqlParser.REDUCE)
                self.state = 2205
                self.namedExpressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ROW:
                self.state = 2208
                localctx.inRowFormat = self.rowFormat()


            self.state = 2213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.RECORDWRITER:
                self.state = 2211
                self.match(fugue_sqlParser.RECORDWRITER)
                self.state = 2212
                localctx.recordWriter = self.match(fugue_sqlParser.STRING)


            self.state = 2215
            self.match(fugue_sqlParser.USING)
            self.state = 2216
            localctx.script = self.match(fugue_sqlParser.STRING)
            self.state = 2229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2217
                self.match(fugue_sqlParser.AS)
                self.state = 2227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 2218
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 2219
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 2220
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2223
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                    if la_ == 1:
                        self.state = 2221
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 2222
                        self.colTypeList()
                        pass


                    self.state = 2225
                    self.match(fugue_sqlParser.T__3)
                    pass




            self.state = 2232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2231
                localctx.outRowFormat = self.rowFormat()


            self.state = 2236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2234
                self.match(fugue_sqlParser.RECORDREADER)
                self.state = 2235
                localctx.recordReader = self.match(fugue_sqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = fugue_sqlParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2238
            self.match(fugue_sqlParser.SELECT)
            self.state = 2242
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2239
                    localctx._hint = self.hint()
                    localctx.hints.append(localctx._hint) 
                self.state = 2244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

            self.state = 2246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2245
                self.setQuantifier()


            self.state = 2248
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetClause" ):
                listener.enterSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetClause" ):
                listener.exitSetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetClause" ):
                return visitor.visitSetClause(self)
            else:
                return visitor.visitChildren(self)




    def setClause(self):

        localctx = fugue_sqlParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(fugue_sqlParser.SET)
            self.state = 2251
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedClause" ):
                listener.enterMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedClause" ):
                listener.exitMatchedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedClause" ):
                return visitor.visitMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def matchedClause(self):

        localctx = fugue_sqlParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2253
            self.match(fugue_sqlParser.WHEN)
            self.state = 2254
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AND:
                self.state = 2255
                self.match(fugue_sqlParser.AND)
                self.state = 2256
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 2259
            self.match(fugue_sqlParser.THEN)
            self.state = 2260
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.NotMatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedClause" ):
                listener.enterNotMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedClause" ):
                listener.exitNotMatchedClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedClause" ):
                return visitor.visitNotMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedClause(self):

        localctx = fugue_sqlParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.match(fugue_sqlParser.WHEN)
            self.state = 2263
            self.match(fugue_sqlParser.NOT)
            self.state = 2264
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AND:
                self.state = 2265
                self.match(fugue_sqlParser.AND)
                self.state = 2266
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 2269
            self.match(fugue_sqlParser.THEN)
            self.state = 2270
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedAction" ):
                listener.enterMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedAction" ):
                listener.exitMatchedAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedAction" ):
                return visitor.visitMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def matchedAction(self):

        localctx = fugue_sqlParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_matchedAction)
        try:
            self.state = 2279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2272
                self.match(fugue_sqlParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2273
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2274
                self.match(fugue_sqlParser.SET)
                self.state = 2275
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2276
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2277
                self.match(fugue_sqlParser.SET)
                self.state = 2278
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedAction" ):
                listener.enterNotMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedAction" ):
                listener.exitNotMatchedAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedAction" ):
                return visitor.visitNotMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedAction(self):

        localctx = fugue_sqlParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2281
                self.match(fugue_sqlParser.INSERT)
                self.state = 2282
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2283
                self.match(fugue_sqlParser.INSERT)
                self.state = 2284
                self.match(fugue_sqlParser.T__2)
                self.state = 2285
                localctx.columns = self.multipartIdentifierList()
                self.state = 2286
                self.match(fugue_sqlParser.T__3)
                self.state = 2287
                self.match(fugue_sqlParser.VALUES)
                self.state = 2288
                self.match(fugue_sqlParser.T__2)
                self.state = 2289
                self.expression()
                self.state = 2294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2290
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2291
                    self.expression()
                    self.state = 2296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2297
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.AssignmentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentList" ):
                return visitor.visitAssignmentList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentList(self):

        localctx = fugue_sqlParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            self.assignment()
            self.state = 2306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2302
                self.match(fugue_sqlParser.T__0)
                self.state = 2303
                self.assignment()
                self.state = 2308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = fugue_sqlParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            localctx.key = self.multipartIdentifier()
            self.state = 2310
            self.match(fugue_sqlParser.EQUAL)
            self.state = 2311
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = fugue_sqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2313
            self.match(fugue_sqlParser.WHERE)
            self.state = 2314
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = fugue_sqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2316
            self.match(fugue_sqlParser.HAVING)
            self.state = 2317
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintStatementContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHint" ):
                return visitor.visitHint(self)
            else:
                return visitor.visitChildren(self)




    def hint(self):

        localctx = fugue_sqlParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.match(fugue_sqlParser.T__13)
            self.state = 2320
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2327
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2322
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                    if la_ == 1:
                        self.state = 2321
                        self.match(fugue_sqlParser.T__0)


                    self.state = 2324
                    localctx._hintStatement = self.hintStatement()
                    localctx.hintStatements.append(localctx._hintStatement) 
                self.state = 2329
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

            self.state = 2330
            self.match(fugue_sqlParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHintStatement" ):
                return visitor.visitHintStatement(self)
            else:
                return visitor.visitChildren(self)




    def hintStatement(self):

        localctx = fugue_sqlParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2332
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2333
                localctx.hintName = self.identifier()
                self.state = 2334
                self.match(fugue_sqlParser.T__2)
                self.state = 2335
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2336
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2337
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2343
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = fugue_sqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            self.match(fugue_sqlParser.FROM)
            self.state = 2348
            self.relation()
            self.state = 2353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2349
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2350
                    self.relation() 
                self.state = 2355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

            self.state = 2359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2356
                    self.lateralView() 
                self.state = 2361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

            self.state = 2363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 2362
                self.pivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_aggregationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregationClause" ):
                listener.enterAggregationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregationClause" ):
                listener.exitAggregationClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregationClause" ):
                return visitor.visitAggregationClause(self)
            else:
                return visitor.visitChildren(self)




    def aggregationClause(self):

        localctx = fugue_sqlParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2365
                self.match(fugue_sqlParser.GROUP)
                self.state = 2366
                self.match(fugue_sqlParser.BY)
                self.state = 2367
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2368
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2369
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2374
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

                self.state = 2392
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 2375
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2376
                    localctx.kind = self.match(fugue_sqlParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2377
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2378
                    localctx.kind = self.match(fugue_sqlParser.CUBE)

                elif la_ == 3:
                    self.state = 2379
                    localctx.kind = self.match(fugue_sqlParser.GROUPING)
                    self.state = 2380
                    self.match(fugue_sqlParser.SETS)
                    self.state = 2381
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2382
                    self.groupingSet()
                    self.state = 2387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 2383
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2384
                        self.groupingSet()
                        self.state = 2389
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2390
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2394
                self.match(fugue_sqlParser.GROUP)
                self.state = 2395
                self.match(fugue_sqlParser.BY)
                self.state = 2396
                localctx.kind = self.match(fugue_sqlParser.GROUPING)
                self.state = 2397
                self.match(fugue_sqlParser.SETS)
                self.state = 2398
                self.match(fugue_sqlParser.T__2)
                self.state = 2399
                self.groupingSet()
                self.state = 2404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2400
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2401
                    self.groupingSet()
                    self.state = 2406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2407
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = fugue_sqlParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2411
                self.match(fugue_sqlParser.T__2)
                self.state = 2420
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 2412
                    self.expression()
                    self.state = 2417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 2413
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2414
                        self.expression()
                        self.state = 2419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2422
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2423
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PivotValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotClause" ):
                listener.enterPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotClause" ):
                listener.exitPivotClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotClause" ):
                return visitor.visitPivotClause(self)
            else:
                return visitor.visitChildren(self)




    def pivotClause(self):

        localctx = fugue_sqlParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2426
            self.match(fugue_sqlParser.PIVOT)
            self.state = 2427
            self.match(fugue_sqlParser.T__2)
            self.state = 2428
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2429
            self.match(fugue_sqlParser.FOR)
            self.state = 2430
            self.pivotColumn()
            self.state = 2431
            self.match(fugue_sqlParser.IN)
            self.state = 2432
            self.match(fugue_sqlParser.T__2)
            self.state = 2433
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2434
                self.match(fugue_sqlParser.T__0)
                self.state = 2435
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2441
            self.match(fugue_sqlParser.T__3)
            self.state = 2442
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotColumn" ):
                listener.enterPivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotColumn" ):
                listener.exitPivotColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotColumn" ):
                return visitor.visitPivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def pivotColumn(self):

        localctx = fugue_sqlParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2444
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2445
                self.match(fugue_sqlParser.T__2)
                self.state = 2446
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 2451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2447
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2448
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 2453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2454
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotValue" ):
                listener.enterPivotValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotValue" ):
                listener.exitPivotValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotValue" ):
                return visitor.visitPivotValue(self)
            else:
                return visitor.visitChildren(self)




    def pivotValue(self):

        localctx = fugue_sqlParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_pivotValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2458
            self.expression()
            self.state = 2463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 2459
                    self.match(fugue_sqlParser.AS)


                self.state = 2462
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralView" ):
                return visitor.visitLateralView(self)
            else:
                return visitor.visitChildren(self)




    def lateralView(self):

        localctx = fugue_sqlParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            self.match(fugue_sqlParser.LATERAL)
            self.state = 2466
            self.match(fugue_sqlParser.VIEW)
            self.state = 2468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2467
                self.match(fugue_sqlParser.OUTER)


            self.state = 2470
            self.qualifiedName()
            self.state = 2471
            self.match(fugue_sqlParser.T__2)
            self.state = 2480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2472
                self.expression()
                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2473
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2474
                    self.expression()
                    self.state = 2479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2482
            self.match(fugue_sqlParser.T__3)
            self.state = 2483
            localctx.tblName = self.identifier()
            self.state = 2495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2484
                    self.match(fugue_sqlParser.AS)


                self.state = 2487
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,315,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2488
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2489
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2494
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,315,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = fugue_sqlParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2497
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)




    def relation(self):

        localctx = fugue_sqlParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.relationPrimary()
            self.state = 2503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2500
                    self.joinRelation() 
                self.state = 2505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinTypeContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)




    def joinRelation(self):

        localctx = fugue_sqlParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_joinRelation)
        try:
            self.state = 2517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ANTI, fugue_sqlParser.CROSS, fugue_sqlParser.FULL, fugue_sqlParser.INNER, fugue_sqlParser.JOIN, fugue_sqlParser.LEFT, fugue_sqlParser.RIGHT, fugue_sqlParser.SEMI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2506
                self.joinType()
                self.state = 2507
                self.match(fugue_sqlParser.JOIN)
                self.state = 2508
                localctx.right = self.relationPrimary()
                self.state = 2510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                if la_ == 1:
                    self.state = 2509
                    self.joinCriteria()


                pass
            elif token in [fugue_sqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2512
                self.match(fugue_sqlParser.NATURAL)
                self.state = 2513
                self.joinType()
                self.state = 2514
                self.match(fugue_sqlParser.JOIN)
                self.state = 2515
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = fugue_sqlParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.INNER:
                    self.state = 2519
                    self.match(fugue_sqlParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2522
                self.match(fugue_sqlParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2523
                self.match(fugue_sqlParser.LEFT)
                self.state = 2525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2524
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LEFT:
                    self.state = 2527
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2530
                self.match(fugue_sqlParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2531
                self.match(fugue_sqlParser.RIGHT)
                self.state = 2533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2532
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2535
                self.match(fugue_sqlParser.FULL)
                self.state = 2537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2536
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LEFT:
                    self.state = 2539
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2542
                self.match(fugue_sqlParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = fugue_sqlParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_joinCriteria)
        try:
            self.state = 2549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2545
                self.match(fugue_sqlParser.ON)
                self.state = 2546
                self.booleanExpression(0)
                pass
            elif token in [fugue_sqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2547
                self.match(fugue_sqlParser.USING)
                self.state = 2548
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleMethodContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample" ):
                return visitor.visitSample(self)
            else:
                return visitor.visitChildren(self)




    def sample(self):

        localctx = fugue_sqlParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_sample)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2551
            self.match(fugue_sqlParser.TABLESAMPLE)
            self.state = 2552
            self.match(fugue_sqlParser.T__2)
            self.state = 2554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 2553
                self.sampleMethod()


            self.state = 2556
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByRows" ):
                listener.enterSampleByRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByRows" ):
                listener.exitSampleByRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByRows" ):
                return visitor.visitSampleByRows(self)
            else:
                return visitor.visitChildren(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByPercentile" ):
                listener.enterSampleByPercentile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByPercentile" ):
                listener.exitSampleByPercentile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByPercentile" ):
                return visitor.visitSampleByPercentile(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)
        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)
        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBucket" ):
                listener.enterSampleByBucket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBucket" ):
                listener.exitSampleByBucket(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBucket" ):
                return visitor.visitSampleByBucket(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBytes" ):
                listener.enterSampleByBytes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBytes" ):
                listener.exitSampleByBytes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBytes" ):
                return visitor.visitSampleByBytes(self)
            else:
                return visitor.visitChildren(self)



    def sampleMethod(self):

        localctx = fugue_sqlParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 2558
                    localctx.negativeSign = self.match(fugue_sqlParser.MINUS)


                self.state = 2561
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2562
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2563
                self.expression()
                self.state = 2564
                self.match(fugue_sqlParser.ROWS)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2566
                localctx.sampleType = self.match(fugue_sqlParser.BUCKET)
                self.state = 2567
                localctx.numerator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2568
                self.match(fugue_sqlParser.OUT)
                self.state = 2569
                self.match(fugue_sqlParser.OF)
                self.state = 2570
                localctx.denominator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ON:
                    self.state = 2571
                    self.match(fugue_sqlParser.ON)
                    self.state = 2577
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                    if la_ == 1:
                        self.state = 2572
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2573
                        self.qualifiedName()
                        self.state = 2574
                        self.match(fugue_sqlParser.T__2)
                        self.state = 2575
                        self.match(fugue_sqlParser.T__3)
                        pass




                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2581
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = fugue_sqlParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self.match(fugue_sqlParser.T__2)
            self.state = 2585
            self.identifierSeq()
            self.state = 2586
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierSeq" ):
                return visitor.visitIdentifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def identifierSeq(self):

        localctx = fugue_sqlParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2589
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2590
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifierList" ):
                return visitor.visitOrderedIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifierList(self):

        localctx = fugue_sqlParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self.match(fugue_sqlParser.T__2)
            self.state = 2597
            self.orderedIdentifier()
            self.state = 2602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2598
                self.match(fugue_sqlParser.T__0)
                self.state = 2599
                self.orderedIdentifier()
                self.state = 2604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2605
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifier" ):
                return visitor.visitOrderedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifier(self):

        localctx = fugue_sqlParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2607
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC:
                self.state = 2608
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierCommentList" ):
                return visitor.visitIdentifierCommentList(self)
            else:
                return visitor.visitChildren(self)




    def identifierCommentList(self):

        localctx = fugue_sqlParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2611
            self.match(fugue_sqlParser.T__2)
            self.state = 2612
            self.identifierComment()
            self.state = 2617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2613
                self.match(fugue_sqlParser.T__0)
                self.state = 2614
                self.identifierComment()
                self.state = 2619
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2620
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierComment" ):
                return visitor.visitIdentifierComment(self)
            else:
                return visitor.visitChildren(self)




    def identifierComment(self):

        localctx = fugue_sqlParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2622
            self.identifier()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 2623
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault2" ):
                return visitor.visitInlineTableDefault2(self)
            else:
                return visitor.visitChildren(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuery" ):
                return visitor.visitAliasedQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)


    class AliasedFugueNestedContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueNestableTaskNoSelect(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskNoSelectContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedFugueNested" ):
                listener.enterAliasedFugueNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedFugueNested" ):
                listener.exitAliasedFugueNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedFugueNested" ):
                return visitor.visitAliasedFugueNested(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = fugue_sqlParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_relationPrimary)
        try:
            self.state = 2658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2626
                self.multipartIdentifier()
                self.state = 2628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 2627
                    self.sample()


                self.state = 2630
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2632
                self.match(fugue_sqlParser.T__2)
                self.state = 2633
                self.query()
                self.state = 2634
                self.match(fugue_sqlParser.T__3)
                self.state = 2636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 2635
                    self.sample()


                self.state = 2638
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.AliasedFugueNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2640
                self.match(fugue_sqlParser.T__2)
                self.state = 2641
                self.fugueNestableTaskNoSelect()
                self.state = 2642
                self.match(fugue_sqlParser.T__3)
                self.state = 2644
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                if la_ == 1:
                    self.state = 2643
                    self.sample()


                self.state = 2646
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2648
                self.match(fugue_sqlParser.T__2)
                self.state = 2649
                self.relation()
                self.state = 2650
                self.match(fugue_sqlParser.T__3)
                self.state = 2652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2651
                    self.sample()


                self.state = 2654
                self.tableAlias()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2656
                self.inlineTable()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2657
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)




    def inlineTable(self):

        localctx = fugue_sqlParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.match(fugue_sqlParser.VALUES)
            self.state = 2661
            self.expression()
            self.state = 2666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2662
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2663
                    self.expression() 
                self.state = 2668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

            self.state = 2669
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # ErrorCapturingIdentifierContext

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTable" ):
                listener.enterFunctionTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTable" ):
                listener.exitFunctionTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTable" ):
                return visitor.visitFunctionTable(self)
            else:
                return visitor.visitChildren(self)




    def functionTable(self):

        localctx = fugue_sqlParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2671
            localctx.funcName = self.errorCapturingIdentifier()
            self.state = 2672
            self.match(fugue_sqlParser.T__2)
            self.state = 2681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.state = 2673
                self.expression()
                self.state = 2678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2674
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2675
                    self.expression()
                    self.state = 2680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2683
            self.match(fugue_sqlParser.T__3)
            self.state = 2684
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = fugue_sqlParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 2687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
                if la_ == 1:
                    self.state = 2686
                    self.match(fugue_sqlParser.AS)


                self.state = 2689
                self.strictIdentifier()
                self.state = 2691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
                if la_ == 1:
                    self.state = 2690
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TERMINATED)
            else:
                return self.getToken(fugue_sqlParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)
        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)
        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)



    def rowFormat(self):

        localctx = fugue_sqlParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_rowFormat)
        try:
            self.state = 2744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2695
                self.match(fugue_sqlParser.ROW)
                self.state = 2696
                self.match(fugue_sqlParser.FORMAT)
                self.state = 2697
                self.match(fugue_sqlParser.SERDE)
                self.state = 2698
                localctx.name = self.match(fugue_sqlParser.STRING)
                self.state = 2702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
                if la_ == 1:
                    self.state = 2699
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2700
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 2701
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2704
                self.match(fugue_sqlParser.ROW)
                self.state = 2705
                self.match(fugue_sqlParser.FORMAT)
                self.state = 2706
                self.match(fugue_sqlParser.DELIMITED)
                self.state = 2716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                if la_ == 1:
                    self.state = 2707
                    self.match(fugue_sqlParser.FIELDS)
                    self.state = 2708
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2709
                    self.match(fugue_sqlParser.BY)
                    self.state = 2710
                    localctx.fieldsTerminatedBy = self.match(fugue_sqlParser.STRING)
                    self.state = 2714
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                    if la_ == 1:
                        self.state = 2711
                        self.match(fugue_sqlParser.ESCAPED)
                        self.state = 2712
                        self.match(fugue_sqlParser.BY)
                        self.state = 2713
                        localctx.escapedBy = self.match(fugue_sqlParser.STRING)




                self.state = 2723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 2718
                    self.match(fugue_sqlParser.COLLECTION)
                    self.state = 2719
                    self.match(fugue_sqlParser.ITEMS)
                    self.state = 2720
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2721
                    self.match(fugue_sqlParser.BY)
                    self.state = 2722
                    localctx.collectionItemsTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                if la_ == 1:
                    self.state = 2725
                    self.match(fugue_sqlParser.MAP)
                    self.state = 2726
                    self.match(fugue_sqlParser.KEYS)
                    self.state = 2727
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2728
                    self.match(fugue_sqlParser.BY)
                    self.state = 2729
                    localctx.keysTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
                if la_ == 1:
                    self.state = 2732
                    self.match(fugue_sqlParser.LINES)
                    self.state = 2733
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2734
                    self.match(fugue_sqlParser.BY)
                    self.state = 2735
                    localctx.linesSeparatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                if la_ == 1:
                    self.state = 2738
                    self.match(fugue_sqlParser.NULL)
                    self.state = 2739
                    self.match(fugue_sqlParser.DEFINED)
                    self.state = 2740
                    self.match(fugue_sqlParser.AS)
                    self.state = 2741
                    localctx.nullDefinedAs = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierList" ):
                listener.enterMultipartIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierList" ):
                listener.exitMultipartIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierList" ):
                return visitor.visitMultipartIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierList(self):

        localctx = fugue_sqlParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2746
            self.multipartIdentifier()
            self.state = 2751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2747
                self.match(fugue_sqlParser.T__0)
                self.state = 2748
                self.multipartIdentifier()
                self.state = 2753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifier" ):
                listener.enterMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifier" ):
                listener.exitMultipartIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifier" ):
                return visitor.visitMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifier(self):

        localctx = fugue_sqlParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 2759
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,358,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2755
                    self.match(fugue_sqlParser.T__4)
                    self.state = 2756
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 2761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,358,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = fugue_sqlParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 2762
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2763
                self.match(fugue_sqlParser.T__4)


            self.state = 2767
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = fugue_sqlParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 2769
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2770
                self.match(fugue_sqlParser.T__4)


            self.state = 2774
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = fugue_sqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2776
            self.expression()
            self.state = 2784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 2778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 2777
                    self.match(fugue_sqlParser.AS)


                self.state = 2782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 2780
                    localctx.name = self.errorCapturingIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2781
                    self.identifierList()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionSeq" ):
                return visitor.visitNamedExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionSeq(self):

        localctx = fugue_sqlParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            self.namedExpression()
            self.state = 2791
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,364,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2787
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2788
                    self.namedExpression() 
                self.state = 2793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,364,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._transform = None # TransformContext
            self.transforms = list() # of TransformContexts

        def transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformList" ):
                listener.enterTransformList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformList" ):
                listener.exitTransformList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformList" ):
                return visitor.visitTransformList(self)
            else:
                return visitor.visitChildren(self)




    def transformList(self):

        localctx = fugue_sqlParser.TransformListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_transformList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2794
            self.match(fugue_sqlParser.T__2)
            self.state = 2795
            localctx._transform = self.transform()
            localctx.transforms.append(localctx._transform)
            self.state = 2800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2796
                self.match(fugue_sqlParser.T__0)
                self.state = 2797
                localctx._transform = self.transform()
                localctx.transforms.append(localctx._transform)
                self.state = 2802
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2803
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentityTransform" ):
                listener.enterIdentityTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentityTransform" ):
                listener.exitIdentityTransform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentityTransform" ):
                return visitor.visitIdentityTransform(self)
            else:
                return visitor.visitChildren(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApplyTransform" ):
                listener.enterApplyTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApplyTransform" ):
                listener.exitApplyTransform(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApplyTransform" ):
                return visitor.visitApplyTransform(self)
            else:
                return visitor.visitChildren(self)



    def transform(self):

        localctx = fugue_sqlParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 2818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2805
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2806
                localctx.transformName = self.identifier()
                self.state = 2807
                self.match(fugue_sqlParser.T__2)
                self.state = 2808
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 2813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2809
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2810
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 2815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2816
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformArgument" ):
                listener.enterTransformArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformArgument" ):
                listener.exitTransformArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformArgument" ):
                return visitor.visitTransformArgument(self)
            else:
                return visitor.visitChildren(self)




    def transformArgument(self):

        localctx = fugue_sqlParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_transformArgument)
        try:
            self.state = 2822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2820
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2821
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = fugue_sqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2824
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 292
        self.enterRecursionRule(localctx, 292, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2827
                self.match(fugue_sqlParser.NOT)
                self.state = 2828
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2829
                self.match(fugue_sqlParser.EXISTS)
                self.state = 2830
                self.match(fugue_sqlParser.T__2)
                self.state = 2831
                self.query()
                self.state = 2832
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2834
                self.valueExpression(0)
                self.state = 2836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 2835
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2846
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2840
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2841
                        localctx.operator = self.match(fugue_sqlParser.AND)
                        self.state = 2842
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2843
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2844
                        localctx.operator = self.match(fugue_sqlParser.OR)
                        self.state = 2845
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 2850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # Token
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = fugue_sqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2851
                    self.match(fugue_sqlParser.NOT)


                self.state = 2854
                localctx.kind = self.match(fugue_sqlParser.BETWEEN)
                self.state = 2855
                localctx.lower = self.valueExpression(0)
                self.state = 2856
                self.match(fugue_sqlParser.AND)
                self.state = 2857
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2859
                    self.match(fugue_sqlParser.NOT)


                self.state = 2862
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 2863
                self.match(fugue_sqlParser.T__2)
                self.state = 2864
                self.expression()
                self.state = 2869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2865
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2866
                    self.expression()
                    self.state = 2871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2872
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2874
                    self.match(fugue_sqlParser.NOT)


                self.state = 2877
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 2878
                self.match(fugue_sqlParser.T__2)
                self.state = 2879
                self.query()
                self.state = 2880
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2882
                    self.match(fugue_sqlParser.NOT)


                self.state = 2885
                localctx.kind = self.match(fugue_sqlParser.RLIKE)
                self.state = 2886
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2887
                    self.match(fugue_sqlParser.NOT)


                self.state = 2890
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 2891
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.ANY or _la==fugue_sqlParser.SOME):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 2892
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2893
                    self.match(fugue_sqlParser.T__3)
                    pass

                elif la_ == 2:
                    self.state = 2894
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2895
                    self.expression()
                    self.state = 2900
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 2896
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2897
                        self.expression()
                        self.state = 2902
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2903
                    self.match(fugue_sqlParser.T__3)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2907
                    self.match(fugue_sqlParser.NOT)


                self.state = 2910
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 2911
                localctx.pattern = self.valueExpression(0)
                self.state = 2914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
                if la_ == 1:
                    self.state = 2912
                    self.match(fugue_sqlParser.ESCAPE)
                    self.state = 2913
                    localctx.escapeChar = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2916
                self.match(fugue_sqlParser.IS)
                self.state = 2918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2917
                    self.match(fugue_sqlParser.NOT)


                self.state = 2920
                localctx.kind = self.match(fugue_sqlParser.NULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2921
                self.match(fugue_sqlParser.IS)
                self.state = 2923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2922
                    self.match(fugue_sqlParser.NOT)


                self.state = 2925
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE or _la==fugue_sqlParser.UNKNOWN):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2926
                self.match(fugue_sqlParser.IS)
                self.state = 2928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2927
                    self.match(fugue_sqlParser.NOT)


                self.state = 2930
                localctx.kind = self.match(fugue_sqlParser.DISTINCT)
                self.state = 2931
                self.match(fugue_sqlParser.FROM)
                self.state = 2932
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)
        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 296
        self.enterRecursionRule(localctx, 296, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2936
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2937
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (fugue_sqlParser.PLUS - 295)) | (1 << (fugue_sqlParser.MINUS - 295)) | (1 << (fugue_sqlParser.TILDE - 295)))) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2938
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2962
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,389,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2960
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2941
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2942
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 297)) & ~0x3f) == 0 and ((1 << (_la - 297)) & ((1 << (fugue_sqlParser.ASTERISK - 297)) | (1 << (fugue_sqlParser.SLASH - 297)) | (1 << (fugue_sqlParser.PERCENT - 297)) | (1 << (fugue_sqlParser.DIV - 297)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2943
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2944
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2945
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (fugue_sqlParser.PLUS - 295)) | (1 << (fugue_sqlParser.MINUS - 295)) | (1 << (fugue_sqlParser.CONCAT_PIPE - 295)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2946
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2947
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2948
                        localctx.operator = self.match(fugue_sqlParser.AMPERSAND)
                        self.state = 2949
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2950
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2951
                        localctx.operator = self.match(fugue_sqlParser.HAT)
                        self.state = 2952
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2953
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2954
                        localctx.operator = self.match(fugue_sqlParser.PIPE)
                        self.state = 2955
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = fugue_sqlParser.ComparisonContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2956
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2957
                        self.comparisonOperator()
                        self.state = 2958
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 2964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,389,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast" ):
                return visitor.visitLast(self)
            else:
                return visitor.visitChildren(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.iinput = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)
        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlay" ):
                listener.enterOverlay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlay" ):
                listener.exitOverlay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlay" ):
                return visitor.visitOverlay(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.istr = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.ilen = None # ValueExpressionContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CurrentDatetimeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentDatetime" ):
                listener.enterCurrentDatetime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentDatetime" ):
                listener.exitCurrentDatetime(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentDatetime" ):
                return visitor.visitCurrentDatetime(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDefault" ):
                return visitor.visitConstantDefault(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionNameContext,0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)
        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.istr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst" ):
                return visitor.visitFirst(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 298
        self.enterRecursionRule(localctx, 298, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.CurrentDatetimeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2966
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.CURRENT_DATE or _la==fugue_sqlParser.CURRENT_TIMESTAMP):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2967
                self.match(fugue_sqlParser.CASE)
                self.state = 2969 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2968
                    self.whenClause()
                    self.state = 2971 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.WHEN):
                        break

                self.state = 2975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ELSE:
                    self.state = 2973
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 2974
                    localctx.elseExpression = self.expression()


                self.state = 2977
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2979
                self.match(fugue_sqlParser.CASE)
                self.state = 2980
                localctx.value = self.expression()
                self.state = 2982 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2981
                    self.whenClause()
                    self.state = 2984 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.WHEN):
                        break

                self.state = 2988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ELSE:
                    self.state = 2986
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 2987
                    localctx.elseExpression = self.expression()


                self.state = 2990
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2992
                self.match(fugue_sqlParser.CAST)
                self.state = 2993
                self.match(fugue_sqlParser.T__2)
                self.state = 2994
                self.expression()
                self.state = 2995
                self.match(fugue_sqlParser.AS)
                self.state = 2996
                self.dataType()
                self.state = 2997
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2999
                self.match(fugue_sqlParser.STRUCT)
                self.state = 3000
                self.match(fugue_sqlParser.T__2)
                self.state = 3009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
                if la_ == 1:
                    self.state = 3001
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 3006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3002
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3003
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 3008
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3011
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3012
                self.match(fugue_sqlParser.FIRST)
                self.state = 3013
                self.match(fugue_sqlParser.T__2)
                self.state = 3014
                self.expression()
                self.state = 3017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IGNORE:
                    self.state = 3015
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3016
                    self.match(fugue_sqlParser.NULLS)


                self.state = 3019
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3021
                self.match(fugue_sqlParser.LAST)
                self.state = 3022
                self.match(fugue_sqlParser.T__2)
                self.state = 3023
                self.expression()
                self.state = 3026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IGNORE:
                    self.state = 3024
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3025
                    self.match(fugue_sqlParser.NULLS)


                self.state = 3028
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3030
                self.match(fugue_sqlParser.POSITION)
                self.state = 3031
                self.match(fugue_sqlParser.T__2)
                self.state = 3032
                localctx.substr = self.valueExpression(0)
                self.state = 3033
                self.match(fugue_sqlParser.IN)
                self.state = 3034
                localctx.istr = self.valueExpression(0)
                self.state = 3035
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3037
                self.constant()
                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3038
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3039
                self.qualifiedName()
                self.state = 3040
                self.match(fugue_sqlParser.T__4)
                self.state = 3041
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3043
                self.match(fugue_sqlParser.T__2)
                self.state = 3044
                self.namedExpression()
                self.state = 3047 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3045
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3046
                    self.namedExpression()
                    self.state = 3049 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.T__0):
                        break

                self.state = 3051
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3053
                self.match(fugue_sqlParser.T__2)
                self.state = 3054
                self.query()
                self.state = 3055
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3057
                self.functionName()
                self.state = 3058
                self.match(fugue_sqlParser.T__2)
                self.state = 3070
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 3060
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                    if la_ == 1:
                        self.state = 3059
                        self.setQuantifier()


                    self.state = 3062
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 3067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3063
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3064
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 3069
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3072
                self.match(fugue_sqlParser.T__3)
                self.state = 3079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                if la_ == 1:
                    self.state = 3073
                    self.match(fugue_sqlParser.FILTER)
                    self.state = 3074
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3075
                    self.match(fugue_sqlParser.WHERE)
                    self.state = 3076
                    localctx.where = self.booleanExpression(0)
                    self.state = 3077
                    self.match(fugue_sqlParser.T__3)


                self.state = 3083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                if la_ == 1:
                    self.state = 3081
                    self.match(fugue_sqlParser.OVER)
                    self.state = 3082
                    self.windowSpec()


                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3085
                self.identifier()
                self.state = 3086
                self.match(fugue_sqlParser.T__15)
                self.state = 3087
                self.expression()
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3089
                self.match(fugue_sqlParser.T__2)
                self.state = 3090
                self.identifier()
                self.state = 3093 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3091
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3092
                    self.identifier()
                    self.state = 3095 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.T__0):
                        break

                self.state = 3097
                self.match(fugue_sqlParser.T__3)
                self.state = 3098
                self.match(fugue_sqlParser.T__15)
                self.state = 3099
                self.expression()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3101
                self.identifier()
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3102
                self.match(fugue_sqlParser.T__2)
                self.state = 3103
                self.expression()
                self.state = 3104
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3106
                self.match(fugue_sqlParser.EXTRACT)
                self.state = 3107
                self.match(fugue_sqlParser.T__2)
                self.state = 3108
                localctx.field = self.identifier()
                self.state = 3109
                self.match(fugue_sqlParser.FROM)
                self.state = 3110
                localctx.source = self.valueExpression(0)
                self.state = 3111
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3113
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.SUBSTR or _la==fugue_sqlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3114
                self.match(fugue_sqlParser.T__2)
                self.state = 3115
                localctx.istr = self.valueExpression(0)
                self.state = 3116
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FROM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3117
                localctx.pos = self.valueExpression(0)
                self.state = 3120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FOR:
                    self.state = 3118
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FOR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3119
                    localctx.ilen = self.valueExpression(0)


                self.state = 3122
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3124
                self.match(fugue_sqlParser.TRIM)
                self.state = 3125
                self.match(fugue_sqlParser.T__2)
                self.state = 3127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3126
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.BOTH or _la==fugue_sqlParser.LEADING or _la==fugue_sqlParser.TRAILING):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3130
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 3129
                    localctx.trimStr = self.valueExpression(0)


                self.state = 3132
                self.match(fugue_sqlParser.FROM)
                self.state = 3133
                localctx.srcStr = self.valueExpression(0)
                self.state = 3134
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3136
                self.match(fugue_sqlParser.OVERLAY)
                self.state = 3137
                self.match(fugue_sqlParser.T__2)
                self.state = 3138
                localctx.iinput = self.valueExpression(0)
                self.state = 3139
                self.match(fugue_sqlParser.PLACING)
                self.state = 3140
                localctx.replace = self.valueExpression(0)
                self.state = 3141
                self.match(fugue_sqlParser.FROM)
                self.state = 3142
                localctx.position = self.valueExpression(0)
                self.state = 3145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FOR:
                    self.state = 3143
                    self.match(fugue_sqlParser.FOR)
                    self.state = 3144
                    localctx.length = self.valueExpression(0)


                self.state = 3147
                self.match(fugue_sqlParser.T__3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,411,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3159
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SubscriptContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3151
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3152
                        self.match(fugue_sqlParser.T__5)
                        self.state = 3153
                        localctx.index = self.valueExpression(0)
                        self.state = 3154
                        self.match(fugue_sqlParser.T__6)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.DereferenceContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3156
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3157
                        self.match(fugue_sqlParser.T__4)
                        self.state = 3158
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 3163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,411,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = fugue_sqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_constant)
        try:
            self.state = 3176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3164
                self.match(fugue_sqlParser.NULL)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3165
                self.interval()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3166
                self.identifier()
                self.state = 3167
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3169
                self.number()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3170
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3172 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3171
                        self.match(fugue_sqlParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 3174 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,412,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonEqualOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonEqualOperatorContext,0)


        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(fugue_sqlParser.NEQJ, 0)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)

        def LTE(self):
            return self.getToken(fugue_sqlParser.LTE, 0)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)

        def GTE(self):
            return self.getToken(fugue_sqlParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(fugue_sqlParser.NSEQ, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = fugue_sqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_comparisonOperator)
        try:
            self.state = 3186
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.EQUAL, fugue_sqlParser.DOUBLEEQUAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3178
                self.comparisonEqualOperator()
                pass
            elif token in [fugue_sqlParser.NEQ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3179
                self.match(fugue_sqlParser.NEQ)
                pass
            elif token in [fugue_sqlParser.NEQJ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3180
                self.match(fugue_sqlParser.NEQJ)
                pass
            elif token in [fugue_sqlParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3181
                self.match(fugue_sqlParser.LT)
                pass
            elif token in [fugue_sqlParser.LTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3182
                self.match(fugue_sqlParser.LTE)
                pass
            elif token in [fugue_sqlParser.GT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3183
                self.match(fugue_sqlParser.GT)
                pass
            elif token in [fugue_sqlParser.GTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3184
                self.match(fugue_sqlParser.GTE)
                pass
            elif token in [fugue_sqlParser.NSEQ]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3185
                self.match(fugue_sqlParser.NSEQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonEqualOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUAL(self):
            return self.getToken(fugue_sqlParser.DOUBLEEQUAL, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonEqualOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonEqualOperator" ):
                listener.enterComparisonEqualOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonEqualOperator" ):
                listener.exitComparisonEqualOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonEqualOperator" ):
                return visitor.visitComparisonEqualOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonEqualOperator(self):

        localctx = fugue_sqlParser.ComparisonEqualOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_comparisonEqualOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3188
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.EQUAL or _la==fugue_sqlParser.DOUBLEEQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOperator" ):
                return visitor.visitArithmeticOperator(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOperator(self):

        localctx = fugue_sqlParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3190
            _la = self._input.LA(1)
            if not(((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (fugue_sqlParser.PLUS - 295)) | (1 << (fugue_sqlParser.MINUS - 295)) | (1 << (fugue_sqlParser.ASTERISK - 295)) | (1 << (fugue_sqlParser.SLASH - 295)) | (1 << (fugue_sqlParser.PERCENT - 295)) | (1 << (fugue_sqlParser.DIV - 295)) | (1 << (fugue_sqlParser.TILDE - 295)) | (1 << (fugue_sqlParser.AMPERSAND - 295)) | (1 << (fugue_sqlParser.PIPE - 295)) | (1 << (fugue_sqlParser.CONCAT_PIPE - 295)) | (1 << (fugue_sqlParser.HAT - 295)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateOperator" ):
                return visitor.visitPredicateOperator(self)
            else:
                return visitor.visitChildren(self)




    def predicateOperator(self):

        localctx = fugue_sqlParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3192
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.AND or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (fugue_sqlParser.IN - 135)) | (1 << (fugue_sqlParser.NOT - 135)) | (1 << (fugue_sqlParser.OR - 135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = fugue_sqlParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3194
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = fugue_sqlParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3196
            self.match(fugue_sqlParser.INTERVAL)
            self.state = 3199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3197
                self.errorCapturingMultiUnitsInterval()

            elif la_ == 2:
                self.state = 3198
                self.errorCapturingUnitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingMultiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingMultiUnitsInterval" ):
                listener.enterErrorCapturingMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingMultiUnitsInterval" ):
                listener.exitErrorCapturingMultiUnitsInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingMultiUnitsInterval" ):
                return visitor.visitErrorCapturingMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3201
            self.multiUnitsInterval()
            self.state = 3203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 3202
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,i)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiUnitsInterval" ):
                listener.enterMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiUnitsInterval" ):
                listener.exitMultiUnitsInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiUnitsInterval" ):
                return visitor.visitMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def multiUnitsInterval(self):

        localctx = fugue_sqlParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3208 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3205
                    self.intervalValue()
                    self.state = 3206
                    self.intervalUnit()

                else:
                    raise NoViableAltException(self)
                self.state = 3210 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,417,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingUnitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingUnitToUnitInterval" ):
                listener.enterErrorCapturingUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingUnitToUnitInterval" ):
                listener.exitErrorCapturingUnitToUnitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingUnitToUnitInterval" ):
                return visitor.visitErrorCapturingUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3212
            localctx.body = self.unitToUnitInterval()
            self.state = 3215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.state = 3213
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3214
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.ifrom = None # IntervalUnitContext
            self.to = None # IntervalUnitContext

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,0)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitToUnitInterval" ):
                listener.enterUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitToUnitInterval" ):
                listener.exitUnitToUnitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitToUnitInterval" ):
                return visitor.visitUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def unitToUnitInterval(self):

        localctx = fugue_sqlParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3217
            localctx.value = self.intervalValue()
            self.state = 3218
            localctx.ifrom = self.intervalUnit()
            self.state = 3219
            self.match(fugue_sqlParser.TO)
            self.state = 3220
            localctx.to = self.intervalUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = fugue_sqlParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 3227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.PLUS, fugue_sqlParser.MINUS, fugue_sqlParser.INTEGER_VALUE, fugue_sqlParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PLUS or _la==fugue_sqlParser.MINUS:
                    self.state = 3222
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.PLUS or _la==fugue_sqlParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3225
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3226
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalUnit" ):
                listener.enterIntervalUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalUnit" ):
                listener.exitIntervalUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalUnit" ):
                return visitor.visitIntervalUnit(self)
            else:
                return visitor.visitChildren(self)




    def intervalUnit(self):

        localctx = fugue_sqlParser.IntervalUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_intervalUnit)
        try:
            self.state = 3236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3229
                self.match(fugue_sqlParser.DAY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3230
                self.match(fugue_sqlParser.HOUR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3231
                self.match(fugue_sqlParser.MINUTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3232
                self.match(fugue_sqlParser.MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3233
                self.match(fugue_sqlParser.SECOND)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3234
                self.match(fugue_sqlParser.YEAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3235
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColPosition" ):
                return visitor.visitColPosition(self)
            else:
                return visitor.visitChildren(self)




    def colPosition(self):

        localctx = fugue_sqlParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_colPosition)
        try:
            self.state = 3241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3238
                localctx.position = self.match(fugue_sqlParser.FIRST)
                pass
            elif token in [fugue_sqlParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3239
                localctx.position = self.match(fugue_sqlParser.AFTER)
                self.state = 3240
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.icomplex = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)
        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDataType" ):
                return visitor.visitComplexDataType(self)
            else:
                return visitor.visitChildren(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveDataType" ):
                return visitor.visitPrimitiveDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = fugue_sqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3243
                localctx.icomplex = self.match(fugue_sqlParser.ARRAY)
                self.state = 3244
                self.match(fugue_sqlParser.LT)
                self.state = 3245
                self.dataType()
                self.state = 3246
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3248
                localctx.icomplex = self.match(fugue_sqlParser.MAP)
                self.state = 3249
                self.match(fugue_sqlParser.LT)
                self.state = 3250
                self.dataType()
                self.state = 3251
                self.match(fugue_sqlParser.T__0)
                self.state = 3252
                self.dataType()
                self.state = 3253
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3255
                localctx.icomplex = self.match(fugue_sqlParser.STRUCT)
                self.state = 3262
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.LT]:
                    self.state = 3256
                    self.match(fugue_sqlParser.LT)
                    self.state = 3258
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                    if la_ == 1:
                        self.state = 3257
                        self.complexColTypeList()


                    self.state = 3260
                    self.match(fugue_sqlParser.GT)
                    pass
                elif token in [fugue_sqlParser.NEQ]:
                    self.state = 3261
                    self.match(fugue_sqlParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3264
                self.identifier()
                self.state = 3275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                if la_ == 1:
                    self.state = 3265
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3266
                    self.match(fugue_sqlParser.INTEGER_VALUE)
                    self.state = 3271
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3267
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3268
                        self.match(fugue_sqlParser.INTEGER_VALUE)
                        self.state = 3273
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3274
                    self.match(fugue_sqlParser.T__3)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPositionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPositionList" ):
                listener.enterQualifiedColTypeWithPositionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPositionList" ):
                listener.exitQualifiedColTypeWithPositionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPositionList" ):
                return visitor.visitQualifiedColTypeWithPositionList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3279
            self.qualifiedColTypeWithPosition()
            self.state = 3284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3280
                self.match(fugue_sqlParser.T__0)
                self.state = 3281
                self.qualifiedColTypeWithPosition()
                self.state = 3286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPosition" ):
                listener.enterQualifiedColTypeWithPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPosition" ):
                listener.exitQualifiedColTypeWithPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPosition" ):
                return visitor.visitQualifiedColTypeWithPosition(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPosition(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3287
            localctx.name = self.multipartIdentifier()
            self.state = 3288
            self.dataType()
            self.state = 3291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.NOT:
                self.state = 3289
                self.match(fugue_sqlParser.NOT)
                self.state = 3290
                self.match(fugue_sqlParser.NULL)


            self.state = 3294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 3293
                self.commentSpec()


            self.state = 3297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.FIRST:
                self.state = 3296
                self.colPosition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = fugue_sqlParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3299
            self.colType()
            self.state = 3304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,432,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3300
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3301
                    self.colType() 
                self.state = 3306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,432,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = fugue_sqlParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3307
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3308
            self.dataType()
            self.state = 3311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.state = 3309
                self.match(fugue_sqlParser.NOT)
                self.state = 3310
                self.match(fugue_sqlParser.NULL)


            self.state = 3314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.state = 3313
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColTypeList" ):
                return visitor.visitComplexColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def complexColTypeList(self):

        localctx = fugue_sqlParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3316
            self.complexColType()
            self.state = 3321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3317
                self.match(fugue_sqlParser.T__0)
                self.state = 3318
                self.complexColType()
                self.state = 3323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColType" ):
                return visitor.visitComplexColType(self)
            else:
                return visitor.visitChildren(self)




    def complexColType(self):

        localctx = fugue_sqlParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3324
            self.identifier()
            self.state = 3325
            self.match(fugue_sqlParser.T__1)
            self.state = 3326
            self.dataType()
            self.state = 3329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.NOT:
                self.state = 3327
                self.match(fugue_sqlParser.NOT)
                self.state = 3328
                self.match(fugue_sqlParser.NULL)


            self.state = 3332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 3331
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = fugue_sqlParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            self.match(fugue_sqlParser.WHEN)
            self.state = 3335
            localctx.condition = self.expression()
            self.state = 3336
            self.match(fugue_sqlParser.THEN)
            self.state = 3337
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = fugue_sqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3339
            self.match(fugue_sqlParser.WINDOW)
            self.state = 3340
            self.namedWindow()
            self.state = 3345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,438,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3341
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3342
                    self.namedWindow() 
                self.state = 3347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,438,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = fugue_sqlParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3348
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3349
            self.match(fugue_sqlParser.AS)
            self.state = 3350
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowRef" ):
                return visitor.visitWindowRef(self)
            else:
                return visitor.visitChildren(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)
        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDef" ):
                return visitor.visitWindowDef(self)
            else:
                return visitor.visitChildren(self)



    def windowSpec(self):

        localctx = fugue_sqlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3352
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3353
                self.match(fugue_sqlParser.T__2)
                self.state = 3354
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3355
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3357
                self.match(fugue_sqlParser.T__2)
                self.state = 3392
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.CLUSTER]:
                    self.state = 3358
                    self.match(fugue_sqlParser.CLUSTER)
                    self.state = 3359
                    self.match(fugue_sqlParser.BY)
                    self.state = 3360
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3361
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3362
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3367
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [fugue_sqlParser.T__3, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.ORDER, fugue_sqlParser.PARTITION, fugue_sqlParser.RANGE, fugue_sqlParser.ROWS, fugue_sqlParser.SORT]:
                    self.state = 3378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.DISTRIBUTE or _la==fugue_sqlParser.PARTITION:
                        self.state = 3368
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.DISTRIBUTE or _la==fugue_sqlParser.PARTITION):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3369
                        self.match(fugue_sqlParser.BY)
                        self.state = 3370
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3375
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==fugue_sqlParser.T__0:
                            self.state = 3371
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3372
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3377
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.ORDER or _la==fugue_sqlParser.SORT:
                        self.state = 3380
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.ORDER or _la==fugue_sqlParser.SORT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3381
                        self.match(fugue_sqlParser.BY)
                        self.state = 3382
                        self.sortItem()
                        self.state = 3387
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==fugue_sqlParser.T__0:
                            self.state = 3383
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3384
                            self.sortItem()
                            self.state = 3389
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.RANGE or _la==fugue_sqlParser.ROWS:
                    self.state = 3394
                    self.windowFrame()


                self.state = 3397
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = fugue_sqlParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_windowFrame)
        try:
            self.state = 3416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3400
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3401
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3402
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3403
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3404
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3405
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3406
                localctx.start = self.frameBound()
                self.state = 3407
                self.match(fugue_sqlParser.AND)
                self.state = 3408
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3410
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3411
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3412
                localctx.start = self.frameBound()
                self.state = 3413
                self.match(fugue_sqlParser.AND)
                self.state = 3414
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBound" ):
                return visitor.visitFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def frameBound(self):

        localctx = fugue_sqlParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3418
                self.match(fugue_sqlParser.UNBOUNDED)
                self.state = 3419
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FOLLOWING or _la==fugue_sqlParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3420
                localctx.boundType = self.match(fugue_sqlParser.CURRENT)
                self.state = 3421
                self.match(fugue_sqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3422
                self.expression()
                self.state = 3423
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FOLLOWING or _la==fugue_sqlParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = fugue_sqlParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3427
            self.qualifiedName()
            self.state = 3432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3428
                self.match(fugue_sqlParser.T__0)
                self.state = 3429
                self.qualifiedName()
                self.state = 3434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = fugue_sqlParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_functionName)
        try:
            self.state = 3439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3435
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3436
                self.match(fugue_sqlParser.FILTER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3437
                self.match(fugue_sqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3438
                self.match(fugue_sqlParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = fugue_sqlParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3441
            self.identifier()
            self.state = 3446
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,451,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3442
                    self.match(fugue_sqlParser.T__4)
                    self.state = 3443
                    self.identifier() 
                self.state = 3448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,451,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def errorCapturingIdentifierExtra(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierExtraContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingIdentifier" ):
                listener.enterErrorCapturingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingIdentifier" ):
                listener.exitErrorCapturingIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingIdentifier" ):
                return visitor.visitErrorCapturingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingIdentifier(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3449
            self.identifier()
            self.state = 3450
            self.errorCapturingIdentifierExtra()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.MINUS)
            else:
                return self.getToken(fugue_sqlParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorIdent" ):
                listener.enterErrorIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorIdent" ):
                listener.exitErrorIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorIdent" ):
                return visitor.visitErrorIdent(self)
            else:
                return visitor.visitChildren(self)


    class RealIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealIdent" ):
                listener.enterRealIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealIdent" ):
                listener.exitRealIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRealIdent" ):
                return visitor.visitRealIdent(self)
            else:
                return visitor.visitChildren(self)



    def errorCapturingIdentifierExtra(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_errorCapturingIdentifierExtra)
        try:
            self.state = 3459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ErrorIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3454 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3452
                        self.match(fugue_sqlParser.MINUS)
                        self.state = 3453
                        self.identifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3456 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,452,self._ctx)

                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RealIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = fugue_sqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_identifier)
        try:
            self.state = 3464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3461
                self.strictIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3462
                if not not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.SQL_standard_keyword_behavior")
                self.state = 3463
                self.strictNonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifierAlternative" ):
                return visitor.visitQuotedIdentifierAlternative(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.IDENTIFIER, 0)
        def ansiNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.AnsiNonReservedContext,0)

        def nonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def strictIdentifier(self):

        localctx = fugue_sqlParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_strictIdentifier)
        try:
            self.state = 3472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3466
                self.match(fugue_sqlParser.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3467
                self.quotedIdentifier()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3468
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.SQL_standard_keyword_behavior")
                self.state = 3469
                self.ansiNonReserved()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3470
                if not not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.SQL_standard_keyword_behavior")
                self.state = 3471
                self.nonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def quotedIdentifier(self):

        localctx = fugue_sqlParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3474
            self.match(fugue_sqlParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigIntLiteral" ):
                return visitor.visitBigIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTinyIntLiteral" ):
                return visitor.visitTinyIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyDecimalLiteral" ):
                listener.enterLegacyDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyDecimalLiteral" ):
                listener.exitLegacyDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyDecimalLiteral" ):
                return visitor.visitLegacyDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigDecimalLiteral" ):
                return visitor.visitBigDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentLiteral" ):
                listener.enterExponentLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentLiteral" ):
                listener.exitExponentLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentLiteral" ):
                return visitor.visitExponentLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(fugue_sqlParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallIntLiteral" ):
                return visitor.visitSmallIntLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = fugue_sqlParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3476
                if not not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3477
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3480
                self.match(fugue_sqlParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3481
                if not not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3482
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3485
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3486
                if not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3487
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3490
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.EXPONENT_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3491
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3494
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3495
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3498
                self.match(fugue_sqlParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3499
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3502
                self.match(fugue_sqlParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3503
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3506
                self.match(fugue_sqlParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3507
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3510
                self.match(fugue_sqlParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3511
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3514
                self.match(fugue_sqlParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_alterColumnAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColumnAction" ):
                listener.enterAlterColumnAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColumnAction" ):
                listener.exitAlterColumnAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColumnAction" ):
                return visitor.visitAlterColumnAction(self)
            else:
                return visitor.visitChildren(self)




    def alterColumnAction(self):

        localctx = fugue_sqlParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.TYPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3517
                self.match(fugue_sqlParser.TYPE)
                self.state = 3518
                self.dataType()
                pass
            elif token in [fugue_sqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3519
                self.commentSpec()
                pass
            elif token in [fugue_sqlParser.AFTER, fugue_sqlParser.FIRST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3520
                self.colPosition()
                pass
            elif token in [fugue_sqlParser.DROP, fugue_sqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3521
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DROP or _la==fugue_sqlParser.SET):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3522
                self.match(fugue_sqlParser.NOT)
                self.state = 3523
                self.match(fugue_sqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ansiNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnsiNonReserved" ):
                listener.enterAnsiNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnsiNonReserved" ):
                listener.exitAnsiNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnsiNonReserved" ):
                return visitor.visitAnsiNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def ansiNonReserved(self):

        localctx = fugue_sqlParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3526
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.ASC) | (1 << fugue_sqlParser.AT) | (1 << fugue_sqlParser.BETWEEN) | (1 << fugue_sqlParser.BUCKET) | (1 << fugue_sqlParser.BUCKETS) | (1 << fugue_sqlParser.BY) | (1 << fugue_sqlParser.CACHE) | (1 << fugue_sqlParser.CASCADE) | (1 << fugue_sqlParser.CHANGE) | (1 << fugue_sqlParser.CLEAR) | (1 << fugue_sqlParser.CLUSTER) | (1 << fugue_sqlParser.CLUSTERED) | (1 << fugue_sqlParser.CODEGEN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)) | (1 << (fugue_sqlParser.EXTERNAL - 64)) | (1 << (fugue_sqlParser.EXTRACT - 64)) | (1 << (fugue_sqlParser.FIELDS - 64)) | (1 << (fugue_sqlParser.FILEFORMAT - 64)) | (1 << (fugue_sqlParser.FIRST - 64)) | (1 << (fugue_sqlParser.FOLLOWING - 64)) | (1 << (fugue_sqlParser.FORMAT - 64)) | (1 << (fugue_sqlParser.FORMATTED - 64)) | (1 << (fugue_sqlParser.FUNCTION - 64)) | (1 << (fugue_sqlParser.FUNCTIONS - 64)) | (1 << (fugue_sqlParser.GLOBAL - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (fugue_sqlParser.GROUPING - 129)) | (1 << (fugue_sqlParser.IF - 129)) | (1 << (fugue_sqlParser.IGNORE - 129)) | (1 << (fugue_sqlParser.IMPORT - 129)) | (1 << (fugue_sqlParser.INDEX - 129)) | (1 << (fugue_sqlParser.INDEXES - 129)) | (1 << (fugue_sqlParser.INPATH - 129)) | (1 << (fugue_sqlParser.INPUTFORMAT - 129)) | (1 << (fugue_sqlParser.INSERT - 129)) | (1 << (fugue_sqlParser.INTERVAL - 129)) | (1 << (fugue_sqlParser.ITEMS - 129)) | (1 << (fugue_sqlParser.KEYS - 129)) | (1 << (fugue_sqlParser.LAST - 129)) | (1 << (fugue_sqlParser.LATERAL - 129)) | (1 << (fugue_sqlParser.LAZY - 129)) | (1 << (fugue_sqlParser.LIKE - 129)) | (1 << (fugue_sqlParser.LIMIT - 129)) | (1 << (fugue_sqlParser.LINES - 129)) | (1 << (fugue_sqlParser.LIST - 129)) | (1 << (fugue_sqlParser.LOAD - 129)) | (1 << (fugue_sqlParser.LOCAL - 129)) | (1 << (fugue_sqlParser.LOCATION - 129)) | (1 << (fugue_sqlParser.LOCK - 129)) | (1 << (fugue_sqlParser.LOCKS - 129)) | (1 << (fugue_sqlParser.LOGICAL - 129)) | (1 << (fugue_sqlParser.MACRO - 129)) | (1 << (fugue_sqlParser.MAP - 129)) | (1 << (fugue_sqlParser.MATCHED - 129)) | (1 << (fugue_sqlParser.MERGE - 129)) | (1 << (fugue_sqlParser.MSCK - 129)) | (1 << (fugue_sqlParser.NAMESPACE - 129)) | (1 << (fugue_sqlParser.NAMESPACES - 129)) | (1 << (fugue_sqlParser.NO - 129)) | (1 << (fugue_sqlParser.NULLS - 129)) | (1 << (fugue_sqlParser.OF - 129)) | (1 << (fugue_sqlParser.OPTION - 129)) | (1 << (fugue_sqlParser.OPTIONS - 129)) | (1 << (fugue_sqlParser.OUT - 129)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 129)) | (1 << (fugue_sqlParser.OVER - 129)) | (1 << (fugue_sqlParser.OVERLAY - 129)) | (1 << (fugue_sqlParser.OVERWRITE - 129)) | (1 << (fugue_sqlParser.PARTITION - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (fugue_sqlParser.PARTITIONED - 193)) | (1 << (fugue_sqlParser.PARTITIONS - 193)) | (1 << (fugue_sqlParser.PERCENTLIT - 193)) | (1 << (fugue_sqlParser.PIVOT - 193)) | (1 << (fugue_sqlParser.PLACING - 193)) | (1 << (fugue_sqlParser.POSITION - 193)) | (1 << (fugue_sqlParser.PRECEDING - 193)) | (1 << (fugue_sqlParser.PRINCIPALS - 193)) | (1 << (fugue_sqlParser.PROPERTIES - 193)) | (1 << (fugue_sqlParser.PURGE - 193)) | (1 << (fugue_sqlParser.QUERY - 193)) | (1 << (fugue_sqlParser.RANGE - 193)) | (1 << (fugue_sqlParser.RECORDREADER - 193)) | (1 << (fugue_sqlParser.RECORDWRITER - 193)) | (1 << (fugue_sqlParser.RECOVER - 193)) | (1 << (fugue_sqlParser.REDUCE - 193)) | (1 << (fugue_sqlParser.REFRESH - 193)) | (1 << (fugue_sqlParser.RENAME - 193)) | (1 << (fugue_sqlParser.REPAIR - 193)) | (1 << (fugue_sqlParser.REPLACE - 193)) | (1 << (fugue_sqlParser.RESET - 193)) | (1 << (fugue_sqlParser.RESTRICT - 193)) | (1 << (fugue_sqlParser.REVOKE - 193)) | (1 << (fugue_sqlParser.RLIKE - 193)) | (1 << (fugue_sqlParser.ROLE - 193)) | (1 << (fugue_sqlParser.ROLES - 193)) | (1 << (fugue_sqlParser.ROLLBACK - 193)) | (1 << (fugue_sqlParser.ROLLUP - 193)) | (1 << (fugue_sqlParser.ROW - 193)) | (1 << (fugue_sqlParser.ROWS - 193)) | (1 << (fugue_sqlParser.SCHEMA - 193)) | (1 << (fugue_sqlParser.SEPARATED - 193)) | (1 << (fugue_sqlParser.SERDE - 193)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 193)) | (1 << (fugue_sqlParser.SET - 193)) | (1 << (fugue_sqlParser.SETS - 193)) | (1 << (fugue_sqlParser.SHOW - 193)) | (1 << (fugue_sqlParser.SKEWED - 193)) | (1 << (fugue_sqlParser.SORT - 193)) | (1 << (fugue_sqlParser.SORTED - 193)) | (1 << (fugue_sqlParser.START - 193)) | (1 << (fugue_sqlParser.STATISTICS - 193)) | (1 << (fugue_sqlParser.STORED - 193)) | (1 << (fugue_sqlParser.STRATIFY - 193)) | (1 << (fugue_sqlParser.STRUCT - 193)) | (1 << (fugue_sqlParser.SUBSTR - 193)) | (1 << (fugue_sqlParser.SUBSTRING - 193)) | (1 << (fugue_sqlParser.TABLES - 193)) | (1 << (fugue_sqlParser.TABLESAMPLE - 193)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 193)) | (1 << (fugue_sqlParser.TEMPORARY - 193)) | (1 << (fugue_sqlParser.TERMINATED - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (fugue_sqlParser.TOUCH - 257)) | (1 << (fugue_sqlParser.TRANSACTION - 257)) | (1 << (fugue_sqlParser.TRANSACTIONS - 257)) | (1 << (fugue_sqlParser.TRANSFORM - 257)) | (1 << (fugue_sqlParser.TRIM - 257)) | (1 << (fugue_sqlParser.TRUE - 257)) | (1 << (fugue_sqlParser.TRUNCATE - 257)) | (1 << (fugue_sqlParser.UNARCHIVE - 257)) | (1 << (fugue_sqlParser.UNBOUNDED - 257)) | (1 << (fugue_sqlParser.UNCACHE - 257)) | (1 << (fugue_sqlParser.UNLOCK - 257)) | (1 << (fugue_sqlParser.UNSET - 257)) | (1 << (fugue_sqlParser.UPDATE - 257)) | (1 << (fugue_sqlParser.USE - 257)) | (1 << (fugue_sqlParser.VALUES - 257)) | (1 << (fugue_sqlParser.VIEW - 257)) | (1 << (fugue_sqlParser.VIEWS - 257)) | (1 << (fugue_sqlParser.WINDOW - 257)) | (1 << (fugue_sqlParser.DIV - 257)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictNonReserved" ):
                listener.enterStrictNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictNonReserved" ):
                listener.exitStrictNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictNonReserved" ):
                return visitor.visitStrictNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def strictNonReserved(self):

        localctx = fugue_sqlParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3528
            _la = self._input.LA(1)
            if not(((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (fugue_sqlParser.ANTI - 40)) | (1 << (fugue_sqlParser.CROSS - 40)) | (1 << (fugue_sqlParser.EXCEPT - 40)))) != 0) or ((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & ((1 << (fugue_sqlParser.FULL - 123)) | (1 << (fugue_sqlParser.INNER - 123)) | (1 << (fugue_sqlParser.INTERSECT - 123)) | (1 << (fugue_sqlParser.JOIN - 123)) | (1 << (fugue_sqlParser.LEFT - 123)) | (1 << (fugue_sqlParser.NATURAL - 123)) | (1 << (fugue_sqlParser.ON - 123)))) != 0) or ((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & ((1 << (fugue_sqlParser.RIGHT - 218)) | (1 << (fugue_sqlParser.SEMI - 218)) | (1 << (fugue_sqlParser.SETMINUS - 218)) | (1 << (fugue_sqlParser.UNION - 218)) | (1 << (fugue_sqlParser.USING - 218)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(fugue_sqlParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CHECK(self):
            return self.getToken(fugue_sqlParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(fugue_sqlParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(fugue_sqlParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(fugue_sqlParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(fugue_sqlParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(fugue_sqlParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def ONLY(self):
            return self.getToken(fugue_sqlParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(fugue_sqlParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(fugue_sqlParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(fugue_sqlParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(fugue_sqlParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(fugue_sqlParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def USER(self):
            return self.getToken(fugue_sqlParser.USER, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = fugue_sqlParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3530
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS) | (1 << fugue_sqlParser.ASC) | (1 << fugue_sqlParser.AT) | (1 << fugue_sqlParser.AUTHORIZATION) | (1 << fugue_sqlParser.BETWEEN) | (1 << fugue_sqlParser.BOTH) | (1 << fugue_sqlParser.BUCKET) | (1 << fugue_sqlParser.BUCKETS) | (1 << fugue_sqlParser.BY) | (1 << fugue_sqlParser.CACHE) | (1 << fugue_sqlParser.CASCADE) | (1 << fugue_sqlParser.CASE) | (1 << fugue_sqlParser.CAST) | (1 << fugue_sqlParser.CHANGE) | (1 << fugue_sqlParser.CHECK) | (1 << fugue_sqlParser.CLEAR) | (1 << fugue_sqlParser.CLUSTER) | (1 << fugue_sqlParser.CLUSTERED) | (1 << fugue_sqlParser.CODEGEN) | (1 << fugue_sqlParser.COLLATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)) | (1 << (fugue_sqlParser.EXTERNAL - 64)) | (1 << (fugue_sqlParser.EXTRACT - 64)) | (1 << (fugue_sqlParser.FALSE - 64)) | (1 << (fugue_sqlParser.FETCH - 64)) | (1 << (fugue_sqlParser.FIELDS - 64)) | (1 << (fugue_sqlParser.FILTER - 64)) | (1 << (fugue_sqlParser.FILEFORMAT - 64)) | (1 << (fugue_sqlParser.FIRST - 64)) | (1 << (fugue_sqlParser.FOLLOWING - 64)) | (1 << (fugue_sqlParser.FOR - 64)) | (1 << (fugue_sqlParser.FOREIGN - 64)) | (1 << (fugue_sqlParser.FORMAT - 64)) | (1 << (fugue_sqlParser.FORMATTED - 64)) | (1 << (fugue_sqlParser.FROM - 64)) | (1 << (fugue_sqlParser.FUNCTION - 64)) | (1 << (fugue_sqlParser.FUNCTIONS - 64)) | (1 << (fugue_sqlParser.GLOBAL - 64)) | (1 << (fugue_sqlParser.GRANT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)) | (1 << (fugue_sqlParser.NO - 128)) | (1 << (fugue_sqlParser.NOT - 128)) | (1 << (fugue_sqlParser.NULL - 128)) | (1 << (fugue_sqlParser.NULLS - 128)) | (1 << (fugue_sqlParser.OF - 128)) | (1 << (fugue_sqlParser.ONLY - 128)) | (1 << (fugue_sqlParser.OPTION - 128)) | (1 << (fugue_sqlParser.OPTIONS - 128)) | (1 << (fugue_sqlParser.OR - 128)) | (1 << (fugue_sqlParser.ORDER - 128)) | (1 << (fugue_sqlParser.OUT - 128)) | (1 << (fugue_sqlParser.OUTER - 128)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 128)) | (1 << (fugue_sqlParser.OVER - 128)) | (1 << (fugue_sqlParser.OVERLAPS - 128)) | (1 << (fugue_sqlParser.OVERLAY - 128)) | (1 << (fugue_sqlParser.OVERWRITE - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETS - 192)) | (1 << (fugue_sqlParser.SHOW - 192)) | (1 << (fugue_sqlParser.SKEWED - 192)) | (1 << (fugue_sqlParser.SOME - 192)) | (1 << (fugue_sqlParser.SORT - 192)) | (1 << (fugue_sqlParser.SORTED - 192)) | (1 << (fugue_sqlParser.START - 192)) | (1 << (fugue_sqlParser.STATISTICS - 192)) | (1 << (fugue_sqlParser.STORED - 192)) | (1 << (fugue_sqlParser.STRATIFY - 192)) | (1 << (fugue_sqlParser.STRUCT - 192)) | (1 << (fugue_sqlParser.SUBSTR - 192)) | (1 << (fugue_sqlParser.SUBSTRING - 192)) | (1 << (fugue_sqlParser.TABLE - 192)) | (1 << (fugue_sqlParser.TABLES - 192)) | (1 << (fugue_sqlParser.TABLESAMPLE - 192)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 192)) | (1 << (fugue_sqlParser.TEMPORARY - 192)) | (1 << (fugue_sqlParser.TERMINATED - 192)) | (1 << (fugue_sqlParser.THEN - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[20] = self.fugueAssignmentSign_sempred
        self._predicates[27] = self.fuguePartitionNum_sempred
        self._predicates[92] = self.queryTerm_sempred
        self._predicates[146] = self.booleanExpression_sempred
        self._predicates[148] = self.valueExpression_sempred
        self._predicates[149] = self.primaryExpression_sempred
        self._predicates[182] = self.identifier_sempred
        self._predicates[183] = self.strictIdentifier_sempred
        self._predicates[185] = self.number_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def fugueAssignmentSign_sempred(self, localctx:FugueAssignmentSignContext, predIndex:int):
            if predIndex == 0:
                return self.simpleAssign
         

    def fuguePartitionNum_sempred(self, localctx:FuguePartitionNumContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 3:
                return fugue_sqlParser.legacy_setops_precedence_enbled
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return not fugue_sqlParser.legacy_setops_precedence_enbled
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 7:
                return not fugue_sqlParser.legacy_setops_precedence_enbled
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 6)
         

    def identifier_sempred(self, localctx:IdentifierContext, predIndex:int):
            if predIndex == 18:
                return not self.SQL_standard_keyword_behavior
         

    def strictIdentifier_sempred(self, localctx:StrictIdentifierContext, predIndex:int):
            if predIndex == 19:
                return self.SQL_standard_keyword_behavior
         

            if predIndex == 20:
                return not self.SQL_standard_keyword_behavior
         

    def number_sempred(self, localctx:NumberContext, predIndex:int):
            if predIndex == 21:
                return not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 22:
                return not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 23:
                return fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         




