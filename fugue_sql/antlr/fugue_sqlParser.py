# Generated from fugue_sql/antlr/fugue_sql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u013c")
        buf.write("\u0d14\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\3\2\6\2\u0164\n\2\r\2\16\2\u0165\3\2\3\2\3\3\3\3\3\3")
        buf.write("\3\4\5\4\u016e\n\4\3\4\5\4\u0171\n\4\3\4\3\4\5\4\u0175")
        buf.write("\n\4\3\4\5\4\u0178\n\4\3\5\3\5\3\5\3\5\5\5\u017e\n\5\3")
        buf.write("\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u0187\n\7\3\b\3\b\3\t\3")
        buf.write("\t\5\t\u018d\n\t\3\t\3\t\3\n\3\n\5\n\u0193\n\n\3\n\3\n")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\f\5\f\u019d\n\f\3\f\5\f\u01a0")
        buf.write("\n\f\3\r\3\r\5\r\u01a4\n\r\3\16\3\16\3\17\5\17\u01a9\n")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u01af\n\17\3\17\3\17\5\17")
        buf.write("\u01b3\n\17\3\17\5\17\u01b6\n\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\5\17\u01bd\n\17\5\17\u01bf\n\17\3\20\3\20\3\21\3\21")
        buf.write("\3\22\3\22\3\22\7\22\u01c8\n\22\f\22\16\22\u01cb\13\22")
        buf.write("\3\23\3\23\3\23\7\23\u01d0\n\23\f\23\16\23\u01d3\13\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\5\24\u01da\n\24\3\25\3\25\3")
        buf.write("\25\3\26\3\26\3\26\5\26\u01e2\n\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\5\26\u01e9\n\26\3\26\3\26\3\26\3\26\5\26\u01ef\n")
        buf.write("\26\3\27\3\27\3\27\7\27\u01f4\n\27\f\27\16\27\u01f7\13")
        buf.write("\27\3\30\3\30\3\30\7\30\u01fc\n\30\f\30\16\30\u01ff\13")
        buf.write("\30\3\31\3\31\5\31\u0203\n\31\3\32\3\32\3\33\3\33\3\33")
        buf.write("\7\33\u020a\n\33\f\33\16\33\u020d\13\33\3\34\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u021f\n\36\3\37\3\37\3\37\7\37\u0224\n")
        buf.write("\37\f\37\16\37\u0227\13\37\3 \3 \3 \3 \3 \5 \u022e\n ")
        buf.write("\3!\3!\3\"\3\"\3\"\3\"\7\"\u0236\n\"\f\"\16\"\u0239\13")
        buf.write("\"\3\"\3\"\3\"\3\"\5\"\u023f\n\"\3#\3#\3#\3#\3$\3$\5$")
        buf.write("\u0247\n$\3%\3%\3%\3%\7%\u024d\n%\f%\16%\u0250\13%\3%")
        buf.write("\3%\3%\3%\5%\u0256\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5")
        buf.write("&\u0262\n&\3\'\3\'\3(\3(\7(\u0268\n(\f(\16(\u026b\13(")
        buf.write("\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3,\3-\3-\3-\3")
        buf.write(".\3.\3.\3/\3/\5/\u0283\n/\3/\3/\3/\5/\u0288\n/\3/\3/\3")
        buf.write("/\3/\3/\3/\5/\u0290\n/\3/\3/\3/\3/\3/\3/\7/\u0298\n/\f")
        buf.write("/\16/\u029b\13/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\5/\u02ae\n/\3/\3/\5/\u02b2\n/\3/\3/\3/\3")
        buf.write("/\5/\u02b8\n/\3/\5/\u02bb\n/\3/\5/\u02be\n/\3/\3/\3/\3")
        buf.write("/\3/\5/\u02c5\n/\3/\3/\3/\5/\u02ca\n/\3/\5/\u02cd\n/\3")
        buf.write("/\3/\3/\3/\3/\5/\u02d4\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\5/\u02e0\n/\3/\3/\3/\3/\3/\3/\3/\7/\u02e9\n/\f/\16/")
        buf.write("\u02ec\13/\3/\5/\u02ef\n/\3/\5/\u02f2\n/\3/\3/\3/\3/\3")
        buf.write("/\5/\u02f9\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\7/\u0304\n/\f")
        buf.write("/\16/\u0307\13/\3/\3/\3/\3/\3/\5/\u030e\n/\3/\3/\3/\5")
        buf.write("/\u0313\n/\3/\5/\u0316\n/\3/\3/\3/\3/\5/\u031c\n/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\5/\u0327\n/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\5/\u0367\n/\3/\3/\3/\3/\3/\3/\3/\5/\u0370\n/\3/\3")
        buf.write("/\5/\u0374\n/\3/\3/\3/\3/\5/\u037a\n/\3/\3/\5/\u037e\n")
        buf.write("/\3/\3/\3/\5/\u0383\n/\3/\3/\3/\3/\5/\u0389\n/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\5/\u0395\n/\3/\3/\3/\3/\3/\3/\5")
        buf.write("/\u039d\n/\3/\3/\3/\3/\5/\u03a3\n/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\5/\u03b0\n/\3/\6/\u03b3\n/\r/\16/\u03b4")
        buf.write("\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u03c5\n")
        buf.write("/\3/\3/\3/\7/\u03ca\n/\f/\16/\u03cd\13/\3/\5/\u03d0\n")
        buf.write("/\3/\3/\3/\3/\5/\u03d6\n/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\5/\u03e5\n/\3/\3/\5/\u03e9\n/\3/\3/\3/\3/\5")
        buf.write("/\u03ef\n/\3/\3/\3/\3/\5/\u03f5\n/\3/\5/\u03f8\n/\3/\5")
        buf.write("/\u03fb\n/\3/\3/\3/\3/\5/\u0401\n/\3/\3/\5/\u0405\n/\3")
        buf.write("/\3/\3/\3/\3/\3/\7/\u040d\n/\f/\16/\u0410\13/\3/\3/\3")
        buf.write("/\3/\3/\3/\5/\u0418\n/\3/\5/\u041b\n/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\5/\u0424\n/\3/\3/\3/\5/\u0429\n/\3/\3/\3/\3/\5/\u042f")
        buf.write("\n/\3/\3/\3/\3/\3/\5/\u0436\n/\3/\5/\u0439\n/\3/\3/\3")
        buf.write("/\3/\5/\u043f\n/\3/\3/\3/\3/\3/\3/\3/\7/\u0448\n/\f/\16")
        buf.write("/\u044b\13/\5/\u044d\n/\3/\3/\5/\u0451\n/\3/\3/\3/\5/")
        buf.write("\u0456\n/\3/\3/\3/\5/\u045b\n/\3/\3/\3/\3/\3/\5/\u0462")
        buf.write("\n/\3/\5/\u0465\n/\3/\5/\u0468\n/\3/\3/\3/\3/\3/\5/\u046f")
        buf.write("\n/\3/\3/\3/\5/\u0474\n/\3/\3/\3/\3/\3/\3/\3/\5/\u047d")
        buf.write("\n/\3/\3/\3/\3/\3/\3/\5/\u0485\n/\3/\3/\3/\3/\5/\u048b")
        buf.write("\n/\3/\5/\u048e\n/\3/\5/\u0491\n/\3/\3/\3/\3/\5/\u0497")
        buf.write("\n/\3/\3/\5/\u049b\n/\3/\3/\5/\u049f\n/\3/\3/\5/\u04a3")
        buf.write("\n/\5/\u04a5\n/\3/\3/\3/\3/\3/\3/\5/\u04ad\n/\3/\3/\3")
        buf.write("/\3/\3/\3/\5/\u04b5\n/\3/\3/\3/\3/\5/\u04bb\n/\3/\3/\3")
        buf.write("/\3/\5/\u04c1\n/\3/\5/\u04c4\n/\3/\3/\5/\u04c8\n/\3/\5")
        buf.write("/\u04cb\n/\3/\3/\5/\u04cf\n/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\7/\u04e6\n/\f/\16")
        buf.write("/\u04e9\13/\5/\u04eb\n/\3/\3/\5/\u04ef\n/\3/\3/\3/\3/")
        buf.write("\5/\u04f5\n/\3/\5/\u04f8\n/\3/\5/\u04fb\n/\3/\3/\3/\3")
        buf.write("/\5/\u0501\n/\3/\3/\3/\3/\3/\3/\5/\u0509\n/\3/\3/\3/\5")
        buf.write("/\u050e\n/\3/\3/\3/\3/\5/\u0514\n/\3/\3/\3/\3/\5/\u051a")
        buf.write("\n/\3/\3/\3/\3/\3/\3/\3/\3/\7/\u0524\n/\f/\16/\u0527\13")
        buf.write("/\5/\u0529\n/\3/\3/\3/\7/\u052e\n/\f/\16/\u0531\13/\3")
        buf.write("/\3/\7/\u0535\n/\f/\16/\u0538\13/\3/\3/\3/\7/\u053d\n")
        buf.write("/\f/\16/\u0540\13/\5/\u0542\n/\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\5\60\u054a\n\60\3\60\3\60\5\60\u054e\n\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\5\60\u0555\n\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\5\60\u05c9\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u05d1")
        buf.write("\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u05d9\n\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u05e2\n\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u05ec\n\60\3")
        buf.write("\61\3\61\5\61\u05f0\n\61\3\61\5\61\u05f3\n\61\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u05f9\n\61\3\61\3\61\3\62\3\62\5\62\u05ff")
        buf.write("\n\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u060b\n\63\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u0617\n\64\3\64\3\64\3\64\5\64\u061c")
        buf.write("\n\64\3\65\3\65\3\65\3\66\3\66\3\66\3\67\5\67\u0625\n")
        buf.write("\67\3\67\3\67\3\67\38\38\38\58\u062d\n8\38\38\38\38\3")
        buf.write("8\58\u0634\n8\58\u0636\n8\38\38\38\58\u063b\n8\38\38\5")
        buf.write("8\u063f\n8\38\38\38\58\u0644\n8\38\38\38\58\u0649\n8\3")
        buf.write("8\38\38\58\u064e\n8\38\58\u0651\n8\38\38\38\58\u0656\n")
        buf.write("8\38\38\58\u065a\n8\38\38\38\58\u065f\n8\58\u0661\n8\3")
        buf.write("9\39\59\u0665\n9\3:\3:\3:\3:\3:\7:\u066c\n:\f:\16:\u066f")
        buf.write("\13:\3:\3:\3;\3;\3;\5;\u0676\n;\3<\3<\3=\3=\3=\3=\3=\5")
        buf.write("=\u067f\n=\3>\3>\3>\7>\u0684\n>\f>\16>\u0687\13>\3?\3")
        buf.write("?\3?\3?\7?\u068d\n?\f?\16?\u0690\13?\3@\3@\5@\u0694\n")
        buf.write("@\3@\5@\u0697\n@\3@\3@\3@\3@\3A\3A\3A\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\7B\u06aa\nB\fB\16B\u06ad\13B\3C\3C\3C\3")
        buf.write("C\7C\u06b3\nC\fC\16C\u06b6\13C\3C\3C\3D\3D\5D\u06bc\n")
        buf.write("D\3D\5D\u06bf\nD\3E\3E\3E\7E\u06c4\nE\fE\16E\u06c7\13")
        buf.write("E\3E\5E\u06ca\nE\3F\3F\3F\3F\5F\u06d0\nF\3G\3G\3G\3G\7")
        buf.write("G\u06d6\nG\fG\16G\u06d9\13G\3G\3G\3H\3H\3H\3H\7H\u06e1")
        buf.write("\nH\fH\16H\u06e4\13H\3H\3H\3I\3I\3I\3I\3I\3I\5I\u06ee")
        buf.write("\nI\3J\3J\3J\3J\3J\5J\u06f5\nJ\3K\3K\3K\3K\5K\u06fb\n")
        buf.write("K\3L\3L\3L\3M\3M\3M\3M\3M\3M\6M\u0706\nM\rM\16M\u0707")
        buf.write("\3M\3M\3M\3M\3M\5M\u070f\nM\3M\3M\3M\3M\3M\5M\u0716\n")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0722\nM\3M\3M\3M\3")
        buf.write("M\7M\u0728\nM\fM\16M\u072b\13M\3M\7M\u072e\nM\fM\16M\u0731")
        buf.write("\13M\5M\u0733\nM\3N\3N\3N\3N\3N\7N\u073a\nN\fN\16N\u073d")
        buf.write("\13N\5N\u073f\nN\3N\3N\3N\3N\3N\7N\u0746\nN\fN\16N\u0749")
        buf.write("\13N\5N\u074b\nN\3N\3N\3N\3N\3N\7N\u0752\nN\fN\16N\u0755")
        buf.write("\13N\5N\u0757\nN\3N\3N\3N\3N\3N\7N\u075e\nN\fN\16N\u0761")
        buf.write("\13N\5N\u0763\nN\3N\5N\u0766\nN\3N\3N\3N\5N\u076b\nN\5")
        buf.write("N\u076d\nN\3O\3O\3O\3P\3P\3P\3P\3P\3P\3P\5P\u0779\nP\3")
        buf.write("P\3P\3P\3P\3P\5P\u0780\nP\3P\3P\3P\3P\3P\5P\u0787\nP\3")
        buf.write("P\7P\u078a\nP\fP\16P\u078d\13P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3")
        buf.write("Q\3Q\5Q\u0798\nQ\3R\3R\5R\u079c\nR\3R\3R\5R\u07a0\nR\3")
        buf.write("S\3S\6S\u07a4\nS\rS\16S\u07a5\3T\3T\5T\u07aa\nT\3T\3T")
        buf.write("\3T\3T\7T\u07b0\nT\fT\16T\u07b3\13T\3T\5T\u07b6\nT\3T")
        buf.write("\5T\u07b9\nT\3T\5T\u07bc\nT\3T\5T\u07bf\nT\3T\3T\5T\u07c3")
        buf.write("\nT\3U\3U\5U\u07c7\nU\3U\5U\u07ca\nU\3U\3U\5U\u07ce\n")
        buf.write("U\3U\7U\u07d1\nU\fU\16U\u07d4\13U\3U\5U\u07d7\nU\3U\5")
        buf.write("U\u07da\nU\3U\5U\u07dd\nU\3U\5U\u07e0\nU\5U\u07e2\nU\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u07ee\nV\3V\5V\u07f1\n")
        buf.write("V\3V\3V\5V\u07f5\nV\3V\3V\3V\3V\3V\3V\3V\3V\5V\u07ff\n")
        buf.write("V\3V\3V\5V\u0803\nV\5V\u0805\nV\3V\5V\u0808\nV\3V\3V\5")
        buf.write("V\u080c\nV\3W\3W\7W\u0810\nW\fW\16W\u0813\13W\3W\5W\u0816")
        buf.write("\nW\3W\3W\3X\3X\3X\3Y\3Y\3Y\3Y\5Y\u0821\nY\3Y\3Y\3Y\3")
        buf.write("Z\3Z\3Z\3Z\3Z\5Z\u082b\nZ\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\5[\u0837\n[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\7\\\u0844\n\\\f\\\16\\\u0847\13\\\3\\\3\\\5\\\u084b")
        buf.write("\n\\\3]\3]\3]\7]\u0850\n]\f]\16]\u0853\13]\3^\3^\3^\3")
        buf.write("^\3_\3_\3_\3`\3`\3`\3a\3a\3a\5a\u0862\na\3a\7a\u0865\n")
        buf.write("a\fa\16a\u0868\13a\3a\3a\3b\3b\3b\3b\3b\3b\7b\u0872\n")
        buf.write("b\fb\16b\u0875\13b\3b\3b\5b\u0879\nb\3c\3c\3c\3c\7c\u087f")
        buf.write("\nc\fc\16c\u0882\13c\3c\7c\u0885\nc\fc\16c\u0888\13c\3")
        buf.write("c\5c\u088b\nc\3d\3d\3d\3d\3d\7d\u0892\nd\fd\16d\u0895")
        buf.write("\13d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\7d\u08a1\nd\fd\16d")
        buf.write("\u08a4\13d\3d\3d\5d\u08a8\nd\3d\3d\3d\3d\3d\3d\3d\3d\7")
        buf.write("d\u08b2\nd\fd\16d\u08b5\13d\3d\3d\5d\u08b9\nd\3e\3e\3")
        buf.write("e\3e\7e\u08bf\ne\fe\16e\u08c2\13e\5e\u08c4\ne\3e\3e\5")
        buf.write("e\u08c8\ne\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\7f\u08d4\nf\f")
        buf.write("f\16f\u08d7\13f\3f\3f\3f\3g\3g\3g\3g\3g\7g\u08e1\ng\f")
        buf.write("g\16g\u08e4\13g\3g\3g\5g\u08e8\ng\3h\3h\5h\u08ec\nh\3")
        buf.write("h\5h\u08ef\nh\3i\3i\3i\5i\u08f4\ni\3i\3i\3i\3i\3i\7i\u08fb")
        buf.write("\ni\fi\16i\u08fe\13i\5i\u0900\ni\3i\3i\3i\5i\u0905\ni")
        buf.write("\3i\3i\3i\7i\u090a\ni\fi\16i\u090d\13i\5i\u090f\ni\3j")
        buf.write("\3j\3k\3k\7k\u0915\nk\fk\16k\u0918\13k\3l\3l\3l\3l\5l")
        buf.write("\u091e\nl\3l\3l\3l\3l\3l\5l\u0925\nl\3m\5m\u0928\nm\3")
        buf.write("m\3m\3m\5m\u092d\nm\3m\5m\u0930\nm\3m\3m\3m\5m\u0935\n")
        buf.write("m\3m\3m\5m\u0939\nm\3m\5m\u093c\nm\3m\5m\u093f\nm\3n\3")
        buf.write("n\3n\3n\5n\u0945\nn\3o\3o\3o\5o\u094a\no\3o\3o\3p\5p\u094f")
        buf.write("\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\5")
        buf.write("p\u0961\np\5p\u0963\np\3p\5p\u0966\np\3q\3q\3q\3q\3r\3")
        buf.write("r\3r\7r\u096f\nr\fr\16r\u0972\13r\3s\3s\3s\3s\7s\u0978")
        buf.write("\ns\fs\16s\u097b\13s\3s\3s\3t\3t\5t\u0981\nt\3u\3u\3u")
        buf.write("\3u\7u\u0987\nu\fu\16u\u098a\13u\3u\3u\3v\3v\5v\u0990")
        buf.write("\nv\3w\3w\5w\u0994\nw\3w\3w\3w\3w\3w\3w\5w\u099c\nw\3")
        buf.write("w\3w\3w\3w\3w\3w\5w\u09a4\nw\3w\3w\3w\3w\5w\u09aa\nw\3")
        buf.write("x\3x\3x\3x\7x\u09b0\nx\fx\16x\u09b3\13x\3x\3x\3y\3y\3")
        buf.write("y\3y\3y\7y\u09bc\ny\fy\16y\u09bf\13y\5y\u09c1\ny\3y\3")
        buf.write("y\3y\3z\5z\u09c7\nz\3z\3z\5z\u09cb\nz\5z\u09cd\nz\3{\3")
        buf.write("{\3{\3{\3{\3{\3{\5{\u09d6\n{\3{\3{\3{\3{\3{\3{\3{\3{\3")
        buf.write("{\3{\5{\u09e2\n{\5{\u09e4\n{\3{\3{\3{\3{\3{\5{\u09eb\n")
        buf.write("{\3{\3{\3{\3{\3{\5{\u09f2\n{\3{\3{\3{\3{\5{\u09f8\n{\3")
        buf.write("{\3{\3{\3{\5{\u09fe\n{\5{\u0a00\n{\3|\3|\3|\7|\u0a05\n")
        buf.write("|\f|\16|\u0a08\13|\3}\3}\3}\7}\u0a0d\n}\f}\16}\u0a10\13")
        buf.write("}\3~\3~\3~\5~\u0a15\n~\3~\3~\3\177\3\177\3\177\5\177\u0a1c")
        buf.write("\n\177\3\177\3\177\3\u0080\3\u0080\5\u0080\u0a22\n\u0080")
        buf.write("\3\u0080\3\u0080\5\u0080\u0a26\n\u0080\5\u0080\u0a28\n")
        buf.write("\u0080\3\u0081\3\u0081\3\u0081\7\u0081\u0a2d\n\u0081\f")
        buf.write("\u0081\16\u0081\u0a30\13\u0081\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\7\u0082\u0a36\n\u0082\f\u0082\16\u0082\u0a39")
        buf.write("\13\u0082\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\7\u0083\u0a43\n\u0083\f\u0083\16\u0083")
        buf.write("\u0a46\13\u0083\3\u0083\3\u0083\5\u0083\u0a4a\n\u0083")
        buf.write("\3\u0084\3\u0084\5\u0084\u0a4e\n\u0084\3\u0085\3\u0085")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\5\u0086\u0a5c\n\u0086\5\u0086")
        buf.write("\u0a5e\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\7\u0086\u0a66\n\u0086\f\u0086\16\u0086\u0a69")
        buf.write("\13\u0086\3\u0087\5\u0087\u0a6c\n\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0a74\n\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\7\u0087\u0a7b")
        buf.write("\n\u0087\f\u0087\16\u0087\u0a7e\13\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\5\u0087\u0a83\n\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\5\u0087\u0a8b\n\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\5\u0087\u0a90\n\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\7\u0087")
        buf.write("\u0a9a\n\u0087\f\u0087\16\u0087\u0a9d\13\u0087\3\u0087")
        buf.write("\3\u0087\5\u0087\u0aa1\n\u0087\3\u0087\5\u0087\u0aa4\n")
        buf.write("\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0aaa\n")
        buf.write("\u0087\3\u0087\3\u0087\5\u0087\u0aae\n\u0087\3\u0087\3")
        buf.write("\u0087\3\u0087\5\u0087\u0ab3\n\u0087\3\u0087\3\u0087\3")
        buf.write("\u0087\5\u0087\u0ab8\n\u0087\3\u0087\3\u0087\3\u0087\5")
        buf.write("\u0087\u0abd\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\5")
        buf.write("\u0088\u0ac3\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3")
        buf.write("\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\7\u0088\u0ad8\n\u0088\f\u0088\16\u0088\u0adb")
        buf.write("\13\u0088\3\u0089\3\u0089\3\u0089\3\u0089\6\u0089\u0ae1")
        buf.write("\n\u0089\r\u0089\16\u0089\u0ae2\3\u0089\3\u0089\5\u0089")
        buf.write("\u0ae7\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\6\u0089\u0aee\n\u0089\r\u0089\16\u0089\u0aef\3\u0089")
        buf.write("\3\u0089\5\u0089\u0af4\n\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089\u0b04\n\u0089")
        buf.write("\f\u0089\16\u0089\u0b07\13\u0089\5\u0089\u0b09\n\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u0b11\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\5\u0089\u0b1a\n\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\6\u0089\u0b2f\n\u0089\r\u0089")
        buf.write("\16\u0089\u0b30\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0b3c\n\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\7\u0089\u0b41\n\u0089\f\u0089")
        buf.write("\16\u0089\u0b44\13\u0089\5\u0089\u0b46\n\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u0b4f\n\u0089\3\u0089\3\u0089\5\u0089\u0b53\n\u0089\3")
        buf.write("\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\6\u0089\u0b5d\n\u0089\r\u0089\16\u0089\u0b5e")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\5\u0089\u0b78\n\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\5\u0089\u0b7f\n\u0089\3\u0089")
        buf.write("\5\u0089\u0b82\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\5\u0089\u0b91\n\u0089\3\u0089\3\u0089")
        buf.write("\5\u0089\u0b95\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089\u0b9f\n\u0089")
        buf.write("\f\u0089\16\u0089\u0ba2\13\u0089\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\6\u008a\u0bac")
        buf.write("\n\u008a\r\u008a\16\u008a\u0bad\5\u008a\u0bb0\n\u008a")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\5\u008b\u0bba\n\u008b\3\u008c\3\u008c\3\u008d")
        buf.write("\3\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u0090\3\u0090")
        buf.write("\3\u0090\5\u0090\u0bc7\n\u0090\3\u0091\3\u0091\5\u0091")
        buf.write("\u0bcb\n\u0091\3\u0092\3\u0092\3\u0092\6\u0092\u0bd0\n")
        buf.write("\u0092\r\u0092\16\u0092\u0bd1\3\u0093\3\u0093\3\u0093")
        buf.write("\5\u0093\u0bd7\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0095\5\u0095\u0bdf\n\u0095\3\u0095\3\u0095")
        buf.write("\5\u0095\u0be3\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\5\u0096\u0bec\n\u0096\3\u0097")
        buf.write("\3\u0097\3\u0097\5\u0097\u0bf1\n\u0097\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098")
        buf.write("\u0c02\n\u0098\3\u0098\3\u0098\5\u0098\u0c06\n\u0098\3")
        buf.write("\u0098\3\u0098\3\u0098\3\u0098\3\u0098\7\u0098\u0c0d\n")
        buf.write("\u0098\f\u0098\16\u0098\u0c10\13\u0098\3\u0098\5\u0098")
        buf.write("\u0c13\n\u0098\5\u0098\u0c15\n\u0098\3\u0099\3\u0099\3")
        buf.write("\u0099\7\u0099\u0c1a\n\u0099\f\u0099\16\u0099\u0c1d\13")
        buf.write("\u0099\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0c23\n")
        buf.write("\u009a\3\u009a\5\u009a\u0c26\n\u009a\3\u009a\5\u009a\u0c29")
        buf.write("\n\u009a\3\u009b\3\u009b\3\u009b\7\u009b\u0c2e\n\u009b")
        buf.write("\f\u009b\16\u009b\u0c31\13\u009b\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\5\u009c\u0c37\n\u009c\3\u009c\5\u009c\u0c3a\n")
        buf.write("\u009c\3\u009d\3\u009d\3\u009d\7\u009d\u0c3f\n\u009d\f")
        buf.write("\u009d\16\u009d\u0c42\13\u009d\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u0c49\n\u009e\3\u009e\5\u009e")
        buf.write("\u0c4c\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0c57\n\u00a0")
        buf.write("\f\u00a0\16\u00a0\u0c5a\13\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0c6b")
        buf.write("\n\u00a2\f\u00a2\16\u00a2\u0c6e\13\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0c75\n\u00a2\f\u00a2")
        buf.write("\16\u00a2\u0c78\13\u00a2\5\u00a2\u0c7a\n\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0c81\n\u00a2")
        buf.write("\f\u00a2\16\u00a2\u0c84\13\u00a2\5\u00a2\u0c86\n\u00a2")
        buf.write("\5\u00a2\u0c88\n\u00a2\3\u00a2\5\u00a2\u0c8b\n\u00a2\3")
        buf.write("\u00a2\5\u00a2\u0c8e\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3")
        buf.write("\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3")
        buf.write("\u0ca0\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\5\u00a4\u0ca9\n\u00a4\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\7\u00a5\u0cae\n\u00a5\f\u00a5\16\u00a5\u0cb1")
        buf.write("\13\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0cb7")
        buf.write("\n\u00a6\3\u00a7\3\u00a7\3\u00a7\7\u00a7\u0cbc\n\u00a7")
        buf.write("\f\u00a7\16\u00a7\u0cbf\13\u00a7\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a9\3\u00a9\6\u00a9\u0cc6\n\u00a9\r\u00a9\16\u00a9")
        buf.write("\u0cc7\3\u00a9\5\u00a9\u0ccb\n\u00a9\3\u00aa\3\u00aa\3")
        buf.write("\u00aa\5\u00aa\u0cd0\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3")
        buf.write("\u00ab\3\u00ab\3\u00ab\5\u00ab\u0cd8\n\u00ab\3\u00ac\3")
        buf.write("\u00ac\3\u00ad\3\u00ad\5\u00ad\u0cde\n\u00ad\3\u00ad\3")
        buf.write("\u00ad\3\u00ad\5\u00ad\u0ce3\n\u00ad\3\u00ad\3\u00ad\3")
        buf.write("\u00ad\5\u00ad\u0ce8\n\u00ad\3\u00ad\3\u00ad\5\u00ad\u0cec")
        buf.write("\n\u00ad\3\u00ad\3\u00ad\5\u00ad\u0cf0\n\u00ad\3\u00ad")
        buf.write("\3\u00ad\5\u00ad\u0cf4\n\u00ad\3\u00ad\3\u00ad\5\u00ad")
        buf.write("\u0cf8\n\u00ad\3\u00ad\3\u00ad\5\u00ad\u0cfc\n\u00ad\3")
        buf.write("\u00ad\3\u00ad\5\u00ad\u0d00\n\u00ad\3\u00ad\5\u00ad\u0d03")
        buf.write("\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\5\u00ae\u0d0c\n\u00ae\3\u00af\3\u00af\3\u00b0")
        buf.write("\3\u00b0\3\u00b1\3\u00b1\3\u00b1\7\u04e7\u0525\u052f\u0536")
        buf.write("\u053e\6\u009e\u010a\u010e\u0110\u00b2\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e")
        buf.write("\u0160\2-\3\2\23\25\4\2))WW\4\2SS\u00c6\u00c6\4\2\62\62")
        buf.write("\u00d4\u00d4\4\2QQ\u00a8\u00a8\4\2vv\u0083\u0083\3\2=")
        buf.write(">\4\2\u00f5\u00f5\u0113\u0113\4\2!!\65\65\7\2::FFhhuu")
        buf.write("\u009f\u009f\3\2WX\4\2hhuu\4\2\u00ac\u00ac\u012e\u012e")
        buf.write("\4\2\36\36\u0099\u0099\5\2PP\u00a7\u00a7\u00de\u00de\6")
        buf.write("\2cc\u008a\u008a\u00e7\u00e7\u0109\u0109\5\2cc\u00e7\u00e7")
        buf.write("\u0109\u0109\4\2pp\u0091\u0091\4\2  \\\\\4\2\u0132\u0132")
        buf.write("\u0134\u0134\5\2  %%\u00eb\u00eb\5\2kk\u0103\u0103\u010b")
        buf.write("\u010b\4\2\u0123\u0124\u0129\u0129\3\2\u0125\u0128\4\2")
        buf.write("\u0123\u0124\u012c\u012c\4\2KKMM\3\2\u00f3\u00f4\4\2\4")
        buf.write("\4vv\4\2\4\4rr\5\2--\u0094\u0094\u00fe\u00fe\3\2\u011a")
        buf.write("\u011b\3\2\u0123\u012d\6\2##\u0083\u0083\u00ab\u00ab\u00b3")
        buf.write("\u00b3\4\2kk\u0103\u0103\3\2\u0123\u0124\4\2]]\u00bc\u00bc")
        buf.write("\4\2\u00b4\u00b4\u00ec\u00ec\4\2qq\u00c3\u00c3\3\2\u0133")
        buf.write("\u0134\4\2^^\u00e6\u00e6\65\2\36\37!\"&\')*,,.\62\65\65")
        buf.write("\67:<<>DFFIJOQS[]^bbdjmmoqtuxz}}\u0080\u0082\u0084\u0085")
        buf.write("\u0087\u0089\u008b\u008b\u008e\u008e\u0090\u0093\u0096")
        buf.write("\u00a3\u00a6\u00a8\u00aa\u00aa\u00ad\u00ae\u00b1\u00b2")
        buf.write("\u00b5\u00b5\u00b7\u00b8\u00ba\u00c3\u00c5\u00cd\u00cf")
        buf.write("\u00d5\u00d7\u00de\u00e2\u00e4\u00e6\u00e6\u00e8\u00ea")
        buf.write("\u00ec\u00f4\u00f6\u00fa\u00fd\u00fd\u00ff\u0104\u0106")
        buf.write("\u0108\u010c\u010f\u0112\u0114\u0117\u0117\u0128\u0128")
        buf.write("\21\2$$HHccww\u0086\u0086\u008a\u008a\u008f\u008f\u0095")
        buf.write("\u0095\u00a9\u00a9\u00af\u00af\u00d6\u00d6\u00e1\u00e1")
        buf.write("\u00e7\u00e7\u0109\u0109\u0111\u0111\23\2\36#%GIbdvx\u0085")
        buf.write("\u0087\u0089\u008b\u008e\u0090\u0094\u0096\u00a8\u00aa")
        buf.write("\u00ae\u00b0\u00d5\u00d7\u00e0\u00e2\u00e6\u00e8\u0108")
        buf.write("\u010a\u0110\u0112\u0119\u0128\u0128\2\u0efa\2\u0163\3")
        buf.write("\2\2\2\4\u0169\3\2\2\2\6\u016d\3\2\2\2\b\u017d\3\2\2\2")
        buf.write("\n\u017f\3\2\2\2\f\u0186\3\2\2\2\16\u0188\3\2\2\2\20\u018a")
        buf.write("\3\2\2\2\22\u0190\3\2\2\2\24\u0196\3\2\2\2\26\u0199\3")
        buf.write("\2\2\2\30\u01a1\3\2\2\2\32\u01a5\3\2\2\2\34\u01be\3\2")
        buf.write("\2\2\36\u01c0\3\2\2\2 \u01c2\3\2\2\2\"\u01c4\3\2\2\2$")
        buf.write("\u01cc\3\2\2\2&\u01d9\3\2\2\2(\u01db\3\2\2\2*\u01ee\3")
        buf.write("\2\2\2,\u01f0\3\2\2\2.\u01f8\3\2\2\2\60\u0200\3\2\2\2")
        buf.write("\62\u0204\3\2\2\2\64\u0206\3\2\2\2\66\u020e\3\2\2\28\u0212")
        buf.write("\3\2\2\2:\u021e\3\2\2\2<\u0220\3\2\2\2>\u022d\3\2\2\2")
        buf.write("@\u022f\3\2\2\2B\u023e\3\2\2\2D\u0240\3\2\2\2F\u0246\3")
        buf.write("\2\2\2H\u0255\3\2\2\2J\u0261\3\2\2\2L\u0263\3\2\2\2N\u0265")
        buf.write("\3\2\2\2P\u026e\3\2\2\2R\u0271\3\2\2\2T\u0274\3\2\2\2")
        buf.write("V\u0277\3\2\2\2X\u027a\3\2\2\2Z\u027d\3\2\2\2\\\u0541")
        buf.write("\3\2\2\2^\u05eb\3\2\2\2`\u05ed\3\2\2\2b\u05fe\3\2\2\2")
        buf.write("d\u0604\3\2\2\2f\u0610\3\2\2\2h\u061d\3\2\2\2j\u0620\3")
        buf.write("\2\2\2l\u0624\3\2\2\2n\u0660\3\2\2\2p\u0662\3\2\2\2r\u0666")
        buf.write("\3\2\2\2t\u0672\3\2\2\2v\u0677\3\2\2\2x\u067e\3\2\2\2")
        buf.write("z\u0680\3\2\2\2|\u0688\3\2\2\2~\u0691\3\2\2\2\u0080\u069c")
        buf.write("\3\2\2\2\u0082\u06ab\3\2\2\2\u0084\u06ae\3\2\2\2\u0086")
        buf.write("\u06b9\3\2\2\2\u0088\u06c9\3\2\2\2\u008a\u06cf\3\2\2\2")
        buf.write("\u008c\u06d1\3\2\2\2\u008e\u06dc\3\2\2\2\u0090\u06ed\3")
        buf.write("\2\2\2\u0092\u06f4\3\2\2\2\u0094\u06f6\3\2\2\2\u0096\u06fc")
        buf.write("\3\2\2\2\u0098\u0732\3\2\2\2\u009a\u073e\3\2\2\2\u009c")
        buf.write("\u076e\3\2\2\2\u009e\u0771\3\2\2\2\u00a0\u0797\3\2\2\2")
        buf.write("\u00a2\u0799\3\2\2\2\u00a4\u07a1\3\2\2\2\u00a6\u07c2\3")
        buf.write("\2\2\2\u00a8\u07e1\3\2\2\2\u00aa\u07ed\3\2\2\2\u00ac\u080d")
        buf.write("\3\2\2\2\u00ae\u0819\3\2\2\2\u00b0\u081c\3\2\2\2\u00b2")
        buf.write("\u0825\3\2\2\2\u00b4\u0836\3\2\2\2\u00b6\u084a\3\2\2\2")
        buf.write("\u00b8\u084c\3\2\2\2\u00ba\u0854\3\2\2\2\u00bc\u0858\3")
        buf.write("\2\2\2\u00be\u085b\3\2\2\2\u00c0\u085e\3\2\2\2\u00c2\u0878")
        buf.write("\3\2\2\2\u00c4\u087a\3\2\2\2\u00c6\u08b8\3\2\2\2\u00c8")
        buf.write("\u08c7\3\2\2\2\u00ca\u08c9\3\2\2\2\u00cc\u08e7\3\2\2\2")
        buf.write("\u00ce\u08e9\3\2\2\2\u00d0\u08f0\3\2\2\2\u00d2\u0910\3")
        buf.write("\2\2\2\u00d4\u0912\3\2\2\2\u00d6\u0924\3\2\2\2\u00d8\u093e")
        buf.write("\3\2\2\2\u00da\u0944\3\2\2\2\u00dc\u0946\3\2\2\2\u00de")
        buf.write("\u0965\3\2\2\2\u00e0\u0967\3\2\2\2\u00e2\u096b\3\2\2\2")
        buf.write("\u00e4\u0973\3\2\2\2\u00e6\u097e\3\2\2\2\u00e8\u0982\3")
        buf.write("\2\2\2\u00ea\u098d\3\2\2\2\u00ec\u09a9\3\2\2\2\u00ee\u09ab")
        buf.write("\3\2\2\2\u00f0\u09b6\3\2\2\2\u00f2\u09cc\3\2\2\2\u00f4")
        buf.write("\u09ff\3\2\2\2\u00f6\u0a01\3\2\2\2\u00f8\u0a09\3\2\2\2")
        buf.write("\u00fa\u0a14\3\2\2\2\u00fc\u0a1b\3\2\2\2\u00fe\u0a1f\3")
        buf.write("\2\2\2\u0100\u0a29\3\2\2\2\u0102\u0a31\3\2\2\2\u0104\u0a49")
        buf.write("\3\2\2\2\u0106\u0a4d\3\2\2\2\u0108\u0a4f\3\2\2\2\u010a")
        buf.write("\u0a5d\3\2\2\2\u010c\u0abc\3\2\2\2\u010e\u0ac2\3\2\2\2")
        buf.write("\u0110\u0b94\3\2\2\2\u0112\u0baf\3\2\2\2\u0114\u0bb9\3")
        buf.write("\2\2\2\u0116\u0bbb\3\2\2\2\u0118\u0bbd\3\2\2\2\u011a\u0bbf")
        buf.write("\3\2\2\2\u011c\u0bc1\3\2\2\2\u011e\u0bc3\3\2\2\2\u0120")
        buf.write("\u0bc8\3\2\2\2\u0122\u0bcf\3\2\2\2\u0124\u0bd3\3\2\2\2")
        buf.write("\u0126\u0bd8\3\2\2\2\u0128\u0be2\3\2\2\2\u012a\u0beb\3")
        buf.write("\2\2\2\u012c\u0bf0\3\2\2\2\u012e\u0c14\3\2\2\2\u0130\u0c16")
        buf.write("\3\2\2\2\u0132\u0c1e\3\2\2\2\u0134\u0c2a\3\2\2\2\u0136")
        buf.write("\u0c32\3\2\2\2\u0138\u0c3b\3\2\2\2\u013a\u0c43\3\2\2\2")
        buf.write("\u013c\u0c4d\3\2\2\2\u013e\u0c52\3\2\2\2\u0140\u0c5b\3")
        buf.write("\2\2\2\u0142\u0c8d\3\2\2\2\u0144\u0c9f\3\2\2\2\u0146\u0ca8")
        buf.write("\3\2\2\2\u0148\u0caa\3\2\2\2\u014a\u0cb6\3\2\2\2\u014c")
        buf.write("\u0cb8\3\2\2\2\u014e\u0cc0\3\2\2\2\u0150\u0cca\3\2\2\2")
        buf.write("\u0152\u0ccf\3\2\2\2\u0154\u0cd7\3\2\2\2\u0156\u0cd9\3")
        buf.write("\2\2\2\u0158\u0d02\3\2\2\2\u015a\u0d0b\3\2\2\2\u015c\u0d0d")
        buf.write("\3\2\2\2\u015e\u0d0f\3\2\2\2\u0160\u0d11\3\2\2\2\u0162")
        buf.write("\u0164\5\6\4\2\u0163\u0162\3\2\2\2\u0164\u0165\3\2\2\2")
        buf.write("\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167\3")
        buf.write("\2\2\2\u0167\u0168\7\2\2\3\u0168\3\3\2\2\2\u0169\u016a")
        buf.write("\5\6\4\2\u016a\u016b\7\2\2\3\u016b\5\3\2\2\2\u016c\u016e")
        buf.write("\5\n\6\2\u016d\u016c\3\2\2\2\u016d\u016e\3\2\2\2\u016e")
        buf.write("\u0170\3\2\2\2\u016f\u0171\5\34\17\2\u0170\u016f\3\2\2")
        buf.write("\2\u0170\u0171\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0174")
        buf.write("\5\b\5\2\u0173\u0175\5\30\r\2\u0174\u0173\3\2\2\2\u0174")
        buf.write("\u0175\3\2\2\2\u0175\u0177\3\2\2\2\u0176\u0178\5\32\16")
        buf.write("\2\u0177\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178\7\3\2")
        buf.write("\2\2\u0179\u017e\5\16\b\2\u017a\u017e\5\20\t\2\u017b\u017e")
        buf.write("\5\22\n\2\u017c\u017e\5\24\13\2\u017d\u0179\3\2\2\2\u017d")
        buf.write("\u017a\3\2\2\2\u017d\u017b\3\2\2\2\u017d\u017c\3\2\2\2")
        buf.write("\u017e\t\3\2\2\2\u017f\u0180\5L\'\2\u0180\u0181\5\f\7")
        buf.write("\2\u0181\13\3\2\2\2\u0182\u0187\7\34\2\2\u0183\u0187\7")
        buf.write("\35\2\2\u0184\u0185\6\7\2\2\u0185\u0187\7\u011a\2\2\u0186")
        buf.write("\u0182\3\2\2\2\u0186\u0183\3\2\2\2\u0186\u0184\3\2\2\2")
        buf.write("\u0187\r\3\2\2\2\u0188\u0189\5l\67\2\u0189\17\3\2\2\2")
        buf.write("\u018a\u018c\7\u0101\2\2\u018b\u018d\5$\23\2\u018c\u018b")
        buf.write("\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("\u018f\5\26\f\2\u018f\21\3\2\2\2\u0190\u0192\7\32\2\2")
        buf.write("\u0191\u0193\5$\23\2\u0192\u0191\3\2\2\2\u0192\u0193\3")
        buf.write("\2\2\2\u0193\u0194\3\2\2\2\u0194\u0195\5\26\f\2\u0195")
        buf.write("\23\3\2\2\2\u0196\u0197\7G\2\2\u0197\u0198\5\26\f\2\u0198")
        buf.write("\25\3\2\2\2\u0199\u019a\7\u0111\2\2\u019a\u019c\5\"\22")
        buf.write("\2\u019b\u019d\5*\26\2\u019c\u019b\3\2\2\2\u019c\u019d")
        buf.write("\3\2\2\2\u019d\u019f\3\2\2\2\u019e\u01a0\5(\25\2\u019f")
        buf.write("\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\27\3\2\2\2\u01a1")
        buf.write("\u01a3\7\27\2\2\u01a2\u01a4\5\u0152\u00aa\2\u01a3\u01a2")
        buf.write("\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\31\3\2\2\2\u01a5\u01a6")
        buf.write("\7\30\2\2\u01a6\33\3\2\2\2\u01a7\u01a9\5\36\20\2\u01a8")
        buf.write("\u01a7\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\3\2\2\2")
        buf.write("\u01aa\u01ab\7\u00bc\2\2\u01ab\u01ae\5 \21\2\u01ac\u01ad")
        buf.write("\7\60\2\2\u01ad\u01af\5,\27\2\u01ae\u01ac\3\2\2\2\u01ae")
        buf.write("\u01af\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0\u01b1\7\26\2")
        buf.write("\2\u01b1\u01b3\5.\30\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3")
        buf.write("\3\2\2\2\u01b3\u01bf\3\2\2\2\u01b4\u01b6\5\36\20\2\u01b5")
        buf.write("\u01b4\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2")
        buf.write("\u01b7\u01b8\7\u00bc\2\2\u01b8\u01b9\7\60\2\2\u01b9\u01bc")
        buf.write("\5,\27\2\u01ba\u01bb\7\26\2\2\u01bb\u01bd\5.\30\2\u01bc")
        buf.write("\u01ba\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf\3\2\2\2")
        buf.write("\u01be\u01a8\3\2\2\2\u01be\u01b5\3\2\2\2\u01bf\35\3\2")
        buf.write("\2\2\u01c0\u01c1\t\2\2\2\u01c1\37\3\2\2\2\u01c2\u01c3")
        buf.write("\7\u0132\2\2\u01c3!\3\2\2\2\u01c4\u01c9\5L\'\2\u01c5\u01c6")
        buf.write("\7\3\2\2\u01c6\u01c8\5L\'\2\u01c7\u01c5\3\2\2\2\u01c8")
        buf.write("\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2")
        buf.write("\u01ca#\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cc\u01d1\5&\24")
        buf.write("\2\u01cd\u01ce\7\4\2\2\u01ce\u01d0\5&\24\2\u01cf\u01cd")
        buf.write("\3\2\2\2\u01d0\u01d3\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d1")
        buf.write("\u01d2\3\2\2\2\u01d2%\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d4")
        buf.write("\u01da\5L\'\2\u01d5\u01d6\7\5\2\2\u01d6\u01d7\5\b\5\2")
        buf.write("\u01d7\u01d8\7\6\2\2\u01d8\u01da\3\2\2\2\u01d9\u01d4\3")
        buf.write("\2\2\2\u01d9\u01d5\3\2\2\2\u01da\'\3\2\2\2\u01db\u01dc")
        buf.write("\7\u00de\2\2\u01dc\u01dd\5\64\33\2\u01dd)\3\2\2\2\u01de")
        buf.write("\u01df\7\31\2\2\u01df\u01ef\5<\37\2\u01e0\u01e2\7\31\2")
        buf.write("\2\u01e1\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3")
        buf.write("\3\2\2\2\u01e3\u01e4\7\7\2\2\u01e4\u01e5\5<\37\2\u01e5")
        buf.write("\u01e6\7\b\2\2\u01e6\u01ef\3\2\2\2\u01e7\u01e9\7\31\2")
        buf.write("\2\u01e8\u01e7\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01ea")
        buf.write("\3\2\2\2\u01ea\u01eb\7\5\2\2\u01eb\u01ec\5<\37\2\u01ec")
        buf.write("\u01ed\7\6\2\2\u01ed\u01ef\3\2\2\2\u01ee\u01de\3\2\2\2")
        buf.write("\u01ee\u01e1\3\2\2\2\u01ee\u01e8\3\2\2\2\u01ef+\3\2\2")
        buf.write("\2\u01f0\u01f5\5\62\32\2\u01f1\u01f2\7\4\2\2\u01f2\u01f4")
        buf.write("\5\62\32\2\u01f3\u01f1\3\2\2\2\u01f4\u01f7\3\2\2\2\u01f5")
        buf.write("\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6-\3\2\2\2\u01f7")
        buf.write("\u01f5\3\2\2\2\u01f8\u01fd\5\60\31\2\u01f9\u01fa\7\4\2")
        buf.write("\2\u01fa\u01fc\5\60\31\2\u01fb\u01f9\3\2\2\2\u01fc\u01ff")
        buf.write("\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe")
        buf.write("/\3\2\2\2\u01ff\u01fd\3\2\2\2\u0200\u0202\5\62\32\2\u0201")
        buf.write("\u0203\t\3\2\2\u0202\u0201\3\2\2\2\u0202\u0203\3\2\2\2")
        buf.write("\u0203\61\3\2\2\2\u0204\u0205\5L\'\2\u0205\63\3\2\2\2")
        buf.write("\u0206\u020b\5\66\34\2\u0207\u0208\7\4\2\2\u0208\u020a")
        buf.write("\5\66\34\2\u0209\u0207\3\2\2\2\u020a\u020d\3\2\2\2\u020b")
        buf.write("\u0209\3\2\2\2\u020b\u020c\3\2\2\2\u020c\65\3\2\2\2\u020d")
        buf.write("\u020b\3\2\2\2\u020e\u020f\58\35\2\u020f\u0210\7\t\2\2")
        buf.write("\u0210\u0211\5:\36\2\u0211\67\3\2\2\2\u0212\u0213\5L\'")
        buf.write("\2\u02139\3\2\2\2\u0214\u021f\3\2\2\2\u0215\u021f\5L\'")
        buf.write("\2\u0216\u0217\7\n\2\2\u0217\u0218\5:\36\2\u0218\u0219")
        buf.write("\7\13\2\2\u0219\u021f\3\2\2\2\u021a\u021b\7\7\2\2\u021b")
        buf.write("\u021c\5\64\33\2\u021c\u021d\7\b\2\2\u021d\u021f\3\2\2")
        buf.write("\2\u021e\u0214\3\2\2\2\u021e\u0215\3\2\2\2\u021e\u0216")
        buf.write("\3\2\2\2\u021e\u021a\3\2\2\2\u021f;\3\2\2\2\u0220\u0225")
        buf.write("\5> \2\u0221\u0222\7\4\2\2\u0222\u0224\5> \2\u0223\u0221")
        buf.write("\3\2\2\2\u0224\u0227\3\2\2\2\u0225\u0223\3\2\2\2\u0225")
        buf.write("\u0226\3\2\2\2\u0226=\3\2\2\2\u0227\u0225\3\2\2\2\u0228")
        buf.write("\u022e\5D#\2\u0229\u022a\5F$\2\u022a\u022b\7\u011a\2\2")
        buf.write("\u022b\u022c\5J&\2\u022c\u022e\3\2\2\2\u022d\u0228\3\2")
        buf.write("\2\2\u022d\u0229\3\2\2\2\u022e?\3\2\2\2\u022f\u0230\5")
        buf.write("J&\2\u0230A\3\2\2\2\u0231\u0232\7\7\2\2\u0232\u0237\5")
        buf.write("D#\2\u0233\u0234\7\4\2\2\u0234\u0236\5D#\2\u0235\u0233")
        buf.write("\3\2\2\2\u0236\u0239\3\2\2\2\u0237\u0235\3\2\2\2\u0237")
        buf.write("\u0238\3\2\2\2\u0238\u023a\3\2\2\2\u0239\u0237\3\2\2\2")
        buf.write("\u023a\u023b\7\b\2\2\u023b\u023f\3\2\2\2\u023c\u023d\7")
        buf.write("\7\2\2\u023d\u023f\7\b\2\2\u023e\u0231\3\2\2\2\u023e\u023c")
        buf.write("\3\2\2\2\u023fC\3\2\2\2\u0240\u0241\5F$\2\u0241\u0242")
        buf.write("\7\t\2\2\u0242\u0243\5J&\2\u0243E\3\2\2\2\u0244\u0247")
        buf.write("\5L\'\2\u0245\u0247\7\u012e\2\2\u0246\u0244\3\2\2\2\u0246")
        buf.write("\u0245\3\2\2\2\u0247G\3\2\2\2\u0248\u0249\7\n\2\2\u0249")
        buf.write("\u024e\5J&\2\u024a\u024b\7\4\2\2\u024b\u024d\5J&\2\u024c")
        buf.write("\u024a\3\2\2\2\u024d\u0250\3\2\2\2\u024e\u024c\3\2\2\2")
        buf.write("\u024e\u024f\3\2\2\2\u024f\u0251\3\2\2\2\u0250\u024e\3")
        buf.write("\2\2\2\u0251\u0252\7\13\2\2\u0252\u0256\3\2\2\2\u0253")
        buf.write("\u0254\7\n\2\2\u0254\u0256\7\13\2\2\u0255\u0248\3\2\2")
        buf.write("\2\u0255\u0253\3\2\2\2\u0256I\3\2\2\2\u0257\u0262\7\u012e")
        buf.write("\2\2\u0258\u0262\5\u0158\u00ad\2\u0259\u0262\5B\"\2\u025a")
        buf.write("\u0262\5H%\2\u025b\u0262\7\f\2\2\u025c\u0262\7\u0103\2")
        buf.write("\2\u025d\u0262\7\r\2\2\u025e\u0262\7k\2\2\u025f\u0262")
        buf.write("\7\16\2\2\u0260\u0262\7\u00ac\2\2\u0261\u0257\3\2\2\2")
        buf.write("\u0261\u0258\3\2\2\2\u0261\u0259\3\2\2\2\u0261\u025a\3")
        buf.write("\2\2\2\u0261\u025b\3\2\2\2\u0261\u025c\3\2\2\2\u0261\u025d")
        buf.write("\3\2\2\2\u0261\u025e\3\2\2\2\u0261\u025f\3\2\2\2\u0261")
        buf.write("\u0260\3\2\2\2\u0262K\3\2\2\2\u0263\u0264\5\u0152\u00aa")
        buf.write("\2\u0264M\3\2\2\2\u0265\u0269\5\\/\2\u0266\u0268\7\17")
        buf.write("\2\2\u0267\u0266\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267")
        buf.write("\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026c\3\2\2\2\u026b")
        buf.write("\u0269\3\2\2\2\u026c\u026d\7\2\2\3\u026dO\3\2\2\2\u026e")
        buf.write("\u026f\5\u00fe\u0080\2\u026f\u0270\7\2\2\3\u0270Q\3\2")
        buf.write("\2\2\u0271\u0272\5\u00fa~\2\u0272\u0273\7\2\2\3\u0273")
        buf.write("S\3\2\2\2\u0274\u0275\5\u00f8}\2\u0275\u0276\7\2\2\3\u0276")
        buf.write("U\3\2\2\2\u0277\u0278\5\u00fc\177\2\u0278\u0279\7\2\2")
        buf.write("\3\u0279W\3\2\2\2\u027a\u027b\5\u012e\u0098\2\u027b\u027c")
        buf.write("\7\2\2\3\u027cY\3\2\2\2\u027d\u027e\5\u0134\u009b\2\u027e")
        buf.write("\u027f\7\2\2\3\u027f[\3\2\2\2\u0280\u0542\5l\67\2\u0281")
        buf.write("\u0283\5|?\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2\2\2\u0283")
        buf.write("\u0284\3\2\2\2\u0284\u0542\5\u0098M\2\u0285\u0287\7\u010f")
        buf.write("\2\2\u0286\u0288\7\u00a7\2\2\u0287\u0286\3\2\2\2\u0287")
        buf.write("\u0288\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u0542\5\u00f8")
        buf.write("}\2\u028a\u028b\7G\2\2\u028b\u028f\5v<\2\u028c\u028d\7")
        buf.write("\u0080\2\2\u028d\u028e\7\u00ab\2\2\u028e\u0290\7e\2\2")
        buf.write("\u028f\u028c\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0291\3")
        buf.write("\2\2\2\u0291\u0299\5\u00f8}\2\u0292\u0298\5j\66\2\u0293")
        buf.write("\u0298\5h\65\2\u0294\u0295\7\u0118\2\2\u0295\u0296\t\4")
        buf.write("\2\2\u0296\u0298\5\u0084C\2\u0297\u0292\3\2\2\2\u0297")
        buf.write("\u0293\3\2\2\2\u0297\u0294\3\2\2\2\u0298\u029b\3\2\2\2")
        buf.write("\u0299\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u0542\3")
        buf.write("\2\2\2\u029b\u0299\3\2\2\2\u029c\u029d\7!\2\2\u029d\u029e")
        buf.write("\5v<\2\u029e\u029f\5\u00f8}\2\u029f\u02a0\7\u00e6\2\2")
        buf.write("\u02a0\u02a1\t\4\2\2\u02a1\u02a2\5\u0084C\2\u02a2\u0542")
        buf.write("\3\2\2\2\u02a3\u02a4\7!\2\2\u02a4\u02a5\5v<\2\u02a5\u02a6")
        buf.write("\5\u00f8}\2\u02a6\u02a7\7\u00e6\2\2\u02a7\u02a8\5h\65")
        buf.write("\2\u02a8\u0542\3\2\2\2\u02a9\u02aa\7^\2\2\u02aa\u02ad")
        buf.write("\5v<\2\u02ab\u02ac\7\u0080\2\2\u02ac\u02ae\7e\2\2\u02ad")
        buf.write("\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af\3\2\2\2")
        buf.write("\u02af\u02b1\5\u00f8}\2\u02b0\u02b2\t\5\2\2\u02b1\u02b0")
        buf.write("\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u0542\3\2\2\2\u02b3")
        buf.write("\u02b4\7\u00e9\2\2\u02b4\u02b7\t\6\2\2\u02b5\u02b6\t\7")
        buf.write("\2\2\u02b6\u02b8\5\u00f8}\2\u02b7\u02b5\3\2\2\2\u02b7")
        buf.write("\u02b8\3\2\2\2\u02b8\u02bd\3\2\2\2\u02b9\u02bb\7\u0096")
        buf.write("\2\2\u02ba\u02b9\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc")
        buf.write("\3\2\2\2\u02bc\u02be\7\u012e\2\2\u02bd\u02ba\3\2\2\2\u02bd")
        buf.write("\u02be\3\2\2\2\u02be\u0542\3\2\2\2\u02bf\u02c4\5`\61\2")
        buf.write("\u02c0\u02c1\7\5\2\2\u02c1\u02c2\5\u0134\u009b\2\u02c2")
        buf.write("\u02c3\7\6\2\2\u02c3\u02c5\3\2\2\2\u02c4\u02c0\3\2\2\2")
        buf.write("\u02c4\u02c5\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c7\5")
        buf.write("\u0080A\2\u02c7\u02cc\5\u0082B\2\u02c8\u02ca\7(\2\2\u02c9")
        buf.write("\u02c8\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cb\3\2\2\2")
        buf.write("\u02cb\u02cd\5l\67\2\u02cc\u02c9\3\2\2\2\u02cc\u02cd\3")
        buf.write("\2\2\2\u02cd\u0542\3\2\2\2\u02ce\u02d3\5`\61\2\u02cf\u02d0")
        buf.write("\7\5\2\2\u02d0\u02d1\5\u0134\u009b\2\u02d1\u02d2\7\6\2")
        buf.write("\2\u02d2\u02d4\3\2\2\2\u02d3\u02cf\3\2\2\2\u02d3\u02d4")
        buf.write("\3\2\2\2\u02d4\u02ea\3\2\2\2\u02d5\u02e9\5j\66\2\u02d6")
        buf.write("\u02d7\7\u00bd\2\2\u02d7\u02d8\7\60\2\2\u02d8\u02d9\7")
        buf.write("\5\2\2\u02d9\u02da\5\u0134\u009b\2\u02da\u02db\7\6\2\2")
        buf.write("\u02db\u02e0\3\2\2\2\u02dc\u02dd\7\u00bd\2\2\u02dd\u02de")
        buf.write("\7\60\2\2\u02de\u02e0\5\u00e0q\2\u02df\u02d6\3\2\2\2\u02df")
        buf.write("\u02dc\3\2\2\2\u02e0\u02e9\3\2\2\2\u02e1\u02e9\5d\63\2")
        buf.write("\u02e2\u02e9\5f\64\2\u02e3\u02e9\5\u00f4{\2\u02e4\u02e9")
        buf.write("\5\u0090I\2\u02e5\u02e9\5h\65\2\u02e6\u02e7\7\u00f8\2")
        buf.write("\2\u02e7\u02e9\5\u0084C\2\u02e8\u02d5\3\2\2\2\u02e8\u02df")
        buf.write("\3\2\2\2\u02e8\u02e1\3\2\2\2\u02e8\u02e2\3\2\2\2\u02e8")
        buf.write("\u02e3\3\2\2\2\u02e8\u02e4\3\2\2\2\u02e8\u02e5\3\2\2\2")
        buf.write("\u02e8\u02e6\3\2\2\2\u02e9\u02ec\3\2\2\2\u02ea\u02e8\3")
        buf.write("\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02f1\3\2\2\2\u02ec\u02ea")
        buf.write("\3\2\2\2\u02ed\u02ef\7(\2\2\u02ee\u02ed\3\2\2\2\u02ee")
        buf.write("\u02ef\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f2\5l\67\2")
        buf.write("\u02f1\u02ee\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u0542\3")
        buf.write("\2\2\2\u02f3\u02f4\7G\2\2\u02f4\u02f8\7\u00f5\2\2\u02f5")
        buf.write("\u02f6\7\u0080\2\2\u02f6\u02f7\7\u00ab\2\2\u02f7\u02f9")
        buf.write("\7e\2\2\u02f8\u02f5\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u02fb\5\u00fa~\2\u02fb\u02fc\7\u0096")
        buf.write("\2\2\u02fc\u0305\5\u00fa~\2\u02fd\u0304\5\u0080A\2\u02fe")
        buf.write("\u0304\5\u00f4{\2\u02ff\u0304\5\u0090I\2\u0300\u0304\5")
        buf.write("h\65\2\u0301\u0302\7\u00f8\2\2\u0302\u0304\5\u0084C\2")
        buf.write("\u0303\u02fd\3\2\2\2\u0303\u02fe\3\2\2\2\u0303\u02ff\3")
        buf.write("\2\2\2\u0303\u0300\3\2\2\2\u0303\u0301\3\2\2\2\u0304\u0307")
        buf.write("\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306")
        buf.write("\u0542\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u030d\5b\62\2")
        buf.write("\u0309\u030a\7\5\2\2\u030a\u030b\5\u0134\u009b\2\u030b")
        buf.write("\u030c\7\6\2\2\u030c\u030e\3\2\2\2\u030d\u0309\3\2\2\2")
        buf.write("\u030d\u030e\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310\5")
        buf.write("\u0080A\2\u0310\u0315\5\u0082B\2\u0311\u0313\7(\2\2\u0312")
        buf.write("\u0311\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314\3\2\2\2")
        buf.write("\u0314\u0316\5l\67\2\u0315\u0312\3\2\2\2\u0315\u0316\3")
        buf.write("\2\2\2\u0316\u0542\3\2\2\2\u0317\u0318\7\"\2\2\u0318\u0319")
        buf.write("\7\u00f5\2\2\u0319\u031b\5\u00f8}\2\u031a\u031c\5r:\2")
        buf.write("\u031b\u031a\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031d\3")
        buf.write("\2\2\2\u031d\u031e\7C\2\2\u031e\u0326\7\u00ef\2\2\u031f")
        buf.write("\u0327\5\u0152\u00aa\2\u0320\u0321\7r\2\2\u0321\u0322")
        buf.write("\7>\2\2\u0322\u0327\5\u00e2r\2\u0323\u0324\7r\2\2\u0324")
        buf.write("\u0325\7 \2\2\u0325\u0327\7>\2\2\u0326\u031f\3\2\2\2\u0326")
        buf.write("\u0320\3\2\2\2\u0326\u0323\3\2\2\2\u0326\u0327\3\2\2\2")
        buf.write("\u0327\u0542\3\2\2\2\u0328\u0329\7!\2\2\u0329\u032a\7")
        buf.write("\u00f5\2\2\u032a\u032b\5\u00f8}\2\u032b\u032c\7\36\2\2")
        buf.write("\u032c\u032d\t\b\2\2\u032d\u032e\5\u0130\u0099\2\u032e")
        buf.write("\u0542\3\2\2\2\u032f\u0330\7!\2\2\u0330\u0331\7\u00f5")
        buf.write("\2\2\u0331\u0332\5\u00f8}\2\u0332\u0333\7\36\2\2\u0333")
        buf.write("\u0334\t\b\2\2\u0334\u0335\7\5\2\2\u0335\u0336\5\u0130")
        buf.write("\u0099\2\u0336\u0337\7\6\2\2\u0337\u0542\3\2\2\2\u0338")
        buf.write("\u0339\7!\2\2\u0339\u033a\7\u00f5\2\2\u033a\u033b\5\u00f8")
        buf.write("}\2\u033b\u033c\7\u00d0\2\2\u033c\u033d\7=\2\2\u033d\u033e")
        buf.write("\5\u00f8}\2\u033e\u033f\7\u00fc\2\2\u033f\u0340\5\u014e")
        buf.write("\u00a8\2\u0340\u0542\3\2\2\2\u0341\u0342\7!\2\2\u0342")
        buf.write("\u0343\7\u00f5\2\2\u0343\u0344\5\u00f8}\2\u0344\u0345")
        buf.write("\7^\2\2\u0345\u0346\t\b\2\2\u0346\u0347\7\5\2\2\u0347")
        buf.write("\u0348\5\u00f6|\2\u0348\u0349\7\6\2\2\u0349\u0542\3\2")
        buf.write("\2\2\u034a\u034b\7!\2\2\u034b\u034c\7\u00f5\2\2\u034c")
        buf.write("\u034d\5\u00f8}\2\u034d\u034e\7^\2\2\u034e\u034f\t\b\2")
        buf.write("\2\u034f\u0350\5\u00f6|\2\u0350\u0542\3\2\2\2\u0351\u0352")
        buf.write("\7!\2\2\u0352\u0353\t\t\2\2\u0353\u0354\5\u00f8}\2\u0354")
        buf.write("\u0355\7\u00d0\2\2\u0355\u0356\7\u00fc\2\2\u0356\u0357")
        buf.write("\5\u00f8}\2\u0357\u0542\3\2\2\2\u0358\u0359\7!\2\2\u0359")
        buf.write("\u035a\t\t\2\2\u035a\u035b\5\u00f8}\2\u035b\u035c\7\u00e6")
        buf.write("\2\2\u035c\u035d\7\u00f8\2\2\u035d\u035e\5\u0084C\2\u035e")
        buf.write("\u0542\3\2\2\2\u035f\u0360\7!\2\2\u0360\u0361\t\t\2\2")
        buf.write("\u0361\u0362\5\u00f8}\2\u0362\u0363\7\u010d\2\2\u0363")
        buf.write("\u0366\7\u00f8\2\2\u0364\u0365\7\u0080\2\2\u0365\u0367")
        buf.write("\7e\2\2\u0366\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u0369\5\u0084C\2\u0369\u0542\3\2")
        buf.write("\2\2\u036a\u036b\7!\2\2\u036b\u036c\7\u00f5\2\2\u036c")
        buf.write("\u036d\5\u00f8}\2\u036d\u036f\t\n\2\2\u036e\u0370\7=\2")
        buf.write("\2\u036f\u036e\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0371")
        buf.write("\3\2\2\2\u0371\u0373\5\u00f8}\2\u0372\u0374\5\u015a\u00ae")
        buf.write("\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0542")
        buf.write("\3\2\2\2\u0375\u0376\7!\2\2\u0376\u0377\7\u00f5\2\2\u0377")
        buf.write("\u0379\5\u00f8}\2\u0378\u037a\5r:\2\u0379\u0378\3\2\2")
        buf.write("\2\u0379\u037a\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037d")
        buf.write("\7\65\2\2\u037c\u037e\7=\2\2\u037d\u037c\3\2\2\2\u037d")
        buf.write("\u037e\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380\5\u00f8")
        buf.write("}\2\u0380\u0382\5\u0136\u009c\2\u0381\u0383\5\u012c\u0097")
        buf.write("\2\u0382\u0381\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0542")
        buf.write("\3\2\2\2\u0384\u0385\7!\2\2\u0385\u0386\7\u00f5\2\2\u0386")
        buf.write("\u0388\5\u00f8}\2\u0387\u0389\5r:\2\u0388\u0387\3\2\2")
        buf.write("\2\u0388\u0389\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b")
        buf.write("\7\u00d2\2\2\u038b\u038c\7>\2\2\u038c\u038d\7\5\2\2\u038d")
        buf.write("\u038e\5\u0130\u0099\2\u038e\u038f\7\6\2\2\u038f\u0542")
        buf.write("\3\2\2\2\u0390\u0391\7!\2\2\u0391\u0392\7\u00f5\2\2\u0392")
        buf.write("\u0394\5\u00f8}\2\u0393\u0395\5r:\2\u0394\u0393\3\2\2")
        buf.write("\2\u0394\u0395\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0397")
        buf.write("\7\u00e6\2\2\u0397\u0398\7\u00e3\2\2\u0398\u039c\7\u012e")
        buf.write("\2\2\u0399\u039a\7\u0118\2\2\u039a\u039b\7\u00e4\2\2\u039b")
        buf.write("\u039d\5\u0084C\2\u039c\u0399\3\2\2\2\u039c\u039d\3\2")
        buf.write("\2\2\u039d\u0542\3\2\2\2\u039e\u039f\7!\2\2\u039f\u03a0")
        buf.write("\7\u00f5\2\2\u03a0\u03a2\5\u00f8}\2\u03a1\u03a3\5r:\2")
        buf.write("\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\3")
        buf.write("\2\2\2\u03a4\u03a5\7\u00e6\2\2\u03a5\u03a6\7\u00e4\2\2")
        buf.write("\u03a6\u03a7\5\u0084C\2\u03a7\u0542\3\2\2\2\u03a8\u03a9")
        buf.write("\7!\2\2\u03a9\u03aa\t\t\2\2\u03aa\u03ab\5\u00f8}\2\u03ab")
        buf.write("\u03af\7\36\2\2\u03ac\u03ad\7\u0080\2\2\u03ad\u03ae\7")
        buf.write("\u00ab\2\2\u03ae\u03b0\7e\2\2\u03af\u03ac\3\2\2\2\u03af")
        buf.write("\u03b0\3\2\2\2\u03b0\u03b2\3\2\2\2\u03b1\u03b3\5p9\2\u03b2")
        buf.write("\u03b1\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b2\3\2\2\2")
        buf.write("\u03b4\u03b5\3\2\2\2\u03b5\u0542\3\2\2\2\u03b6\u03b7\7")
        buf.write("!\2\2\u03b7\u03b8\7\u00f5\2\2\u03b8\u03b9\5\u00f8}\2\u03b9")
        buf.write("\u03ba\5r:\2\u03ba\u03bb\7\u00d0\2\2\u03bb\u03bc\7\u00fc")
        buf.write("\2\2\u03bc\u03bd\5r:\2\u03bd\u0542\3\2\2\2\u03be\u03bf")
        buf.write("\7!\2\2\u03bf\u03c0\t\t\2\2\u03c0\u03c1\5\u00f8}\2\u03c1")
        buf.write("\u03c4\7^\2\2\u03c2\u03c3\7\u0080\2\2\u03c3\u03c5\7e\2")
        buf.write("\2\u03c4\u03c2\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6")
        buf.write("\3\2\2\2\u03c6\u03cb\5r:\2\u03c7\u03c8\7\4\2\2\u03c8\u03ca")
        buf.write("\5r:\2\u03c9\u03c7\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9")
        buf.write("\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd")
        buf.write("\u03cb\3\2\2\2\u03ce\u03d0\7\u00c7\2\2\u03cf\u03ce\3\2")
        buf.write("\2\2\u03cf\u03d0\3\2\2\2\u03d0\u0542\3\2\2\2\u03d1\u03d2")
        buf.write("\7!\2\2\u03d2\u03d3\7\u00f5\2\2\u03d3\u03d5\5\u00f8}\2")
        buf.write("\u03d4\u03d6\5r:\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2")
        buf.write("\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8\7\u00e6\2\2\u03d8")
        buf.write("\u03d9\5h\65\2\u03d9\u0542\3\2\2\2\u03da\u03db\7!\2\2")
        buf.write("\u03db\u03dc\7\u00f5\2\2\u03dc\u03dd\5\u00f8}\2\u03dd")
        buf.write("\u03de\7\u00cc\2\2\u03de\u03df\7\u00be\2\2\u03df\u0542")
        buf.write("\3\2\2\2\u03e0\u03e1\7^\2\2\u03e1\u03e4\7\u00f5\2\2\u03e2")
        buf.write("\u03e3\7\u0080\2\2\u03e3\u03e5\7e\2\2\u03e4\u03e2\3\2")
        buf.write("\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8")
        buf.write("\5\u00f8}\2\u03e7\u03e9\7\u00c7\2\2\u03e8\u03e7\3\2\2")
        buf.write("\2\u03e8\u03e9\3\2\2\2\u03e9\u0542\3\2\2\2\u03ea\u03eb")
        buf.write("\7^\2\2\u03eb\u03ee\7\u0113\2\2\u03ec\u03ed\7\u0080\2")
        buf.write("\2\u03ed\u03ef\7e\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef")
        buf.write("\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u0542\5\u00f8}\2\u03f1")
        buf.write("\u03f4\7G\2\2\u03f2\u03f3\7\u00b3\2\2\u03f3\u03f5\7\u00d2")
        buf.write("\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03fa")
        buf.write("\3\2\2\2\u03f6\u03f8\7z\2\2\u03f7\u03f6\3\2\2\2\u03f7")
        buf.write("\u03f8\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fb\7\u00f9")
        buf.write("\2\2\u03fa\u03f7\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc")
        buf.write("\3\2\2\2\u03fc\u0400\7\u0113\2\2\u03fd\u03fe\7\u0080\2")
        buf.write("\2\u03fe\u03ff\7\u00ab\2\2\u03ff\u0401\7e\2\2\u0400\u03fd")
        buf.write("\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write("\u0404\5\u00f8}\2\u0403\u0405\5\u00e8u\2\u0404\u0403\3")
        buf.write("\2\2\2\u0404\u0405\3\2\2\2\u0405\u040e\3\2\2\2\u0406\u040d")
        buf.write("\5j\66\2\u0407\u0408\7\u00bd\2\2\u0408\u0409\7\u00af\2")
        buf.write("\2\u0409\u040d\5\u00e0q\2\u040a\u040b\7\u00f8\2\2\u040b")
        buf.write("\u040d\5\u0084C\2\u040c\u0406\3\2\2\2\u040c\u0407\3\2")
        buf.write("\2\2\u040c\u040a\3\2\2\2\u040d\u0410\3\2\2\2\u040e\u040c")
        buf.write("\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0411\3\2\2\2\u0410")
        buf.write("\u040e\3\2\2\2\u0411\u0412\7(\2\2\u0412\u0413\5l\67\2")
        buf.write("\u0413\u0542\3\2\2\2\u0414\u0417\7G\2\2\u0415\u0416\7")
        buf.write("\u00b3\2\2\u0416\u0418\7\u00d2\2\2\u0417\u0415\3\2\2\2")
        buf.write("\u0417\u0418\3\2\2\2\u0418\u041a\3\2\2\2\u0419\u041b\7")
        buf.write("z\2\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c")
        buf.write("\3\2\2\2\u041c\u041d\7\u00f9\2\2\u041d\u041e\7\u0113\2")
        buf.write("\2\u041e\u0423\5\u00fa~\2\u041f\u0420\7\5\2\2\u0420\u0421")
        buf.write("\5\u0134\u009b\2\u0421\u0422\7\6\2\2\u0422\u0424\3\2\2")
        buf.write("\2\u0423\u041f\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425")
        buf.write("\3\2\2\2\u0425\u0428\5\u0080A\2\u0426\u0427\7\u00b2\2")
        buf.write("\2\u0427\u0429\5\u0084C\2\u0428\u0426\3\2\2\2\u0428\u0429")
        buf.write("\3\2\2\2\u0429\u0542\3\2\2\2\u042a\u042b\7!\2\2\u042b")
        buf.write("\u042c\7\u0113\2\2\u042c\u042e\5\u00f8}\2\u042d\u042f")
        buf.write("\7(\2\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2\u042f")
        buf.write("\u0430\3\2\2\2\u0430\u0431\5l\67\2\u0431\u0542\3\2\2\2")
        buf.write("\u0432\u0435\7G\2\2\u0433\u0434\7\u00b3\2\2\u0434\u0436")
        buf.write("\7\u00d2\2\2\u0435\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436")
        buf.write("\u0438\3\2\2\2\u0437\u0439\7\u00f9\2\2\u0438\u0437\3\2")
        buf.write("\2\2\u0438\u0439\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043e")
        buf.write("\7x\2\2\u043b\u043c\7\u0080\2\2\u043c\u043d\7\u00ab\2")
        buf.write("\2\u043d\u043f\7e\2\2\u043e\u043b\3\2\2\2\u043e\u043f")
        buf.write("\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0441\5\u00f8}\2\u0441")
        buf.write("\u0442\7(\2\2\u0442\u044c\7\u012e\2\2\u0443\u0444\7\u0111")
        buf.write("\2\2\u0444\u0449\5\u0096L\2\u0445\u0446\7\4\2\2\u0446")
        buf.write("\u0448\5\u0096L\2\u0447\u0445\3\2\2\2\u0448\u044b\3\2")
        buf.write("\2\2\u0449\u0447\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044d")
        buf.write("\3\2\2\2\u044b\u0449\3\2\2\2\u044c\u0443\3\2\2\2\u044c")
        buf.write("\u044d\3\2\2\2\u044d\u0542\3\2\2\2\u044e\u0450\7^\2\2")
        buf.write("\u044f\u0451\7\u00f9\2\2\u0450\u044f\3\2\2\2\u0450\u0451")
        buf.write("\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0455\7x\2\2\u0453")
        buf.write("\u0454\7\u0080\2\2\u0454\u0456\7e\2\2\u0455\u0453\3\2")
        buf.write("\2\2\u0455\u0456\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0542")
        buf.write("\5\u00f8}\2\u0458\u045a\7f\2\2\u0459\u045b\t\13\2\2\u045a")
        buf.write("\u0459\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045c\3\2\2\2")
        buf.write("\u045c\u0542\5\\/\2\u045d\u045e\7\u00e9\2\2\u045e\u0461")
        buf.write("\7\u00f6\2\2\u045f\u0460\t\7\2\2\u0460\u0462\5\u00f8}")
        buf.write("\2\u0461\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0467")
        buf.write("\3\2\2\2\u0463\u0465\7\u0096\2\2\u0464\u0463\3\2\2\2\u0464")
        buf.write("\u0465\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0468\7\u012e")
        buf.write("\2\2\u0467\u0464\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0542")
        buf.write("\3\2\2\2\u0469\u046a\7\u00e9\2\2\u046a\u046b\7\u00f5\2")
        buf.write("\2\u046b\u046e\7h\2\2\u046c\u046d\t\7\2\2\u046d\u046f")
        buf.write("\5\u00f8}\2\u046e\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f")
        buf.write("\u0470\3\2\2\2\u0470\u0471\7\u0096\2\2\u0471\u0473\7\u012e")
        buf.write("\2\2\u0472\u0474\5r:\2\u0473\u0472\3\2\2\2\u0473\u0474")
        buf.write("\3\2\2\2\u0474\u0542\3\2\2\2\u0475\u0476\7\u00e9\2\2\u0476")
        buf.write("\u0477\7\u00f8\2\2\u0477\u047c\5\u00f8}\2\u0478\u0479")
        buf.write("\7\5\2\2\u0479\u047a\5\u0088E\2\u047a\u047b\7\6\2\2\u047b")
        buf.write("\u047d\3\2\2\2\u047c\u0478\3\2\2\2\u047c\u047d\3\2\2\2")
        buf.write("\u047d\u0542\3\2\2\2\u047e\u047f\7\u00e9\2\2\u047f\u0480")
        buf.write("\7>\2\2\u0480\u0481\t\7\2\2\u0481\u0484\5\u00f8}\2\u0482")
        buf.write("\u0483\t\7\2\2\u0483\u0485\5\u00f8}\2\u0484\u0482\3\2")
        buf.write("\2\2\u0484\u0485\3\2\2\2\u0485\u0542\3\2\2\2\u0486\u0487")
        buf.write("\7\u00e9\2\2\u0487\u048a\7\u0114\2\2\u0488\u0489\t\7\2")
        buf.write("\2\u0489\u048b\5\u00f8}\2\u048a\u0488\3\2\2\2\u048a\u048b")
        buf.write("\3\2\2\2\u048b\u0490\3\2\2\2\u048c\u048e\7\u0096\2\2\u048d")
        buf.write("\u048c\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u048f\3\2\2\2")
        buf.write("\u048f\u0491\7\u012e\2\2\u0490\u048d\3\2\2\2\u0490\u0491")
        buf.write("\3\2\2\2\u0491\u0542\3\2\2\2\u0492\u0493\7\u00e9\2\2\u0493")
        buf.write("\u0494\7\u00be\2\2\u0494\u0496\5\u00f8}\2\u0495\u0497")
        buf.write("\5r:\2\u0496\u0495\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0542")
        buf.write("\3\2\2\2\u0498\u049a\7\u00e9\2\2\u0499\u049b\5\u0152\u00aa")
        buf.write("\2\u049a\u0499\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c")
        buf.write("\3\2\2\2\u049c\u04a4\7y\2\2\u049d\u049f\7\u0096\2\2\u049e")
        buf.write("\u049d\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a2\3\2\2\2")
        buf.write("\u04a0\u04a3\5\u00f8}\2\u04a1\u04a3\7\u012e\2\2\u04a2")
        buf.write("\u04a0\3\2\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a5\3\2\2\2")
        buf.write("\u04a4\u049e\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u0542\3")
        buf.write("\2\2\2\u04a6\u04a7\7\u00e9\2\2\u04a7\u04a8\7G\2\2\u04a8")
        buf.write("\u04a9\7\u00f5\2\2\u04a9\u04ac\5\u00f8}\2\u04aa\u04ab")
        buf.write("\7(\2\2\u04ab\u04ad\7\u00e3\2\2\u04ac\u04aa\3\2\2\2\u04ac")
        buf.write("\u04ad\3\2\2\2\u04ad\u0542\3\2\2\2\u04ae\u04af\7\u00e9")
        buf.write("\2\2\u04af\u04b0\7J\2\2\u04b0\u0542\7\u00a7\2\2\u04b1")
        buf.write("\u04b2\t\f\2\2\u04b2\u04b4\7x\2\2\u04b3\u04b5\7h\2\2\u04b4")
        buf.write("\u04b3\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b6\3\2\2\2")
        buf.write("\u04b6\u0542\5x=\2\u04b7\u04b8\t\f\2\2\u04b8\u04ba\5v")
        buf.write("<\2\u04b9\u04bb\7h\2\2\u04ba\u04b9\3\2\2\2\u04ba\u04bb")
        buf.write("\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd\5\u00f8}\2\u04bd")
        buf.write("\u0542\3\2\2\2\u04be\u04c0\t\f\2\2\u04bf\u04c1\7\u00f5")
        buf.write("\2\2\u04c0\u04bf\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c3")
        buf.write("\3\2\2\2\u04c2\u04c4\t\r\2\2\u04c3\u04c2\3\2\2\2\u04c3")
        buf.write("\u04c4\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c7\5\u00f8")
        buf.write("}\2\u04c6\u04c8\5r:\2\u04c7\u04c6\3\2\2\2\u04c7\u04c8")
        buf.write("\3\2\2\2\u04c8\u04ca\3\2\2\2\u04c9\u04cb\5z>\2\u04ca\u04c9")
        buf.write("\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u0542\3\2\2\2\u04cc")
        buf.write("\u04ce\t\f\2\2\u04cd\u04cf\7\u00c8\2\2\u04ce\u04cd\3\2")
        buf.write("\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u0542")
        buf.write("\5l\67\2\u04d1\u04d2\7?\2\2\u04d2\u04d3\7\u00af\2\2\u04d3")
        buf.write("\u04d4\5v<\2\u04d4\u04d5\5\u00f8}\2\u04d5\u04d6\7\u008d")
        buf.write("\2\2\u04d6\u04d7\t\16\2\2\u04d7\u0542\3\2\2\2\u04d8\u04d9")
        buf.write("\7?\2\2\u04d9\u04da\7\u00af\2\2\u04da\u04db\7\u00f5\2")
        buf.write("\2\u04db\u04dc\5\u00f8}\2\u04dc\u04dd\7\u008d\2\2\u04dd")
        buf.write("\u04de\t\16\2\2\u04de\u0542\3\2\2\2\u04df\u04e0\7\u00cf")
        buf.write("\2\2\u04e0\u04e1\7\u00f5\2\2\u04e1\u0542\5\u00f8}\2\u04e2")
        buf.write("\u04ea\7\u00cf\2\2\u04e3\u04eb\7\u012e\2\2\u04e4\u04e6")
        buf.write("\13\2\2\2\u04e5\u04e4\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7")
        buf.write("\u04e8\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e8\u04eb\3\2\2\2")
        buf.write("\u04e9\u04e7\3\2\2\2\u04ea\u04e3\3\2\2\2\u04ea\u04e7\3")
        buf.write("\2\2\2\u04eb\u0542\3\2\2\2\u04ec\u04ee\7\61\2\2\u04ed")
        buf.write("\u04ef\7\u0093\2\2\u04ee\u04ed\3\2\2\2\u04ee\u04ef\3\2")
        buf.write("\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f1\7\u00f5\2\2\u04f1")
        buf.write("\u04f4\5\u00f8}\2\u04f2\u04f3\7\u00b2\2\2\u04f3\u04f5")
        buf.write("\5\u0084C\2\u04f4\u04f2\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5")
        buf.write("\u04fa\3\2\2\2\u04f6\u04f8\7(\2\2\u04f7\u04f6\3\2\2\2")
        buf.write("\u04f7\u04f8\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fb\5")
        buf.write("l\67\2\u04fa\u04f7\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u0542")
        buf.write("\3\2\2\2\u04fc\u04fd\7\u0108\2\2\u04fd\u0500\7\u00f5\2")
        buf.write("\2\u04fe\u04ff\7\u0080\2\2\u04ff\u0501\7e\2\2\u0500\u04fe")
        buf.write("\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0502\3\2\2\2\u0502")
        buf.write("\u0542\5\u00f8}\2\u0503\u0504\7\67\2\2\u0504\u0542\7\61")
        buf.write("\2\2\u0505\u0506\7\u009a\2\2\u0506\u0508\7O\2\2\u0507")
        buf.write("\u0509\7\u009b\2\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2")
        buf.write("\2\2\u0509\u050a\3\2\2\2\u050a\u050b\7\u0087\2\2\u050b")
        buf.write("\u050d\7\u012e\2\2\u050c\u050e\7\u00bb\2\2\u050d\u050c")
        buf.write("\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f\3\2\2\2\u050f")
        buf.write("\u0510\7\u008c\2\2\u0510\u0511\7\u00f5\2\2\u0511\u0513")
        buf.write("\5\u00f8}\2\u0512\u0514\5r:\2\u0513\u0512\3\2\2\2\u0513")
        buf.write("\u0514\3\2\2\2\u0514\u0542\3\2\2\2\u0515\u0516\7\u0104")
        buf.write("\2\2\u0516\u0517\7\u00f5\2\2\u0517\u0519\5\u00f8}\2\u0518")
        buf.write("\u051a\5r:\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051a")
        buf.write("\u0542\3\2\2\2\u051b\u051c\7\u00a6\2\2\u051c\u051d\7\u00d1")
        buf.write("\2\2\u051d\u051e\7\u00f5\2\2\u051e\u0542\5\u00f8}\2\u051f")
        buf.write("\u0520\t\17\2\2\u0520\u0528\5\u0152\u00aa\2\u0521\u0529")
        buf.write("\7\u012e\2\2\u0522\u0524\13\2\2\2\u0523\u0522\3\2\2\2")
        buf.write("\u0524\u0527\3\2\2\2\u0525\u0526\3\2\2\2\u0525\u0523\3")
        buf.write("\2\2\2\u0526\u0529\3\2\2\2\u0527\u0525\3\2\2\2\u0528\u0521")
        buf.write("\3\2\2\2\u0528\u0525\3\2\2\2\u0529\u0542\3\2\2\2\u052a")
        buf.write("\u052b\7\u00e6\2\2\u052b\u052f\7\u00d8\2\2\u052c\u052e")
        buf.write("\13\2\2\2\u052d\u052c\3\2\2\2\u052e\u0531\3\2\2\2\u052f")
        buf.write("\u0530\3\2\2\2\u052f\u052d\3\2\2\2\u0530\u0542\3\2\2\2")
        buf.write("\u0531\u052f\3\2\2\2\u0532\u0536\7\u00e6\2\2\u0533\u0535")
        buf.write("\13\2\2\2\u0534\u0533\3\2\2\2\u0535\u0538\3\2\2\2\u0536")
        buf.write("\u0537\3\2\2\2\u0536\u0534\3\2\2\2\u0537\u0542\3\2\2\2")
        buf.write("\u0538\u0536\3\2\2\2\u0539\u0542\7\u00d3\2\2\u053a\u053e")
        buf.write("\5^\60\2\u053b\u053d\13\2\2\2\u053c\u053b\3\2\2\2\u053d")
        buf.write("\u0540\3\2\2\2\u053e\u053f\3\2\2\2\u053e\u053c\3\2\2\2")
        buf.write("\u053f\u0542\3\2\2\2\u0540\u053e\3\2\2\2\u0541\u0280\3")
        buf.write("\2\2\2\u0541\u0282\3\2\2\2\u0541\u0285\3\2\2\2\u0541\u028a")
        buf.write("\3\2\2\2\u0541\u029c\3\2\2\2\u0541\u02a3\3\2\2\2\u0541")
        buf.write("\u02a9\3\2\2\2\u0541\u02b3\3\2\2\2\u0541\u02bf\3\2\2\2")
        buf.write("\u0541\u02ce\3\2\2\2\u0541\u02f3\3\2\2\2\u0541\u0308\3")
        buf.write("\2\2\2\u0541\u0317\3\2\2\2\u0541\u0328\3\2\2\2\u0541\u032f")
        buf.write("\3\2\2\2\u0541\u0338\3\2\2\2\u0541\u0341\3\2\2\2\u0541")
        buf.write("\u034a\3\2\2\2\u0541\u0351\3\2\2\2\u0541\u0358\3\2\2\2")
        buf.write("\u0541\u035f\3\2\2\2\u0541\u036a\3\2\2\2\u0541\u0375\3")
        buf.write("\2\2\2\u0541\u0384\3\2\2\2\u0541\u0390\3\2\2\2\u0541\u039e")
        buf.write("\3\2\2\2\u0541\u03a8\3\2\2\2\u0541\u03b6\3\2\2\2\u0541")
        buf.write("\u03be\3\2\2\2\u0541\u03d1\3\2\2\2\u0541\u03da\3\2\2\2")
        buf.write("\u0541\u03e0\3\2\2\2\u0541\u03ea\3\2\2\2\u0541\u03f1\3")
        buf.write("\2\2\2\u0541\u0414\3\2\2\2\u0541\u042a\3\2\2\2\u0541\u0432")
        buf.write("\3\2\2\2\u0541\u044e\3\2\2\2\u0541\u0458\3\2\2\2\u0541")
        buf.write("\u045d\3\2\2\2\u0541\u0469\3\2\2\2\u0541\u0475\3\2\2\2")
        buf.write("\u0541\u047e\3\2\2\2\u0541\u0486\3\2\2\2\u0541\u0492\3")
        buf.write("\2\2\2\u0541\u0498\3\2\2\2\u0541\u04a6\3\2\2\2\u0541\u04ae")
        buf.write("\3\2\2\2\u0541\u04b1\3\2\2\2\u0541\u04b7\3\2\2\2\u0541")
        buf.write("\u04be\3\2\2\2\u0541\u04cc\3\2\2\2\u0541\u04d1\3\2\2\2")
        buf.write("\u0541\u04d8\3\2\2\2\u0541\u04df\3\2\2\2\u0541\u04e2\3")
        buf.write("\2\2\2\u0541\u04ec\3\2\2\2\u0541\u04fc\3\2\2\2\u0541\u0503")
        buf.write("\3\2\2\2\u0541\u0505\3\2\2\2\u0541\u0515\3\2\2\2\u0541")
        buf.write("\u051b\3\2\2\2\u0541\u051f\3\2\2\2\u0541\u052a\3\2\2\2")
        buf.write("\u0541\u0532\3\2\2\2\u0541\u0539\3\2\2\2\u0541\u053a\3")
        buf.write("\2\2\2\u0542]\3\2\2\2\u0543\u0544\7G\2\2\u0544\u05ec\7")
        buf.write("\u00d8\2\2\u0545\u0546\7^\2\2\u0546\u05ec\7\u00d8\2\2")
        buf.write("\u0547\u0549\7{\2\2\u0548\u054a\7\u00d8\2\2\u0549\u0548")
        buf.write("\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u05ec\3\2\2\2\u054b")
        buf.write("\u054d\7\u00d5\2\2\u054c\u054e\7\u00d8\2\2\u054d\u054c")
        buf.write("\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u05ec\3\2\2\2\u054f")
        buf.write("\u0550\7\u00e9\2\2\u0550\u05ec\7{\2\2\u0551\u0552\7\u00e9")
        buf.write("\2\2\u0552\u0554\7\u00d8\2\2\u0553\u0555\7{\2\2\u0554")
        buf.write("\u0553\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u05ec\3\2\2\2")
        buf.write("\u0556\u0557\7\u00e9\2\2\u0557\u05ec\7\u00c5\2\2\u0558")
        buf.write("\u0559\7\u00e9\2\2\u0559\u05ec\7\u00d9\2\2\u055a\u055b")
        buf.write("\7\u00e9\2\2\u055b\u055c\7J\2\2\u055c\u05ec\7\u00d9\2")
        buf.write("\2\u055d\u055e\7g\2\2\u055e\u05ec\7\u00f5\2\2\u055f\u0560")
        buf.write("\7\u0082\2\2\u0560\u05ec\7\u00f5\2\2\u0561\u0562\7\u00e9")
        buf.write("\2\2\u0562\u05ec\7B\2\2\u0563\u0564\7\u00e9\2\2\u0564")
        buf.write("\u0565\7G\2\2\u0565\u05ec\7\u00f5\2\2\u0566\u0567\7\u00e9")
        buf.write("\2\2\u0567\u05ec\7\u0100\2\2\u0568\u0569\7\u00e9\2\2\u0569")
        buf.write("\u05ec\7\u0085\2\2\u056a\u056b\7\u00e9\2\2\u056b\u05ec")
        buf.write("\7\u009e\2\2\u056c\u056d\7G\2\2\u056d\u05ec\7\u0084\2")
        buf.write("\2\u056e\u056f\7^\2\2\u056f\u05ec\7\u0084\2\2\u0570\u0571")
        buf.write("\7!\2\2\u0571\u05ec\7\u0084\2\2\u0572\u0573\7\u009d\2")
        buf.write("\2\u0573\u05ec\7\u00f5\2\2\u0574\u0575\7\u009d\2\2\u0575")
        buf.write("\u05ec\7P\2\2\u0576\u0577\7\u010c\2\2\u0577\u05ec\7\u00f5")
        buf.write("\2\2\u0578\u0579\7\u010c\2\2\u0579\u05ec\7P\2\2\u057a")
        buf.write("\u057b\7G\2\2\u057b\u057c\7\u00f9\2\2\u057c\u05ec\7\u00a0")
        buf.write("\2\2\u057d\u057e\7^\2\2\u057e\u057f\7\u00f9\2\2\u057f")
        buf.write("\u05ec\7\u00a0\2\2\u0580\u0581\7!\2\2\u0581\u0582\7\u00f5")
        buf.write("\2\2\u0582\u0583\5\u00fa~\2\u0583\u0584\7\u00ab\2\2\u0584")
        buf.write("\u0585\79\2\2\u0585\u05ec\3\2\2\2\u0586\u0587\7!\2\2\u0587")
        buf.write("\u0588\7\u00f5\2\2\u0588\u0589\5\u00fa~\2\u0589\u058a")
        buf.write("\79\2\2\u058a\u058b\7\60\2\2\u058b\u05ec\3\2\2\2\u058c")
        buf.write("\u058d\7!\2\2\u058d\u058e\7\u00f5\2\2\u058e\u058f\5\u00fa")
        buf.write("~\2\u058f\u0590\7\u00ab\2\2\u0590\u0591\7\u00ed\2\2\u0591")
        buf.write("\u05ec\3\2\2\2\u0592\u0593\7!\2\2\u0593\u0594\7\u00f5")
        buf.write("\2\2\u0594\u0595\5\u00fa~\2\u0595\u0596\7\u00ea\2\2\u0596")
        buf.write("\u0597\7\60\2\2\u0597\u05ec\3\2\2\2\u0598\u0599\7!\2\2")
        buf.write("\u0599\u059a\7\u00f5\2\2\u059a\u059b\5\u00fa~\2\u059b")
        buf.write("\u059c\7\u00ab\2\2\u059c\u059d\7\u00ea\2\2\u059d\u05ec")
        buf.write("\3\2\2\2\u059e\u059f\7!\2\2\u059f\u05a0\7\u00f5\2\2\u05a0")
        buf.write("\u05a1\5\u00fa~\2\u05a1\u05a2\7\u00ab\2\2\u05a2\u05a3")
        buf.write("\7\u00f0\2\2\u05a3\u05a4\7(\2\2\u05a4\u05a5\7Z\2\2\u05a5")
        buf.write("\u05ec\3\2\2\2\u05a6\u05a7\7!\2\2\u05a7\u05a8\7\u00f5")
        buf.write("\2\2\u05a8\u05a9\5\u00fa~\2\u05a9\u05aa\7\u00e6\2\2\u05aa")
        buf.write("\u05ab\7\u00ea\2\2\u05ab\u05ac\7\u009c\2\2\u05ac\u05ec")
        buf.write("\3\2\2\2\u05ad\u05ae\7!\2\2\u05ae\u05af\7\u00f5\2\2\u05af")
        buf.write("\u05b0\5\u00fa~\2\u05b0\u05b1\7d\2\2\u05b1\u05b2\7\u00bc")
        buf.write("\2\2\u05b2\u05ec\3\2\2\2\u05b3\u05b4\7!\2\2\u05b4\u05b5")
        buf.write("\7\u00f5\2\2\u05b5\u05b6\5\u00fa~\2\u05b6\u05b7\7&\2\2")
        buf.write("\u05b7\u05b8\7\u00bc\2\2\u05b8\u05ec\3\2\2\2\u05b9\u05ba")
        buf.write("\7!\2\2\u05ba\u05bb\7\u00f5\2\2\u05bb\u05bc\5\u00fa~\2")
        buf.write("\u05bc\u05bd\7\u0106\2\2\u05bd\u05be\7\u00bc\2\2\u05be")
        buf.write("\u05ec\3\2\2\2\u05bf\u05c0\7!\2\2\u05c0\u05c1\7\u00f5")
        buf.write("\2\2\u05c1\u05c2\5\u00fa~\2\u05c2\u05c3\7\u00fd\2\2\u05c3")
        buf.write("\u05ec\3\2\2\2\u05c4\u05c5\7!\2\2\u05c5\u05c6\7\u00f5")
        buf.write("\2\2\u05c6\u05c8\5\u00fa~\2\u05c7\u05c9\5r:\2\u05c8\u05c7")
        buf.write("\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca")
        buf.write("\u05cb\7A\2\2\u05cb\u05ec\3\2\2\2\u05cc\u05cd\7!\2\2\u05cd")
        buf.write("\u05ce\7\u00f5\2\2\u05ce\u05d0\5\u00fa~\2\u05cf\u05d1")
        buf.write("\5r:\2\u05d0\u05cf\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05d2")
        buf.write("\3\2\2\2\u05d2\u05d3\7D\2\2\u05d3\u05ec\3\2\2\2\u05d4")
        buf.write("\u05d5\7!\2\2\u05d5\u05d6\7\u00f5\2\2\u05d6\u05d8\5\u00fa")
        buf.write("~\2\u05d7\u05d9\5r:\2\u05d8\u05d7\3\2\2\2\u05d8\u05d9")
        buf.write("\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05db\7\u00e6\2\2\u05db")
        buf.write("\u05dc\7o\2\2\u05dc\u05ec\3\2\2\2\u05dd\u05de\7!\2\2\u05de")
        buf.write("\u05df\7\u00f5\2\2\u05df\u05e1\5\u00fa~\2\u05e0\u05e2")
        buf.write("\5r:\2\u05e1\u05e0\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e3")
        buf.write("\3\2\2\2\u05e3\u05e4\7\u00d2\2\2\u05e4\u05e5\7>\2\2\u05e5")
        buf.write("\u05ec\3\2\2\2\u05e6\u05e7\7\u00ee\2\2\u05e7\u05ec\7\u00ff")
        buf.write("\2\2\u05e8\u05ec\7@\2\2\u05e9\u05ec\7\u00da\2\2\u05ea")
        buf.write("\u05ec\7Y\2\2\u05eb\u0543\3\2\2\2\u05eb\u0545\3\2\2\2")
        buf.write("\u05eb\u0547\3\2\2\2\u05eb\u054b\3\2\2\2\u05eb\u054f\3")
        buf.write("\2\2\2\u05eb\u0551\3\2\2\2\u05eb\u0556\3\2\2\2\u05eb\u0558")
        buf.write("\3\2\2\2\u05eb\u055a\3\2\2\2\u05eb\u055d\3\2\2\2\u05eb")
        buf.write("\u055f\3\2\2\2\u05eb\u0561\3\2\2\2\u05eb\u0563\3\2\2\2")
        buf.write("\u05eb\u0566\3\2\2\2\u05eb\u0568\3\2\2\2\u05eb\u056a\3")
        buf.write("\2\2\2\u05eb\u056c\3\2\2\2\u05eb\u056e\3\2\2\2\u05eb\u0570")
        buf.write("\3\2\2\2\u05eb\u0572\3\2\2\2\u05eb\u0574\3\2\2\2\u05eb")
        buf.write("\u0576\3\2\2\2\u05eb\u0578\3\2\2\2\u05eb\u057a\3\2\2\2")
        buf.write("\u05eb\u057d\3\2\2\2\u05eb\u0580\3\2\2\2\u05eb\u0586\3")
        buf.write("\2\2\2\u05eb\u058c\3\2\2\2\u05eb\u0592\3\2\2\2\u05eb\u0598")
        buf.write("\3\2\2\2\u05eb\u059e\3\2\2\2\u05eb\u05a6\3\2\2\2\u05eb")
        buf.write("\u05ad\3\2\2\2\u05eb\u05b3\3\2\2\2\u05eb\u05b9\3\2\2\2")
        buf.write("\u05eb\u05bf\3\2\2\2\u05eb\u05c4\3\2\2\2\u05eb\u05cc\3")
        buf.write("\2\2\2\u05eb\u05d4\3\2\2\2\u05eb\u05dd\3\2\2\2\u05eb\u05e6")
        buf.write("\3\2\2\2\u05eb\u05e8\3\2\2\2\u05eb\u05e9\3\2\2\2\u05eb")
        buf.write("\u05ea\3\2\2\2\u05ec_\3\2\2\2\u05ed\u05ef\7G\2\2\u05ee")
        buf.write("\u05f0\7\u00f9\2\2\u05ef\u05ee\3\2\2\2\u05ef\u05f0\3\2")
        buf.write("\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05f3\7i\2\2\u05f2\u05f1")
        buf.write("\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4")
        buf.write("\u05f8\7\u00f5\2\2\u05f5\u05f6\7\u0080\2\2\u05f6\u05f7")
        buf.write("\7\u00ab\2\2\u05f7\u05f9\7e\2\2\u05f8\u05f5\3\2\2\2\u05f8")
        buf.write("\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\5\u00f8")
        buf.write("}\2\u05fba\3\2\2\2\u05fc\u05fd\7G\2\2\u05fd\u05ff\7\u00b3")
        buf.write("\2\2\u05fe\u05fc\3\2\2\2\u05fe\u05ff\3\2\2\2\u05ff\u0600")
        buf.write("\3\2\2\2\u0600\u0601\7\u00d2\2\2\u0601\u0602\7\u00f5\2")
        buf.write("\2\u0602\u0603\5\u00f8}\2\u0603c\3\2\2\2\u0604\u0605\7")
        buf.write("9\2\2\u0605\u0606\7\60\2\2\u0606\u060a\5\u00e0q\2\u0607")
        buf.write("\u0608\7\u00ed\2\2\u0608\u0609\7\60\2\2\u0609\u060b\5")
        buf.write("\u00e4s\2\u060a\u0607\3\2\2\2\u060a\u060b\3\2\2\2\u060b")
        buf.write("\u060c\3\2\2\2\u060c\u060d\7\u008c\2\2\u060d\u060e\7\u0132")
        buf.write("\2\2\u060e\u060f\7/\2\2\u060fe\3\2\2\2\u0610\u0611\7\u00ea")
        buf.write("\2\2\u0611\u0612\7\60\2\2\u0612\u0613\5\u00e0q\2\u0613")
        buf.write("\u0616\7\u00af\2\2\u0614\u0617\5\u008cG\2\u0615\u0617")
        buf.write("\5\u008eH\2\u0616\u0614\3\2\2\2\u0616\u0615\3\2\2\2\u0617")
        buf.write("\u061b\3\2\2\2\u0618\u0619\7\u00f0\2\2\u0619\u061a\7(")
        buf.write("\2\2\u061a\u061c\7Z\2\2\u061b\u0618\3\2\2\2\u061b\u061c")
        buf.write("\3\2\2\2\u061cg\3\2\2\2\u061d\u061e\7\u009c\2\2\u061e")
        buf.write("\u061f\7\u012e\2\2\u061fi\3\2\2\2\u0620\u0621\7?\2\2\u0621")
        buf.write("\u0622\7\u012e\2\2\u0622k\3\2\2\2\u0623\u0625\5|?\2\u0624")
        buf.write("\u0623\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0626\3\2\2\2")
        buf.write("\u0626\u0627\5\u009eP\2\u0627\u0628\5\u009aN\2\u0628m")
        buf.write("\3\2\2\2\u0629\u062a\7\u0089\2\2\u062a\u062c\7\u00bb\2")
        buf.write("\2\u062b\u062d\7\u00f5\2\2\u062c\u062b\3\2\2\2\u062c\u062d")
        buf.write("\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u0635\5\u00f8}\2\u062f")
        buf.write("\u0633\5r:\2\u0630\u0631\7\u0080\2\2\u0631\u0632\7\u00ab")
        buf.write("\2\2\u0632\u0634\7e\2\2\u0633\u0630\3\2\2\2\u0633\u0634")
        buf.write("\3\2\2\2\u0634\u0636\3\2\2\2\u0635\u062f\3\2\2\2\u0635")
        buf.write("\u0636\3\2\2\2\u0636\u0661\3\2\2\2\u0637\u0638\7\u0089")
        buf.write("\2\2\u0638\u063a\7\u008c\2\2\u0639\u063b\7\u00f5\2\2\u063a")
        buf.write("\u0639\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063c\3\2\2\2")
        buf.write("\u063c\u063e\5\u00f8}\2\u063d\u063f\5r:\2\u063e\u063d")
        buf.write("\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0643\3\2\2\2\u0640")
        buf.write("\u0641\7\u0080\2\2\u0641\u0642\7\u00ab\2\2\u0642\u0644")
        buf.write("\7e\2\2\u0643\u0640\3\2\2\2\u0643\u0644\3\2\2\2\u0644")
        buf.write("\u0661\3\2\2\2\u0645\u0646\7\u0089\2\2\u0646\u0648\7\u00bb")
        buf.write("\2\2\u0647\u0649\7\u009b\2\2\u0648\u0647\3\2\2\2\u0648")
        buf.write("\u0649\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064b\7[\2\2")
        buf.write("\u064b\u064d\7\u012e\2\2\u064c\u064e\5\u00f4{\2\u064d")
        buf.write("\u064c\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u0650\3\2\2\2")
        buf.write("\u064f\u0651\5\u0090I\2\u0650\u064f\3\2\2\2\u0650\u0651")
        buf.write("\3\2\2\2\u0651\u0661\3\2\2\2\u0652\u0653\7\u0089\2\2\u0653")
        buf.write("\u0655\7\u00bb\2\2\u0654\u0656\7\u009b\2\2\u0655\u0654")
        buf.write("\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u0657\3\2\2\2\u0657")
        buf.write("\u0659\7[\2\2\u0658\u065a\7\u012e\2\2\u0659\u0658\3\2")
        buf.write("\2\2\u0659\u065a\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u065e")
        buf.write("\5\u0080A\2\u065c\u065d\7\u00b2\2\2\u065d\u065f\5\u0084")
        buf.write("C\2\u065e\u065c\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0661")
        buf.write("\3\2\2\2\u0660\u0629\3\2\2\2\u0660\u0637\3\2\2\2\u0660")
        buf.write("\u0645\3\2\2\2\u0660\u0652\3\2\2\2\u0661o\3\2\2\2\u0662")
        buf.write("\u0664\5r:\2\u0663\u0665\5h\65\2\u0664\u0663\3\2\2\2\u0664")
        buf.write("\u0665\3\2\2\2\u0665q\3\2\2\2\u0666\u0667\7\u00bc\2\2")
        buf.write("\u0667\u0668\7\5\2\2\u0668\u066d\5t;\2\u0669\u066a\7\4")
        buf.write("\2\2\u066a\u066c\5t;\2\u066b\u0669\3\2\2\2\u066c\u066f")
        buf.write("\3\2\2\2\u066d\u066b\3\2\2\2\u066d\u066e\3\2\2\2\u066e")
        buf.write("\u0670\3\2\2\2\u066f\u066d\3\2\2\2\u0670\u0671\7\6\2\2")
        buf.write("\u0671s\3\2\2\2\u0672\u0675\5\u0152\u00aa\2\u0673\u0674")
        buf.write("\7\u011a\2\2\u0674\u0676\5\u0112\u008a\2\u0675\u0673\3")
        buf.write("\2\2\2\u0675\u0676\3\2\2\2\u0676u\3\2\2\2\u0677\u0678")
        buf.write("\t\20\2\2\u0678w\3\2\2\2\u0679\u067f\5\u014c\u00a7\2\u067a")
        buf.write("\u067f\7\u012e\2\2\u067b\u067f\5\u0114\u008b\2\u067c\u067f")
        buf.write("\5\u0118\u008d\2\u067d\u067f\5\u011a\u008e\2\u067e\u0679")
        buf.write("\3\2\2\2\u067e\u067a\3\2\2\2\u067e\u067b\3\2\2\2\u067e")
        buf.write("\u067c\3\2\2\2\u067e\u067d\3\2\2\2\u067fy\3\2\2\2\u0680")
        buf.write("\u0685\5\u0152\u00aa\2\u0681\u0682\7\3\2\2\u0682\u0684")
        buf.write("\5\u0152\u00aa\2\u0683\u0681\3\2\2\2\u0684\u0687\3\2\2")
        buf.write("\2\u0685\u0683\3\2\2\2\u0685\u0686\3\2\2\2\u0686{\3\2")
        buf.write("\2\2\u0687\u0685\3\2\2\2\u0688\u0689\7\u0118\2\2\u0689")
        buf.write("\u068e\5~@\2\u068a\u068b\7\4\2\2\u068b\u068d\5~@\2\u068c")
        buf.write("\u068a\3\2\2\2\u068d\u0690\3\2\2\2\u068e\u068c\3\2\2\2")
        buf.write("\u068e\u068f\3\2\2\2\u068f}\3\2\2\2\u0690\u068e\3\2\2")
        buf.write("\2\u0691\u0693\5\u014e\u00a8\2\u0692\u0694\5\u00e0q\2")
        buf.write("\u0693\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0696\3")
        buf.write("\2\2\2\u0695\u0697\7(\2\2\u0696\u0695\3\2\2\2\u0696\u0697")
        buf.write("\3\2\2\2\u0697\u0698\3\2\2\2\u0698\u0699\7\5\2\2\u0699")
        buf.write("\u069a\5l\67\2\u069a\u069b\7\6\2\2\u069b\177\3\2\2\2\u069c")
        buf.write("\u069d\7\u0111\2\2\u069d\u069e\5\u00f8}\2\u069e\u0081")
        buf.write("\3\2\2\2\u069f\u06a0\7\u00b2\2\2\u06a0\u06aa\5\u0084C")
        buf.write("\2\u06a1\u06a2\7\u00bd\2\2\u06a2\u06a3\7\60\2\2\u06a3")
        buf.write("\u06aa\5\u0102\u0082\2\u06a4\u06aa\5d\63\2\u06a5\u06aa")
        buf.write("\5h\65\2\u06a6\u06aa\5j\66\2\u06a7\u06a8\7\u00f8\2\2\u06a8")
        buf.write("\u06aa\5\u0084C\2\u06a9\u069f\3\2\2\2\u06a9\u06a1\3\2")
        buf.write("\2\2\u06a9\u06a4\3\2\2\2\u06a9\u06a5\3\2\2\2\u06a9\u06a6")
        buf.write("\3\2\2\2\u06a9\u06a7\3\2\2\2\u06aa\u06ad\3\2\2\2\u06ab")
        buf.write("\u06a9\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u0083\3\2\2\2")
        buf.write("\u06ad\u06ab\3\2\2\2\u06ae\u06af\7\5\2\2\u06af\u06b4\5")
        buf.write("\u0086D\2\u06b0\u06b1\7\4\2\2\u06b1\u06b3\5\u0086D\2\u06b2")
        buf.write("\u06b0\3\2\2\2\u06b3\u06b6\3\2\2\2\u06b4\u06b2\3\2\2\2")
        buf.write("\u06b4\u06b5\3\2\2\2\u06b5\u06b7\3\2\2\2\u06b6\u06b4\3")
        buf.write("\2\2\2\u06b7\u06b8\7\6\2\2\u06b8\u0085\3\2\2\2\u06b9\u06be")
        buf.write("\5\u0088E\2\u06ba\u06bc\7\u011a\2\2\u06bb\u06ba\3\2\2")
        buf.write("\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06bf")
        buf.write("\5\u008aF\2\u06be\u06bb\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf")
        buf.write("\u0087\3\2\2\2\u06c0\u06c5\5\u0152\u00aa\2\u06c1\u06c2")
        buf.write("\7\3\2\2\u06c2\u06c4\5\u0152\u00aa\2\u06c3\u06c1\3\2\2")
        buf.write("\2\u06c4\u06c7\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c5\u06c6")
        buf.write("\3\2\2\2\u06c6\u06ca\3\2\2\2\u06c7\u06c5\3\2\2\2\u06c8")
        buf.write("\u06ca\7\u012e\2\2\u06c9\u06c0\3\2\2\2\u06c9\u06c8\3\2")
        buf.write("\2\2\u06ca\u0089\3\2\2\2\u06cb\u06d0\7\u0132\2\2\u06cc")
        buf.write("\u06d0\7\u0134\2\2\u06cd\u06d0\5\u011c\u008f\2\u06ce\u06d0")
        buf.write("\7\u012e\2\2\u06cf\u06cb\3\2\2\2\u06cf\u06cc\3\2\2\2\u06cf")
        buf.write("\u06cd\3\2\2\2\u06cf\u06ce\3\2\2\2\u06d0\u008b\3\2\2\2")
        buf.write("\u06d1\u06d2\7\5\2\2\u06d2\u06d7\5\u0112\u008a\2\u06d3")
        buf.write("\u06d4\7\4\2\2\u06d4\u06d6\5\u0112\u008a\2\u06d5\u06d3")
        buf.write("\3\2\2\2\u06d6\u06d9\3\2\2\2\u06d7\u06d5\3\2\2\2\u06d7")
        buf.write("\u06d8\3\2\2\2\u06d8\u06da\3\2\2\2\u06d9\u06d7\3\2\2\2")
        buf.write("\u06da\u06db\7\6\2\2\u06db\u008d\3\2\2\2\u06dc\u06dd\7")
        buf.write("\5\2\2\u06dd\u06e2\5\u008cG\2\u06de\u06df\7\4\2\2\u06df")
        buf.write("\u06e1\5\u008cG\2\u06e0\u06de\3\2\2\2\u06e1\u06e4\3\2")
        buf.write("\2\2\u06e2\u06e0\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06e5")
        buf.write("\3\2\2\2\u06e4\u06e2\3\2\2\2\u06e5\u06e6\7\6\2\2\u06e6")
        buf.write("\u008f\3\2\2\2\u06e7\u06e8\7\u00f0\2\2\u06e8\u06e9\7(")
        buf.write("\2\2\u06e9\u06ee\5\u0092J\2\u06ea\u06eb\7\u00f0\2\2\u06eb")
        buf.write("\u06ec\7\60\2\2\u06ec\u06ee\5\u0094K\2\u06ed\u06e7\3\2")
        buf.write("\2\2\u06ed\u06ea\3\2\2\2\u06ee\u0091\3\2\2\2\u06ef\u06f0")
        buf.write("\7\u0088\2\2\u06f0\u06f1\7\u012e\2\2\u06f1\u06f2\7\u00b7")
        buf.write("\2\2\u06f2\u06f5\7\u012e\2\2\u06f3\u06f5\5\u0152\u00aa")
        buf.write("\2\u06f4\u06ef\3\2\2\2\u06f4\u06f3\3\2\2\2\u06f5\u0093")
        buf.write("\3\2\2\2\u06f6\u06fa\7\u012e\2\2\u06f7\u06f8\7\u0118\2")
        buf.write("\2\u06f8\u06f9\7\u00e4\2\2\u06f9\u06fb\5\u0084C\2\u06fa")
        buf.write("\u06f7\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u0095\3\2\2\2")
        buf.write("\u06fc\u06fd\5\u0152\u00aa\2\u06fd\u06fe\7\u012e\2\2\u06fe")
        buf.write("\u0097\3\2\2\2\u06ff\u0700\5n8\2\u0700\u0701\5\u009eP")
        buf.write("\2\u0701\u0702\5\u009aN\2\u0702\u0733\3\2\2\2\u0703\u0705")
        buf.write("\5\u00c4c\2\u0704\u0706\5\u009cO\2\u0705\u0704\3\2\2\2")
        buf.write("\u0706\u0707\3\2\2\2\u0707\u0705\3\2\2\2\u0707\u0708\3")
        buf.write("\2\2\2\u0708\u0733\3\2\2\2\u0709\u070a\7U\2\2\u070a\u070b")
        buf.write("\7v\2\2\u070b\u070c\5\u00f8}\2\u070c\u070e\5\u00f2z\2")
        buf.write("\u070d\u070f\5\u00bc_\2\u070e\u070d\3\2\2\2\u070e\u070f")
        buf.write("\3\2\2\2\u070f\u0733\3\2\2\2\u0710\u0711\7\u010e\2\2\u0711")
        buf.write("\u0712\5\u00f8}\2\u0712\u0713\5\u00f2z\2\u0713\u0715\5")
        buf.write("\u00aeX\2\u0714\u0716\5\u00bc_\2\u0715\u0714\3\2\2\2\u0715")
        buf.write("\u0716\3\2\2\2\u0716\u0733\3\2\2\2\u0717\u0718\7\u00a3")
        buf.write("\2\2\u0718\u0719\7\u008c\2\2\u0719\u071a\5\u00f8}\2\u071a")
        buf.write("\u071b\5\u00f2z\2\u071b\u0721\7\u0111\2\2\u071c\u0722")
        buf.write("\5\u00f8}\2\u071d\u071e\7\5\2\2\u071e\u071f\5l\67\2\u071f")
        buf.write("\u0720\7\6\2\2\u0720\u0722\3\2\2\2\u0721\u071c\3\2\2\2")
        buf.write("\u0721\u071d\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0724\5")
        buf.write("\u00f2z\2\u0724\u0725\7\u00af\2\2\u0725\u0729\5\u010a")
        buf.write("\u0086\2\u0726\u0728\5\u00b0Y\2\u0727\u0726\3\2\2\2\u0728")
        buf.write("\u072b\3\2\2\2\u0729\u0727\3\2\2\2\u0729\u072a\3\2\2\2")
        buf.write("\u072a\u072f\3\2\2\2\u072b\u0729\3\2\2\2\u072c\u072e\5")
        buf.write("\u00b2Z\2\u072d\u072c\3\2\2\2\u072e\u0731\3\2\2\2\u072f")
        buf.write("\u072d\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0733\3\2\2\2")
        buf.write("\u0731\u072f\3\2\2\2\u0732\u06ff\3\2\2\2\u0732\u0703\3")
        buf.write("\2\2\2\u0732\u0709\3\2\2\2\u0732\u0710\3\2\2\2\u0732\u0717")
        buf.write("\3\2\2\2\u0733\u0099\3\2\2\2\u0734\u0735\7\u00b4\2\2\u0735")
        buf.write("\u0736\7\60\2\2\u0736\u073b\5\u00a2R\2\u0737\u0738\7\4")
        buf.write("\2\2\u0738\u073a\5\u00a2R\2\u0739\u0737\3\2\2\2\u073a")
        buf.write("\u073d\3\2\2\2\u073b\u0739\3\2\2\2\u073b\u073c\3\2\2\2")
        buf.write("\u073c\u073f\3\2\2\2\u073d\u073b\3\2\2\2\u073e\u0734\3")
        buf.write("\2\2\2\u073e\u073f\3\2\2\2\u073f\u074a\3\2\2\2\u0740\u0741")
        buf.write("\78\2\2\u0741\u0742\7\60\2\2\u0742\u0747\5\u0108\u0085")
        buf.write("\2\u0743\u0744\7\4\2\2\u0744\u0746\5\u0108\u0085\2\u0745")
        buf.write("\u0743\3\2\2\2\u0746\u0749\3\2\2\2\u0747\u0745\3\2\2\2")
        buf.write("\u0747\u0748\3\2\2\2\u0748\u074b\3\2\2\2\u0749\u0747\3")
        buf.write("\2\2\2\u074a\u0740\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u0756")
        buf.write("\3\2\2\2\u074c\u074d\7]\2\2\u074d\u074e\7\60\2\2\u074e")
        buf.write("\u0753\5\u0108\u0085\2\u074f\u0750\7\4\2\2\u0750\u0752")
        buf.write("\5\u0108\u0085\2\u0751\u074f\3\2\2\2\u0752\u0755\3\2\2")
        buf.write("\2\u0753\u0751\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0757")
        buf.write("\3\2\2\2\u0755\u0753\3\2\2\2\u0756\u074c\3\2\2\2\u0756")
        buf.write("\u0757\3\2\2\2\u0757\u0762\3\2\2\2\u0758\u0759\7\u00ec")
        buf.write("\2\2\u0759\u075a\7\60\2\2\u075a\u075f\5\u00a2R\2\u075b")
        buf.write("\u075c\7\4\2\2\u075c\u075e\5\u00a2R\2\u075d\u075b\3\2")
        buf.write("\2\2\u075e\u0761\3\2\2\2\u075f\u075d\3\2\2\2\u075f\u0760")
        buf.write("\3\2\2\2\u0760\u0763\3\2\2\2\u0761\u075f\3\2\2\2\u0762")
        buf.write("\u0758\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u0765\3\2\2\2")
        buf.write("\u0764\u0766\5\u013e\u00a0\2\u0765\u0764\3\2\2\2\u0765")
        buf.write("\u0766\3\2\2\2\u0766\u076c\3\2\2\2\u0767\u076a\7\u0097")
        buf.write("\2\2\u0768\u076b\7 \2\2\u0769\u076b\5\u0108\u0085\2\u076a")
        buf.write("\u0768\3\2\2\2\u076a\u0769\3\2\2\2\u076b\u076d\3\2\2\2")
        buf.write("\u076c\u0767\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u009b\3")
        buf.write("\2\2\2\u076e\u076f\5n8\2\u076f\u0770\5\u00a6T\2\u0770")
        buf.write("\u009d\3\2\2\2\u0771\u0772\bP\1\2\u0772\u0773\5\u00a0")
        buf.write("Q\2\u0773\u078b\3\2\2\2\u0774\u0775\f\5\2\2\u0775\u0776")
        buf.write("\6P\4\2\u0776\u0778\t\21\2\2\u0777\u0779\5\u00d2j\2\u0778")
        buf.write("\u0777\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u077a\3\2\2\2")
        buf.write("\u077a\u078a\5\u009eP\6\u077b\u077c\f\4\2\2\u077c\u077d")
        buf.write("\6P\6\2\u077d\u077f\7\u008a\2\2\u077e\u0780\5\u00d2j\2")
        buf.write("\u077f\u077e\3\2\2\2\u077f\u0780\3\2\2\2\u0780\u0781\3")
        buf.write("\2\2\2\u0781\u078a\5\u009eP\5\u0782\u0783\f\3\2\2\u0783")
        buf.write("\u0784\6P\b\2\u0784\u0786\t\22\2\2\u0785\u0787\5\u00d2")
        buf.write("j\2\u0786\u0785\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0788")
        buf.write("\3\2\2\2\u0788\u078a\5\u009eP\4\u0789\u0774\3\2\2\2\u0789")
        buf.write("\u077b\3\2\2\2\u0789\u0782\3\2\2\2\u078a\u078d\3\2\2\2")
        buf.write("\u078b\u0789\3\2\2\2\u078b\u078c\3\2\2\2\u078c\u009f\3")
        buf.write("\2\2\2\u078d\u078b\3\2\2\2\u078e\u0798\5\u00a8U\2\u078f")
        buf.write("\u0798\5\u00a4S\2\u0790\u0791\7\u00f5\2\2\u0791\u0798")
        buf.write("\5\u00f8}\2\u0792\u0798\5\u00eex\2\u0793\u0794\7\5\2\2")
        buf.write("\u0794\u0795\5l\67\2\u0795\u0796\7\6\2\2\u0796\u0798\3")
        buf.write("\2\2\2\u0797\u078e\3\2\2\2\u0797\u078f\3\2\2\2\u0797\u0790")
        buf.write("\3\2\2\2\u0797\u0792\3\2\2\2\u0797\u0793\3\2\2\2\u0798")
        buf.write("\u00a1\3\2\2\2\u0799\u079b\5\u0108\u0085\2\u079a\u079c")
        buf.write("\t\3\2\2\u079b\u079a\3\2\2\2\u079b\u079c\3\2\2\2\u079c")
        buf.write("\u079f\3\2\2\2\u079d\u079e\7\u00ad\2\2\u079e\u07a0\t\23")
        buf.write("\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u00a3")
        buf.write("\3\2\2\2\u07a1\u07a3\5\u00c4c\2\u07a2\u07a4\5\u00a6T\2")
        buf.write("\u07a3\u07a2\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a3\3")
        buf.write("\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u00a5\3\2\2\2\u07a7\u07a9")
        buf.write("\5\u00aaV\2\u07a8\u07aa\5\u00bc_\2\u07a9\u07a8\3\2\2\2")
        buf.write("\u07a9\u07aa\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ac\5")
        buf.write("\u009aN\2\u07ac\u07c3\3\2\2\2\u07ad\u07b1\5\u00acW\2\u07ae")
        buf.write("\u07b0\5\u00d0i\2\u07af\u07ae\3\2\2\2\u07b0\u07b3\3\2")
        buf.write("\2\2\u07b1\u07af\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2\u07b5")
        buf.write("\3\2\2\2\u07b3\u07b1\3\2\2\2\u07b4\u07b6\5\u00bc_\2\u07b5")
        buf.write("\u07b4\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07b8\3\2\2\2")
        buf.write("\u07b7\u07b9\5\u00c6d\2\u07b8\u07b7\3\2\2\2\u07b8\u07b9")
        buf.write("\3\2\2\2\u07b9\u07bb\3\2\2\2\u07ba\u07bc\5\u00be`\2\u07bb")
        buf.write("\u07ba\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u07be\3\2\2\2")
        buf.write("\u07bd\u07bf\5\u013e\u00a0\2\u07be\u07bd\3\2\2\2\u07be")
        buf.write("\u07bf\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c1\5\u009a")
        buf.write("N\2\u07c1\u07c3\3\2\2\2\u07c2\u07a7\3\2\2\2\u07c2\u07ad")
        buf.write("\3\2\2\2\u07c3\u00a7\3\2\2\2\u07c4\u07c6\5\u00aaV\2\u07c5")
        buf.write("\u07c7\5\u00c4c\2\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2")
        buf.write("\2\2\u07c7\u07c9\3\2\2\2\u07c8\u07ca\5\u00bc_\2\u07c9")
        buf.write("\u07c8\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07e2\3\2\2\2")
        buf.write("\u07cb\u07cd\5\u00acW\2\u07cc\u07ce\5\u00c4c\2\u07cd\u07cc")
        buf.write("\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d2\3\2\2\2\u07cf")
        buf.write("\u07d1\5\u00d0i\2\u07d0\u07cf\3\2\2\2\u07d1\u07d4\3\2")
        buf.write("\2\2\u07d2\u07d0\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07d6")
        buf.write("\3\2\2\2\u07d4\u07d2\3\2\2\2\u07d5\u07d7\5\u00bc_\2\u07d6")
        buf.write("\u07d5\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d9\3\2\2\2")
        buf.write("\u07d8\u07da\5\u00c6d\2\u07d9\u07d8\3\2\2\2\u07d9\u07da")
        buf.write("\3\2\2\2\u07da\u07dc\3\2\2\2\u07db\u07dd\5\u00be`\2\u07dc")
        buf.write("\u07db\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07df\3\2\2\2")
        buf.write("\u07de\u07e0\5\u013e\u00a0\2\u07df\u07de\3\2\2\2\u07df")
        buf.write("\u07e0\3\2\2\2\u07e0\u07e2\3\2\2\2\u07e1\u07c4\3\2\2\2")
        buf.write("\u07e1\u07cb\3\2\2\2\u07e2\u00a9\3\2\2\2\u07e3\u07e4\7")
        buf.write("\u00e0\2\2\u07e4\u07e5\7\u0101\2\2\u07e5\u07e6\7\5\2\2")
        buf.write("\u07e6\u07e7\5\u0100\u0081\2\u07e7\u07e8\7\6\2\2\u07e8")
        buf.write("\u07ee\3\2\2\2\u07e9\u07ea\7\u00a1\2\2\u07ea\u07ee\5\u0100")
        buf.write("\u0081\2\u07eb\u07ec\7\u00cd\2\2\u07ec\u07ee\5\u0100\u0081")
        buf.write("\2\u07ed\u07e3\3\2\2\2\u07ed\u07e9\3\2\2\2\u07ed\u07eb")
        buf.write("\3\2\2\2\u07ee\u07f0\3\2\2\2\u07ef\u07f1\5\u00f4{\2\u07f0")
        buf.write("\u07ef\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f4\3\2\2\2")
        buf.write("\u07f2\u07f3\7\u00cb\2\2\u07f3\u07f5\7\u012e\2\2\u07f4")
        buf.write("\u07f2\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f6\3\2\2\2")
        buf.write("\u07f6\u07f7\7\u0111\2\2\u07f7\u0804\7\u012e\2\2\u07f8")
        buf.write("\u0802\7(\2\2\u07f9\u0803\5\u00e2r\2\u07fa\u0803\5\u0134")
        buf.write("\u009b\2\u07fb\u07fe\7\5\2\2\u07fc\u07ff\5\u00e2r\2\u07fd")
        buf.write("\u07ff\5\u0134\u009b\2\u07fe\u07fc\3\2\2\2\u07fe\u07fd")
        buf.write("\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0801\7\6\2\2\u0801")
        buf.write("\u0803\3\2\2\2\u0802\u07f9\3\2\2\2\u0802\u07fa\3\2\2\2")
        buf.write("\u0802\u07fb\3\2\2\2\u0803\u0805\3\2\2\2\u0804\u07f8\3")
        buf.write("\2\2\2\u0804\u0805\3\2\2\2\u0805\u0807\3\2\2\2\u0806\u0808")
        buf.write("\5\u00f4{\2\u0807\u0806\3\2\2\2\u0807\u0808\3\2\2\2\u0808")
        buf.write("\u080b\3\2\2\2\u0809\u080a\7\u00ca\2\2\u080a\u080c\7\u012e")
        buf.write("\2\2\u080b\u0809\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u00ab")
        buf.write("\3\2\2\2\u080d\u0811\7\u00e0\2\2\u080e\u0810\5\u00c0a")
        buf.write("\2\u080f\u080e\3\2\2\2\u0810\u0813\3\2\2\2\u0811\u080f")
        buf.write("\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0815\3\2\2\2\u0813")
        buf.write("\u0811\3\2\2\2\u0814\u0816\5\u00d2j\2\u0815\u0814\3\2")
        buf.write("\2\2\u0815\u0816\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0818")
        buf.write("\5\u0100\u0081\2\u0818\u00ad\3\2\2\2\u0819\u081a\7\u00e6")
        buf.write("\2\2\u081a\u081b\5\u00b8]\2\u081b\u00af\3\2\2\2\u081c")
        buf.write("\u081d\7\u0115\2\2\u081d\u0820\7\u00a2\2\2\u081e\u081f")
        buf.write("\7#\2\2\u081f\u0821\5\u010a\u0086\2\u0820\u081e\3\2\2")
        buf.write("\2\u0820\u0821\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0823")
        buf.write("\7\u00fb\2\2\u0823\u0824\5\u00b4[\2\u0824\u00b1\3\2\2")
        buf.write("\2\u0825\u0826\7\u0115\2\2\u0826\u0827\7\u00ab\2\2\u0827")
        buf.write("\u082a\7\u00a2\2\2\u0828\u0829\7#\2\2\u0829\u082b\5\u010a")
        buf.write("\u0086\2\u082a\u0828\3\2\2\2\u082a\u082b\3\2\2\2\u082b")
        buf.write("\u082c\3\2\2\2\u082c\u082d\7\u00fb\2\2\u082d\u082e\5\u00b6")
        buf.write("\\\2\u082e\u00b3\3\2\2\2\u082f\u0837\7U\2\2\u0830\u0831")
        buf.write("\7\u010e\2\2\u0831\u0832\7\u00e6\2\2\u0832\u0837\7\u0125")
        buf.write("\2\2\u0833\u0834\7\u010e\2\2\u0834\u0835\7\u00e6\2\2\u0835")
        buf.write("\u0837\5\u00b8]\2\u0836\u082f\3\2\2\2\u0836\u0830\3\2")
        buf.write("\2\2\u0836\u0833\3\2\2\2\u0837\u00b5\3\2\2\2\u0838\u0839")
        buf.write("\7\u0089\2\2\u0839\u084b\7\u0125\2\2\u083a\u083b\7\u0089")
        buf.write("\2\2\u083b\u083c\7\5\2\2\u083c\u083d\5\u00f6|\2\u083d")
        buf.write("\u083e\7\6\2\2\u083e\u083f\7\u0112\2\2\u083f\u0840\7\5")
        buf.write("\2\2\u0840\u0845\5\u0108\u0085\2\u0841\u0842\7\4\2\2\u0842")
        buf.write("\u0844\5\u0108\u0085\2\u0843\u0841\3\2\2\2\u0844\u0847")
        buf.write("\3\2\2\2\u0845\u0843\3\2\2\2\u0845\u0846\3\2\2\2\u0846")
        buf.write("\u0848\3\2\2\2\u0847\u0845\3\2\2\2\u0848\u0849\7\6\2\2")
        buf.write("\u0849\u084b\3\2\2\2\u084a\u0838\3\2\2\2\u084a\u083a\3")
        buf.write("\2\2\2\u084b\u00b7\3\2\2\2\u084c\u0851\5\u00ba^\2\u084d")
        buf.write("\u084e\7\4\2\2\u084e\u0850\5\u00ba^\2\u084f\u084d\3\2")
        buf.write("\2\2\u0850\u0853\3\2\2\2\u0851\u084f\3\2\2\2\u0851\u0852")
        buf.write("\3\2\2\2\u0852\u00b9\3\2\2\2\u0853\u0851\3\2\2\2\u0854")
        buf.write("\u0855\5\u00f8}\2\u0855\u0856\7\u011a\2\2\u0856\u0857")
        buf.write("\5\u0108\u0085\2\u0857\u00bb\3\2\2\2\u0858\u0859\7\u0116")
        buf.write("\2\2\u0859\u085a\5\u010a\u0086\2\u085a\u00bd\3\2\2\2\u085b")
        buf.write("\u085c\7~\2\2\u085c\u085d\5\u010a\u0086\2\u085d\u00bf")
        buf.write("\3\2\2\2\u085e\u085f\7\20\2\2\u085f\u0866\5\u00c2b\2\u0860")
        buf.write("\u0862\7\4\2\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2\2\2")
        buf.write("\u0862\u0863\3\2\2\2\u0863\u0865\5\u00c2b\2\u0864\u0861")
        buf.write("\3\2\2\2\u0865\u0868\3\2\2\2\u0866\u0864\3\2\2\2\u0866")
        buf.write("\u0867\3\2\2\2\u0867\u0869\3\2\2\2\u0868\u0866\3\2\2\2")
        buf.write("\u0869\u086a\7\21\2\2\u086a\u00c1\3\2\2\2\u086b\u0879")
        buf.write("\5\u0152\u00aa\2\u086c\u086d\5\u0152\u00aa\2\u086d\u086e")
        buf.write("\7\5\2\2\u086e\u0873\5\u0110\u0089\2\u086f\u0870\7\4\2")
        buf.write("\2\u0870\u0872\5\u0110\u0089\2\u0871\u086f\3\2\2\2\u0872")
        buf.write("\u0875\3\2\2\2\u0873\u0871\3\2\2\2\u0873\u0874\3\2\2\2")
        buf.write("\u0874\u0876\3\2\2\2\u0875\u0873\3\2\2\2\u0876\u0877\7")
        buf.write("\6\2\2\u0877\u0879\3\2\2\2\u0878\u086b\3\2\2\2\u0878\u086c")
        buf.write("\3\2\2\2\u0879\u00c3\3\2\2\2\u087a\u087b\7v\2\2\u087b")
        buf.write("\u0880\5\u00d4k\2\u087c\u087d\7\4\2\2\u087d\u087f\5\u00d4")
        buf.write("k\2\u087e\u087c\3\2\2\2\u087f\u0882\3\2\2\2\u0880\u087e")
        buf.write("\3\2\2\2\u0880\u0881\3\2\2\2\u0881\u0886\3\2\2\2\u0882")
        buf.write("\u0880\3\2\2\2\u0883\u0885\5\u00d0i\2\u0884\u0883\3\2")
        buf.write("\2\2\u0885\u0888\3\2\2\2\u0886\u0884\3\2\2\2\u0886\u0887")
        buf.write("\3\2\2\2\u0887\u088a\3\2\2\2\u0888\u0886\3\2\2\2\u0889")
        buf.write("\u088b\5\u00caf\2\u088a\u0889\3\2\2\2\u088a\u088b\3\2")
        buf.write("\2\2\u088b\u00c5\3\2\2\2\u088c\u088d\7|\2\2\u088d\u088e")
        buf.write("\7\60\2\2\u088e\u0893\5\u0108\u0085\2\u088f\u0890\7\4")
        buf.write("\2\2\u0890\u0892\5\u0108\u0085\2\u0891\u088f\3\2\2\2\u0892")
        buf.write("\u0895\3\2\2\2\u0893\u0891\3\2\2\2\u0893\u0894\3\2\2\2")
        buf.write("\u0894\u08a7\3\2\2\2\u0895\u0893\3\2\2\2\u0896\u0897\7")
        buf.write("\u0118\2\2\u0897\u08a8\7\u00db\2\2\u0898\u0899\7\u0118")
        buf.write("\2\2\u0899\u08a8\7I\2\2\u089a\u089b\7}\2\2\u089b\u089c")
        buf.write("\7\u00e8\2\2\u089c\u089d\7\5\2\2\u089d\u08a2\5\u00c8e")
        buf.write("\2\u089e\u089f\7\4\2\2\u089f\u08a1\5\u00c8e\2\u08a0\u089e")
        buf.write("\3\2\2\2\u08a1\u08a4\3\2\2\2\u08a2\u08a0\3\2\2\2\u08a2")
        buf.write("\u08a3\3\2\2\2\u08a3\u08a5\3\2\2\2\u08a4\u08a2\3\2\2\2")
        buf.write("\u08a5\u08a6\7\6\2\2\u08a6\u08a8\3\2\2\2\u08a7\u0896\3")
        buf.write("\2\2\2\u08a7\u0898\3\2\2\2\u08a7\u089a\3\2\2\2\u08a7\u08a8")
        buf.write("\3\2\2\2\u08a8\u08b9\3\2\2\2\u08a9\u08aa\7|\2\2\u08aa")
        buf.write("\u08ab\7\60\2\2\u08ab\u08ac\7}\2\2\u08ac\u08ad\7\u00e8")
        buf.write("\2\2\u08ad\u08ae\7\5\2\2\u08ae\u08b3\5\u00c8e\2\u08af")
        buf.write("\u08b0\7\4\2\2\u08b0\u08b2\5\u00c8e\2\u08b1\u08af\3\2")
        buf.write("\2\2\u08b2\u08b5\3\2\2\2\u08b3\u08b1\3\2\2\2\u08b3\u08b4")
        buf.write("\3\2\2\2\u08b4\u08b6\3\2\2\2\u08b5\u08b3\3\2\2\2\u08b6")
        buf.write("\u08b7\7\6\2\2\u08b7\u08b9\3\2\2\2\u08b8\u088c\3\2\2\2")
        buf.write("\u08b8\u08a9\3\2\2\2\u08b9\u00c7\3\2\2\2\u08ba\u08c3\7")
        buf.write("\5\2\2\u08bb\u08c0\5\u0108\u0085\2\u08bc\u08bd\7\4\2\2")
        buf.write("\u08bd\u08bf\5\u0108\u0085\2\u08be\u08bc\3\2\2\2\u08bf")
        buf.write("\u08c2\3\2\2\2\u08c0\u08be\3\2\2\2\u08c0\u08c1\3\2\2\2")
        buf.write("\u08c1\u08c4\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c3\u08bb\3")
        buf.write("\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c8")
        buf.write("\7\6\2\2\u08c6\u08c8\5\u0108\u0085\2\u08c7\u08ba\3\2\2")
        buf.write("\2\u08c7\u08c6\3\2\2\2\u08c8\u00c9\3\2\2\2\u08c9\u08ca")
        buf.write("\7\u00c0\2\2\u08ca\u08cb\7\5\2\2\u08cb\u08cc\5\u0100\u0081")
        buf.write("\2\u08cc\u08cd\7r\2\2\u08cd\u08ce\5\u00ccg\2\u08ce\u08cf")
        buf.write("\7\u0083\2\2\u08cf\u08d0\7\5\2\2\u08d0\u08d5\5\u00ceh")
        buf.write("\2\u08d1\u08d2\7\4\2\2\u08d2\u08d4\5\u00ceh\2\u08d3\u08d1")
        buf.write("\3\2\2\2\u08d4\u08d7\3\2\2\2\u08d5\u08d3\3\2\2\2\u08d5")
        buf.write("\u08d6\3\2\2\2\u08d6\u08d8\3\2\2\2\u08d7\u08d5\3\2\2\2")
        buf.write("\u08d8\u08d9\7\6\2\2\u08d9\u08da\7\6\2\2\u08da\u00cb\3")
        buf.write("\2\2\2\u08db\u08e8\5\u0152\u00aa\2\u08dc\u08dd\7\5\2\2")
        buf.write("\u08dd\u08e2\5\u0152\u00aa\2\u08de\u08df\7\4\2\2\u08df")
        buf.write("\u08e1\5\u0152\u00aa\2\u08e0\u08de\3\2\2\2\u08e1\u08e4")
        buf.write("\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3")
        buf.write("\u08e5\3\2\2\2\u08e4\u08e2\3\2\2\2\u08e5\u08e6\7\6\2\2")
        buf.write("\u08e6\u08e8\3\2\2\2\u08e7\u08db\3\2\2\2\u08e7\u08dc\3")
        buf.write("\2\2\2\u08e8\u00cd\3\2\2\2\u08e9\u08ee\5\u0108\u0085\2")
        buf.write("\u08ea\u08ec\7(\2\2\u08eb\u08ea\3\2\2\2\u08eb\u08ec\3")
        buf.write("\2\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08ef\5\u0152\u00aa\2")
        buf.write("\u08ee\u08eb\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u00cf\3")
        buf.write("\2\2\2\u08f0\u08f1\7\u0092\2\2\u08f1\u08f3\7\u0113\2\2")
        buf.write("\u08f2\u08f4\7\u00b6\2\2\u08f3\u08f2\3\2\2\2\u08f3\u08f4")
        buf.write("\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f6\5\u014c\u00a7")
        buf.write("\2\u08f6\u08ff\7\5\2\2\u08f7\u08fc\5\u0108\u0085\2\u08f8")
        buf.write("\u08f9\7\4\2\2\u08f9\u08fb\5\u0108\u0085\2\u08fa\u08f8")
        buf.write("\3\2\2\2\u08fb\u08fe\3\2\2\2\u08fc\u08fa\3\2\2\2\u08fc")
        buf.write("\u08fd\3\2\2\2\u08fd\u0900\3\2\2\2\u08fe\u08fc\3\2\2\2")
        buf.write("\u08ff\u08f7\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0901\3")
        buf.write("\2\2\2\u0901\u0902\7\6\2\2\u0902\u090e\5\u0152\u00aa\2")
        buf.write("\u0903\u0905\7(\2\2\u0904\u0903\3\2\2\2\u0904\u0905\3")
        buf.write("\2\2\2\u0905\u0906\3\2\2\2\u0906\u090b\5\u0152\u00aa\2")
        buf.write("\u0907\u0908\7\4\2\2\u0908\u090a\5\u0152\u00aa\2\u0909")
        buf.write("\u0907\3\2\2\2\u090a\u090d\3\2\2\2\u090b\u0909\3\2\2\2")
        buf.write("\u090b\u090c\3\2\2\2\u090c\u090f\3\2\2\2\u090d\u090b\3")
        buf.write("\2\2\2\u090e\u0904\3\2\2\2\u090e\u090f\3\2\2\2\u090f\u00d1")
        buf.write("\3\2\2\2\u0910\u0911\t\24\2\2\u0911\u00d3\3\2\2\2\u0912")
        buf.write("\u0916\5\u00ecw\2\u0913\u0915\5\u00d6l\2\u0914\u0913\3")
        buf.write("\2\2\2\u0915\u0918\3\2\2\2\u0916\u0914\3\2\2\2\u0916\u0917")
        buf.write("\3\2\2\2\u0917\u00d5\3\2\2\2\u0918\u0916\3\2\2\2\u0919")
        buf.write("\u091a\5\u00d8m\2\u091a\u091b\7\u008f\2\2\u091b\u091d")
        buf.write("\5\u00ecw\2\u091c\u091e\5\u00dan\2\u091d\u091c\3\2\2\2")
        buf.write("\u091d\u091e\3\2\2\2\u091e\u0925\3\2\2\2\u091f\u0920\7")
        buf.write("\u00a9\2\2\u0920\u0921\5\u00d8m\2\u0921\u0922\7\u008f")
        buf.write("\2\2\u0922\u0923\5\u00ecw\2\u0923\u0925\3\2\2\2\u0924")
        buf.write("\u0919\3\2\2\2\u0924\u091f\3\2\2\2\u0925\u00d7\3\2\2\2")
        buf.write("\u0926\u0928\7\u0086\2\2\u0927\u0926\3\2\2\2\u0927\u0928")
        buf.write("\3\2\2\2\u0928\u093f\3\2\2\2\u0929\u093f\7H\2\2\u092a")
        buf.write("\u092c\7\u0095\2\2\u092b\u092d\7\u00b6\2\2\u092c\u092b")
        buf.write("\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u093f\3\2\2\2\u092e")
        buf.write("\u0930\7\u0095\2\2\u092f\u092e\3\2\2\2\u092f\u0930\3\2")
        buf.write("\2\2\u0930\u0931\3\2\2\2\u0931\u093f\7\u00e1\2\2\u0932")
        buf.write("\u0934\7\u00d6\2\2\u0933\u0935\7\u00b6\2\2\u0934\u0933")
        buf.write("\3\2\2\2\u0934\u0935\3\2\2\2\u0935\u093f\3\2\2\2\u0936")
        buf.write("\u0938\7w\2\2\u0937\u0939\7\u00b6\2\2\u0938\u0937\3\2")
        buf.write("\2\2\u0938\u0939\3\2\2\2\u0939\u093f\3\2\2\2\u093a\u093c")
        buf.write("\7\u0095\2\2\u093b\u093a\3\2\2\2\u093b\u093c\3\2\2\2\u093c")
        buf.write("\u093d\3\2\2\2\u093d\u093f\7$\2\2\u093e\u0927\3\2\2\2")
        buf.write("\u093e\u0929\3\2\2\2\u093e\u092a\3\2\2\2\u093e\u092f\3")
        buf.write("\2\2\2\u093e\u0932\3\2\2\2\u093e\u0936\3\2\2\2\u093e\u093b")
        buf.write("\3\2\2\2\u093f\u00d9\3\2\2\2\u0940\u0941\7\u00af\2\2\u0941")
        buf.write("\u0945\5\u010a\u0086\2\u0942\u0943\7\u0111\2\2\u0943\u0945")
        buf.write("\5\u00e0q\2\u0944\u0940\3\2\2\2\u0944\u0942\3\2\2\2\u0945")
        buf.write("\u00db\3\2\2\2\u0946\u0947\7\u00f7\2\2\u0947\u0949\7\5")
        buf.write("\2\2\u0948\u094a\5\u00dep\2\u0949\u0948\3\2\2\2\u0949")
        buf.write("\u094a\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094c\7\6\2\2")
        buf.write("\u094c\u00dd\3\2\2\2\u094d\u094f\7\u0124\2\2\u094e\u094d")
        buf.write("\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u0950\3\2\2\2\u0950")
        buf.write("\u0951\t\25\2\2\u0951\u0966\7\u00bf\2\2\u0952\u0953\5")
        buf.write("\u0108\u0085\2\u0953\u0954\7\u00dd\2\2\u0954\u0966\3\2")
        buf.write("\2\2\u0955\u0956\7.\2\2\u0956\u0957\7\u0132\2\2\u0957")
        buf.write("\u0958\7\u00b5\2\2\u0958\u0959\7\u00ae\2\2\u0959\u0962")
        buf.write("\7\u0132\2\2\u095a\u0960\7\u00af\2\2\u095b\u0961\5\u0152")
        buf.write("\u00aa\2\u095c\u095d\5\u014c\u00a7\2\u095d\u095e\7\5\2")
        buf.write("\2\u095e\u095f\7\6\2\2\u095f\u0961\3\2\2\2\u0960\u095b")
        buf.write("\3\2\2\2\u0960\u095c\3\2\2\2\u0961\u0963\3\2\2\2\u0962")
        buf.write("\u095a\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0966\3\2\2\2")
        buf.write("\u0964\u0966\5\u0108\u0085\2\u0965\u094e\3\2\2\2\u0965")
        buf.write("\u0952\3\2\2\2\u0965\u0955\3\2\2\2\u0965\u0964\3\2\2\2")
        buf.write("\u0966\u00df\3\2\2\2\u0967\u0968\7\5\2\2\u0968\u0969\5")
        buf.write("\u00e2r\2\u0969\u096a\7\6\2\2\u096a\u00e1\3\2\2\2\u096b")
        buf.write("\u0970\5\u014e\u00a8\2\u096c\u096d\7\4\2\2\u096d\u096f")
        buf.write("\5\u014e\u00a8\2\u096e\u096c\3\2\2\2\u096f\u0972\3\2\2")
        buf.write("\2\u0970\u096e\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u00e3")
        buf.write("\3\2\2\2\u0972\u0970\3\2\2\2\u0973\u0974\7\5\2\2\u0974")
        buf.write("\u0979\5\u00e6t\2\u0975\u0976\7\4\2\2\u0976\u0978\5\u00e6")
        buf.write("t\2\u0977\u0975\3\2\2\2\u0978\u097b\3\2\2\2\u0979\u0977")
        buf.write("\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u097c\3\2\2\2\u097b")
        buf.write("\u0979\3\2\2\2\u097c\u097d\7\6\2\2\u097d\u00e5\3\2\2\2")
        buf.write("\u097e\u0980\5\u014e\u00a8\2\u097f\u0981\t\3\2\2\u0980")
        buf.write("\u097f\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u00e7\3\2\2\2")
        buf.write("\u0982\u0983\7\5\2\2\u0983\u0988\5\u00eav\2\u0984\u0985")
        buf.write("\7\4\2\2\u0985\u0987\5\u00eav\2\u0986\u0984\3\2\2\2\u0987")
        buf.write("\u098a\3\2\2\2\u0988\u0986\3\2\2\2\u0988\u0989\3\2\2\2")
        buf.write("\u0989\u098b\3\2\2\2\u098a\u0988\3\2\2\2\u098b\u098c\7")
        buf.write("\6\2\2\u098c\u00e9\3\2\2\2\u098d\u098f\5\u0152\u00aa\2")
        buf.write("\u098e\u0990\5j\66\2\u098f\u098e\3\2\2\2\u098f\u0990\3")
        buf.write("\2\2\2\u0990\u00eb\3\2\2\2\u0991\u0993\5\u00f8}\2\u0992")
        buf.write("\u0994\5\u00dco\2\u0993\u0992\3\2\2\2\u0993\u0994\3\2")
        buf.write("\2\2\u0994\u0995\3\2\2\2\u0995\u0996\5\u00f2z\2\u0996")
        buf.write("\u09aa\3\2\2\2\u0997\u0998\7\5\2\2\u0998\u0999\5l\67\2")
        buf.write("\u0999\u099b\7\6\2\2\u099a\u099c\5\u00dco\2\u099b\u099a")
        buf.write("\3\2\2\2\u099b\u099c\3\2\2\2\u099c\u099d\3\2\2\2\u099d")
        buf.write("\u099e\5\u00f2z\2\u099e\u09aa\3\2\2\2\u099f\u09a0\7\5")
        buf.write("\2\2\u09a0\u09a1\5\u00d4k\2\u09a1\u09a3\7\6\2\2\u09a2")
        buf.write("\u09a4\5\u00dco\2\u09a3\u09a2\3\2\2\2\u09a3\u09a4\3\2")
        buf.write("\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a6\5\u00f2z\2\u09a6")
        buf.write("\u09aa\3\2\2\2\u09a7\u09aa\5\u00eex\2\u09a8\u09aa\5\u00f0")
        buf.write("y\2\u09a9\u0991\3\2\2\2\u09a9\u0997\3\2\2\2\u09a9\u099f")
        buf.write("\3\2\2\2\u09a9\u09a7\3\2\2\2\u09a9\u09a8\3\2\2\2\u09aa")
        buf.write("\u00ed\3\2\2\2\u09ab\u09ac\7\u0112\2\2\u09ac\u09b1\5\u0108")
        buf.write("\u0085\2\u09ad\u09ae\7\4\2\2\u09ae\u09b0\5\u0108\u0085")
        buf.write("\2\u09af\u09ad\3\2\2\2\u09b0\u09b3\3\2\2\2\u09b1\u09af")
        buf.write("\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b4\3\2\2\2\u09b3")
        buf.write("\u09b1\3\2\2\2\u09b4\u09b5\5\u00f2z\2\u09b5\u00ef\3\2")
        buf.write("\2\2\u09b6\u09b7\5\u014e\u00a8\2\u09b7\u09c0\7\5\2\2\u09b8")
        buf.write("\u09bd\5\u0108\u0085\2\u09b9\u09ba\7\4\2\2\u09ba\u09bc")
        buf.write("\5\u0108\u0085\2\u09bb\u09b9\3\2\2\2\u09bc\u09bf\3\2\2")
        buf.write("\2\u09bd\u09bb\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09c1")
        buf.write("\3\2\2\2\u09bf\u09bd\3\2\2\2\u09c0\u09b8\3\2\2\2\u09c0")
        buf.write("\u09c1\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\7\6\2\2")
        buf.write("\u09c3\u09c4\5\u00f2z\2\u09c4\u00f1\3\2\2\2\u09c5\u09c7")
        buf.write("\7(\2\2\u09c6\u09c5\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7")
        buf.write("\u09c8\3\2\2\2\u09c8\u09ca\5\u0154\u00ab\2\u09c9\u09cb")
        buf.write("\5\u00e0q\2\u09ca\u09c9\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb")
        buf.write("\u09cd\3\2\2\2\u09cc\u09c6\3\2\2\2\u09cc\u09cd\3\2\2\2")
        buf.write("\u09cd\u00f3\3\2\2\2\u09ce\u09cf\7\u00dc\2\2\u09cf\u09d0")
        buf.write("\7t\2\2\u09d0\u09d1\7\u00e3\2\2\u09d1\u09d5\7\u012e\2")
        buf.write("\2\u09d2\u09d3\7\u0118\2\2\u09d3\u09d4\7\u00e4\2\2\u09d4")
        buf.write("\u09d6\5\u0084C\2\u09d5\u09d2\3\2\2\2\u09d5\u09d6\3\2")
        buf.write("\2\2\u09d6\u0a00\3\2\2\2\u09d7\u09d8\7\u00dc\2\2\u09d8")
        buf.write("\u09d9\7t\2\2\u09d9\u09e3\7V\2\2\u09da\u09db\7m\2\2\u09db")
        buf.write("\u09dc\7\u00fa\2\2\u09dc\u09dd\7\60\2\2\u09dd\u09e1\7")
        buf.write("\u012e\2\2\u09de\u09df\7b\2\2\u09df\u09e0\7\60\2\2\u09e0")
        buf.write("\u09e2\7\u012e\2\2\u09e1\u09de\3\2\2\2\u09e1\u09e2\3\2")
        buf.write("\2\2\u09e2\u09e4\3\2\2\2\u09e3\u09da\3\2\2\2\u09e3\u09e4")
        buf.write("\3\2\2\2\u09e4\u09ea\3\2\2\2\u09e5\u09e6\7<\2\2\u09e6")
        buf.write("\u09e7\7\u008e\2\2\u09e7\u09e8\7\u00fa\2\2\u09e8\u09e9")
        buf.write("\7\60\2\2\u09e9\u09eb\7\u012e\2\2\u09ea\u09e5\3\2\2\2")
        buf.write("\u09ea\u09eb\3\2\2\2\u09eb\u09f1\3\2\2\2\u09ec\u09ed\7")
        buf.write("\u00a1\2\2\u09ed\u09ee\7\u0090\2\2\u09ee\u09ef\7\u00fa")
        buf.write("\2\2\u09ef\u09f0\7\60\2\2\u09f0\u09f2\7\u012e\2\2\u09f1")
        buf.write("\u09ec\3\2\2\2\u09f1\u09f2\3\2\2\2\u09f2\u09f7\3\2\2\2")
        buf.write("\u09f3\u09f4\7\u0098\2\2\u09f4\u09f5\7\u00fa\2\2\u09f5")
        buf.write("\u09f6\7\60\2\2\u09f6\u09f8\7\u012e\2\2\u09f7\u09f3\3")
        buf.write("\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09fd\3\2\2\2\u09f9\u09fa")
        buf.write("\7\u00ac\2\2\u09fa\u09fb\7T\2\2\u09fb\u09fc\7(\2\2\u09fc")
        buf.write("\u09fe\7\u012e\2\2\u09fd\u09f9\3\2\2\2\u09fd\u09fe\3\2")
        buf.write("\2\2\u09fe\u0a00\3\2\2\2\u09ff\u09ce\3\2\2\2\u09ff\u09d7")
        buf.write("\3\2\2\2\u0a00\u00f5\3\2\2\2\u0a01\u0a06\5\u00f8}\2\u0a02")
        buf.write("\u0a03\7\4\2\2\u0a03\u0a05\5\u00f8}\2\u0a04\u0a02\3\2")
        buf.write("\2\2\u0a05\u0a08\3\2\2\2\u0a06\u0a04\3\2\2\2\u0a06\u0a07")
        buf.write("\3\2\2\2\u0a07\u00f7\3\2\2\2\u0a08\u0a06\3\2\2\2\u0a09")
        buf.write("\u0a0e\5\u014e\u00a8\2\u0a0a\u0a0b\7\3\2\2\u0a0b\u0a0d")
        buf.write("\5\u014e\u00a8\2\u0a0c\u0a0a\3\2\2\2\u0a0d\u0a10\3\2\2")
        buf.write("\2\u0a0e\u0a0c\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f\u00f9")
        buf.write("\3\2\2\2\u0a10\u0a0e\3\2\2\2\u0a11\u0a12\5\u014e\u00a8")
        buf.write("\2\u0a12\u0a13\7\3\2\2\u0a13\u0a15\3\2\2\2\u0a14\u0a11")
        buf.write("\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16")
        buf.write("\u0a17\5\u014e\u00a8\2\u0a17\u00fb\3\2\2\2\u0a18\u0a19")
        buf.write("\5\u014e\u00a8\2\u0a19\u0a1a\7\3\2\2\u0a1a\u0a1c\3\2\2")
        buf.write("\2\u0a1b\u0a18\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1d")
        buf.write("\3\2\2\2\u0a1d\u0a1e\5\u014e\u00a8\2\u0a1e\u00fd\3\2\2")
        buf.write("\2\u0a1f\u0a27\5\u0108\u0085\2\u0a20\u0a22\7(\2\2\u0a21")
        buf.write("\u0a20\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22\u0a25\3\2\2\2")
        buf.write("\u0a23\u0a26\5\u014e\u00a8\2\u0a24\u0a26\5\u00e0q\2\u0a25")
        buf.write("\u0a23\3\2\2\2\u0a25\u0a24\3\2\2\2\u0a26\u0a28\3\2\2\2")
        buf.write("\u0a27\u0a21\3\2\2\2\u0a27\u0a28\3\2\2\2\u0a28\u00ff\3")
        buf.write("\2\2\2\u0a29\u0a2e\5\u00fe\u0080\2\u0a2a\u0a2b\7\4\2\2")
        buf.write("\u0a2b\u0a2d\5\u00fe\u0080\2\u0a2c\u0a2a\3\2\2\2\u0a2d")
        buf.write("\u0a30\3\2\2\2\u0a2e\u0a2c\3\2\2\2\u0a2e\u0a2f\3\2\2\2")
        buf.write("\u0a2f\u0101\3\2\2\2\u0a30\u0a2e\3\2\2\2\u0a31\u0a32\7")
        buf.write("\5\2\2\u0a32\u0a37\5\u0104\u0083\2\u0a33\u0a34\7\4\2\2")
        buf.write("\u0a34\u0a36\5\u0104\u0083\2\u0a35\u0a33\3\2\2\2\u0a36")
        buf.write("\u0a39\3\2\2\2\u0a37\u0a35\3\2\2\2\u0a37\u0a38\3\2\2\2")
        buf.write("\u0a38\u0a3a\3\2\2\2\u0a39\u0a37\3\2\2\2\u0a3a\u0a3b\7")
        buf.write("\6\2\2\u0a3b\u0103\3\2\2\2\u0a3c\u0a4a\5\u014c\u00a7\2")
        buf.write("\u0a3d\u0a3e\5\u0152\u00aa\2\u0a3e\u0a3f\7\5\2\2\u0a3f")
        buf.write("\u0a44\5\u0106\u0084\2\u0a40\u0a41\7\4\2\2\u0a41\u0a43")
        buf.write("\5\u0106\u0084\2\u0a42\u0a40\3\2\2\2\u0a43\u0a46\3\2\2")
        buf.write("\2\u0a44\u0a42\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a47")
        buf.write("\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a47\u0a48\7\6\2\2\u0a48")
        buf.write("\u0a4a\3\2\2\2\u0a49\u0a3c\3\2\2\2\u0a49\u0a3d\3\2\2\2")
        buf.write("\u0a4a\u0105\3\2\2\2\u0a4b\u0a4e\5\u014c\u00a7\2\u0a4c")
        buf.write("\u0a4e\5\u0112\u008a\2\u0a4d\u0a4b\3\2\2\2\u0a4d\u0a4c")
        buf.write("\3\2\2\2\u0a4e\u0107\3\2\2\2\u0a4f\u0a50\5\u010a\u0086")
        buf.write("\2\u0a50\u0109\3\2\2\2\u0a51\u0a52\b\u0086\1\2\u0a52\u0a53")
        buf.write("\7\u00ab\2\2\u0a53\u0a5e\5\u010a\u0086\7\u0a54\u0a55\7")
        buf.write("e\2\2\u0a55\u0a56\7\5\2\2\u0a56\u0a57\5l\67\2\u0a57\u0a58")
        buf.write("\7\6\2\2\u0a58\u0a5e\3\2\2\2\u0a59\u0a5b\5\u010e\u0088")
        buf.write("\2\u0a5a\u0a5c\5\u010c\u0087\2\u0a5b\u0a5a\3\2\2\2\u0a5b")
        buf.write("\u0a5c\3\2\2\2\u0a5c\u0a5e\3\2\2\2\u0a5d\u0a51\3\2\2\2")
        buf.write("\u0a5d\u0a54\3\2\2\2\u0a5d\u0a59\3\2\2\2\u0a5e\u0a67\3")
        buf.write("\2\2\2\u0a5f\u0a60\f\4\2\2\u0a60\u0a61\7#\2\2\u0a61\u0a66")
        buf.write("\5\u010a\u0086\5\u0a62\u0a63\f\3\2\2\u0a63\u0a64\7\u00b3")
        buf.write("\2\2\u0a64\u0a66\5\u010a\u0086\4\u0a65\u0a5f\3\2\2\2\u0a65")
        buf.write("\u0a62\3\2\2\2\u0a66\u0a69\3\2\2\2\u0a67\u0a65\3\2\2\2")
        buf.write("\u0a67\u0a68\3\2\2\2\u0a68\u010b\3\2\2\2\u0a69\u0a67\3")
        buf.write("\2\2\2\u0a6a\u0a6c\7\u00ab\2\2\u0a6b\u0a6a\3\2\2\2\u0a6b")
        buf.write("\u0a6c\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6e\7,\2\2")
        buf.write("\u0a6e\u0a6f\5\u010e\u0088\2\u0a6f\u0a70\7#\2\2\u0a70")
        buf.write("\u0a71\5\u010e\u0088\2\u0a71\u0abd\3\2\2\2\u0a72\u0a74")
        buf.write("\7\u00ab\2\2\u0a73\u0a72\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74")
        buf.write("\u0a75\3\2\2\2\u0a75\u0a76\7\u0083\2\2\u0a76\u0a77\7\5")
        buf.write("\2\2\u0a77\u0a7c\5\u0108\u0085\2\u0a78\u0a79\7\4\2\2\u0a79")
        buf.write("\u0a7b\5\u0108\u0085\2\u0a7a\u0a78\3\2\2\2\u0a7b\u0a7e")
        buf.write("\3\2\2\2\u0a7c\u0a7a\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d")
        buf.write("\u0a7f\3\2\2\2\u0a7e\u0a7c\3\2\2\2\u0a7f\u0a80\7\6\2\2")
        buf.write("\u0a80\u0abd\3\2\2\2\u0a81\u0a83\7\u00ab\2\2\u0a82\u0a81")
        buf.write("\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84")
        buf.write("\u0a85\7\u0083\2\2\u0a85\u0a86\7\5\2\2\u0a86\u0a87\5l")
        buf.write("\67\2\u0a87\u0a88\7\6\2\2\u0a88\u0abd\3\2\2\2\u0a89\u0a8b")
        buf.write("\7\u00ab\2\2\u0a8a\u0a89\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b")
        buf.write("\u0a8c\3\2\2\2\u0a8c\u0a8d\7\u00d7\2\2\u0a8d\u0abd\5\u010e")
        buf.write("\u0088\2\u0a8e\u0a90\7\u00ab\2\2\u0a8f\u0a8e\3\2\2\2\u0a8f")
        buf.write("\u0a90\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92\7\u0096")
        buf.write("\2\2\u0a92\u0aa0\t\26\2\2\u0a93\u0a94\7\5\2\2\u0a94\u0aa1")
        buf.write("\7\6\2\2\u0a95\u0a96\7\5\2\2\u0a96\u0a9b\5\u0108\u0085")
        buf.write("\2\u0a97\u0a98\7\4\2\2\u0a98\u0a9a\5\u0108\u0085\2\u0a99")
        buf.write("\u0a97\3\2\2\2\u0a9a\u0a9d\3\2\2\2\u0a9b\u0a99\3\2\2\2")
        buf.write("\u0a9b\u0a9c\3\2\2\2\u0a9c\u0a9e\3\2\2\2\u0a9d\u0a9b\3")
        buf.write("\2\2\2\u0a9e\u0a9f\7\6\2\2\u0a9f\u0aa1\3\2\2\2\u0aa0\u0a93")
        buf.write("\3\2\2\2\u0aa0\u0a95\3\2\2\2\u0aa1\u0abd\3\2\2\2\u0aa2")
        buf.write("\u0aa4\7\u00ab\2\2\u0aa3\u0aa2\3\2\2\2\u0aa3\u0aa4\3\2")
        buf.write("\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aa6\7\u0096\2\2\u0aa6")
        buf.write("\u0aa9\5\u010e\u0088\2\u0aa7\u0aa8\7a\2\2\u0aa8\u0aaa")
        buf.write("\7\u012e\2\2\u0aa9\u0aa7\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa")
        buf.write("\u0abd\3\2\2\2\u0aab\u0aad\7\u008d\2\2\u0aac\u0aae\7\u00ab")
        buf.write("\2\2\u0aad\u0aac\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0aaf")
        buf.write("\3\2\2\2\u0aaf\u0abd\7\u00ac\2\2\u0ab0\u0ab2\7\u008d\2")
        buf.write("\2\u0ab1\u0ab3\7\u00ab\2\2\u0ab2\u0ab1\3\2\2\2\u0ab2\u0ab3")
        buf.write("\3\2\2\2\u0ab3\u0ab4\3\2\2\2\u0ab4\u0abd\t\27\2\2\u0ab5")
        buf.write("\u0ab7\7\u008d\2\2\u0ab6\u0ab8\7\u00ab\2\2\u0ab7\u0ab6")
        buf.write("\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9")
        buf.write("\u0aba\7\\\2\2\u0aba\u0abb\7v\2\2\u0abb\u0abd\5\u010e")
        buf.write("\u0088\2\u0abc\u0a6b\3\2\2\2\u0abc\u0a73\3\2\2\2\u0abc")
        buf.write("\u0a82\3\2\2\2\u0abc\u0a8a\3\2\2\2\u0abc\u0a8f\3\2\2\2")
        buf.write("\u0abc\u0aa3\3\2\2\2\u0abc\u0aab\3\2\2\2\u0abc\u0ab0\3")
        buf.write("\2\2\2\u0abc\u0ab5\3\2\2\2\u0abd\u010d\3\2\2\2\u0abe\u0abf")
        buf.write("\b\u0088\1\2\u0abf\u0ac3\5\u0110\u0089\2\u0ac0\u0ac1\t")
        buf.write("\30\2\2\u0ac1\u0ac3\5\u010e\u0088\t\u0ac2\u0abe\3\2\2")
        buf.write("\2\u0ac2\u0ac0\3\2\2\2\u0ac3\u0ad9\3\2\2\2\u0ac4\u0ac5")
        buf.write("\f\b\2\2\u0ac5\u0ac6\t\31\2\2\u0ac6\u0ad8\5\u010e\u0088")
        buf.write("\t\u0ac7\u0ac8\f\7\2\2\u0ac8\u0ac9\t\32\2\2\u0ac9\u0ad8")
        buf.write("\5\u010e\u0088\b\u0aca\u0acb\f\6\2\2\u0acb\u0acc\7\u012a")
        buf.write("\2\2\u0acc\u0ad8\5\u010e\u0088\7\u0acd\u0ace\f\5\2\2\u0ace")
        buf.write("\u0acf\7\u012d\2\2\u0acf\u0ad8\5\u010e\u0088\6\u0ad0\u0ad1")
        buf.write("\f\4\2\2\u0ad1\u0ad2\7\u012b\2\2\u0ad2\u0ad8\5\u010e\u0088")
        buf.write("\5\u0ad3\u0ad4\f\3\2\2\u0ad4\u0ad5\5\u0114\u008b\2\u0ad5")
        buf.write("\u0ad6\5\u010e\u0088\4\u0ad6\u0ad8\3\2\2\2\u0ad7\u0ac4")
        buf.write("\3\2\2\2\u0ad7\u0ac7\3\2\2\2\u0ad7\u0aca\3\2\2\2\u0ad7")
        buf.write("\u0acd\3\2\2\2\u0ad7\u0ad0\3\2\2\2\u0ad7\u0ad3\3\2\2\2")
        buf.write("\u0ad8\u0adb\3\2\2\2\u0ad9\u0ad7\3\2\2\2\u0ad9\u0ada\3")
        buf.write("\2\2\2\u0ada\u010f\3\2\2\2\u0adb\u0ad9\3\2\2\2\u0adc\u0add")
        buf.write("\b\u0089\1\2\u0add\u0b95\t\33\2\2\u0ade\u0ae0\7\63\2\2")
        buf.write("\u0adf\u0ae1\5\u013c\u009f\2\u0ae0\u0adf\3\2\2\2\u0ae1")
        buf.write("\u0ae2\3\2\2\2\u0ae2\u0ae0\3\2\2\2\u0ae2\u0ae3\3\2\2\2")
        buf.write("\u0ae3\u0ae6\3\2\2\2\u0ae4\u0ae5\7_\2\2\u0ae5\u0ae7\5")
        buf.write("\u0108\u0085\2\u0ae6\u0ae4\3\2\2\2\u0ae6\u0ae7\3\2\2\2")
        buf.write("\u0ae7\u0ae8\3\2\2\2\u0ae8\u0ae9\7`\2\2\u0ae9\u0b95\3")
        buf.write("\2\2\2\u0aea\u0aeb\7\63\2\2\u0aeb\u0aed\5\u0108\u0085")
        buf.write("\2\u0aec\u0aee\5\u013c\u009f\2\u0aed\u0aec\3\2\2\2\u0aee")
        buf.write("\u0aef\3\2\2\2\u0aef\u0aed\3\2\2\2\u0aef\u0af0\3\2\2\2")
        buf.write("\u0af0\u0af3\3\2\2\2\u0af1\u0af2\7_\2\2\u0af2\u0af4\5")
        buf.write("\u0108\u0085\2\u0af3\u0af1\3\2\2\2\u0af3\u0af4\3\2\2\2")
        buf.write("\u0af4\u0af5\3\2\2\2\u0af5\u0af6\7`\2\2\u0af6\u0b95\3")
        buf.write("\2\2\2\u0af7\u0af8\7\64\2\2\u0af8\u0af9\7\5\2\2\u0af9")
        buf.write("\u0afa\5\u0108\u0085\2\u0afa\u0afb\7(\2\2\u0afb\u0afc")
        buf.write("\5\u012e\u0098\2\u0afc\u0afd\7\6\2\2\u0afd\u0b95\3\2\2")
        buf.write("\2\u0afe\u0aff\7\u00f2\2\2\u0aff\u0b08\7\5\2\2\u0b00\u0b05")
        buf.write("\5\u00fe\u0080\2\u0b01\u0b02\7\4\2\2\u0b02\u0b04\5\u00fe")
        buf.write("\u0080\2\u0b03\u0b01\3\2\2\2\u0b04\u0b07\3\2\2\2\u0b05")
        buf.write("\u0b03\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b09\3\2\2\2")
        buf.write("\u0b07\u0b05\3\2\2\2\u0b08\u0b00\3\2\2\2\u0b08\u0b09\3")
        buf.write("\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a\u0b95\7\6\2\2\u0b0b\u0b0c")
        buf.write("\7p\2\2\u0b0c\u0b0d\7\5\2\2\u0b0d\u0b10\5\u0108\u0085")
        buf.write("\2\u0b0e\u0b0f\7\u0081\2\2\u0b0f\u0b11\7\u00ad\2\2\u0b10")
        buf.write("\u0b0e\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11\u0b12\3\2\2\2")
        buf.write("\u0b12\u0b13\7\6\2\2\u0b13\u0b95\3\2\2\2\u0b14\u0b15\7")
        buf.write("\u0091\2\2\u0b15\u0b16\7\5\2\2\u0b16\u0b19\5\u0108\u0085")
        buf.write("\2\u0b17\u0b18\7\u0081\2\2\u0b18\u0b1a\7\u00ad\2\2\u0b19")
        buf.write("\u0b17\3\2\2\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0b1b\3\2\2\2")
        buf.write("\u0b1b\u0b1c\7\6\2\2\u0b1c\u0b95\3\2\2\2\u0b1d\u0b1e\7")
        buf.write("\u00c2\2\2\u0b1e\u0b1f\7\5\2\2\u0b1f\u0b20\5\u010e\u0088")
        buf.write("\2\u0b20\u0b21\7\u0083\2\2\u0b21\u0b22\5\u010e\u0088\2")
        buf.write("\u0b22\u0b23\7\6\2\2\u0b23\u0b95\3\2\2\2\u0b24\u0b95\5")
        buf.write("\u0112\u008a\2\u0b25\u0b95\7\u0125\2\2\u0b26\u0b27\5\u014c")
        buf.write("\u00a7\2\u0b27\u0b28\7\3\2\2\u0b28\u0b29\7\u0125\2\2\u0b29")
        buf.write("\u0b95\3\2\2\2\u0b2a\u0b2b\7\5\2\2\u0b2b\u0b2e\5\u00fe")
        buf.write("\u0080\2\u0b2c\u0b2d\7\4\2\2\u0b2d\u0b2f\5\u00fe\u0080")
        buf.write("\2\u0b2e\u0b2c\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0b2e")
        buf.write("\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32")
        buf.write("\u0b33\7\6\2\2\u0b33\u0b95\3\2\2\2\u0b34\u0b35\7\5\2\2")
        buf.write("\u0b35\u0b36\5l\67\2\u0b36\u0b37\7\6\2\2\u0b37\u0b95\3")
        buf.write("\2\2\2\u0b38\u0b39\5\u014a\u00a6\2\u0b39\u0b45\7\5\2\2")
        buf.write("\u0b3a\u0b3c\5\u00d2j\2\u0b3b\u0b3a\3\2\2\2\u0b3b\u0b3c")
        buf.write("\3\2\2\2\u0b3c\u0b3d\3\2\2\2\u0b3d\u0b42\5\u0108\u0085")
        buf.write("\2\u0b3e\u0b3f\7\4\2\2\u0b3f\u0b41\5\u0108\u0085\2\u0b40")
        buf.write("\u0b3e\3\2\2\2\u0b41\u0b44\3\2\2\2\u0b42\u0b40\3\2\2\2")
        buf.write("\u0b42\u0b43\3\2\2\2\u0b43\u0b46\3\2\2\2\u0b44\u0b42\3")
        buf.write("\2\2\2\u0b45\u0b3b\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b47")
        buf.write("\3\2\2\2\u0b47\u0b4e\7\6\2\2\u0b48\u0b49\7n\2\2\u0b49")
        buf.write("\u0b4a\7\5\2\2\u0b4a\u0b4b\7\u0116\2\2\u0b4b\u0b4c\5\u010a")
        buf.write("\u0086\2\u0b4c\u0b4d\7\6\2\2\u0b4d\u0b4f\3\2\2\2\u0b4e")
        buf.write("\u0b48\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b52\3\2\2\2")
        buf.write("\u0b50\u0b51\7\u00b8\2\2\u0b51\u0b53\5\u0142\u00a2\2\u0b52")
        buf.write("\u0b50\3\2\2\2\u0b52\u0b53\3\2\2\2\u0b53\u0b95\3\2\2\2")
        buf.write("\u0b54\u0b55\5\u0152\u00aa\2\u0b55\u0b56\7\22\2\2\u0b56")
        buf.write("\u0b57\5\u0108\u0085\2\u0b57\u0b95\3\2\2\2\u0b58\u0b59")
        buf.write("\7\5\2\2\u0b59\u0b5c\5\u0152\u00aa\2\u0b5a\u0b5b\7\4\2")
        buf.write("\2\u0b5b\u0b5d\5\u0152\u00aa\2\u0b5c\u0b5a\3\2\2\2\u0b5d")
        buf.write("\u0b5e\3\2\2\2\u0b5e\u0b5c\3\2\2\2\u0b5e\u0b5f\3\2\2\2")
        buf.write("\u0b5f\u0b60\3\2\2\2\u0b60\u0b61\7\6\2\2\u0b61\u0b62\7")
        buf.write("\22\2\2\u0b62\u0b63\5\u0108\u0085\2\u0b63\u0b95\3\2\2")
        buf.write("\2\u0b64\u0b95\5\u0152\u00aa\2\u0b65\u0b66\7\5\2\2\u0b66")
        buf.write("\u0b67\5\u0108\u0085\2\u0b67\u0b68\7\6\2\2\u0b68\u0b95")
        buf.write("\3\2\2\2\u0b69\u0b6a\7j\2\2\u0b6a\u0b6b\7\5\2\2\u0b6b")
        buf.write("\u0b6c\5\u0152\u00aa\2\u0b6c\u0b6d\7v\2\2\u0b6d\u0b6e")
        buf.write("\5\u010e\u0088\2\u0b6e\u0b6f\7\6\2\2\u0b6f\u0b95\3\2\2")
        buf.write("\2\u0b70\u0b71\t\34\2\2\u0b71\u0b72\7\5\2\2\u0b72\u0b73")
        buf.write("\5\u010e\u0088\2\u0b73\u0b74\t\35\2\2\u0b74\u0b77\5\u010e")
        buf.write("\u0088\2\u0b75\u0b76\t\36\2\2\u0b76\u0b78\5\u010e\u0088")
        buf.write("\2\u0b77\u0b75\3\2\2\2\u0b77\u0b78\3\2\2\2\u0b78\u0b79")
        buf.write("\3\2\2\2\u0b79\u0b7a\7\6\2\2\u0b7a\u0b95\3\2\2\2\u0b7b")
        buf.write("\u0b7c\7\u0102\2\2\u0b7c\u0b7e\7\5\2\2\u0b7d\u0b7f\t\37")
        buf.write("\2\2\u0b7e\u0b7d\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b81")
        buf.write("\3\2\2\2\u0b80\u0b82\5\u010e\u0088\2\u0b81\u0b80\3\2\2")
        buf.write("\2\u0b81\u0b82\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83\u0b84")
        buf.write("\7v\2\2\u0b84\u0b85\5\u010e\u0088\2\u0b85\u0b86\7\6\2")
        buf.write("\2\u0b86\u0b95\3\2\2\2\u0b87\u0b88\7\u00ba\2\2\u0b88\u0b89")
        buf.write("\7\5\2\2\u0b89\u0b8a\5\u010e\u0088\2\u0b8a\u0b8b\7\u00c1")
        buf.write("\2\2\u0b8b\u0b8c\5\u010e\u0088\2\u0b8c\u0b8d\7v\2\2\u0b8d")
        buf.write("\u0b90\5\u010e\u0088\2\u0b8e\u0b8f\7r\2\2\u0b8f\u0b91")
        buf.write("\5\u010e\u0088\2\u0b90\u0b8e\3\2\2\2\u0b90\u0b91\3\2\2")
        buf.write("\2\u0b91\u0b92\3\2\2\2\u0b92\u0b93\7\6\2\2\u0b93\u0b95")
        buf.write("\3\2\2\2\u0b94\u0adc\3\2\2\2\u0b94\u0ade\3\2\2\2\u0b94")
        buf.write("\u0aea\3\2\2\2\u0b94\u0af7\3\2\2\2\u0b94\u0afe\3\2\2\2")
        buf.write("\u0b94\u0b0b\3\2\2\2\u0b94\u0b14\3\2\2\2\u0b94\u0b1d\3")
        buf.write("\2\2\2\u0b94\u0b24\3\2\2\2\u0b94\u0b25\3\2\2\2\u0b94\u0b26")
        buf.write("\3\2\2\2\u0b94\u0b2a\3\2\2\2\u0b94\u0b34\3\2\2\2\u0b94")
        buf.write("\u0b38\3\2\2\2\u0b94\u0b54\3\2\2\2\u0b94\u0b58\3\2\2\2")
        buf.write("\u0b94\u0b64\3\2\2\2\u0b94\u0b65\3\2\2\2\u0b94\u0b69\3")
        buf.write("\2\2\2\u0b94\u0b70\3\2\2\2\u0b94\u0b7b\3\2\2\2\u0b94\u0b87")
        buf.write("\3\2\2\2\u0b95\u0ba0\3\2\2\2\u0b96\u0b97\f\n\2\2\u0b97")
        buf.write("\u0b98\7\n\2\2\u0b98\u0b99\5\u010e\u0088\2\u0b99\u0b9a")
        buf.write("\7\13\2\2\u0b9a\u0b9f\3\2\2\2\u0b9b\u0b9c\f\b\2\2\u0b9c")
        buf.write("\u0b9d\7\3\2\2\u0b9d\u0b9f\5\u0152\u00aa\2\u0b9e\u0b96")
        buf.write("\3\2\2\2\u0b9e\u0b9b\3\2\2\2\u0b9f\u0ba2\3\2\2\2\u0ba0")
        buf.write("\u0b9e\3\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0111\3\2\2\2")
        buf.write("\u0ba2\u0ba0\3\2\2\2\u0ba3\u0bb0\7\u00ac\2\2\u0ba4\u0bb0")
        buf.write("\5\u011e\u0090\2\u0ba5\u0ba6\5\u0152\u00aa\2\u0ba6\u0ba7")
        buf.write("\7\u012e\2\2\u0ba7\u0bb0\3\2\2\2\u0ba8\u0bb0\5\u0158\u00ad")
        buf.write("\2\u0ba9\u0bb0\5\u011c\u008f\2\u0baa\u0bac\7\u012e\2\2")
        buf.write("\u0bab\u0baa\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bab\3")
        buf.write("\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0bb0\3\2\2\2\u0baf\u0ba3")
        buf.write("\3\2\2\2\u0baf\u0ba4\3\2\2\2\u0baf\u0ba5\3\2\2\2\u0baf")
        buf.write("\u0ba8\3\2\2\2\u0baf\u0ba9\3\2\2\2\u0baf\u0bab\3\2\2\2")
        buf.write("\u0bb0\u0113\3\2\2\2\u0bb1\u0bba\5\u0116\u008c\2\u0bb2")
        buf.write("\u0bba\7\u011d\2\2\u0bb3\u0bba\7\u011e\2\2\u0bb4\u0bba")
        buf.write("\7\u011f\2\2\u0bb5\u0bba\7\u0120\2\2\u0bb6\u0bba\7\u0121")
        buf.write("\2\2\u0bb7\u0bba\7\u0122\2\2\u0bb8\u0bba\7\u011c\2\2\u0bb9")
        buf.write("\u0bb1\3\2\2\2\u0bb9\u0bb2\3\2\2\2\u0bb9\u0bb3\3\2\2\2")
        buf.write("\u0bb9\u0bb4\3\2\2\2\u0bb9\u0bb5\3\2\2\2\u0bb9\u0bb6\3")
        buf.write("\2\2\2\u0bb9\u0bb7\3\2\2\2\u0bb9\u0bb8\3\2\2\2\u0bba\u0115")
        buf.write("\3\2\2\2\u0bbb\u0bbc\t \2\2\u0bbc\u0117\3\2\2\2\u0bbd")
        buf.write("\u0bbe\t!\2\2\u0bbe\u0119\3\2\2\2\u0bbf\u0bc0\t\"\2\2")
        buf.write("\u0bc0\u011b\3\2\2\2\u0bc1\u0bc2\t#\2\2\u0bc2\u011d\3")
        buf.write("\2\2\2\u0bc3\u0bc6\7\u008b\2\2\u0bc4\u0bc7\5\u0120\u0091")
        buf.write("\2\u0bc5\u0bc7\5\u0124\u0093\2\u0bc6\u0bc4\3\2\2\2\u0bc6")
        buf.write("\u0bc5\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u011f\3\2\2\2")
        buf.write("\u0bc8\u0bca\5\u0122\u0092\2\u0bc9\u0bcb\5\u0126\u0094")
        buf.write("\2\u0bca\u0bc9\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0121")
        buf.write("\3\2\2\2\u0bcc\u0bcd\5\u0128\u0095\2\u0bcd\u0bce\5\u012a")
        buf.write("\u0096\2\u0bce\u0bd0\3\2\2\2\u0bcf\u0bcc\3\2\2\2\u0bd0")
        buf.write("\u0bd1\3\2\2\2\u0bd1\u0bcf\3\2\2\2\u0bd1\u0bd2\3\2\2\2")
        buf.write("\u0bd2\u0123\3\2\2\2\u0bd3\u0bd6\5\u0126\u0094\2\u0bd4")
        buf.write("\u0bd7\5\u0122\u0092\2\u0bd5\u0bd7\5\u0126\u0094\2\u0bd6")
        buf.write("\u0bd4\3\2\2\2\u0bd6\u0bd5\3\2\2\2\u0bd6\u0bd7\3\2\2\2")
        buf.write("\u0bd7\u0125\3\2\2\2\u0bd8\u0bd9\5\u0128\u0095\2\u0bd9")
        buf.write("\u0bda\5\u012a\u0096\2\u0bda\u0bdb\7\u00fc\2\2\u0bdb\u0bdc")
        buf.write("\5\u012a\u0096\2\u0bdc\u0127\3\2\2\2\u0bdd\u0bdf\t$\2")
        buf.write("\2\u0bde\u0bdd\3\2\2\2\u0bde\u0bdf\3\2\2\2\u0bdf\u0be0")
        buf.write("\3\2\2\2\u0be0\u0be3\t\25\2\2\u0be1\u0be3\7\u012e\2\2")
        buf.write("\u0be2\u0bde\3\2\2\2\u0be2\u0be1\3\2\2\2\u0be3\u0129\3")
        buf.write("\2\2\2\u0be4\u0bec\7R\2\2\u0be5\u0bec\7\177\2\2\u0be6")
        buf.write("\u0bec\7\u00a4\2\2\u0be7\u0bec\7\u00a5\2\2\u0be8\u0bec")
        buf.write("\7\u00df\2\2\u0be9\u0bec\7\u0119\2\2\u0bea\u0bec\5\u0152")
        buf.write("\u00aa\2\u0beb\u0be4\3\2\2\2\u0beb\u0be5\3\2\2\2\u0beb")
        buf.write("\u0be6\3\2\2\2\u0beb\u0be7\3\2\2\2\u0beb\u0be8\3\2\2\2")
        buf.write("\u0beb\u0be9\3\2\2\2\u0beb\u0bea\3\2\2\2\u0bec\u012b\3")
        buf.write("\2\2\2\u0bed\u0bf1\7p\2\2\u0bee\u0bef\7\37\2\2\u0bef\u0bf1")
        buf.write("\5\u014e\u00a8\2\u0bf0\u0bed\3\2\2\2\u0bf0\u0bee\3\2\2")
        buf.write("\2\u0bf1\u012d\3\2\2\2\u0bf2\u0bf3\7\'\2\2\u0bf3\u0bf4")
        buf.write("\7\u011f\2\2\u0bf4\u0bf5\5\u012e\u0098\2\u0bf5\u0bf6\7")
        buf.write("\u0121\2\2\u0bf6\u0c15\3\2\2\2\u0bf7\u0bf8\7\u00a1\2\2")
        buf.write("\u0bf8\u0bf9\7\u011f\2\2\u0bf9\u0bfa\5\u012e\u0098\2\u0bfa")
        buf.write("\u0bfb\7\4\2\2\u0bfb\u0bfc\5\u012e\u0098\2\u0bfc\u0bfd")
        buf.write("\7\u0121\2\2\u0bfd\u0c15\3\2\2\2\u0bfe\u0c05\7\u00f2\2")
        buf.write("\2\u0bff\u0c01\7\u011f\2\2\u0c00\u0c02\5\u0138\u009d\2")
        buf.write("\u0c01\u0c00\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c03\3")
        buf.write("\2\2\2\u0c03\u0c06\7\u0121\2\2\u0c04\u0c06\7\u011d\2\2")
        buf.write("\u0c05\u0bff\3\2\2\2\u0c05\u0c04\3\2\2\2\u0c06\u0c15\3")
        buf.write("\2\2\2\u0c07\u0c12\5\u0152\u00aa\2\u0c08\u0c09\7\5\2\2")
        buf.write("\u0c09\u0c0e\7\u0132\2\2\u0c0a\u0c0b\7\4\2\2\u0c0b\u0c0d")
        buf.write("\7\u0132\2\2\u0c0c\u0c0a\3\2\2\2\u0c0d\u0c10\3\2\2\2\u0c0e")
        buf.write("\u0c0c\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u0c11\3\2\2\2")
        buf.write("\u0c10\u0c0e\3\2\2\2\u0c11\u0c13\7\6\2\2\u0c12\u0c08\3")
        buf.write("\2\2\2\u0c12\u0c13\3\2\2\2\u0c13\u0c15\3\2\2\2\u0c14\u0bf2")
        buf.write("\3\2\2\2\u0c14\u0bf7\3\2\2\2\u0c14\u0bfe\3\2\2\2\u0c14")
        buf.write("\u0c07\3\2\2\2\u0c15\u012f\3\2\2\2\u0c16\u0c1b\5\u0132")
        buf.write("\u009a\2\u0c17\u0c18\7\4\2\2\u0c18\u0c1a\5\u0132\u009a")
        buf.write("\2\u0c19\u0c17\3\2\2\2\u0c1a\u0c1d\3\2\2\2\u0c1b\u0c19")
        buf.write("\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0131\3\2\2\2\u0c1d")
        buf.write("\u0c1b\3\2\2\2\u0c1e\u0c1f\5\u00f8}\2\u0c1f\u0c22\5\u012e")
        buf.write("\u0098\2\u0c20\u0c21\7\u00ab\2\2\u0c21\u0c23\7\u00ac\2")
        buf.write("\2\u0c22\u0c20\3\2\2\2\u0c22\u0c23\3\2\2\2\u0c23\u0c25")
        buf.write("\3\2\2\2\u0c24\u0c26\5j\66\2\u0c25\u0c24\3\2\2\2\u0c25")
        buf.write("\u0c26\3\2\2\2\u0c26\u0c28\3\2\2\2\u0c27\u0c29\5\u012c")
        buf.write("\u0097\2\u0c28\u0c27\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29")
        buf.write("\u0133\3\2\2\2\u0c2a\u0c2f\5\u0136\u009c\2\u0c2b\u0c2c")
        buf.write("\7\4\2\2\u0c2c\u0c2e\5\u0136\u009c\2\u0c2d\u0c2b\3\2\2")
        buf.write("\2\u0c2e\u0c31\3\2\2\2\u0c2f\u0c2d\3\2\2\2\u0c2f\u0c30")
        buf.write("\3\2\2\2\u0c30\u0135\3\2\2\2\u0c31\u0c2f\3\2\2\2\u0c32")
        buf.write("\u0c33\5\u014e\u00a8\2\u0c33\u0c36\5\u012e\u0098\2\u0c34")
        buf.write("\u0c35\7\u00ab\2\2\u0c35\u0c37\7\u00ac\2\2\u0c36\u0c34")
        buf.write("\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37\u0c39\3\2\2\2\u0c38")
        buf.write("\u0c3a\5j\66\2\u0c39\u0c38\3\2\2\2\u0c39\u0c3a\3\2\2\2")
        buf.write("\u0c3a\u0137\3\2\2\2\u0c3b\u0c40\5\u013a\u009e\2\u0c3c")
        buf.write("\u0c3d\7\4\2\2\u0c3d\u0c3f\5\u013a\u009e\2\u0c3e\u0c3c")
        buf.write("\3\2\2\2\u0c3f\u0c42\3\2\2\2\u0c40\u0c3e\3\2\2\2\u0c40")
        buf.write("\u0c41\3\2\2\2\u0c41\u0139\3\2\2\2\u0c42\u0c40\3\2\2\2")
        buf.write("\u0c43\u0c44\5\u0152\u00aa\2\u0c44\u0c45\7\t\2\2\u0c45")
        buf.write("\u0c48\5\u012e\u0098\2\u0c46\u0c47\7\u00ab\2\2\u0c47\u0c49")
        buf.write("\7\u00ac\2\2\u0c48\u0c46\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49")
        buf.write("\u0c4b\3\2\2\2\u0c4a\u0c4c\5j\66\2\u0c4b\u0c4a\3\2\2\2")
        buf.write("\u0c4b\u0c4c\3\2\2\2\u0c4c\u013b\3\2\2\2\u0c4d\u0c4e\7")
        buf.write("\u0115\2\2\u0c4e\u0c4f\5\u0108\u0085\2\u0c4f\u0c50\7\u00fb")
        buf.write("\2\2\u0c50\u0c51\5\u0108\u0085\2\u0c51\u013d\3\2\2\2\u0c52")
        buf.write("\u0c53\7\u0117\2\2\u0c53\u0c58\5\u0140\u00a1\2\u0c54\u0c55")
        buf.write("\7\4\2\2\u0c55\u0c57\5\u0140\u00a1\2\u0c56\u0c54\3\2\2")
        buf.write("\2\u0c57\u0c5a\3\2\2\2\u0c58\u0c56\3\2\2\2\u0c58\u0c59")
        buf.write("\3\2\2\2\u0c59\u013f\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5b")
        buf.write("\u0c5c\5\u014e\u00a8\2\u0c5c\u0c5d\7(\2\2\u0c5d\u0c5e")
        buf.write("\5\u0142\u00a2\2\u0c5e\u0141\3\2\2\2\u0c5f\u0c8e\5\u014e")
        buf.write("\u00a8\2\u0c60\u0c61\7\5\2\2\u0c61\u0c62\5\u014e\u00a8")
        buf.write("\2\u0c62\u0c63\7\6\2\2\u0c63\u0c8e\3\2\2\2\u0c64\u0c87")
        buf.write("\7\5\2\2\u0c65\u0c66\78\2\2\u0c66\u0c67\7\60\2\2\u0c67")
        buf.write("\u0c6c\5\u0108\u0085\2\u0c68\u0c69\7\4\2\2\u0c69\u0c6b")
        buf.write("\5\u0108\u0085\2\u0c6a\u0c68\3\2\2\2\u0c6b\u0c6e\3\2\2")
        buf.write("\2\u0c6c\u0c6a\3\2\2\2\u0c6c\u0c6d\3\2\2\2\u0c6d\u0c88")
        buf.write("\3\2\2\2\u0c6e\u0c6c\3\2\2\2\u0c6f\u0c70\t%\2\2\u0c70")
        buf.write("\u0c71\7\60\2\2\u0c71\u0c76\5\u0108\u0085\2\u0c72\u0c73")
        buf.write("\7\4\2\2\u0c73\u0c75\5\u0108\u0085\2\u0c74\u0c72\3\2\2")
        buf.write("\2\u0c75\u0c78\3\2\2\2\u0c76\u0c74\3\2\2\2\u0c76\u0c77")
        buf.write("\3\2\2\2\u0c77\u0c7a\3\2\2\2\u0c78\u0c76\3\2\2\2\u0c79")
        buf.write("\u0c6f\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c85\3\2\2\2")
        buf.write("\u0c7b\u0c7c\t&\2\2\u0c7c\u0c7d\7\60\2\2\u0c7d\u0c82\5")
        buf.write("\u00a2R\2\u0c7e\u0c7f\7\4\2\2\u0c7f\u0c81\5\u00a2R\2\u0c80")
        buf.write("\u0c7e\3\2\2\2\u0c81\u0c84\3\2\2\2\u0c82\u0c80\3\2\2\2")
        buf.write("\u0c82\u0c83\3\2\2\2\u0c83\u0c86\3\2\2\2\u0c84\u0c82\3")
        buf.write("\2\2\2\u0c85\u0c7b\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c88")
        buf.write("\3\2\2\2\u0c87\u0c65\3\2\2\2\u0c87\u0c79\3\2\2\2\u0c88")
        buf.write("\u0c8a\3\2\2\2\u0c89\u0c8b\5\u0144\u00a3\2\u0c8a\u0c89")
        buf.write("\3\2\2\2\u0c8a\u0c8b\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c")
        buf.write("\u0c8e\7\6\2\2\u0c8d\u0c5f\3\2\2\2\u0c8d\u0c60\3\2\2\2")
        buf.write("\u0c8d\u0c64\3\2\2\2\u0c8e\u0143\3\2\2\2\u0c8f\u0c90\7")
        buf.write("\u00c9\2\2\u0c90\u0ca0\5\u0146\u00a4\2\u0c91\u0c92\7\u00dd")
        buf.write("\2\2\u0c92\u0ca0\5\u0146\u00a4\2\u0c93\u0c94\7\u00c9\2")
        buf.write("\2\u0c94\u0c95\7,\2\2\u0c95\u0c96\5\u0146\u00a4\2\u0c96")
        buf.write("\u0c97\7#\2\2\u0c97\u0c98\5\u0146\u00a4\2\u0c98\u0ca0")
        buf.write("\3\2\2\2\u0c99\u0c9a\7\u00dd\2\2\u0c9a\u0c9b\7,\2\2\u0c9b")
        buf.write("\u0c9c\5\u0146\u00a4\2\u0c9c\u0c9d\7#\2\2\u0c9d\u0c9e")
        buf.write("\5\u0146\u00a4\2\u0c9e\u0ca0\3\2\2\2\u0c9f\u0c8f\3\2\2")
        buf.write("\2\u0c9f\u0c91\3\2\2\2\u0c9f\u0c93\3\2\2\2\u0c9f\u0c99")
        buf.write("\3\2\2\2\u0ca0\u0145\3\2\2\2\u0ca1\u0ca2\7\u0107\2\2\u0ca2")
        buf.write("\u0ca9\t\'\2\2\u0ca3\u0ca4\7J\2\2\u0ca4\u0ca9\7\u00dc")
        buf.write("\2\2\u0ca5\u0ca6\5\u0108\u0085\2\u0ca6\u0ca7\t\'\2\2\u0ca7")
        buf.write("\u0ca9\3\2\2\2\u0ca8\u0ca1\3\2\2\2\u0ca8\u0ca3\3\2\2\2")
        buf.write("\u0ca8\u0ca5\3\2\2\2\u0ca9\u0147\3\2\2\2\u0caa\u0caf\5")
        buf.write("\u014c\u00a7\2\u0cab\u0cac\7\4\2\2\u0cac\u0cae\5\u014c")
        buf.write("\u00a7\2\u0cad\u0cab\3\2\2\2\u0cae\u0cb1\3\2\2\2\u0caf")
        buf.write("\u0cad\3\2\2\2\u0caf\u0cb0\3\2\2\2\u0cb0\u0149\3\2\2\2")
        buf.write("\u0cb1\u0caf\3\2\2\2\u0cb2\u0cb7\5\u014c\u00a7\2\u0cb3")
        buf.write("\u0cb7\7n\2\2\u0cb4\u0cb7\7\u0095\2\2\u0cb5\u0cb7\7\u00d6")
        buf.write("\2\2\u0cb6\u0cb2\3\2\2\2\u0cb6\u0cb3\3\2\2\2\u0cb6\u0cb4")
        buf.write("\3\2\2\2\u0cb6\u0cb5\3\2\2\2\u0cb7\u014b\3\2\2\2\u0cb8")
        buf.write("\u0cbd\5\u0152\u00aa\2\u0cb9\u0cba\7\3\2\2\u0cba\u0cbc")
        buf.write("\5\u0152\u00aa\2\u0cbb\u0cb9\3\2\2\2\u0cbc\u0cbf\3\2\2")
        buf.write("\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u014d")
        buf.write("\3\2\2\2\u0cbf\u0cbd\3\2\2\2\u0cc0\u0cc1\5\u0152\u00aa")
        buf.write("\2\u0cc1\u0cc2\5\u0150\u00a9\2\u0cc2\u014f\3\2\2\2\u0cc3")
        buf.write("\u0cc4\7\u0124\2\2\u0cc4\u0cc6\5\u0152\u00aa\2\u0cc5\u0cc3")
        buf.write("\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7\u0cc5\3\2\2\2\u0cc7")
        buf.write("\u0cc8\3\2\2\2\u0cc8\u0ccb\3\2\2\2\u0cc9\u0ccb\3\2\2\2")
        buf.write("\u0cca\u0cc5\3\2\2\2\u0cca\u0cc9\3\2\2\2\u0ccb\u0151\3")
        buf.write("\2\2\2\u0ccc\u0cd0\5\u0154\u00ab\2\u0ccd\u0cce\6\u00aa")
        buf.write("\23\2\u0cce\u0cd0\5\u015e\u00b0\2\u0ccf\u0ccc\3\2\2\2")
        buf.write("\u0ccf\u0ccd\3\2\2\2\u0cd0\u0153\3\2\2\2\u0cd1\u0cd8\7")
        buf.write("\u0137\2\2\u0cd2\u0cd8\5\u0156\u00ac\2\u0cd3\u0cd4\6\u00ab")
        buf.write("\24\2\u0cd4\u0cd8\5\u015c\u00af\2\u0cd5\u0cd6\6\u00ab")
        buf.write("\25\2\u0cd6\u0cd8\5\u0160\u00b1\2\u0cd7\u0cd1\3\2\2\2")
        buf.write("\u0cd7\u0cd2\3\2\2\2\u0cd7\u0cd3\3\2\2\2\u0cd7\u0cd5\3")
        buf.write("\2\2\2\u0cd8\u0155\3\2\2\2\u0cd9\u0cda\7\u0138\2\2\u0cda")
        buf.write("\u0157\3\2\2\2\u0cdb\u0cdd\6\u00ad\26\2\u0cdc\u0cde\7")
        buf.write("\u0124\2\2\u0cdd\u0cdc\3\2\2\2\u0cdd\u0cde\3\2\2\2\u0cde")
        buf.write("\u0cdf\3\2\2\2\u0cdf\u0d03\7\u0133\2\2\u0ce0\u0ce2\6\u00ad")
        buf.write("\27\2\u0ce1\u0ce3\7\u0124\2\2\u0ce2\u0ce1\3\2\2\2\u0ce2")
        buf.write("\u0ce3\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u0d03\7\u0134")
        buf.write("\2\2\u0ce5\u0ce7\6\u00ad\30\2\u0ce6\u0ce8\7\u0124\2\2")
        buf.write("\u0ce7\u0ce6\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8\u0ce9\3")
        buf.write("\2\2\2\u0ce9\u0d03\t(\2\2\u0cea\u0cec\7\u0124\2\2\u0ceb")
        buf.write("\u0cea\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0ced\3\2\2\2")
        buf.write("\u0ced\u0d03\7\u0132\2\2\u0cee\u0cf0\7\u0124\2\2\u0cef")
        buf.write("\u0cee\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0\u0cf1\3\2\2\2")
        buf.write("\u0cf1\u0d03\7\u012f\2\2\u0cf2\u0cf4\7\u0124\2\2\u0cf3")
        buf.write("\u0cf2\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5\3\2\2\2")
        buf.write("\u0cf5\u0d03\7\u0130\2\2\u0cf6\u0cf8\7\u0124\2\2\u0cf7")
        buf.write("\u0cf6\3\2\2\2\u0cf7\u0cf8\3\2\2\2\u0cf8\u0cf9\3\2\2\2")
        buf.write("\u0cf9\u0d03\7\u0131\2\2\u0cfa\u0cfc\7\u0124\2\2\u0cfb")
        buf.write("\u0cfa\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfd\3\2\2\2")
        buf.write("\u0cfd\u0d03\7\u0135\2\2\u0cfe\u0d00\7\u0124\2\2\u0cff")
        buf.write("\u0cfe\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00\u0d01\3\2\2\2")
        buf.write("\u0d01\u0d03\7\u0136\2\2\u0d02\u0cdb\3\2\2\2\u0d02\u0ce0")
        buf.write("\3\2\2\2\u0d02\u0ce5\3\2\2\2\u0d02\u0ceb\3\2\2\2\u0d02")
        buf.write("\u0cef\3\2\2\2\u0d02\u0cf3\3\2\2\2\u0d02\u0cf7\3\2\2\2")
        buf.write("\u0d02\u0cfb\3\2\2\2\u0d02\u0cff\3\2\2\2\u0d03\u0159\3")
        buf.write("\2\2\2\u0d04\u0d05\7\u0105\2\2\u0d05\u0d0c\5\u012e\u0098")
        buf.write("\2\u0d06\u0d0c\5j\66\2\u0d07\u0d0c\5\u012c\u0097\2\u0d08")
        buf.write("\u0d09\t)\2\2\u0d09\u0d0a\7\u00ab\2\2\u0d0a\u0d0c\7\u00ac")
        buf.write("\2\2\u0d0b\u0d04\3\2\2\2\u0d0b\u0d06\3\2\2\2\u0d0b\u0d07")
        buf.write("\3\2\2\2\u0d0b\u0d08\3\2\2\2\u0d0c\u015b\3\2\2\2\u0d0d")
        buf.write("\u0d0e\t*\2\2\u0d0e\u015d\3\2\2\2\u0d0f\u0d10\t+\2\2\u0d10")
        buf.write("\u015f\3\2\2\2\u0d11\u0d12\t,\2\2\u0d12\u0161\3\2\2\2")
        buf.write("\u01ae\u0165\u016d\u0170\u0174\u0177\u017d\u0186\u018c")
        buf.write("\u0192\u019c\u019f\u01a3\u01a8\u01ae\u01b2\u01b5\u01bc")
        buf.write("\u01be\u01c9\u01d1\u01d9\u01e1\u01e8\u01ee\u01f5\u01fd")
        buf.write("\u0202\u020b\u021e\u0225\u022d\u0237\u023e\u0246\u024e")
        buf.write("\u0255\u0261\u0269\u0282\u0287\u028f\u0297\u0299\u02ad")
        buf.write("\u02b1\u02b7\u02ba\u02bd\u02c4\u02c9\u02cc\u02d3\u02df")
        buf.write("\u02e8\u02ea\u02ee\u02f1\u02f8\u0303\u0305\u030d\u0312")
        buf.write("\u0315\u031b\u0326\u0366\u036f\u0373\u0379\u037d\u0382")
        buf.write("\u0388\u0394\u039c\u03a2\u03af\u03b4\u03c4\u03cb\u03cf")
        buf.write("\u03d5\u03e4\u03e8\u03ee\u03f4\u03f7\u03fa\u0400\u0404")
        buf.write("\u040c\u040e\u0417\u041a\u0423\u0428\u042e\u0435\u0438")
        buf.write("\u043e\u0449\u044c\u0450\u0455\u045a\u0461\u0464\u0467")
        buf.write("\u046e\u0473\u047c\u0484\u048a\u048d\u0490\u0496\u049a")
        buf.write("\u049e\u04a2\u04a4\u04ac\u04b4\u04ba\u04c0\u04c3\u04c7")
        buf.write("\u04ca\u04ce\u04e7\u04ea\u04ee\u04f4\u04f7\u04fa\u0500")
        buf.write("\u0508\u050d\u0513\u0519\u0525\u0528\u052f\u0536\u053e")
        buf.write("\u0541\u0549\u054d\u0554\u05c8\u05d0\u05d8\u05e1\u05eb")
        buf.write("\u05ef\u05f2\u05f8\u05fe\u060a\u0616\u061b\u0624\u062c")
        buf.write("\u0633\u0635\u063a\u063e\u0643\u0648\u064d\u0650\u0655")
        buf.write("\u0659\u065e\u0660\u0664\u066d\u0675\u067e\u0685\u068e")
        buf.write("\u0693\u0696\u06a9\u06ab\u06b4\u06bb\u06be\u06c5\u06c9")
        buf.write("\u06cf\u06d7\u06e2\u06ed\u06f4\u06fa\u0707\u070e\u0715")
        buf.write("\u0721\u0729\u072f\u0732\u073b\u073e\u0747\u074a\u0753")
        buf.write("\u0756\u075f\u0762\u0765\u076a\u076c\u0778\u077f\u0786")
        buf.write("\u0789\u078b\u0797\u079b\u079f\u07a5\u07a9\u07b1\u07b5")
        buf.write("\u07b8\u07bb\u07be\u07c2\u07c6\u07c9\u07cd\u07d2\u07d6")
        buf.write("\u07d9\u07dc\u07df\u07e1\u07ed\u07f0\u07f4\u07fe\u0802")
        buf.write("\u0804\u0807\u080b\u0811\u0815\u0820\u082a\u0836\u0845")
        buf.write("\u084a\u0851\u0861\u0866\u0873\u0878\u0880\u0886\u088a")
        buf.write("\u0893\u08a2\u08a7\u08b3\u08b8\u08c0\u08c3\u08c7\u08d5")
        buf.write("\u08e2\u08e7\u08eb\u08ee\u08f3\u08fc\u08ff\u0904\u090b")
        buf.write("\u090e\u0916\u091d\u0924\u0927\u092c\u092f\u0934\u0938")
        buf.write("\u093b\u093e\u0944\u0949\u094e\u0960\u0962\u0965\u0970")
        buf.write("\u0979\u0980\u0988\u098f\u0993\u099b\u09a3\u09a9\u09b1")
        buf.write("\u09bd\u09c0\u09c6\u09ca\u09cc\u09d5\u09e1\u09e3\u09ea")
        buf.write("\u09f1\u09f7\u09fd\u09ff\u0a06\u0a0e\u0a14\u0a1b\u0a21")
        buf.write("\u0a25\u0a27\u0a2e\u0a37\u0a44\u0a49\u0a4d\u0a5b\u0a5d")
        buf.write("\u0a65\u0a67\u0a6b\u0a73\u0a7c\u0a82\u0a8a\u0a8f\u0a9b")
        buf.write("\u0aa0\u0aa3\u0aa9\u0aad\u0ab2\u0ab7\u0abc\u0ac2\u0ad7")
        buf.write("\u0ad9\u0ae2\u0ae6\u0aef\u0af3\u0b05\u0b08\u0b10\u0b19")
        buf.write("\u0b30\u0b3b\u0b42\u0b45\u0b4e\u0b52\u0b5e\u0b77\u0b7e")
        buf.write("\u0b81\u0b90\u0b94\u0b9e\u0ba0\u0bad\u0baf\u0bb9\u0bc6")
        buf.write("\u0bca\u0bd1\u0bd6\u0bde\u0be2\u0beb\u0bf0\u0c01\u0c05")
        buf.write("\u0c0e\u0c12\u0c14\u0c1b\u0c22\u0c25\u0c28\u0c2f\u0c36")
        buf.write("\u0c39\u0c40\u0c48\u0c4b\u0c58\u0c6c\u0c76\u0c79\u0c82")
        buf.write("\u0c85\u0c87\u0c8a\u0c8d\u0c9f\u0ca8\u0caf\u0cb6\u0cbd")
        buf.write("\u0cc7\u0cca\u0ccf\u0cd7\u0cdd\u0ce2\u0ce7\u0ceb\u0cef")
        buf.write("\u0cf3\u0cf7\u0cfb\u0cff\u0d02\u0d0b")
        return buf.getvalue()


class fugue_sqlParser ( Parser ):

    grammarFileName = "fugue_sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "','", "'('", "')'", "'{'", "'}'", 
                     "':'", "'['", "']'", "'true'", "'false'", "'null'", 
                     "';'", "'/*+'", "'*/'", "'->'", "'HASH'", "'RAND'", 
                     "'EVEN'", "'PRESORT'", "'PERSIST'", "'BROADCAST'", 
                     "'PARAMS'", "'PROCESS'", "'OUTPUT'", "':='", "'??'", 
                     "'ADD'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", 
                     "'AND'", "'ANTI'", "'ANY'", "'ARCHIVE'", "'ARRAY'", 
                     "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", "'BETWEEN'", 
                     "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'CACHE'", 
                     "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHECK'", 
                     "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", 
                     "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
                     "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", 
                     "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'DATA'", "'DATABASE'", "<INVALID>", "'DAY'", "'DBPROPERTIES'", 
                     "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
                     "'DISTRIBUTE'", "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", 
                     "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", "'EXISTS'", 
                     "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", 
                     "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", 
                     "'FILEFORMAT'", "'FIRST'", "'FOLLOWING'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", "'FULL'", 
                     "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", 
                     "'GROUP'", "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", 
                     "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", 
                     "'INNER'", "'INPATH'", "'INPUTFORMAT'", "'INSERT'", 
                     "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITEMS'", 
                     "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", "'LAZY'", 
                     "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINES'", 
                     "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", 
                     "'LOCKS'", "'LOGICAL'", "'MACRO'", "'MAP'", "'MATCHED'", 
                     "'MERGE'", "'MINUTE'", "'MONTH'", "'MSCK'", "'NAMESPACE'", 
                     "'NAMESPACES'", "'NATURAL'", "'NO'", "<INVALID>", "'NULL'", 
                     "'NULLS'", "'OF'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", 
                     "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", 
                     "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
                     "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENT'", 
                     "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", 
                     "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", 
                     "'QUERY'", "'RANGE'", "'RECORDREADER'", "'RECORDWRITER'", 
                     "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
                     "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", "'RESTRICT'", 
                     "'REVOKE'", "'RIGHT'", "<INVALID>", "'ROLE'", "'ROLES'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEMA'", 
                     "'SECOND'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
                     "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", "'SORT'", 
                     "'SORTED'", "'START'", "'STATISTICS'", "'STORED'", 
                     "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TO'", "'TOUCH'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNSET'", "'UPDATE'", "'USE'", 
                     "'USER'", "'USING'", "'VALUES'", "'VIEW'", "'VIEWS'", 
                     "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'YEAR'", 
                     "'='", "'=='", "'<=>'", "'<>'", "'!='", "'<'", "<INVALID>", 
                     "'>'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'DIV'", "'~'", "'&'", "'|'", "'||'", "'^'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "HASH", "RAND", "EVEN", "PRESORT", "PERSIST", 
                      "BROADCAST", "PARAMS", "PROCESS", "OUTPUT", "COLONEQUAL", 
                      "CHECKPOINT", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", 
                      "AND", "ANTI", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", 
                      "AT", "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET", 
                      "BUCKETS", "BY", "CACHE", "CASCADE", "CASE", "CAST", 
                      "CHANGE", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", 
                      "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", 
                      "CONCATENATE", "CONSTRAINT", "COST", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATABASE", 
                      "DATABASES", "DAY", "DBPROPERTIES", "DEFINED", "DELETE", 
                      "DELIMITED", "DESC", "DESCRIBE", "DFS", "DIRECTORIES", 
                      "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DROP", "ELSE", 
                      "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", 
                      "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL", 
                      "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT", 
                      "FIRST", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", 
                      "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", 
                      "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", 
                      "HOUR", "IF", "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", 
                      "INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", 
                      "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", "KEYS", 
                      "LAST", "LATERAL", "LAZY", "LEADING", "LEFT", "LIKE", 
                      "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", 
                      "LOCK", "LOCKS", "LOGICAL", "MACRO", "MAP", "MATCHED", 
                      "MERGE", "MINUTE", "MONTH", "MSCK", "NAMESPACE", "NAMESPACES", 
                      "NATURAL", "NO", "NOT", "NULL", "NULLS", "OF", "ON", 
                      "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", "OUT", 
                      "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", "OVERLAY", 
                      "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", 
                      "PERCENTLIT", "PIVOT", "PLACING", "POSITION", "PRECEDING", 
                      "PRIMARY", "PRINCIPALS", "PROPERTIES", "PURGE", "QUERY", 
                      "RANGE", "RECORDREADER", "RECORDWRITER", "RECOVER", 
                      "REDUCE", "REFERENCES", "REFRESH", "RENAME", "REPAIR", 
                      "REPLACE", "RESET", "RESTRICT", "REVOKE", "RIGHT", 
                      "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", 
                      "ROWS", "SCHEMA", "SECOND", "SELECT", "SEMI", "SEPARATED", 
                      "SERDE", "SERDEPROPERTIES", "SESSION_USER", "SET", 
                      "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", "SORT", 
                      "SORTED", "START", "STATISTICS", "STORED", "STRATIFY", 
                      "STRUCT", "SUBSTR", "SUBSTRING", "TABLE", "TABLES", 
                      "TABLESAMPLE", "TBLPROPERTIES", "TEMPORARY", "TERMINATED", 
                      "THEN", "TO", "TOUCH", "TRAILING", "TRANSACTION", 
                      "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", "UNION", 
                      "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", "UPDATE", 
                      "USE", "USER", "USING", "VALUES", "VIEW", "VIEWS", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "YEAR", "EQUAL", 
                      "DOUBLEEQUAL", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_fugueLanguage = 0
    RULE_fugueSingleStatement = 1
    RULE_fugueSingleTask = 2
    RULE_fugueSingleOutputTaskExpr = 3
    RULE_fugueAssignmentExpr = 4
    RULE_fugueAssignment = 5
    RULE_fugueSelectTask = 6
    RULE_fugueTransformTask = 7
    RULE_fugueProcessTask = 8
    RULE_fugueCreateTask = 9
    RULE_fugueSingleOutputExtensionExpr = 10
    RULE_fuguePersistExpr = 11
    RULE_fugueBroadcastExpr = 12
    RULE_fuguePartitionExpr = 13
    RULE_fuguePartitionAlgoExpr = 14
    RULE_fuguePartitionNumExpr = 15
    RULE_fugueExtensionExpr = 16
    RULE_fugueDataFramesExpr = 17
    RULE_fugueDataFrameExpr = 18
    RULE_fugueSchemaExpr = 19
    RULE_fugueParamsExpr = 20
    RULE_fugueColsExpr = 21
    RULE_fugueColsSortExpr = 22
    RULE_fugueColSortExpr = 23
    RULE_fugueColumnIdentifier = 24
    RULE_fugueSchema = 25
    RULE_fugueSchemaPair = 26
    RULE_fugueSchemaKey = 27
    RULE_fugueSchemaType = 28
    RULE_fugueParamPairs = 29
    RULE_fugueParamPair = 30
    RULE_fugueJson = 31
    RULE_fugueJsonObj = 32
    RULE_fugueJsonPair = 33
    RULE_fugueJsonKey = 34
    RULE_fugueJsonArray = 35
    RULE_fugueJsonValue = 36
    RULE_fugueIdentifier = 37
    RULE_singleStatement = 38
    RULE_singleExpression = 39
    RULE_singleTableIdentifier = 40
    RULE_singleMultipartIdentifier = 41
    RULE_singleFunctionIdentifier = 42
    RULE_singleDataType = 43
    RULE_singleTableSchema = 44
    RULE_statement = 45
    RULE_unsupportedHiveNativeCommands = 46
    RULE_createTableHeader = 47
    RULE_replaceTableHeader = 48
    RULE_bucketSpec = 49
    RULE_skewSpec = 50
    RULE_locationSpec = 51
    RULE_commentSpec = 52
    RULE_query = 53
    RULE_insertInto = 54
    RULE_partitionSpecLocation = 55
    RULE_partitionSpec = 56
    RULE_partitionVal = 57
    RULE_namespace = 58
    RULE_describeFuncName = 59
    RULE_describeColName = 60
    RULE_ctes = 61
    RULE_namedQuery = 62
    RULE_tableProvider = 63
    RULE_createTableClauses = 64
    RULE_tablePropertyList = 65
    RULE_tableProperty = 66
    RULE_tablePropertyKey = 67
    RULE_tablePropertyValue = 68
    RULE_constantList = 69
    RULE_nestedConstantList = 70
    RULE_createFileFormat = 71
    RULE_fileFormat = 72
    RULE_storageHandler = 73
    RULE_resource = 74
    RULE_dmlStatementNoWith = 75
    RULE_queryOrganization = 76
    RULE_multiInsertQueryBody = 77
    RULE_queryTerm = 78
    RULE_queryPrimary = 79
    RULE_sortItem = 80
    RULE_fromStatement = 81
    RULE_fromStatementBody = 82
    RULE_querySpecification = 83
    RULE_transformClause = 84
    RULE_selectClause = 85
    RULE_setClause = 86
    RULE_matchedClause = 87
    RULE_notMatchedClause = 88
    RULE_matchedAction = 89
    RULE_notMatchedAction = 90
    RULE_assignmentList = 91
    RULE_assignment = 92
    RULE_whereClause = 93
    RULE_havingClause = 94
    RULE_hint = 95
    RULE_hintStatement = 96
    RULE_fromClause = 97
    RULE_aggregationClause = 98
    RULE_groupingSet = 99
    RULE_pivotClause = 100
    RULE_pivotColumn = 101
    RULE_pivotValue = 102
    RULE_lateralView = 103
    RULE_setQuantifier = 104
    RULE_relation = 105
    RULE_joinRelation = 106
    RULE_joinType = 107
    RULE_joinCriteria = 108
    RULE_sample = 109
    RULE_sampleMethod = 110
    RULE_identifierList = 111
    RULE_identifierSeq = 112
    RULE_orderedIdentifierList = 113
    RULE_orderedIdentifier = 114
    RULE_identifierCommentList = 115
    RULE_identifierComment = 116
    RULE_relationPrimary = 117
    RULE_inlineTable = 118
    RULE_functionTable = 119
    RULE_tableAlias = 120
    RULE_rowFormat = 121
    RULE_multipartIdentifierList = 122
    RULE_multipartIdentifier = 123
    RULE_tableIdentifier = 124
    RULE_functionIdentifier = 125
    RULE_namedExpression = 126
    RULE_namedExpressionSeq = 127
    RULE_transformList = 128
    RULE_transform = 129
    RULE_transformArgument = 130
    RULE_expression = 131
    RULE_booleanExpression = 132
    RULE_predicate = 133
    RULE_valueExpression = 134
    RULE_primaryExpression = 135
    RULE_constant = 136
    RULE_comparisonOperator = 137
    RULE_comparisonEqualOperator = 138
    RULE_arithmeticOperator = 139
    RULE_predicateOperator = 140
    RULE_booleanValue = 141
    RULE_interval = 142
    RULE_errorCapturingMultiUnitsInterval = 143
    RULE_multiUnitsInterval = 144
    RULE_errorCapturingUnitToUnitInterval = 145
    RULE_unitToUnitInterval = 146
    RULE_intervalValue = 147
    RULE_intervalUnit = 148
    RULE_colPosition = 149
    RULE_dataType = 150
    RULE_qualifiedColTypeWithPositionList = 151
    RULE_qualifiedColTypeWithPosition = 152
    RULE_colTypeList = 153
    RULE_colType = 154
    RULE_complexColTypeList = 155
    RULE_complexColType = 156
    RULE_whenClause = 157
    RULE_windowClause = 158
    RULE_namedWindow = 159
    RULE_windowSpec = 160
    RULE_windowFrame = 161
    RULE_frameBound = 162
    RULE_qualifiedNameList = 163
    RULE_functionName = 164
    RULE_qualifiedName = 165
    RULE_errorCapturingIdentifier = 166
    RULE_errorCapturingIdentifierExtra = 167
    RULE_identifier = 168
    RULE_strictIdentifier = 169
    RULE_quotedIdentifier = 170
    RULE_number = 171
    RULE_alterColumnAction = 172
    RULE_ansiNonReserved = 173
    RULE_strictNonReserved = 174
    RULE_nonReserved = 175

    ruleNames =  [ "fugueLanguage", "fugueSingleStatement", "fugueSingleTask", 
                   "fugueSingleOutputTaskExpr", "fugueAssignmentExpr", "fugueAssignment", 
                   "fugueSelectTask", "fugueTransformTask", "fugueProcessTask", 
                   "fugueCreateTask", "fugueSingleOutputExtensionExpr", 
                   "fuguePersistExpr", "fugueBroadcastExpr", "fuguePartitionExpr", 
                   "fuguePartitionAlgoExpr", "fuguePartitionNumExpr", "fugueExtensionExpr", 
                   "fugueDataFramesExpr", "fugueDataFrameExpr", "fugueSchemaExpr", 
                   "fugueParamsExpr", "fugueColsExpr", "fugueColsSortExpr", 
                   "fugueColSortExpr", "fugueColumnIdentifier", "fugueSchema", 
                   "fugueSchemaPair", "fugueSchemaKey", "fugueSchemaType", 
                   "fugueParamPairs", "fugueParamPair", "fugueJson", "fugueJsonObj", 
                   "fugueJsonPair", "fugueJsonKey", "fugueJsonArray", "fugueJsonValue", 
                   "fugueIdentifier", "singleStatement", "singleExpression", 
                   "singleTableIdentifier", "singleMultipartIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "singleTableSchema", 
                   "statement", "unsupportedHiveNativeCommands", "createTableHeader", 
                   "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
                   "commentSpec", "query", "insertInto", "partitionSpecLocation", 
                   "partitionSpec", "partitionVal", "namespace", "describeFuncName", 
                   "describeColName", "ctes", "namedQuery", "tableProvider", 
                   "createTableClauses", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "dmlStatementNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "fromStatement", "fromStatementBody", "querySpecification", 
                   "transformClause", "selectClause", "setClause", "matchedClause", 
                   "notMatchedClause", "matchedAction", "notMatchedAction", 
                   "assignmentList", "assignment", "whereClause", "havingClause", 
                   "hint", "hintStatement", "fromClause", "aggregationClause", 
                   "groupingSet", "pivotClause", "pivotColumn", "pivotValue", 
                   "lateralView", "setQuantifier", "relation", "joinRelation", 
                   "joinType", "joinCriteria", "sample", "sampleMethod", 
                   "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTable", "tableAlias", 
                   "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
                   "tableIdentifier", "functionIdentifier", "namedExpression", 
                   "namedExpressionSeq", "transformList", "transform", "transformArgument", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "comparisonEqualOperator", "arithmeticOperator", "predicateOperator", 
                   "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "intervalUnit", 
                   "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
                   "qualifiedColTypeWithPosition", "colTypeList", "colType", 
                   "complexColTypeList", "complexColType", "whenClause", 
                   "windowClause", "namedWindow", "windowSpec", "windowFrame", 
                   "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
                   "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "alterColumnAction", "ansiNonReserved", "strictNonReserved", 
                   "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    HASH=17
    RAND=18
    EVEN=19
    PRESORT=20
    PERSIST=21
    BROADCAST=22
    PARAMS=23
    PROCESS=24
    OUTPUT=25
    COLONEQUAL=26
    CHECKPOINT=27
    ADD=28
    AFTER=29
    ALL=30
    ALTER=31
    ANALYZE=32
    AND=33
    ANTI=34
    ANY=35
    ARCHIVE=36
    ARRAY=37
    AS=38
    ASC=39
    AT=40
    AUTHORIZATION=41
    BETWEEN=42
    BOTH=43
    BUCKET=44
    BUCKETS=45
    BY=46
    CACHE=47
    CASCADE=48
    CASE=49
    CAST=50
    CHANGE=51
    CHECK=52
    CLEAR=53
    CLUSTER=54
    CLUSTERED=55
    CODEGEN=56
    COLLATE=57
    COLLECTION=58
    COLUMN=59
    COLUMNS=60
    COMMENT=61
    COMMIT=62
    COMPACT=63
    COMPACTIONS=64
    COMPUTE=65
    CONCATENATE=66
    CONSTRAINT=67
    COST=68
    CREATE=69
    CROSS=70
    CUBE=71
    CURRENT=72
    CURRENT_DATE=73
    CURRENT_TIME=74
    CURRENT_TIMESTAMP=75
    CURRENT_USER=76
    DATA=77
    DATABASE=78
    DATABASES=79
    DAY=80
    DBPROPERTIES=81
    DEFINED=82
    DELETE=83
    DELIMITED=84
    DESC=85
    DESCRIBE=86
    DFS=87
    DIRECTORIES=88
    DIRECTORY=89
    DISTINCT=90
    DISTRIBUTE=91
    DROP=92
    ELSE=93
    END=94
    ESCAPE=95
    ESCAPED=96
    EXCEPT=97
    EXCHANGE=98
    EXISTS=99
    EXPLAIN=100
    EXPORT=101
    EXTENDED=102
    EXTERNAL=103
    EXTRACT=104
    FALSE=105
    FETCH=106
    FIELDS=107
    FILTER=108
    FILEFORMAT=109
    FIRST=110
    FOLLOWING=111
    FOR=112
    FOREIGN=113
    FORMAT=114
    FORMATTED=115
    FROM=116
    FULL=117
    FUNCTION=118
    FUNCTIONS=119
    GLOBAL=120
    GRANT=121
    GROUP=122
    GROUPING=123
    HAVING=124
    HOUR=125
    IF=126
    IGNORE=127
    IMPORT=128
    IN=129
    INDEX=130
    INDEXES=131
    INNER=132
    INPATH=133
    INPUTFORMAT=134
    INSERT=135
    INTERSECT=136
    INTERVAL=137
    INTO=138
    IS=139
    ITEMS=140
    JOIN=141
    KEYS=142
    LAST=143
    LATERAL=144
    LAZY=145
    LEADING=146
    LEFT=147
    LIKE=148
    LIMIT=149
    LINES=150
    LIST=151
    LOAD=152
    LOCAL=153
    LOCATION=154
    LOCK=155
    LOCKS=156
    LOGICAL=157
    MACRO=158
    MAP=159
    MATCHED=160
    MERGE=161
    MINUTE=162
    MONTH=163
    MSCK=164
    NAMESPACE=165
    NAMESPACES=166
    NATURAL=167
    NO=168
    NOT=169
    NULL=170
    NULLS=171
    OF=172
    ON=173
    ONLY=174
    OPTION=175
    OPTIONS=176
    OR=177
    ORDER=178
    OUT=179
    OUTER=180
    OUTPUTFORMAT=181
    OVER=182
    OVERLAPS=183
    OVERLAY=184
    OVERWRITE=185
    PARTITION=186
    PARTITIONED=187
    PARTITIONS=188
    PERCENTLIT=189
    PIVOT=190
    PLACING=191
    POSITION=192
    PRECEDING=193
    PRIMARY=194
    PRINCIPALS=195
    PROPERTIES=196
    PURGE=197
    QUERY=198
    RANGE=199
    RECORDREADER=200
    RECORDWRITER=201
    RECOVER=202
    REDUCE=203
    REFERENCES=204
    REFRESH=205
    RENAME=206
    REPAIR=207
    REPLACE=208
    RESET=209
    RESTRICT=210
    REVOKE=211
    RIGHT=212
    RLIKE=213
    ROLE=214
    ROLES=215
    ROLLBACK=216
    ROLLUP=217
    ROW=218
    ROWS=219
    SCHEMA=220
    SECOND=221
    SELECT=222
    SEMI=223
    SEPARATED=224
    SERDE=225
    SERDEPROPERTIES=226
    SESSION_USER=227
    SET=228
    SETMINUS=229
    SETS=230
    SHOW=231
    SKEWED=232
    SOME=233
    SORT=234
    SORTED=235
    START=236
    STATISTICS=237
    STORED=238
    STRATIFY=239
    STRUCT=240
    SUBSTR=241
    SUBSTRING=242
    TABLE=243
    TABLES=244
    TABLESAMPLE=245
    TBLPROPERTIES=246
    TEMPORARY=247
    TERMINATED=248
    THEN=249
    TO=250
    TOUCH=251
    TRAILING=252
    TRANSACTION=253
    TRANSACTIONS=254
    TRANSFORM=255
    TRIM=256
    TRUE=257
    TRUNCATE=258
    TYPE=259
    UNARCHIVE=260
    UNBOUNDED=261
    UNCACHE=262
    UNION=263
    UNIQUE=264
    UNKNOWN=265
    UNLOCK=266
    UNSET=267
    UPDATE=268
    USE=269
    USER=270
    USING=271
    VALUES=272
    VIEW=273
    VIEWS=274
    WHEN=275
    WHERE=276
    WINDOW=277
    WITH=278
    YEAR=279
    EQUAL=280
    DOUBLEEQUAL=281
    NSEQ=282
    NEQ=283
    NEQJ=284
    LT=285
    LTE=286
    GT=287
    GTE=288
    PLUS=289
    MINUS=290
    ASTERISK=291
    SLASH=292
    PERCENT=293
    DIV=294
    TILDE=295
    AMPERSAND=296
    PIPE=297
    CONCAT_PIPE=298
    HAT=299
    STRING=300
    BIGINT_LITERAL=301
    SMALLINT_LITERAL=302
    TINYINT_LITERAL=303
    INTEGER_VALUE=304
    EXPONENT_VALUE=305
    DECIMAL_VALUE=306
    DOUBLE_LITERAL=307
    BIGDECIMAL_LITERAL=308
    IDENTIFIER=309
    BACKQUOTED_IDENTIFIER=310
    SIMPLE_COMMENT=311
    BRACKETED_COMMENT=312
    WS=313
    UNRECOGNIZED=314

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    # When false, INTERSECT is given the greater precedence over the other set
    # operations (UNION, EXCEPT and MINUS) as per the SQL standard.
    legacy_setops_precedence_enbled = False

    # When false, a literal with an exponent would be converted into
    # double type rather than decimal type.
    legacy_exponent_literal_as_decimal_enabled = False

    # Verify whether current token is a valid decimal token (which contains dot).
    # Returns true if the character that follows the token is not a digit or letter or underscore.

    #  For example:
    # For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
    # For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
    # For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
    # For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is followed
    # by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
    # which is not a digit or letter or underscore.
    def isValidDecimal(self):
        return False  # TODO: remove this
        nextChar = self._input.LA(1);
        if (nextChar >= 'A' and nextChar <= 'Z') or (nextChar >= '0' and nextChar <= '9') or nextChar == '_':
            return False
        else:
            return True

    # When true, the behavior of keywords follows ANSI SQL standard.
    SQL_standard_keyword_behavior = False

    # This method will be called when we see '/ *' and try to match it as a bracketed comment.
    # If the next character is '+', it should be parsed as hint later, and we cannot match
    # it as a bracketed comment.

    # Returns true if the next character is '+'.
    def isHint(self):
        return False  # TODO: remove this
        nextChar = self._input.LA(1);
        if nextChar == '+':
            return True
        else:
            return False


    @property
    def allUpperCase(self):
        if "_all_upper_case" in self.__dict__:
            return self._all_upper_case
        return False

    @property
    def simpleAssign(self):
        if "_simple_assign" in self.__dict__:
            return self._simple_assign
        return False




    class FugueLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def fugueSingleTask(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSingleTaskContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLanguage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueLanguage" ):
                listener.enterFugueLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueLanguage" ):
                listener.exitFugueLanguage(self)




    def fugueLanguage(self):

        localctx = fugue_sqlParser.FugueLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fugueLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 352
                    self.fugueSingleTask()

                else:
                    raise NoViableAltException(self)
                self.state = 355 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 357
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSingleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSingleStatement" ):
                listener.enterFugueSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSingleStatement" ):
                listener.exitFugueSingleStatement(self)




    def fugueSingleStatement(self):

        localctx = fugue_sqlParser.FugueSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fugueSingleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.fugueSingleTask()
            self.state = 360
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentExprContext
            self.partition = None # FuguePartitionExprContext
            self.task = None # FugueSingleOutputTaskExprContext
            self.persist = None # FuguePersistExprContext
            self.broadcast = None # FugueBroadcastExprContext

        def fugueSingleOutputTaskExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputTaskExprContext,0)


        def fugueAssignmentExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentExprContext,0)


        def fuguePartitionExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionExprContext,0)


        def fuguePersistExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePersistExprContext,0)


        def fugueBroadcastExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastExprContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSingleTask" ):
                listener.enterFugueSingleTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSingleTask" ):
                listener.exitFugueSingleTask(self)




    def fugueSingleTask(self):

        localctx = fugue_sqlParser.FugueSingleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_fugueSingleTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 362
                localctx.assign = self.fugueAssignmentExpr()


            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0) or _la==fugue_sqlParser.PARTITION:
                self.state = 365
                localctx.partition = self.fuguePartitionExpr()


            self.state = 368
            localctx.task = self.fugueSingleOutputTaskExpr()
            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 369
                localctx.persist = self.fuguePersistExpr()


            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 372
                localctx.broadcast = self.fugueBroadcastExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputTaskExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSelectTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSelectTaskContext,0)


        def fugueTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTransformTaskContext,0)


        def fugueProcessTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueProcessTaskContext,0)


        def fugueCreateTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputTaskExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSingleOutputTaskExpr" ):
                listener.enterFugueSingleOutputTaskExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSingleOutputTaskExpr" ):
                listener.exitFugueSingleOutputTaskExpr(self)




    def fugueSingleOutputTaskExpr(self):

        localctx = fugue_sqlParser.FugueSingleOutputTaskExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fugueSingleOutputTaskExpr)
        try:
            self.state = 379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.T__2, fugue_sqlParser.FROM, fugue_sqlParser.MAP, fugue_sqlParser.REDUCE, fugue_sqlParser.SELECT, fugue_sqlParser.TABLE, fugue_sqlParser.VALUES, fugue_sqlParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 375
                self.fugueSelectTask()
                pass
            elif token in [fugue_sqlParser.TRANSFORM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 376
                self.fugueTransformTask()
                pass
            elif token in [fugue_sqlParser.PROCESS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 377
                self.fugueProcessTask()
                pass
            elif token in [fugue_sqlParser.CREATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 378
                self.fugueCreateTask()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.varname = None # FugueIdentifierContext
            self.assign = None # FugueAssignmentContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignmentExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueAssignmentExpr" ):
                listener.enterFugueAssignmentExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueAssignmentExpr" ):
                listener.exitFugueAssignmentExpr(self)




    def fugueAssignmentExpr(self):

        localctx = fugue_sqlParser.FugueAssignmentExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fugueAssignmentExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            localctx.varname = self.fugueIdentifier()
            self.state = 382
            localctx.assign = self.fugueAssignment()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONEQUAL(self):
            return self.getToken(fugue_sqlParser.COLONEQUAL, 0)

        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueAssignment" ):
                listener.enterFugueAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueAssignment" ):
                listener.exitFugueAssignment(self)




    def fugueAssignment(self):

        localctx = fugue_sqlParser.FugueAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_fugueAssignment)
        try:
            self.state = 388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 384
                self.match(fugue_sqlParser.COLONEQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 385
                self.match(fugue_sqlParser.CHECKPOINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 386
                if not self.simpleAssign:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.simpleAssign")
                self.state = 387
                self.match(fugue_sqlParser.EQUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSelectTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSelectTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSelectTask" ):
                listener.enterFugueSelectTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSelectTask" ):
                listener.exitFugueSelectTask(self)




    def fugueSelectTask(self):

        localctx = fugue_sqlParser.FugueSelectTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fugueSelectTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTransformTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesExprContext

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def fugueSingleOutputExtensionExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionExprContext,0)


        def fugueDataFramesExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesExprContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTransformTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueTransformTask" ):
                listener.enterFugueTransformTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueTransformTask" ):
                listener.exitFugueTransformTask(self)




    def fugueTransformTask(self):

        localctx = fugue_sqlParser.FugueTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_fugueTransformTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(fugue_sqlParser.TRANSFORM)
            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 393
                localctx.dfs = self.fugueDataFramesExpr()


            self.state = 396
            self.fugueSingleOutputExtensionExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueProcessTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesExprContext

        def PROCESS(self):
            return self.getToken(fugue_sqlParser.PROCESS, 0)

        def fugueSingleOutputExtensionExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionExprContext,0)


        def fugueDataFramesExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesExprContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueProcessTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueProcessTask" ):
                listener.enterFugueProcessTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueProcessTask" ):
                listener.exitFugueProcessTask(self)




    def fugueProcessTask(self):

        localctx = fugue_sqlParser.FugueProcessTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_fugueProcessTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(fugue_sqlParser.PROCESS)
            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 399
                localctx.dfs = self.fugueDataFramesExpr()


            self.state = 402
            self.fugueSingleOutputExtensionExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateTaskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def fugueSingleOutputExtensionExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionExprContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateTask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueCreateTask" ):
                listener.enterFugueCreateTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueCreateTask" ):
                listener.exitFugueCreateTask(self)




    def fugueCreateTask(self):

        localctx = fugue_sqlParser.FugueCreateTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_fugueCreateTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(fugue_sqlParser.CREATE)
            self.state = 405
            self.fugueSingleOutputExtensionExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ext = None # FugueExtensionExprContext
            self.params = None # FugueParamsExprContext
            self.schema = None # FugueSchemaExprContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtensionExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionExprContext,0)


        def fugueParamsExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsExprContext,0)


        def fugueSchemaExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaExprContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSingleOutputExtensionExpr" ):
                listener.enterFugueSingleOutputExtensionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSingleOutputExtensionExpr" ):
                listener.exitFugueSingleOutputExtensionExpr(self)




    def fugueSingleOutputExtensionExpr(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_fugueSingleOutputExtensionExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(fugue_sqlParser.USING)
            self.state = 408
            localctx.ext = self.fugueExtensionExpr()
            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 409
                localctx.params = self.fugueParamsExpr()


            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 412
                localctx.schema = self.fugueSchemaExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePersistExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IdentifierContext

        def PERSIST(self):
            return self.getToken(fugue_sqlParser.PERSIST, 0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePersistExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePersistExpr" ):
                listener.enterFuguePersistExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePersistExpr" ):
                listener.exitFuguePersistExpr(self)




    def fuguePersistExpr(self):

        localctx = fugue_sqlParser.FuguePersistExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fuguePersistExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(fugue_sqlParser.PERSIST)
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 416
                localctx.value = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueBroadcastExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BROADCAST(self):
            return self.getToken(fugue_sqlParser.BROADCAST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueBroadcastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueBroadcastExpr" ):
                listener.enterFugueBroadcastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueBroadcastExpr" ):
                listener.exitFugueBroadcastExpr(self)




    def fugueBroadcastExpr(self):

        localctx = fugue_sqlParser.FugueBroadcastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fugueBroadcastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(fugue_sqlParser.BROADCAST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algo = None # FuguePartitionAlgoExprContext
            self.num = None # FuguePartitionNumExprContext
            self.by = None # FugueColsExprContext
            self.presort = None # FugueColsSortExprContext

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def fuguePartitionNumExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumExprContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fuguePartitionAlgoExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionAlgoExprContext,0)


        def fugueColsExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsExprContext,0)


        def fugueColsSortExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortExprContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePartitionExpr" ):
                listener.enterFuguePartitionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePartitionExpr" ):
                listener.exitFuguePartitionExpr(self)




    def fuguePartitionExpr(self):

        localctx = fugue_sqlParser.FuguePartitionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fuguePartitionExpr)
        self._la = 0 # Token type
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0):
                    self.state = 421
                    localctx.algo = self.fuguePartitionAlgoExpr()


                self.state = 424
                self.match(fugue_sqlParser.PARTITION)
                self.state = 425
                localctx.num = self.fuguePartitionNumExpr()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.BY:
                    self.state = 426
                    self.match(fugue_sqlParser.BY)
                    self.state = 427
                    localctx.by = self.fugueColsExpr()


                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PRESORT:
                    self.state = 430
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 431
                    localctx.presort = self.fugueColsSortExpr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0):
                    self.state = 434
                    localctx.algo = self.fuguePartitionAlgoExpr()


                self.state = 437
                self.match(fugue_sqlParser.PARTITION)
                self.state = 438
                self.match(fugue_sqlParser.BY)
                self.state = 439
                localctx.by = self.fugueColsExpr()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PRESORT:
                    self.state = 440
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 441
                    localctx.presort = self.fugueColsSortExpr()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionAlgoExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(fugue_sqlParser.HASH, 0)

        def RAND(self):
            return self.getToken(fugue_sqlParser.RAND, 0)

        def EVEN(self):
            return self.getToken(fugue_sqlParser.EVEN, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionAlgoExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePartitionAlgoExpr" ):
                listener.enterFuguePartitionAlgoExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePartitionAlgoExpr" ):
                listener.exitFuguePartitionAlgoExpr(self)




    def fuguePartitionAlgoExpr(self):

        localctx = fugue_sqlParser.FuguePartitionAlgoExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fuguePartitionAlgoExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionNumExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNumExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuguePartitionNumExpr" ):
                listener.enterFuguePartitionNumExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuguePartitionNumExpr" ):
                listener.exitFuguePartitionNumExpr(self)




    def fuguePartitionNumExpr(self):

        localctx = fugue_sqlParser.FuguePartitionNumExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fuguePartitionNumExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(fugue_sqlParser.INTEGER_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueExtensionExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueExtensionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueExtensionExpr" ):
                listener.enterFugueExtensionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueExtensionExpr" ):
                listener.exitFugueExtensionExpr(self)




    def fugueExtensionExpr(self):

        localctx = fugue_sqlParser.FugueExtensionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fugueExtensionExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.fugueIdentifier()
            self.state = 455
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 451
                    self.match(fugue_sqlParser.T__0)
                    self.state = 452
                    self.fugueIdentifier() 
                self.state = 457
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramesExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueDataFrameExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFrameExprContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameExprContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFramesExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueDataFramesExpr" ):
                listener.enterFugueDataFramesExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueDataFramesExpr" ):
                listener.exitFugueDataFramesExpr(self)




    def fugueDataFramesExpr(self):

        localctx = fugue_sqlParser.FugueDataFramesExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fugueDataFramesExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.fugueDataFrameExpr()
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 459
                self.match(fugue_sqlParser.T__1)
                self.state = 460
                self.fugueDataFrameExpr()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueSingleOutputTaskExpr(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputTaskExprContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrameExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueDataFrameExpr" ):
                listener.enterFugueDataFrameExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueDataFrameExpr" ):
                listener.exitFugueDataFrameExpr(self)




    def fugueDataFrameExpr(self):

        localctx = fugue_sqlParser.FugueDataFrameExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fugueDataFrameExpr)
        try:
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.fugueIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.match(fugue_sqlParser.T__2)
                self.state = 468
                self.fugueSingleOutputTaskExpr()
                self.state = 469
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaExpr" ):
                listener.enterFugueSchemaExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaExpr" ):
                listener.exitFugueSchemaExpr(self)




    def fugueSchemaExpr(self):

        localctx = fugue_sqlParser.FugueSchemaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fugueSchemaExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(fugue_sqlParser.SCHEMA)
            self.state = 474
            self.fugueSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueParamsExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)

        def fugueParamPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamPairsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueParamsExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueParamsExpr" ):
                listener.enterFugueParamsExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueParamsExpr" ):
                listener.exitFugueParamsExpr(self)




    def fugueParamsExpr(self):

        localctx = fugue_sqlParser.FugueParamsExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fugueParamsExpr)
        self._la = 0 # Token type
        try:
            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.match(fugue_sqlParser.PARAMS)
                self.state = 477
                self.fugueParamPairs()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARAMS:
                    self.state = 478
                    self.match(fugue_sqlParser.PARAMS)


                self.state = 481
                self.match(fugue_sqlParser.T__4)
                self.state = 482
                self.fugueParamPairs()
                self.state = 483
                self.match(fugue_sqlParser.T__5)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARAMS:
                    self.state = 485
                    self.match(fugue_sqlParser.PARAMS)


                self.state = 488
                self.match(fugue_sqlParser.T__2)
                self.state = 489
                self.fugueParamPairs()
                self.state = 490
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColumnIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColsExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueColsExpr" ):
                listener.enterFugueColsExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueColsExpr" ):
                listener.exitFugueColsExpr(self)




    def fugueColsExpr(self):

        localctx = fugue_sqlParser.FugueColsExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_fugueColsExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.fugueColumnIdentifier()
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 495
                self.match(fugue_sqlParser.T__1)
                self.state = 496
                self.fugueColumnIdentifier()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsSortExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColSortExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColSortExprContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColSortExprContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColsSortExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueColsSortExpr" ):
                listener.enterFugueColsSortExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueColsSortExpr" ):
                listener.exitFugueColsSortExpr(self)




    def fugueColsSortExpr(self):

        localctx = fugue_sqlParser.FugueColsSortExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fugueColsSortExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.fugueColSortExpr()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 503
                self.match(fugue_sqlParser.T__1)
                self.state = 504
                self.fugueColSortExpr()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColSortExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColSortExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueColSortExpr" ):
                listener.enterFugueColSortExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueColSortExpr" ):
                listener.exitFugueColSortExpr(self)




    def fugueColSortExpr(self):

        localctx = fugue_sqlParser.FugueColSortExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fugueColSortExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.fugueColumnIdentifier()
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC:
                self.state = 511
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColumnIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColumnIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueColumnIdentifier" ):
                listener.enterFugueColumnIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueColumnIdentifier" ):
                listener.exitFugueColumnIdentifier(self)




    def fugueColumnIdentifier(self):

        localctx = fugue_sqlParser.FugueColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fugueColumnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchema" ):
                listener.enterFugueSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchema" ):
                listener.exitFugueSchema(self)




    def fugueSchema(self):

        localctx = fugue_sqlParser.FugueSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fugueSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.fugueSchemaPair()
            self.state = 521
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 517
                    self.match(fugue_sqlParser.T__1)
                    self.state = 518
                    self.fugueSchemaPair() 
                self.state = 523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,0)


        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaPair" ):
                listener.enterFugueSchemaPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaPair" ):
                listener.exitFugueSchemaPair(self)




    def fugueSchemaPair(self):

        localctx = fugue_sqlParser.FugueSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fugueSchemaPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.fugueSchemaKey()
            self.state = 525
            self.match(fugue_sqlParser.T__6)
            self.state = 526
            self.fugueSchemaType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaKey" ):
                listener.enterFugueSchemaKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaKey" ):
                listener.exitFugueSchemaKey(self)




    def fugueSchemaKey(self):

        localctx = fugue_sqlParser.FugueSchemaKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fugueSchemaKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueSchemaType" ):
                listener.enterFugueSchemaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueSchemaType" ):
                listener.exitFugueSchemaType(self)




    def fugueSchemaType(self):

        localctx = fugue_sqlParser.FugueSchemaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fugueSchemaType)
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.fugueIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 532
                self.match(fugue_sqlParser.T__7)
                self.state = 533
                self.fugueSchemaType()
                self.state = 534
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 536
                self.match(fugue_sqlParser.T__4)
                self.state = 537
                self.fugueSchema()
                self.state = 538
                self.match(fugue_sqlParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueParamPairsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueParamPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueParamPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueParamPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueParamPairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueParamPairs" ):
                listener.enterFugueParamPairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueParamPairs" ):
                listener.exitFugueParamPairs(self)




    def fugueParamPairs(self):

        localctx = fugue_sqlParser.FugueParamPairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fugueParamPairs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.fugueParamPair()
            self.state = 547
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 543
                    self.match(fugue_sqlParser.T__1)
                    self.state = 544
                    self.fugueParamPair() 
                self.state = 549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueParamPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPair(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairContext,0)


        def fugueJsonKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonKeyContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueParamPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueParamPair" ):
                listener.enterFugueParamPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueParamPair" ):
                listener.exitFugueParamPair(self)




    def fugueParamPair(self):

        localctx = fugue_sqlParser.FugueParamPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fugueParamPair)
        try:
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 550
                self.fugueJsonPair()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                self.fugueJsonKey()
                self.state = 552
                self.match(fugue_sqlParser.EQUAL)
                self.state = 553
                self.fugueJsonValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJson

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJson" ):
                listener.enterFugueJson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJson" ):
                listener.exitFugueJson(self)




    def fugueJson(self):

        localctx = fugue_sqlParser.FugueJsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fugueJson)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonObjContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonObj" ):
                listener.enterFugueJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonObj" ):
                listener.exitFugueJsonObj(self)




    def fugueJsonObj(self):

        localctx = fugue_sqlParser.FugueJsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fugueJsonObj)
        self._la = 0 # Token type
        try:
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 559
                self.match(fugue_sqlParser.T__4)
                self.state = 560
                self.fugueJsonPair()
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 561
                    self.match(fugue_sqlParser.T__1)
                    self.state = 562
                    self.fugueJsonPair()
                    self.state = 567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 568
                self.match(fugue_sqlParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.match(fugue_sqlParser.T__4)
                self.state = 571
                self.match(fugue_sqlParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonKeyContext,0)


        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonPair" ):
                listener.enterFugueJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonPair" ):
                listener.exitFugueJsonPair(self)




    def fugueJsonPair(self):

        localctx = fugue_sqlParser.FugueJsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fugueJsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.fugueJsonKey()
            self.state = 575
            self.match(fugue_sqlParser.T__6)
            self.state = 576
            self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonKey" ):
                listener.enterFugueJsonKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonKey" ):
                listener.exitFugueJsonKey(self)




    def fugueJsonKey(self):

        localctx = fugue_sqlParser.FugueJsonKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fugueJsonKey)
        try:
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self.fugueIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.match(fugue_sqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonArrayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonArray" ):
                listener.enterFugueJsonArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonArray" ):
                listener.exitFugueJsonArray(self)




    def fugueJsonArray(self):

        localctx = fugue_sqlParser.FugueJsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fugueJsonArray)
        self._la = 0 # Token type
        try:
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.match(fugue_sqlParser.T__7)
                self.state = 583
                self.fugueJsonValue()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 584
                    self.match(fugue_sqlParser.T__1)
                    self.state = 585
                    self.fugueJsonValue()
                    self.state = 590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 591
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.match(fugue_sqlParser.T__7)
                self.state = 594
                self.match(fugue_sqlParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)


        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueJsonValue" ):
                listener.enterFugueJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueJsonValue" ):
                listener.exitFugueJsonValue(self)




    def fugueJsonValue(self):

        localctx = fugue_sqlParser.FugueJsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_fugueJsonValue)
        try:
            self.state = 607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 599
                self.fugueJsonObj()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 600
                self.fugueJsonArray()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 601
                self.match(fugue_sqlParser.T__9)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 602
                self.match(fugue_sqlParser.TRUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 603
                self.match(fugue_sqlParser.T__10)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 604
                self.match(fugue_sqlParser.FALSE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 605
                self.match(fugue_sqlParser.T__11)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 606
                self.match(fugue_sqlParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFugueIdentifier" ):
                listener.enterFugueIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFugueIdentifier" ):
                listener.exitFugueIdentifier(self)




    def fugueIdentifier(self):

        localctx = fugue_sqlParser.FugueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fugueIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = fugue_sqlParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.statement()
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__12:
                self.state = 612
                self.match(fugue_sqlParser.T__12)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 618
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)




    def singleExpression(self):

        localctx = fugue_sqlParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.namedExpression()
            self.state = 621
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)




    def singleTableIdentifier(self):

        localctx = fugue_sqlParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.tableIdentifier()
            self.state = 624
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleMultipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleMultipartIdentifier" ):
                listener.enterSingleMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleMultipartIdentifier" ):
                listener.exitSingleMultipartIdentifier(self)




    def singleMultipartIdentifier(self):

        localctx = fugue_sqlParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.multipartIdentifier()
            self.state = 627
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)




    def singleFunctionIdentifier(self):

        localctx = fugue_sqlParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.functionIdentifier()
            self.state = 630
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)




    def singleDataType(self):

        localctx = fugue_sqlParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.dataType()
            self.state = 633
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableSchema" ):
                listener.enterSingleTableSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableSchema" ):
                listener.exitSingleTableSchema(self)




    def singleTableSchema(self):

        localctx = fugue_sqlParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.colTypeList()
            self.state = 636
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropNamespace" ):
                listener.enterDropNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropNamespace" ):
                listener.exitDropNamespace(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)
        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentNamespace" ):
                listener.enterShowCurrentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentNamespace" ):
                listener.exitShowCurrentNamespace(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)
        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowNamespaces" ):
                listener.enterShowNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowNamespaces" ):
                listener.exitShowNamespaces(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.FROM)
            else:
                return self.getToken(fugue_sqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.IN)
            else:
                return self.getToken(fugue_sqlParser.IN, i)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.ReplaceTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTable" ):
                listener.enterReplaceTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTable" ):
                listener.exitReplaceTable(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecLocationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceLocation" ):
                listener.enterSetNamespaceLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceLocation" ):
                listener.exitSetNamespaceLocation(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceProperties" ):
                listener.enterSetNamespaceProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceProperties" ):
                listener.exitSetNamespaceProperties(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.partitionColumns = None # ColTypeListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SkewSpecContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateHiveTable" ):
                listener.enterCreateHiveTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateHiveTable" ):
                listener.exitCreateHiveTable(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ResourceContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ResourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTable" ):
                listener.enterShowTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTable" ):
                listener.exitShowTable(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveReplaceColumns" ):
                listener.enterHiveReplaceColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveReplaceColumns" ):
                listener.exitHiveReplaceColumns(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentNamespace" ):
                listener.enterCommentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentNamespace" ):
                listener.exitCommentNamespace(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(fugue_sqlParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeRelation" ):
                listener.enterDescribeRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeRelation" ):
                listener.exitDescribeRelation(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)
        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)
        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableColumn" ):
                listener.enterRenameTableColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableColumn" ):
                listener.exitRenameTableColumn(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,0)

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveChangeColumn" ):
                listener.enterHiveChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveChangeColumn" ):
                listener.exitHiveChangeColumn(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeQuery" ):
                listener.enterDescribeQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeQuery" ):
                listener.exitDescribeQuery(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ON)
            else:
                return self.getToken(fugue_sqlParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeNamespace" ):
                listener.enterDescribeNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeNamespace" ):
                listener.exitDescribeNamespace(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ALTER)
            else:
                return self.getToken(fugue_sqlParser.ALTER, i)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.AlterColumnActionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableAlterColumn" ):
                listener.enterAlterTableAlterColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableAlterColumn" ):
                listener.exitAlterTableAlterColumn(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def namespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.WITH)
            else:
                return self.getToken(fugue_sqlParser.WITH, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.DBPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.PROPERTIES, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateNamespace" ):
                listener.enterCreateNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateNamespace" ):
                listener.exitCreateNamespace(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableColumns" ):
                listener.enterDropTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableColumns" ):
                listener.exitDropTableColumns(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowViews" ):
                listener.enterShowViews(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowViews" ):
                listener.exitShowViews(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)



    def statement(self):

        localctx = fugue_sqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 638
                self.query()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WITH:
                    self.state = 639
                    self.ctes()


                self.state = 642
                self.dmlStatementNoWith()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 643
                self.match(fugue_sqlParser.USE)
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 644
                    self.match(fugue_sqlParser.NAMESPACE)


                self.state = 647
                self.multipartIdentifier()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 648
                self.match(fugue_sqlParser.CREATE)
                self.state = 649
                self.namespace()
                self.state = 653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 650
                    self.match(fugue_sqlParser.IF)
                    self.state = 651
                    self.match(fugue_sqlParser.NOT)
                    self.state = 652
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 655
                self.multipartIdentifier()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.LOCATION or _la==fugue_sqlParser.WITH:
                    self.state = 661
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 656
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 657
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.WITH]:
                        self.state = 658
                        self.match(fugue_sqlParser.WITH)
                        self.state = 659
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.DBPROPERTIES or _la==fugue_sqlParser.PROPERTIES):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 660
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 666
                self.match(fugue_sqlParser.ALTER)
                self.state = 667
                self.namespace()
                self.state = 668
                self.multipartIdentifier()
                self.state = 669
                self.match(fugue_sqlParser.SET)
                self.state = 670
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DBPROPERTIES or _la==fugue_sqlParser.PROPERTIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 671
                self.tablePropertyList()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 673
                self.match(fugue_sqlParser.ALTER)
                self.state = 674
                self.namespace()
                self.state = 675
                self.multipartIdentifier()
                self.state = 676
                self.match(fugue_sqlParser.SET)
                self.state = 677
                self.locationSpec()
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 679
                self.match(fugue_sqlParser.DROP)
                self.state = 680
                self.namespace()
                self.state = 683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 681
                    self.match(fugue_sqlParser.IF)
                    self.state = 682
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 685
                self.multipartIdentifier()
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.CASCADE or _la==fugue_sqlParser.RESTRICT:
                    self.state = 686
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.CASCADE or _la==fugue_sqlParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 689
                self.match(fugue_sqlParser.SHOW)
                self.state = 690
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DATABASES or _la==fugue_sqlParser.NAMESPACES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 691
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 692
                    self.multipartIdentifier()


                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 695
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 698
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 701
                self.createTableHeader()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 702
                    self.match(fugue_sqlParser.T__2)
                    self.state = 703
                    self.colTypeList()
                    self.state = 704
                    self.match(fugue_sqlParser.T__3)


                self.state = 708
                self.tableProvider()
                self.state = 709
                self.createTableClauses()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2 or _la==fugue_sqlParser.AS or _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.MAP or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (fugue_sqlParser.REDUCE - 203)) | (1 << (fugue_sqlParser.SELECT - 203)) | (1 << (fugue_sqlParser.TABLE - 203)))) != 0) or _la==fugue_sqlParser.VALUES or _la==fugue_sqlParser.WITH:
                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 710
                        self.match(fugue_sqlParser.AS)


                    self.state = 713
                    self.query()


                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 716
                self.createTableHeader()
                self.state = 721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 717
                    self.match(fugue_sqlParser.T__2)
                    self.state = 718
                    localctx.columns = self.colTypeList()
                    self.state = 719
                    self.match(fugue_sqlParser.T__3)


                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.CLUSTERED or _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.LOCATION or _la==fugue_sqlParser.PARTITIONED or ((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & ((1 << (fugue_sqlParser.ROW - 218)) | (1 << (fugue_sqlParser.SKEWED - 218)) | (1 << (fugue_sqlParser.STORED - 218)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 218)))) != 0):
                    self.state = 742
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 723
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.PARTITIONED]:
                        self.state = 733
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                        if la_ == 1:
                            self.state = 724
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 725
                            self.match(fugue_sqlParser.BY)
                            self.state = 726
                            self.match(fugue_sqlParser.T__2)
                            self.state = 727
                            localctx.partitionColumns = self.colTypeList()
                            self.state = 728
                            self.match(fugue_sqlParser.T__3)
                            pass

                        elif la_ == 2:
                            self.state = 730
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 731
                            self.match(fugue_sqlParser.BY)
                            self.state = 732
                            localctx.partitionColumnNames = self.identifierList()
                            pass


                        pass
                    elif token in [fugue_sqlParser.CLUSTERED]:
                        self.state = 735
                        self.bucketSpec()
                        pass
                    elif token in [fugue_sqlParser.SKEWED]:
                        self.state = 736
                        self.skewSpec()
                        pass
                    elif token in [fugue_sqlParser.ROW]:
                        self.state = 737
                        self.rowFormat()
                        pass
                    elif token in [fugue_sqlParser.STORED]:
                        self.state = 738
                        self.createFileFormat()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 739
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 740
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 741
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2 or _la==fugue_sqlParser.AS or _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.MAP or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (fugue_sqlParser.REDUCE - 203)) | (1 << (fugue_sqlParser.SELECT - 203)) | (1 << (fugue_sqlParser.TABLE - 203)))) != 0) or _la==fugue_sqlParser.VALUES or _la==fugue_sqlParser.WITH:
                    self.state = 748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 747
                        self.match(fugue_sqlParser.AS)


                    self.state = 750
                    self.query()


                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 753
                self.match(fugue_sqlParser.CREATE)
                self.state = 754
                self.match(fugue_sqlParser.TABLE)
                self.state = 758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 755
                    self.match(fugue_sqlParser.IF)
                    self.state = 756
                    self.match(fugue_sqlParser.NOT)
                    self.state = 757
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 760
                localctx.target = self.tableIdentifier()
                self.state = 761
                self.match(fugue_sqlParser.LIKE)
                self.state = 762
                localctx.source = self.tableIdentifier()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.LOCATION or ((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & ((1 << (fugue_sqlParser.ROW - 218)) | (1 << (fugue_sqlParser.STORED - 218)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 218)) | (1 << (fugue_sqlParser.USING - 218)))) != 0):
                    self.state = 769
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.USING]:
                        self.state = 763
                        self.tableProvider()
                        pass
                    elif token in [fugue_sqlParser.ROW]:
                        self.state = 764
                        self.rowFormat()
                        pass
                    elif token in [fugue_sqlParser.STORED]:
                        self.state = 765
                        self.createFileFormat()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 766
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 767
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 768
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 774
                self.replaceTableHeader()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 775
                    self.match(fugue_sqlParser.T__2)
                    self.state = 776
                    self.colTypeList()
                    self.state = 777
                    self.match(fugue_sqlParser.T__3)


                self.state = 781
                self.tableProvider()
                self.state = 782
                self.createTableClauses()
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2 or _la==fugue_sqlParser.AS or _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.MAP or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (fugue_sqlParser.REDUCE - 203)) | (1 << (fugue_sqlParser.SELECT - 203)) | (1 << (fugue_sqlParser.TABLE - 203)))) != 0) or _la==fugue_sqlParser.VALUES or _la==fugue_sqlParser.WITH:
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 783
                        self.match(fugue_sqlParser.AS)


                    self.state = 786
                    self.query()


                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 789
                self.match(fugue_sqlParser.ANALYZE)
                self.state = 790
                self.match(fugue_sqlParser.TABLE)
                self.state = 791
                self.multipartIdentifier()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 792
                    self.partitionSpec()


                self.state = 795
                self.match(fugue_sqlParser.COMPUTE)
                self.state = 796
                self.match(fugue_sqlParser.STATISTICS)
                self.state = 804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 797
                    self.identifier()

                elif la_ == 2:
                    self.state = 798
                    self.match(fugue_sqlParser.FOR)
                    self.state = 799
                    self.match(fugue_sqlParser.COLUMNS)
                    self.state = 800
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 801
                    self.match(fugue_sqlParser.FOR)
                    self.state = 802
                    self.match(fugue_sqlParser.ALL)
                    self.state = 803
                    self.match(fugue_sqlParser.COLUMNS)


                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 806
                self.match(fugue_sqlParser.ALTER)
                self.state = 807
                self.match(fugue_sqlParser.TABLE)
                self.state = 808
                self.multipartIdentifier()
                self.state = 809
                self.match(fugue_sqlParser.ADD)
                self.state = 810
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 811
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 813
                self.match(fugue_sqlParser.ALTER)
                self.state = 814
                self.match(fugue_sqlParser.TABLE)
                self.state = 815
                self.multipartIdentifier()
                self.state = 816
                self.match(fugue_sqlParser.ADD)
                self.state = 817
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 818
                self.match(fugue_sqlParser.T__2)
                self.state = 819
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 820
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 822
                self.match(fugue_sqlParser.ALTER)
                self.state = 823
                self.match(fugue_sqlParser.TABLE)
                self.state = 824
                localctx.table = self.multipartIdentifier()
                self.state = 825
                self.match(fugue_sqlParser.RENAME)
                self.state = 826
                self.match(fugue_sqlParser.COLUMN)
                self.state = 827
                localctx.ifrom = self.multipartIdentifier()
                self.state = 828
                self.match(fugue_sqlParser.TO)
                self.state = 829
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 831
                self.match(fugue_sqlParser.ALTER)
                self.state = 832
                self.match(fugue_sqlParser.TABLE)
                self.state = 833
                self.multipartIdentifier()
                self.state = 834
                self.match(fugue_sqlParser.DROP)
                self.state = 835
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 836
                self.match(fugue_sqlParser.T__2)
                self.state = 837
                localctx.columns = self.multipartIdentifierList()
                self.state = 838
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 840
                self.match(fugue_sqlParser.ALTER)
                self.state = 841
                self.match(fugue_sqlParser.TABLE)
                self.state = 842
                self.multipartIdentifier()
                self.state = 843
                self.match(fugue_sqlParser.DROP)
                self.state = 844
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 845
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 847
                self.match(fugue_sqlParser.ALTER)
                self.state = 848
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 849
                localctx.ifrom = self.multipartIdentifier()
                self.state = 850
                self.match(fugue_sqlParser.RENAME)
                self.state = 851
                self.match(fugue_sqlParser.TO)
                self.state = 852
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 854
                self.match(fugue_sqlParser.ALTER)
                self.state = 855
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 856
                self.multipartIdentifier()
                self.state = 857
                self.match(fugue_sqlParser.SET)
                self.state = 858
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 859
                self.tablePropertyList()
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 861
                self.match(fugue_sqlParser.ALTER)
                self.state = 862
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 863
                self.multipartIdentifier()
                self.state = 864
                self.match(fugue_sqlParser.UNSET)
                self.state = 865
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 866
                    self.match(fugue_sqlParser.IF)
                    self.state = 867
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 870
                self.tablePropertyList()
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 872
                self.match(fugue_sqlParser.ALTER)
                self.state = 873
                self.match(fugue_sqlParser.TABLE)
                self.state = 874
                localctx.table = self.multipartIdentifier()
                self.state = 875
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ALTER or _la==fugue_sqlParser.CHANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 876
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 879
                localctx.column = self.multipartIdentifier()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.DROP or _la==fugue_sqlParser.FIRST or _la==fugue_sqlParser.SET or _la==fugue_sqlParser.TYPE:
                    self.state = 880
                    self.alterColumnAction()


                pass

            elif la_ == 23:
                localctx = fugue_sqlParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 883
                self.match(fugue_sqlParser.ALTER)
                self.state = 884
                self.match(fugue_sqlParser.TABLE)
                self.state = 885
                localctx.table = self.multipartIdentifier()
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 886
                    self.partitionSpec()


                self.state = 889
                self.match(fugue_sqlParser.CHANGE)
                self.state = 891
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 893
                localctx.colName = self.multipartIdentifier()
                self.state = 894
                self.colType()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.FIRST:
                    self.state = 895
                    self.colPosition()


                pass

            elif la_ == 24:
                localctx = fugue_sqlParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 898
                self.match(fugue_sqlParser.ALTER)
                self.state = 899
                self.match(fugue_sqlParser.TABLE)
                self.state = 900
                localctx.table = self.multipartIdentifier()
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 901
                    self.partitionSpec()


                self.state = 904
                self.match(fugue_sqlParser.REPLACE)
                self.state = 905
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 906
                self.match(fugue_sqlParser.T__2)
                self.state = 907
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 908
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 25:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 910
                self.match(fugue_sqlParser.ALTER)
                self.state = 911
                self.match(fugue_sqlParser.TABLE)
                self.state = 912
                self.multipartIdentifier()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 913
                    self.partitionSpec()


                self.state = 916
                self.match(fugue_sqlParser.SET)
                self.state = 917
                self.match(fugue_sqlParser.SERDE)
                self.state = 918
                self.match(fugue_sqlParser.STRING)
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WITH:
                    self.state = 919
                    self.match(fugue_sqlParser.WITH)
                    self.state = 920
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 921
                    self.tablePropertyList()


                pass

            elif la_ == 26:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 924
                self.match(fugue_sqlParser.ALTER)
                self.state = 925
                self.match(fugue_sqlParser.TABLE)
                self.state = 926
                self.multipartIdentifier()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 927
                    self.partitionSpec()


                self.state = 930
                self.match(fugue_sqlParser.SET)
                self.state = 931
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 932
                self.tablePropertyList()
                pass

            elif la_ == 27:
                localctx = fugue_sqlParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 934
                self.match(fugue_sqlParser.ALTER)
                self.state = 935
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 936
                self.multipartIdentifier()
                self.state = 937
                self.match(fugue_sqlParser.ADD)
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 938
                    self.match(fugue_sqlParser.IF)
                    self.state = 939
                    self.match(fugue_sqlParser.NOT)
                    self.state = 940
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 944 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 943
                    self.partitionSpecLocation()
                    self.state = 946 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.PARTITION):
                        break

                pass

            elif la_ == 28:
                localctx = fugue_sqlParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 948
                self.match(fugue_sqlParser.ALTER)
                self.state = 949
                self.match(fugue_sqlParser.TABLE)
                self.state = 950
                self.multipartIdentifier()
                self.state = 951
                localctx.ifrom = self.partitionSpec()
                self.state = 952
                self.match(fugue_sqlParser.RENAME)
                self.state = 953
                self.match(fugue_sqlParser.TO)
                self.state = 954
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 29:
                localctx = fugue_sqlParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 956
                self.match(fugue_sqlParser.ALTER)
                self.state = 957
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 958
                self.multipartIdentifier()
                self.state = 959
                self.match(fugue_sqlParser.DROP)
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 960
                    self.match(fugue_sqlParser.IF)
                    self.state = 961
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 964
                self.partitionSpec()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 965
                    self.match(fugue_sqlParser.T__1)
                    self.state = 966
                    self.partitionSpec()
                    self.state = 971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PURGE:
                    self.state = 972
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 30:
                localctx = fugue_sqlParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 975
                self.match(fugue_sqlParser.ALTER)
                self.state = 976
                self.match(fugue_sqlParser.TABLE)
                self.state = 977
                self.multipartIdentifier()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 978
                    self.partitionSpec()


                self.state = 981
                self.match(fugue_sqlParser.SET)
                self.state = 982
                self.locationSpec()
                pass

            elif la_ == 31:
                localctx = fugue_sqlParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 984
                self.match(fugue_sqlParser.ALTER)
                self.state = 985
                self.match(fugue_sqlParser.TABLE)
                self.state = 986
                self.multipartIdentifier()
                self.state = 987
                self.match(fugue_sqlParser.RECOVER)
                self.state = 988
                self.match(fugue_sqlParser.PARTITIONS)
                pass

            elif la_ == 32:
                localctx = fugue_sqlParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 990
                self.match(fugue_sqlParser.DROP)
                self.state = 991
                self.match(fugue_sqlParser.TABLE)
                self.state = 994
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 992
                    self.match(fugue_sqlParser.IF)
                    self.state = 993
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 996
                self.multipartIdentifier()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PURGE:
                    self.state = 997
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 33:
                localctx = fugue_sqlParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1000
                self.match(fugue_sqlParser.DROP)
                self.state = 1001
                self.match(fugue_sqlParser.VIEW)
                self.state = 1004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 1002
                    self.match(fugue_sqlParser.IF)
                    self.state = 1003
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1006
                self.multipartIdentifier()
                pass

            elif la_ == 34:
                localctx = fugue_sqlParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1007
                self.match(fugue_sqlParser.CREATE)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1008
                    self.match(fugue_sqlParser.OR)
                    self.state = 1009
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.GLOBAL or _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.GLOBAL:
                        self.state = 1012
                        self.match(fugue_sqlParser.GLOBAL)


                    self.state = 1015
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1018
                self.match(fugue_sqlParser.VIEW)
                self.state = 1022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1019
                    self.match(fugue_sqlParser.IF)
                    self.state = 1020
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1021
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1024
                self.multipartIdentifier()
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1025
                    self.identifierCommentList()


                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.PARTITIONED or _la==fugue_sqlParser.TBLPROPERTIES:
                    self.state = 1034
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 1028
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.PARTITIONED]:
                        self.state = 1029
                        self.match(fugue_sqlParser.PARTITIONED)
                        self.state = 1030
                        self.match(fugue_sqlParser.ON)
                        self.state = 1031
                        self.identifierList()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 1032
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1033
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1039
                self.match(fugue_sqlParser.AS)
                self.state = 1040
                self.query()
                pass

            elif la_ == 35:
                localctx = fugue_sqlParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1042
                self.match(fugue_sqlParser.CREATE)
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1043
                    self.match(fugue_sqlParser.OR)
                    self.state = 1044
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.GLOBAL:
                    self.state = 1047
                    self.match(fugue_sqlParser.GLOBAL)


                self.state = 1050
                self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1051
                self.match(fugue_sqlParser.VIEW)
                self.state = 1052
                self.tableIdentifier()
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1053
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1054
                    self.colTypeList()
                    self.state = 1055
                    self.match(fugue_sqlParser.T__3)


                self.state = 1059
                self.tableProvider()
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1060
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1061
                    self.tablePropertyList()


                pass

            elif la_ == 36:
                localctx = fugue_sqlParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1064
                self.match(fugue_sqlParser.ALTER)
                self.state = 1065
                self.match(fugue_sqlParser.VIEW)
                self.state = 1066
                self.multipartIdentifier()
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS:
                    self.state = 1067
                    self.match(fugue_sqlParser.AS)


                self.state = 1070
                self.query()
                pass

            elif la_ == 37:
                localctx = fugue_sqlParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1072
                self.match(fugue_sqlParser.CREATE)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1073
                    self.match(fugue_sqlParser.OR)
                    self.state = 1074
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1077
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1080
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 1081
                    self.match(fugue_sqlParser.IF)
                    self.state = 1082
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1083
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1086
                self.multipartIdentifier()
                self.state = 1087
                self.match(fugue_sqlParser.AS)
                self.state = 1088
                localctx.className = self.match(fugue_sqlParser.STRING)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.USING:
                    self.state = 1089
                    self.match(fugue_sqlParser.USING)
                    self.state = 1090
                    self.resource()
                    self.state = 1095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__1:
                        self.state = 1091
                        self.match(fugue_sqlParser.T__1)
                        self.state = 1092
                        self.resource()
                        self.state = 1097
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 38:
                localctx = fugue_sqlParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1100
                self.match(fugue_sqlParser.DROP)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1101
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1104
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 1105
                    self.match(fugue_sqlParser.IF)
                    self.state = 1106
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1109
                self.multipartIdentifier()
                pass

            elif la_ == 39:
                localctx = fugue_sqlParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1110
                self.match(fugue_sqlParser.EXPLAIN)
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (fugue_sqlParser.CODEGEN - 56)) | (1 << (fugue_sqlParser.COST - 56)) | (1 << (fugue_sqlParser.EXTENDED - 56)) | (1 << (fugue_sqlParser.FORMATTED - 56)))) != 0) or _la==fugue_sqlParser.LOGICAL:
                    self.state = 1111
                    _la = self._input.LA(1)
                    if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (fugue_sqlParser.CODEGEN - 56)) | (1 << (fugue_sqlParser.COST - 56)) | (1 << (fugue_sqlParser.EXTENDED - 56)) | (1 << (fugue_sqlParser.FORMATTED - 56)))) != 0) or _la==fugue_sqlParser.LOGICAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1114
                self.statement()
                pass

            elif la_ == 40:
                localctx = fugue_sqlParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1115
                self.match(fugue_sqlParser.SHOW)
                self.state = 1116
                self.match(fugue_sqlParser.TABLES)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1117
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1118
                    self.multipartIdentifier()


                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1121
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1124
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 41:
                localctx = fugue_sqlParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1127
                self.match(fugue_sqlParser.SHOW)
                self.state = 1128
                self.match(fugue_sqlParser.TABLE)
                self.state = 1129
                self.match(fugue_sqlParser.EXTENDED)
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1130
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1131
                    localctx.ns = self.multipartIdentifier()


                self.state = 1134
                self.match(fugue_sqlParser.LIKE)
                self.state = 1135
                localctx.pattern = self.match(fugue_sqlParser.STRING)
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1136
                    self.partitionSpec()


                pass

            elif la_ == 42:
                localctx = fugue_sqlParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1139
                self.match(fugue_sqlParser.SHOW)
                self.state = 1140
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1141
                localctx.table = self.multipartIdentifier()
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1142
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1143
                    localctx.key = self.tablePropertyKey()
                    self.state = 1144
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 43:
                localctx = fugue_sqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1148
                self.match(fugue_sqlParser.SHOW)
                self.state = 1149
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1150
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1151
                localctx.table = self.multipartIdentifier()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1152
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1153
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 44:
                localctx = fugue_sqlParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1156
                self.match(fugue_sqlParser.SHOW)
                self.state = 1157
                self.match(fugue_sqlParser.VIEWS)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1158
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1159
                    self.multipartIdentifier()


                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1162
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1165
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 45:
                localctx = fugue_sqlParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1168
                self.match(fugue_sqlParser.SHOW)
                self.state = 1169
                self.match(fugue_sqlParser.PARTITIONS)
                self.state = 1170
                self.multipartIdentifier()
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1171
                    self.partitionSpec()


                pass

            elif la_ == 46:
                localctx = fugue_sqlParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1174
                self.match(fugue_sqlParser.SHOW)
                self.state = 1176
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 1175
                    self.identifier()


                self.state = 1178
                self.match(fugue_sqlParser.FUNCTIONS)
                self.state = 1186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1180
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        self.state = 1179
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1184
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                    if la_ == 1:
                        self.state = 1182
                        self.multipartIdentifier()
                        pass

                    elif la_ == 2:
                        self.state = 1183
                        localctx.pattern = self.match(fugue_sqlParser.STRING)
                        pass




                pass

            elif la_ == 47:
                localctx = fugue_sqlParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1188
                self.match(fugue_sqlParser.SHOW)
                self.state = 1189
                self.match(fugue_sqlParser.CREATE)
                self.state = 1190
                self.match(fugue_sqlParser.TABLE)
                self.state = 1191
                self.multipartIdentifier()
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS:
                    self.state = 1192
                    self.match(fugue_sqlParser.AS)
                    self.state = 1193
                    self.match(fugue_sqlParser.SERDE)


                pass

            elif la_ == 48:
                localctx = fugue_sqlParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1196
                self.match(fugue_sqlParser.SHOW)
                self.state = 1197
                self.match(fugue_sqlParser.CURRENT)
                self.state = 1198
                self.match(fugue_sqlParser.NAMESPACE)
                pass

            elif la_ == 49:
                localctx = fugue_sqlParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1199
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1200
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1201
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1204
                self.describeFuncName()
                pass

            elif la_ == 50:
                localctx = fugue_sqlParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1205
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1206
                self.namespace()
                self.state = 1208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1207
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1210
                self.multipartIdentifier()
                pass

            elif la_ == 51:
                localctx = fugue_sqlParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1212
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1214
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1213
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1216
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.EXTENDED or _la==fugue_sqlParser.FORMATTED):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1219
                self.multipartIdentifier()
                self.state = 1221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1220
                    self.partitionSpec()


                self.state = 1224
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1223
                    self.describeColName()


                pass

            elif la_ == 52:
                localctx = fugue_sqlParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1226
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.QUERY:
                    self.state = 1227
                    self.match(fugue_sqlParser.QUERY)


                self.state = 1230
                self.query()
                pass

            elif la_ == 53:
                localctx = fugue_sqlParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1231
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1232
                self.match(fugue_sqlParser.ON)
                self.state = 1233
                self.namespace()
                self.state = 1234
                self.multipartIdentifier()
                self.state = 1235
                self.match(fugue_sqlParser.IS)
                self.state = 1236
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.NULL or _la==fugue_sqlParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 54:
                localctx = fugue_sqlParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1238
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1239
                self.match(fugue_sqlParser.ON)
                self.state = 1240
                self.match(fugue_sqlParser.TABLE)
                self.state = 1241
                self.multipartIdentifier()
                self.state = 1242
                self.match(fugue_sqlParser.IS)
                self.state = 1243
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.NULL or _la==fugue_sqlParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 55:
                localctx = fugue_sqlParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1245
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1246
                self.match(fugue_sqlParser.TABLE)
                self.state = 1247
                self.multipartIdentifier()
                pass

            elif la_ == 56:
                localctx = fugue_sqlParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1248
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1249
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1253
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1250
                            self.matchWildcard() 
                        self.state = 1255
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                    pass


                pass

            elif la_ == 57:
                localctx = fugue_sqlParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1258
                self.match(fugue_sqlParser.CACHE)
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 1259
                    self.match(fugue_sqlParser.LAZY)


                self.state = 1262
                self.match(fugue_sqlParser.TABLE)
                self.state = 1263
                self.multipartIdentifier()
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1264
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1265
                    localctx.options = self.tablePropertyList()


                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2 or _la==fugue_sqlParser.AS or _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.MAP or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (fugue_sqlParser.REDUCE - 203)) | (1 << (fugue_sqlParser.SELECT - 203)) | (1 << (fugue_sqlParser.TABLE - 203)))) != 0) or _la==fugue_sqlParser.VALUES or _la==fugue_sqlParser.WITH:
                    self.state = 1269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1268
                        self.match(fugue_sqlParser.AS)


                    self.state = 1271
                    self.query()


                pass

            elif la_ == 58:
                localctx = fugue_sqlParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1274
                self.match(fugue_sqlParser.UNCACHE)
                self.state = 1275
                self.match(fugue_sqlParser.TABLE)
                self.state = 1278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1276
                    self.match(fugue_sqlParser.IF)
                    self.state = 1277
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1280
                self.multipartIdentifier()
                pass

            elif la_ == 59:
                localctx = fugue_sqlParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1281
                self.match(fugue_sqlParser.CLEAR)
                self.state = 1282
                self.match(fugue_sqlParser.CACHE)
                pass

            elif la_ == 60:
                localctx = fugue_sqlParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1283
                self.match(fugue_sqlParser.LOAD)
                self.state = 1284
                self.match(fugue_sqlParser.DATA)
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1285
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1288
                self.match(fugue_sqlParser.INPATH)
                self.state = 1289
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OVERWRITE:
                    self.state = 1290
                    self.match(fugue_sqlParser.OVERWRITE)


                self.state = 1293
                self.match(fugue_sqlParser.INTO)
                self.state = 1294
                self.match(fugue_sqlParser.TABLE)
                self.state = 1295
                self.multipartIdentifier()
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1296
                    self.partitionSpec()


                pass

            elif la_ == 61:
                localctx = fugue_sqlParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1299
                self.match(fugue_sqlParser.TRUNCATE)
                self.state = 1300
                self.match(fugue_sqlParser.TABLE)
                self.state = 1301
                self.multipartIdentifier()
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1302
                    self.partitionSpec()


                pass

            elif la_ == 62:
                localctx = fugue_sqlParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1305
                self.match(fugue_sqlParser.MSCK)
                self.state = 1306
                self.match(fugue_sqlParser.REPAIR)
                self.state = 1307
                self.match(fugue_sqlParser.TABLE)
                self.state = 1308
                self.multipartIdentifier()
                pass

            elif la_ == 63:
                localctx = fugue_sqlParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1309
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ADD or _la==fugue_sqlParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1310
                self.identifier()
                self.state = 1318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1311
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1315
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1312
                            self.matchWildcard() 
                        self.state = 1317
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

                    pass


                pass

            elif la_ == 64:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1320
                self.match(fugue_sqlParser.SET)
                self.state = 1321
                self.match(fugue_sqlParser.ROLE)
                self.state = 1325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1322
                        self.matchWildcard() 
                    self.state = 1327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                pass

            elif la_ == 65:
                localctx = fugue_sqlParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1328
                self.match(fugue_sqlParser.SET)
                self.state = 1332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1329
                        self.matchWildcard() 
                    self.state = 1334
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                pass

            elif la_ == 66:
                localctx = fugue_sqlParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1335
                self.match(fugue_sqlParser.RESET)
                pass

            elif la_ == 67:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1336
                self.unsupportedHiveNativeCommands()
                self.state = 1340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1337
                        self.matchWildcard() 
                    self.state = 1342
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)




    def unsupportedHiveNativeCommands(self):

        localctx = fugue_sqlParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 1513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1345
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1346
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1347
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1348
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1349
                localctx.kw1 = self.match(fugue_sqlParser.GRANT)
                self.state = 1351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1350
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1353
                localctx.kw1 = self.match(fugue_sqlParser.REVOKE)
                self.state = 1355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1354
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1357
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1358
                localctx.kw2 = self.match(fugue_sqlParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1359
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1360
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                self.state = 1362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1361
                    localctx.kw3 = self.match(fugue_sqlParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1364
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1365
                localctx.kw2 = self.match(fugue_sqlParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1366
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1367
                localctx.kw2 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1368
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1369
                localctx.kw2 = self.match(fugue_sqlParser.CURRENT)
                self.state = 1370
                localctx.kw3 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1371
                localctx.kw1 = self.match(fugue_sqlParser.EXPORT)
                self.state = 1372
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1373
                localctx.kw1 = self.match(fugue_sqlParser.IMPORT)
                self.state = 1374
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1375
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1376
                localctx.kw2 = self.match(fugue_sqlParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1377
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1378
                localctx.kw2 = self.match(fugue_sqlParser.CREATE)
                self.state = 1379
                localctx.kw3 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1380
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1381
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1382
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1383
                localctx.kw2 = self.match(fugue_sqlParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1384
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1385
                localctx.kw2 = self.match(fugue_sqlParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1386
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1387
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1388
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1389
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1390
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1391
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1392
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1393
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1394
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1395
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1396
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1397
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1398
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1399
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1400
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1401
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1402
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1403
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1404
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1405
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1406
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1407
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1408
                self.tableIdentifier()
                self.state = 1409
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1410
                localctx.kw4 = self.match(fugue_sqlParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1412
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1413
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1414
                self.tableIdentifier()
                self.state = 1415
                localctx.kw3 = self.match(fugue_sqlParser.CLUSTERED)
                self.state = 1416
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1418
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1419
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1420
                self.tableIdentifier()
                self.state = 1421
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1422
                localctx.kw4 = self.match(fugue_sqlParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1424
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1425
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1426
                self.tableIdentifier()
                self.state = 1427
                localctx.kw3 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1428
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1430
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1431
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1432
                self.tableIdentifier()
                self.state = 1433
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1434
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1436
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1437
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1438
                self.tableIdentifier()
                self.state = 1439
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1440
                localctx.kw4 = self.match(fugue_sqlParser.STORED)
                self.state = 1441
                localctx.kw5 = self.match(fugue_sqlParser.AS)
                self.state = 1442
                localctx.kw6 = self.match(fugue_sqlParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1444
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1445
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1446
                self.tableIdentifier()
                self.state = 1447
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1448
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1449
                localctx.kw5 = self.match(fugue_sqlParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1451
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1452
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1453
                self.tableIdentifier()
                self.state = 1454
                localctx.kw3 = self.match(fugue_sqlParser.EXCHANGE)
                self.state = 1455
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1457
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1458
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1459
                self.tableIdentifier()
                self.state = 1460
                localctx.kw3 = self.match(fugue_sqlParser.ARCHIVE)
                self.state = 1461
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1463
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1464
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1465
                self.tableIdentifier()
                self.state = 1466
                localctx.kw3 = self.match(fugue_sqlParser.UNARCHIVE)
                self.state = 1467
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1469
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1470
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1471
                self.tableIdentifier()
                self.state = 1472
                localctx.kw3 = self.match(fugue_sqlParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1474
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1475
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1476
                self.tableIdentifier()
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1477
                    self.partitionSpec()


                self.state = 1480
                localctx.kw3 = self.match(fugue_sqlParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1482
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1483
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1484
                self.tableIdentifier()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1485
                    self.partitionSpec()


                self.state = 1488
                localctx.kw3 = self.match(fugue_sqlParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1490
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1491
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1492
                self.tableIdentifier()
                self.state = 1494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1493
                    self.partitionSpec()


                self.state = 1496
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1497
                localctx.kw4 = self.match(fugue_sqlParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1499
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1500
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1501
                self.tableIdentifier()
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1502
                    self.partitionSpec()


                self.state = 1505
                localctx.kw3 = self.match(fugue_sqlParser.REPLACE)
                self.state = 1506
                localctx.kw4 = self.match(fugue_sqlParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1508
                localctx.kw1 = self.match(fugue_sqlParser.START)
                self.state = 1509
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1510
                localctx.kw1 = self.match(fugue_sqlParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1511
                localctx.kw1 = self.match(fugue_sqlParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1512
                localctx.kw1 = self.match(fugue_sqlParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)




    def createTableHeader(self):

        localctx = fugue_sqlParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.match(fugue_sqlParser.CREATE)
            self.state = 1517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.TEMPORARY:
                self.state = 1516
                self.match(fugue_sqlParser.TEMPORARY)


            self.state = 1520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.EXTERNAL:
                self.state = 1519
                self.match(fugue_sqlParser.EXTERNAL)


            self.state = 1522
            self.match(fugue_sqlParser.TABLE)
            self.state = 1526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1523
                self.match(fugue_sqlParser.IF)
                self.state = 1524
                self.match(fugue_sqlParser.NOT)
                self.state = 1525
                self.match(fugue_sqlParser.EXISTS)


            self.state = 1528
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_replaceTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTableHeader" ):
                listener.enterReplaceTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTableHeader" ):
                listener.exitReplaceTableHeader(self)




    def replaceTableHeader(self):

        localctx = fugue_sqlParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.CREATE:
                self.state = 1530
                self.match(fugue_sqlParser.CREATE)
                self.state = 1531
                self.match(fugue_sqlParser.OR)


            self.state = 1534
            self.match(fugue_sqlParser.REPLACE)
            self.state = 1535
            self.match(fugue_sqlParser.TABLE)
            self.state = 1536
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)




    def bucketSpec(self):

        localctx = fugue_sqlParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self.match(fugue_sqlParser.CLUSTERED)
            self.state = 1539
            self.match(fugue_sqlParser.BY)
            self.state = 1540
            self.identifierList()
            self.state = 1544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.SORTED:
                self.state = 1541
                self.match(fugue_sqlParser.SORTED)
                self.state = 1542
                self.match(fugue_sqlParser.BY)
                self.state = 1543
                self.orderedIdentifierList()


            self.state = 1546
            self.match(fugue_sqlParser.INTO)
            self.state = 1547
            self.match(fugue_sqlParser.INTEGER_VALUE)
            self.state = 1548
            self.match(fugue_sqlParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)




    def skewSpec(self):

        localctx = fugue_sqlParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.match(fugue_sqlParser.SKEWED)
            self.state = 1551
            self.match(fugue_sqlParser.BY)
            self.state = 1552
            self.identifierList()
            self.state = 1553
            self.match(fugue_sqlParser.ON)
            self.state = 1556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1554
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1555
                self.nestedConstantList()
                pass


            self.state = 1561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1558
                self.match(fugue_sqlParser.STORED)
                self.state = 1559
                self.match(fugue_sqlParser.AS)
                self.state = 1560
                self.match(fugue_sqlParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)




    def locationSpec(self):

        localctx = fugue_sqlParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(fugue_sqlParser.LOCATION)
            self.state = 1564
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_commentSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentSpec" ):
                listener.enterCommentSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentSpec" ):
                listener.exitCommentSpec(self)




    def commentSpec(self):

        localctx = fugue_sqlParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(fugue_sqlParser.COMMENT)
            self.state = 1567
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = fugue_sqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.WITH:
                self.state = 1569
                self.ctes()


            self.state = 1572
            self.queryTerm(0)
            self.state = 1573
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteHiveDir" ):
                listener.enterInsertOverwriteHiveDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteHiveDir" ):
                listener.exitInsertOverwriteHiveDir(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteDir" ):
                listener.enterInsertOverwriteDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteDir" ):
                listener.exitInsertOverwriteDir(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteTable" ):
                listener.enterInsertOverwriteTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteTable" ):
                listener.exitInsertOverwriteTable(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoTable" ):
                listener.enterInsertIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoTable" ):
                listener.exitInsertIntoTable(self)



    def insertInto(self):

        localctx = fugue_sqlParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1575
                self.match(fugue_sqlParser.INSERT)
                self.state = 1576
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1577
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1580
                self.multipartIdentifier()
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1581
                    self.partitionSpec()
                    self.state = 1585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.IF:
                        self.state = 1582
                        self.match(fugue_sqlParser.IF)
                        self.state = 1583
                        self.match(fugue_sqlParser.NOT)
                        self.state = 1584
                        self.match(fugue_sqlParser.EXISTS)




                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1589
                self.match(fugue_sqlParser.INSERT)
                self.state = 1590
                self.match(fugue_sqlParser.INTO)
                self.state = 1592
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1591
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1594
                self.multipartIdentifier()
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1595
                    self.partitionSpec()


                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1598
                    self.match(fugue_sqlParser.IF)
                    self.state = 1599
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1600
                    self.match(fugue_sqlParser.EXISTS)


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1603
                self.match(fugue_sqlParser.INSERT)
                self.state = 1604
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1605
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1608
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 1609
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ROW:
                    self.state = 1610
                    self.rowFormat()


                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STORED:
                    self.state = 1613
                    self.createFileFormat()


                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1616
                self.match(fugue_sqlParser.INSERT)
                self.state = 1617
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1618
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1621
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STRING:
                    self.state = 1622
                    localctx.path = self.match(fugue_sqlParser.STRING)


                self.state = 1625
                self.tableProvider()
                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1626
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1627
                    localctx.options = self.tablePropertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)




    def partitionSpecLocation(self):

        localctx = fugue_sqlParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.partitionSpec()
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.LOCATION:
                self.state = 1633
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionValContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)




    def partitionSpec(self):

        localctx = fugue_sqlParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(fugue_sqlParser.PARTITION)
            self.state = 1637
            self.match(fugue_sqlParser.T__2)
            self.state = 1638
            self.partitionVal()
            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 1639
                self.match(fugue_sqlParser.T__1)
                self.state = 1640
                self.partitionVal()
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1646
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)




    def partitionVal(self):

        localctx = fugue_sqlParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.identifier()
            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.EQUAL:
                self.state = 1649
                self.match(fugue_sqlParser.EQUAL)
                self.state = 1650
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)




    def namespace(self):

        localctx = fugue_sqlParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.DATABASE or _la==fugue_sqlParser.NAMESPACE or _la==fugue_sqlParser.SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)




    def describeFuncName(self):

        localctx = fugue_sqlParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_describeFuncName)
        try:
            self.state = 1660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1655
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1656
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1657
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1658
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1659
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)




    def describeColName(self):

        localctx = fugue_sqlParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 1663
                self.match(fugue_sqlParser.T__0)
                self.state = 1664
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)




    def ctes(self):

        localctx = fugue_sqlParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(fugue_sqlParser.WITH)
            self.state = 1671
            self.namedQuery()
            self.state = 1676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 1672
                self.match(fugue_sqlParser.T__1)
                self.state = 1673
                self.namedQuery()
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = fugue_sqlParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            localctx.name = self.errorCapturingIdentifier()
            self.state = 1681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1680
                localctx.columnAliases = self.identifierList()


            self.state = 1684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AS:
                self.state = 1683
                self.match(fugue_sqlParser.AS)


            self.state = 1686
            self.match(fugue_sqlParser.T__2)
            self.state = 1687
            self.query()
            self.state = 1688
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)




    def tableProvider(self):

        localctx = fugue_sqlParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(fugue_sqlParser.USING)
            self.state = 1691
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # TablePropertyListContext
            self.partitioning = None # TransformListContext
            self.tableProps = None # TablePropertyListContext

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.OPTIONS)
            else:
                return self.getToken(fugue_sqlParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def transformList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableClauses" ):
                listener.enterCreateTableClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableClauses" ):
                listener.exitCreateTableClauses(self)




    def createTableClauses(self):

        localctx = fugue_sqlParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.CLUSTERED or _la==fugue_sqlParser.COMMENT or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (fugue_sqlParser.LOCATION - 154)) | (1 << (fugue_sqlParser.OPTIONS - 154)) | (1 << (fugue_sqlParser.PARTITIONED - 154)))) != 0) or _la==fugue_sqlParser.TBLPROPERTIES:
                self.state = 1703
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.OPTIONS]:
                    self.state = 1693
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1694
                    localctx.options = self.tablePropertyList()
                    pass
                elif token in [fugue_sqlParser.PARTITIONED]:
                    self.state = 1695
                    self.match(fugue_sqlParser.PARTITIONED)
                    self.state = 1696
                    self.match(fugue_sqlParser.BY)
                    self.state = 1697
                    localctx.partitioning = self.transformList()
                    pass
                elif token in [fugue_sqlParser.CLUSTERED]:
                    self.state = 1698
                    self.bucketSpec()
                    pass
                elif token in [fugue_sqlParser.LOCATION]:
                    self.state = 1699
                    self.locationSpec()
                    pass
                elif token in [fugue_sqlParser.COMMENT]:
                    self.state = 1700
                    self.commentSpec()
                    pass
                elif token in [fugue_sqlParser.TBLPROPERTIES]:
                    self.state = 1701
                    self.match(fugue_sqlParser.TBLPROPERTIES)
                    self.state = 1702
                    localctx.tableProps = self.tablePropertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyList" ):
                listener.enterTablePropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyList" ):
                listener.exitTablePropertyList(self)




    def tablePropertyList(self):

        localctx = fugue_sqlParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.match(fugue_sqlParser.T__2)
            self.state = 1709
            self.tableProperty()
            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 1710
                self.match(fugue_sqlParser.T__1)
                self.state = 1711
                self.tableProperty()
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1717
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyValueContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperty" ):
                listener.enterTableProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperty" ):
                listener.exitTableProperty(self)




    def tableProperty(self):

        localctx = fugue_sqlParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            localctx.key = self.tablePropertyKey()
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.FALSE or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (fugue_sqlParser.TRUE - 257)) | (1 << (fugue_sqlParser.EQUAL - 257)) | (1 << (fugue_sqlParser.STRING - 257)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 257)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 257)))) != 0):
                self.state = 1721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.EQUAL:
                    self.state = 1720
                    self.match(fugue_sqlParser.EQUAL)


                self.state = 1723
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyKey" ):
                listener.enterTablePropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyKey" ):
                listener.exitTablePropertyKey(self)




    def tablePropertyKey(self):

        localctx = fugue_sqlParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 1735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1726
                self.identifier()
                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 1727
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1728
                    self.identifier()
                    self.state = 1733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1734
                self.match(fugue_sqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyValue" ):
                listener.enterTablePropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyValue" ):
                listener.exitTablePropertyValue(self)




    def tablePropertyValue(self):

        localctx = fugue_sqlParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tablePropertyValue)
        try:
            self.state = 1741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1737
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [fugue_sqlParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1738
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass
            elif token in [fugue_sqlParser.FALSE, fugue_sqlParser.TRUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1739
                self.booleanValue()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1740
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)




    def constantList(self):

        localctx = fugue_sqlParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            self.match(fugue_sqlParser.T__2)
            self.state = 1744
            self.constant()
            self.state = 1749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 1745
                self.match(fugue_sqlParser.T__1)
                self.state = 1746
                self.constant()
                self.state = 1751
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1752
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)




    def nestedConstantList(self):

        localctx = fugue_sqlParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(fugue_sqlParser.T__2)
            self.state = 1755
            self.constantList()
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 1756
                self.match(fugue_sqlParser.T__1)
                self.state = 1757
                self.constantList()
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1763
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(fugue_sqlParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)




    def createFileFormat(self):

        localctx = fugue_sqlParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_createFileFormat)
        try:
            self.state = 1771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1765
                self.match(fugue_sqlParser.STORED)
                self.state = 1766
                self.match(fugue_sqlParser.AS)
                self.state = 1767
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1768
                self.match(fugue_sqlParser.STORED)
                self.state = 1769
                self.match(fugue_sqlParser.BY)
                self.state = 1770
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)



    def fileFormat(self):

        localctx = fugue_sqlParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fileFormat)
        try:
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1773
                self.match(fugue_sqlParser.INPUTFORMAT)
                self.state = 1774
                localctx.inFmt = self.match(fugue_sqlParser.STRING)
                self.state = 1775
                self.match(fugue_sqlParser.OUTPUTFORMAT)
                self.state = 1776
                localctx.outFmt = self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1777
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)




    def storageHandler(self):

        localctx = fugue_sqlParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(fugue_sqlParser.STRING)
            self.state = 1784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1781
                self.match(fugue_sqlParser.WITH)
                self.state = 1782
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 1783
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = fugue_sqlParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.identifier()
            self.state = 1787
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteFromTable" ):
                listener.enterDeleteFromTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteFromTable" ):
                listener.exitDeleteFromTable(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateTable" ):
                listener.enterUpdateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateTable" ):
                listener.exitUpdateTable(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # MultipartIdentifierContext
            self.targetAlias = None # TableAliasContext
            self.source = None # MultipartIdentifierContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NotMatchedClauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeIntoTable" ):
                listener.enterMergeIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeIntoTable" ):
                listener.exitMergeIntoTable(self)



    def dmlStatementNoWith(self):

        localctx = fugue_sqlParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 1840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INSERT]:
                localctx = fugue_sqlParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1789
                self.insertInto()
                self.state = 1790
                self.queryTerm(0)
                self.state = 1791
                self.queryOrganization()
                pass
            elif token in [fugue_sqlParser.FROM]:
                localctx = fugue_sqlParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1793
                self.fromClause()
                self.state = 1795 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1794
                    self.multiInsertQueryBody()
                    self.state = 1797 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.INSERT):
                        break

                pass
            elif token in [fugue_sqlParser.DELETE]:
                localctx = fugue_sqlParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1799
                self.match(fugue_sqlParser.DELETE)
                self.state = 1800
                self.match(fugue_sqlParser.FROM)
                self.state = 1801
                self.multipartIdentifier()
                self.state = 1802
                self.tableAlias()
                self.state = 1804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WHERE:
                    self.state = 1803
                    self.whereClause()


                pass
            elif token in [fugue_sqlParser.UPDATE]:
                localctx = fugue_sqlParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1806
                self.match(fugue_sqlParser.UPDATE)
                self.state = 1807
                self.multipartIdentifier()
                self.state = 1808
                self.tableAlias()
                self.state = 1809
                self.setClause()
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WHERE:
                    self.state = 1810
                    self.whereClause()


                pass
            elif token in [fugue_sqlParser.MERGE]:
                localctx = fugue_sqlParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1813
                self.match(fugue_sqlParser.MERGE)
                self.state = 1814
                self.match(fugue_sqlParser.INTO)
                self.state = 1815
                localctx.target = self.multipartIdentifier()
                self.state = 1816
                localctx.targetAlias = self.tableAlias()
                self.state = 1817
                self.match(fugue_sqlParser.USING)
                self.state = 1823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1818
                    localctx.source = self.multipartIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 1819
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1820
                    localctx.sourceQuery = self.query()
                    self.state = 1821
                    self.match(fugue_sqlParser.T__3)
                    pass


                self.state = 1825
                localctx.sourceAlias = self.tableAlias()
                self.state = 1826
                self.match(fugue_sqlParser.ON)
                self.state = 1827
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 1831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1828
                        self.matchedClause() 
                    self.state = 1833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                self.state = 1837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.WHEN:
                    self.state = 1834
                    self.notMatchedClause()
                    self.state = 1839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)




    def queryOrganization(self):

        localctx = fugue_sqlParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1842
                self.match(fugue_sqlParser.ORDER)
                self.state = 1843
                self.match(fugue_sqlParser.BY)
                self.state = 1844
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1845
                        self.match(fugue_sqlParser.T__1)
                        self.state = 1846
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 1851
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,201,self._ctx)



            self.state = 1864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1854
                self.match(fugue_sqlParser.CLUSTER)
                self.state = 1855
                self.match(fugue_sqlParser.BY)
                self.state = 1856
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1857
                        self.match(fugue_sqlParser.T__1)
                        self.state = 1858
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 1863
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)



            self.state = 1876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1866
                self.match(fugue_sqlParser.DISTRIBUTE)
                self.state = 1867
                self.match(fugue_sqlParser.BY)
                self.state = 1868
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1869
                        self.match(fugue_sqlParser.T__1)
                        self.state = 1870
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 1875
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)



            self.state = 1888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1878
                self.match(fugue_sqlParser.SORT)
                self.state = 1879
                self.match(fugue_sqlParser.BY)
                self.state = 1880
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1881
                        self.match(fugue_sqlParser.T__1)
                        self.state = 1882
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 1887
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)



            self.state = 1891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1890
                self.windowClause()


            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1893
                self.match(fugue_sqlParser.LIMIT)
                self.state = 1896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1894
                    self.match(fugue_sqlParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1895
                    localctx.limit = self.expression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)




    def multiInsertQueryBody(self):

        localctx = fugue_sqlParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.insertInto()
            self.state = 1901
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 156
        self.enterRecursionRule(localctx, 156, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = fugue_sqlParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1904
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1927
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1906
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1907
                        if not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 1908
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.EXCEPT or _la==fugue_sqlParser.INTERSECT or _la==fugue_sqlParser.SETMINUS or _la==fugue_sqlParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1910
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 1909
                            self.setQuantifier()


                        self.state = 1912
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1913
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1914
                        if not not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "not fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 1915
                        localctx.operator = self.match(fugue_sqlParser.INTERSECT)
                        self.state = 1917
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 1916
                            self.setQuantifier()


                        self.state = 1919
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1920
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1921
                        if not not fugue_sqlParser.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "not fugue_sqlParser.legacy_setops_precedence_enbled")
                        self.state = 1922
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.EXCEPT or _la==fugue_sqlParser.SETMINUS or _la==fugue_sqlParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1924
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 1923
                            self.setQuantifier()


                        self.state = 1926
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)



    def queryPrimary(self):

        localctx = fugue_sqlParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_queryPrimary)
        try:
            self.state = 1941
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.MAP, fugue_sqlParser.REDUCE, fugue_sqlParser.SELECT]:
                localctx = fugue_sqlParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1932
                self.querySpecification()
                pass
            elif token in [fugue_sqlParser.FROM]:
                localctx = fugue_sqlParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1933
                self.fromStatement()
                pass
            elif token in [fugue_sqlParser.TABLE]:
                localctx = fugue_sqlParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1934
                self.match(fugue_sqlParser.TABLE)
                self.state = 1935
                self.multipartIdentifier()
                pass
            elif token in [fugue_sqlParser.VALUES]:
                localctx = fugue_sqlParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1936
                self.inlineTable()
                pass
            elif token in [fugue_sqlParser.T__2]:
                localctx = fugue_sqlParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1937
                self.match(fugue_sqlParser.T__2)
                self.state = 1938
                self.query()
                self.state = 1939
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = fugue_sqlParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.expression()
            self.state = 1945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1944
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1947
                self.match(fugue_sqlParser.NULLS)
                self.state = 1948
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FIRST or _la==fugue_sqlParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatement" ):
                listener.enterFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatement" ):
                listener.exitFromStatement(self)




    def fromStatement(self):

        localctx = fugue_sqlParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self.fromClause()
            self.state = 1953 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1952
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 1955 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatementBody" ):
                listener.enterFromStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatementBody" ):
                listener.exitFromStatementBody(self)




    def fromStatementBody(self):

        localctx = fugue_sqlParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_fromStatementBody)
        try:
            self.state = 1984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1957
                self.transformClause()
                self.state = 1959
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1958
                    self.whereClause()


                self.state = 1961
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1963
                self.selectClause()
                self.state = 1967
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1964
                        self.lateralView() 
                    self.state = 1969
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

                self.state = 1971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1970
                    self.whereClause()


                self.state = 1974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1973
                    self.aggregationClause()


                self.state = 1977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1976
                    self.havingClause()


                self.state = 1980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1979
                    self.windowClause()


                self.state = 1982
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularQuerySpecification" ):
                listener.enterRegularQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularQuerySpecification" ):
                listener.exitRegularQuerySpecification(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformQuerySpecification" ):
                listener.enterTransformQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformQuerySpecification" ):
                listener.exitTransformQuerySpecification(self)



    def querySpecification(self):

        localctx = fugue_sqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_querySpecification)
        try:
            self.state = 2015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1986
                self.transformClause()
                self.state = 1988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1987
                    self.fromClause()


                self.state = 1991
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1990
                    self.whereClause()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1993
                self.selectClause()
                self.state = 1995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1994
                    self.fromClause()


                self.state = 2000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1997
                        self.lateralView() 
                    self.state = 2002
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

                self.state = 2004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2003
                    self.whereClause()


                self.state = 2007
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 2006
                    self.aggregationClause()


                self.state = 2010
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 2009
                    self.havingClause()


                self.state = 2013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 2012
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)


        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformClause" ):
                listener.enterTransformClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformClause" ):
                listener.exitTransformClause(self)




    def transformClause(self):

        localctx = fugue_sqlParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.SELECT]:
                self.state = 2017
                self.match(fugue_sqlParser.SELECT)
                self.state = 2018
                localctx.kind = self.match(fugue_sqlParser.TRANSFORM)
                self.state = 2019
                self.match(fugue_sqlParser.T__2)
                self.state = 2020
                self.namedExpressionSeq()
                self.state = 2021
                self.match(fugue_sqlParser.T__3)
                pass
            elif token in [fugue_sqlParser.MAP]:
                self.state = 2023
                localctx.kind = self.match(fugue_sqlParser.MAP)
                self.state = 2024
                self.namedExpressionSeq()
                pass
            elif token in [fugue_sqlParser.REDUCE]:
                self.state = 2025
                localctx.kind = self.match(fugue_sqlParser.REDUCE)
                self.state = 2026
                self.namedExpressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ROW:
                self.state = 2029
                localctx.inRowFormat = self.rowFormat()


            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.RECORDWRITER:
                self.state = 2032
                self.match(fugue_sqlParser.RECORDWRITER)
                self.state = 2033
                localctx.recordWriter = self.match(fugue_sqlParser.STRING)


            self.state = 2036
            self.match(fugue_sqlParser.USING)
            self.state = 2037
            localctx.script = self.match(fugue_sqlParser.STRING)
            self.state = 2050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2038
                self.match(fugue_sqlParser.AS)
                self.state = 2048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 2039
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 2040
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 2041
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2044
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                    if la_ == 1:
                        self.state = 2042
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 2043
                        self.colTypeList()
                        pass


                    self.state = 2046
                    self.match(fugue_sqlParser.T__3)
                    pass




            self.state = 2053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 2052
                localctx.outRowFormat = self.rowFormat()


            self.state = 2057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 2055
                self.match(fugue_sqlParser.RECORDREADER)
                self.state = 2056
                localctx.recordReader = self.match(fugue_sqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)




    def selectClause(self):

        localctx = fugue_sqlParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.match(fugue_sqlParser.SELECT)
            self.state = 2063
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2060
                    localctx._hint = self.hint()
                    localctx.hints.append(localctx._hint) 
                self.state = 2065
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

            self.state = 2067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 2066
                self.setQuantifier()


            self.state = 2069
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetClause" ):
                listener.enterSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetClause" ):
                listener.exitSetClause(self)




    def setClause(self):

        localctx = fugue_sqlParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(fugue_sqlParser.SET)
            self.state = 2072
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedClause" ):
                listener.enterMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedClause" ):
                listener.exitMatchedClause(self)




    def matchedClause(self):

        localctx = fugue_sqlParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2074
            self.match(fugue_sqlParser.WHEN)
            self.state = 2075
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AND:
                self.state = 2076
                self.match(fugue_sqlParser.AND)
                self.state = 2077
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 2080
            self.match(fugue_sqlParser.THEN)
            self.state = 2081
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.NotMatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedClause" ):
                listener.enterNotMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedClause" ):
                listener.exitNotMatchedClause(self)




    def notMatchedClause(self):

        localctx = fugue_sqlParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            self.match(fugue_sqlParser.WHEN)
            self.state = 2084
            self.match(fugue_sqlParser.NOT)
            self.state = 2085
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AND:
                self.state = 2086
                self.match(fugue_sqlParser.AND)
                self.state = 2087
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 2090
            self.match(fugue_sqlParser.THEN)
            self.state = 2091
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedAction" ):
                listener.enterMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedAction" ):
                listener.exitMatchedAction(self)




    def matchedAction(self):

        localctx = fugue_sqlParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_matchedAction)
        try:
            self.state = 2100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2093
                self.match(fugue_sqlParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2094
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2095
                self.match(fugue_sqlParser.SET)
                self.state = 2096
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2097
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2098
                self.match(fugue_sqlParser.SET)
                self.state = 2099
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedAction" ):
                listener.enterNotMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedAction" ):
                listener.exitNotMatchedAction(self)




    def notMatchedAction(self):

        localctx = fugue_sqlParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2102
                self.match(fugue_sqlParser.INSERT)
                self.state = 2103
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2104
                self.match(fugue_sqlParser.INSERT)
                self.state = 2105
                self.match(fugue_sqlParser.T__2)
                self.state = 2106
                localctx.columns = self.multipartIdentifierList()
                self.state = 2107
                self.match(fugue_sqlParser.T__3)
                self.state = 2108
                self.match(fugue_sqlParser.VALUES)
                self.state = 2109
                self.match(fugue_sqlParser.T__2)
                self.state = 2110
                self.expression()
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 2111
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2112
                    self.expression()
                    self.state = 2117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2118
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.AssignmentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = fugue_sqlParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.assignment()
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 2123
                self.match(fugue_sqlParser.T__1)
                self.state = 2124
                self.assignment()
                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = fugue_sqlParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            localctx.key = self.multipartIdentifier()
            self.state = 2131
            self.match(fugue_sqlParser.EQUAL)
            self.state = 2132
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = fugue_sqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self.match(fugue_sqlParser.WHERE)
            self.state = 2135
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = fugue_sqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2137
            self.match(fugue_sqlParser.HAVING)
            self.state = 2138
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintStatementContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)




    def hint(self):

        localctx = fugue_sqlParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.match(fugue_sqlParser.T__13)
            self.state = 2141
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2148
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2143
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 2142
                        self.match(fugue_sqlParser.T__1)


                    self.state = 2145
                    localctx._hintStatement = self.hintStatement()
                    localctx.hintStatements.append(localctx._hintStatement) 
                self.state = 2150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

            self.state = 2151
            self.match(fugue_sqlParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)




    def hintStatement(self):

        localctx = fugue_sqlParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2153
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2154
                localctx.hintName = self.identifier()
                self.state = 2155
                self.match(fugue_sqlParser.T__2)
                self.state = 2156
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 2157
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2158
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2164
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = fugue_sqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2168
            self.match(fugue_sqlParser.FROM)
            self.state = 2169
            self.relation()
            self.state = 2174
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2170
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2171
                    self.relation() 
                self.state = 2176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

            self.state = 2180
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2177
                    self.lateralView() 
                self.state = 2182
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

            self.state = 2184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 2183
                self.pivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_aggregationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregationClause" ):
                listener.enterAggregationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregationClause" ):
                listener.exitAggregationClause(self)




    def aggregationClause(self):

        localctx = fugue_sqlParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2186
                self.match(fugue_sqlParser.GROUP)
                self.state = 2187
                self.match(fugue_sqlParser.BY)
                self.state = 2188
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,260,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2189
                        self.match(fugue_sqlParser.T__1)
                        self.state = 2190
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2195
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,260,self._ctx)

                self.state = 2213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 2196
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2197
                    localctx.kind = self.match(fugue_sqlParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2198
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2199
                    localctx.kind = self.match(fugue_sqlParser.CUBE)

                elif la_ == 3:
                    self.state = 2200
                    localctx.kind = self.match(fugue_sqlParser.GROUPING)
                    self.state = 2201
                    self.match(fugue_sqlParser.SETS)
                    self.state = 2202
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2203
                    self.groupingSet()
                    self.state = 2208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__1:
                        self.state = 2204
                        self.match(fugue_sqlParser.T__1)
                        self.state = 2205
                        self.groupingSet()
                        self.state = 2210
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2211
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2215
                self.match(fugue_sqlParser.GROUP)
                self.state = 2216
                self.match(fugue_sqlParser.BY)
                self.state = 2217
                localctx.kind = self.match(fugue_sqlParser.GROUPING)
                self.state = 2218
                self.match(fugue_sqlParser.SETS)
                self.state = 2219
                self.match(fugue_sqlParser.T__2)
                self.state = 2220
                self.groupingSet()
                self.state = 2225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 2221
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2222
                    self.groupingSet()
                    self.state = 2227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2228
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = fugue_sqlParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2232
                self.match(fugue_sqlParser.T__2)
                self.state = 2241
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2233
                    self.expression()
                    self.state = 2238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__1:
                        self.state = 2234
                        self.match(fugue_sqlParser.T__1)
                        self.state = 2235
                        self.expression()
                        self.state = 2240
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2243
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2244
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PivotValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotClause" ):
                listener.enterPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotClause" ):
                listener.exitPivotClause(self)




    def pivotClause(self):

        localctx = fugue_sqlParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self.match(fugue_sqlParser.PIVOT)
            self.state = 2248
            self.match(fugue_sqlParser.T__2)
            self.state = 2249
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2250
            self.match(fugue_sqlParser.FOR)
            self.state = 2251
            self.pivotColumn()
            self.state = 2252
            self.match(fugue_sqlParser.IN)
            self.state = 2253
            self.match(fugue_sqlParser.T__2)
            self.state = 2254
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 2255
                self.match(fugue_sqlParser.T__1)
                self.state = 2256
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2262
            self.match(fugue_sqlParser.T__3)
            self.state = 2263
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotColumn" ):
                listener.enterPivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotColumn" ):
                listener.exitPivotColumn(self)




    def pivotColumn(self):

        localctx = fugue_sqlParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2265
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2266
                self.match(fugue_sqlParser.T__2)
                self.state = 2267
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 2268
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2269
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 2274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2275
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotValue" ):
                listener.enterPivotValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotValue" ):
                listener.exitPivotValue(self)




    def pivotValue(self):

        localctx = fugue_sqlParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_pivotValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            self.expression()
            self.state = 2284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 2281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                if la_ == 1:
                    self.state = 2280
                    self.match(fugue_sqlParser.AS)


                self.state = 2283
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)




    def lateralView(self):

        localctx = fugue_sqlParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            self.match(fugue_sqlParser.LATERAL)
            self.state = 2287
            self.match(fugue_sqlParser.VIEW)
            self.state = 2289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2288
                self.match(fugue_sqlParser.OUTER)


            self.state = 2291
            self.qualifiedName()
            self.state = 2292
            self.match(fugue_sqlParser.T__2)
            self.state = 2301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2293
                self.expression()
                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 2294
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2295
                    self.expression()
                    self.state = 2300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2303
            self.match(fugue_sqlParser.T__3)
            self.state = 2304
            localctx.tblName = self.identifier()
            self.state = 2316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 2306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                if la_ == 1:
                    self.state = 2305
                    self.match(fugue_sqlParser.AS)


                self.state = 2308
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2309
                        self.match(fugue_sqlParser.T__1)
                        self.state = 2310
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2315
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,277,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = fugue_sqlParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2318
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = fugue_sqlParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            self.relationPrimary()
            self.state = 2324
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,279,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2321
                    self.joinRelation() 
                self.state = 2326
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinTypeContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)




    def joinRelation(self):

        localctx = fugue_sqlParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_joinRelation)
        try:
            self.state = 2338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ANTI, fugue_sqlParser.CROSS, fugue_sqlParser.FULL, fugue_sqlParser.INNER, fugue_sqlParser.JOIN, fugue_sqlParser.LEFT, fugue_sqlParser.RIGHT, fugue_sqlParser.SEMI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2327
                self.joinType()
                self.state = 2328
                self.match(fugue_sqlParser.JOIN)
                self.state = 2329
                localctx.right = self.relationPrimary()
                self.state = 2331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2330
                    self.joinCriteria()


                pass
            elif token in [fugue_sqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2333
                self.match(fugue_sqlParser.NATURAL)
                self.state = 2334
                self.joinType()
                self.state = 2335
                self.match(fugue_sqlParser.JOIN)
                self.state = 2336
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = fugue_sqlParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.INNER:
                    self.state = 2340
                    self.match(fugue_sqlParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self.match(fugue_sqlParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2344
                self.match(fugue_sqlParser.LEFT)
                self.state = 2346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2345
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LEFT:
                    self.state = 2348
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2351
                self.match(fugue_sqlParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2352
                self.match(fugue_sqlParser.RIGHT)
                self.state = 2354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2353
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2356
                self.match(fugue_sqlParser.FULL)
                self.state = 2358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2357
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LEFT:
                    self.state = 2360
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2363
                self.match(fugue_sqlParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = fugue_sqlParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_joinCriteria)
        try:
            self.state = 2370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2366
                self.match(fugue_sqlParser.ON)
                self.state = 2367
                self.booleanExpression(0)
                pass
            elif token in [fugue_sqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2368
                self.match(fugue_sqlParser.USING)
                self.state = 2369
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleMethodContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)




    def sample(self):

        localctx = fugue_sqlParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_sample)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2372
            self.match(fugue_sqlParser.TABLESAMPLE)
            self.state = 2373
            self.match(fugue_sqlParser.T__2)
            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 2374
                self.sampleMethod()


            self.state = 2377
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByRows" ):
                listener.enterSampleByRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByRows" ):
                listener.exitSampleByRows(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByPercentile" ):
                listener.enterSampleByPercentile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByPercentile" ):
                listener.exitSampleByPercentile(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)
        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)
        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBucket" ):
                listener.enterSampleByBucket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBucket" ):
                listener.exitSampleByBucket(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBytes" ):
                listener.enterSampleByBytes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBytes" ):
                listener.exitSampleByBytes(self)



    def sampleMethod(self):

        localctx = fugue_sqlParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 2379
                    localctx.negativeSign = self.match(fugue_sqlParser.MINUS)


                self.state = 2382
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2383
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2384
                self.expression()
                self.state = 2385
                self.match(fugue_sqlParser.ROWS)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2387
                localctx.sampleType = self.match(fugue_sqlParser.BUCKET)
                self.state = 2388
                localctx.numerator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2389
                self.match(fugue_sqlParser.OUT)
                self.state = 2390
                self.match(fugue_sqlParser.OF)
                self.state = 2391
                localctx.denominator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ON:
                    self.state = 2392
                    self.match(fugue_sqlParser.ON)
                    self.state = 2398
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                    if la_ == 1:
                        self.state = 2393
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2394
                        self.qualifiedName()
                        self.state = 2395
                        self.match(fugue_sqlParser.T__2)
                        self.state = 2396
                        self.match(fugue_sqlParser.T__3)
                        pass




                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2402
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = fugue_sqlParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.match(fugue_sqlParser.T__2)
            self.state = 2406
            self.identifierSeq()
            self.state = 2407
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)




    def identifierSeq(self):

        localctx = fugue_sqlParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2409
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2410
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2411
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)




    def orderedIdentifierList(self):

        localctx = fugue_sqlParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2417
            self.match(fugue_sqlParser.T__2)
            self.state = 2418
            self.orderedIdentifier()
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 2419
                self.match(fugue_sqlParser.T__1)
                self.state = 2420
                self.orderedIdentifier()
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2426
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)




    def orderedIdentifier(self):

        localctx = fugue_sqlParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC:
                self.state = 2429
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)




    def identifierCommentList(self):

        localctx = fugue_sqlParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2432
            self.match(fugue_sqlParser.T__2)
            self.state = 2433
            self.identifierComment()
            self.state = 2438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 2434
                self.match(fugue_sqlParser.T__1)
                self.state = 2435
                self.identifierComment()
                self.state = 2440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2441
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)




    def identifierComment(self):

        localctx = fugue_sqlParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2443
            self.identifier()
            self.state = 2445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 2444
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)



    def relationPrimary(self):

        localctx = fugue_sqlParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_relationPrimary)
        try:
            self.state = 2471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2447
                self.multipartIdentifier()
                self.state = 2449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 2448
                    self.sample()


                self.state = 2451
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2453
                self.match(fugue_sqlParser.T__2)
                self.state = 2454
                self.query()
                self.state = 2455
                self.match(fugue_sqlParser.T__3)
                self.state = 2457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 2456
                    self.sample()


                self.state = 2459
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2461
                self.match(fugue_sqlParser.T__2)
                self.state = 2462
                self.relation()
                self.state = 2463
                self.match(fugue_sqlParser.T__3)
                self.state = 2465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 2464
                    self.sample()


                self.state = 2467
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2469
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2470
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)




    def inlineTable(self):

        localctx = fugue_sqlParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.match(fugue_sqlParser.VALUES)
            self.state = 2474
            self.expression()
            self.state = 2479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2475
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2476
                    self.expression() 
                self.state = 2481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

            self.state = 2482
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # ErrorCapturingIdentifierContext

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTable" ):
                listener.enterFunctionTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTable" ):
                listener.exitFunctionTable(self)




    def functionTable(self):

        localctx = fugue_sqlParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2484
            localctx.funcName = self.errorCapturingIdentifier()
            self.state = 2485
            self.match(fugue_sqlParser.T__2)
            self.state = 2494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2486
                self.expression()
                self.state = 2491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 2487
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2488
                    self.expression()
                    self.state = 2493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2496
            self.match(fugue_sqlParser.T__3)
            self.state = 2497
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)




    def tableAlias(self):

        localctx = fugue_sqlParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
                if la_ == 1:
                    self.state = 2499
                    self.match(fugue_sqlParser.AS)


                self.state = 2502
                self.strictIdentifier()
                self.state = 2504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 2503
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TERMINATED)
            else:
                return self.getToken(fugue_sqlParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)
        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)
        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)
        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)



    def rowFormat(self):

        localctx = fugue_sqlParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_rowFormat)
        try:
            self.state = 2557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2508
                self.match(fugue_sqlParser.ROW)
                self.state = 2509
                self.match(fugue_sqlParser.FORMAT)
                self.state = 2510
                self.match(fugue_sqlParser.SERDE)
                self.state = 2511
                localctx.name = self.match(fugue_sqlParser.STRING)
                self.state = 2515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                if la_ == 1:
                    self.state = 2512
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2513
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 2514
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2517
                self.match(fugue_sqlParser.ROW)
                self.state = 2518
                self.match(fugue_sqlParser.FORMAT)
                self.state = 2519
                self.match(fugue_sqlParser.DELIMITED)
                self.state = 2529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
                if la_ == 1:
                    self.state = 2520
                    self.match(fugue_sqlParser.FIELDS)
                    self.state = 2521
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2522
                    self.match(fugue_sqlParser.BY)
                    self.state = 2523
                    localctx.fieldsTerminatedBy = self.match(fugue_sqlParser.STRING)
                    self.state = 2527
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                    if la_ == 1:
                        self.state = 2524
                        self.match(fugue_sqlParser.ESCAPED)
                        self.state = 2525
                        self.match(fugue_sqlParser.BY)
                        self.state = 2526
                        localctx.escapedBy = self.match(fugue_sqlParser.STRING)




                self.state = 2536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 2531
                    self.match(fugue_sqlParser.COLLECTION)
                    self.state = 2532
                    self.match(fugue_sqlParser.ITEMS)
                    self.state = 2533
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2534
                    self.match(fugue_sqlParser.BY)
                    self.state = 2535
                    localctx.collectionItemsTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2538
                    self.match(fugue_sqlParser.MAP)
                    self.state = 2539
                    self.match(fugue_sqlParser.KEYS)
                    self.state = 2540
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2541
                    self.match(fugue_sqlParser.BY)
                    self.state = 2542
                    localctx.keysTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 2545
                    self.match(fugue_sqlParser.LINES)
                    self.state = 2546
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 2547
                    self.match(fugue_sqlParser.BY)
                    self.state = 2548
                    localctx.linesSeparatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 2555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                if la_ == 1:
                    self.state = 2551
                    self.match(fugue_sqlParser.NULL)
                    self.state = 2552
                    self.match(fugue_sqlParser.DEFINED)
                    self.state = 2553
                    self.match(fugue_sqlParser.AS)
                    self.state = 2554
                    localctx.nullDefinedAs = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierList" ):
                listener.enterMultipartIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierList" ):
                listener.exitMultipartIdentifierList(self)




    def multipartIdentifierList(self):

        localctx = fugue_sqlParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2559
            self.multipartIdentifier()
            self.state = 2564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 2560
                self.match(fugue_sqlParser.T__1)
                self.state = 2561
                self.multipartIdentifier()
                self.state = 2566
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifier" ):
                listener.enterMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifier" ):
                listener.exitMultipartIdentifier(self)




    def multipartIdentifier(self):

        localctx = fugue_sqlParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2567
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 2572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2568
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2569
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 2574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)




    def tableIdentifier(self):

        localctx = fugue_sqlParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 2575
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2576
                self.match(fugue_sqlParser.T__0)


            self.state = 2580
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)




    def functionIdentifier(self):

        localctx = fugue_sqlParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.state = 2582
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2583
                self.match(fugue_sqlParser.T__0)


            self.state = 2587
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)




    def namedExpression(self):

        localctx = fugue_sqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2589
            self.expression()
            self.state = 2597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.state = 2591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2590
                    self.match(fugue_sqlParser.AS)


                self.state = 2595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 2593
                    localctx.name = self.errorCapturingIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2594
                    self.identifierList()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)




    def namedExpressionSeq(self):

        localctx = fugue_sqlParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            self.namedExpression()
            self.state = 2604
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2600
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2601
                    self.namedExpression() 
                self.state = 2606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._transform = None # TransformContext
            self.transforms = list() # of TransformContexts

        def transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformList" ):
                listener.enterTransformList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformList" ):
                listener.exitTransformList(self)




    def transformList(self):

        localctx = fugue_sqlParser.TransformListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_transformList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2607
            self.match(fugue_sqlParser.T__2)
            self.state = 2608
            localctx._transform = self.transform()
            localctx.transforms.append(localctx._transform)
            self.state = 2613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 2609
                self.match(fugue_sqlParser.T__1)
                self.state = 2610
                localctx._transform = self.transform()
                localctx.transforms.append(localctx._transform)
                self.state = 2615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2616
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentityTransform" ):
                listener.enterIdentityTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentityTransform" ):
                listener.exitIdentityTransform(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApplyTransform" ):
                listener.enterApplyTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApplyTransform" ):
                listener.exitApplyTransform(self)



    def transform(self):

        localctx = fugue_sqlParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 2631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2618
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2619
                localctx.transformName = self.identifier()
                self.state = 2620
                self.match(fugue_sqlParser.T__2)
                self.state = 2621
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 2622
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2623
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 2628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2629
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformArgument" ):
                listener.enterTransformArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformArgument" ):
                listener.exitTransformArgument(self)




    def transformArgument(self):

        localctx = fugue_sqlParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_transformArgument)
        try:
            self.state = 2635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2633
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2634
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = fugue_sqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2640
                self.match(fugue_sqlParser.NOT)
                self.state = 2641
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2642
                self.match(fugue_sqlParser.EXISTS)
                self.state = 2643
                self.match(fugue_sqlParser.T__2)
                self.state = 2644
                self.query()
                self.state = 2645
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2647
                self.valueExpression(0)
                self.state = 2649
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 2648
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2659
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2653
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2654
                        localctx.operator = self.match(fugue_sqlParser.AND)
                        self.state = 2655
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2656
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2657
                        localctx.operator = self.match(fugue_sqlParser.OR)
                        self.state = 2658
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 2663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # Token
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = fugue_sqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2664
                    self.match(fugue_sqlParser.NOT)


                self.state = 2667
                localctx.kind = self.match(fugue_sqlParser.BETWEEN)
                self.state = 2668
                localctx.lower = self.valueExpression(0)
                self.state = 2669
                self.match(fugue_sqlParser.AND)
                self.state = 2670
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2672
                    self.match(fugue_sqlParser.NOT)


                self.state = 2675
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 2676
                self.match(fugue_sqlParser.T__2)
                self.state = 2677
                self.expression()
                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__1:
                    self.state = 2678
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2679
                    self.expression()
                    self.state = 2684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2685
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2687
                    self.match(fugue_sqlParser.NOT)


                self.state = 2690
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 2691
                self.match(fugue_sqlParser.T__2)
                self.state = 2692
                self.query()
                self.state = 2693
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2695
                    self.match(fugue_sqlParser.NOT)


                self.state = 2698
                localctx.kind = self.match(fugue_sqlParser.RLIKE)
                self.state = 2699
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2700
                    self.match(fugue_sqlParser.NOT)


                self.state = 2703
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 2704
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.ANY or _la==fugue_sqlParser.SOME):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2705
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2706
                    self.match(fugue_sqlParser.T__3)
                    pass

                elif la_ == 2:
                    self.state = 2707
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2708
                    self.expression()
                    self.state = 2713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__1:
                        self.state = 2709
                        self.match(fugue_sqlParser.T__1)
                        self.state = 2710
                        self.expression()
                        self.state = 2715
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2716
                    self.match(fugue_sqlParser.T__3)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2720
                    self.match(fugue_sqlParser.NOT)


                self.state = 2723
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 2724
                localctx.pattern = self.valueExpression(0)
                self.state = 2727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 2725
                    self.match(fugue_sqlParser.ESCAPE)
                    self.state = 2726
                    localctx.escapeChar = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2729
                self.match(fugue_sqlParser.IS)
                self.state = 2731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2730
                    self.match(fugue_sqlParser.NOT)


                self.state = 2733
                localctx.kind = self.match(fugue_sqlParser.NULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2734
                self.match(fugue_sqlParser.IS)
                self.state = 2736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2735
                    self.match(fugue_sqlParser.NOT)


                self.state = 2738
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE or _la==fugue_sqlParser.UNKNOWN):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2739
                self.match(fugue_sqlParser.IS)
                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 2740
                    self.match(fugue_sqlParser.NOT)


                self.state = 2743
                localctx.kind = self.match(fugue_sqlParser.DISTINCT)
                self.state = 2744
                self.match(fugue_sqlParser.FROM)
                self.state = 2745
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)
        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2749
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2750
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & ((1 << (fugue_sqlParser.PLUS - 289)) | (1 << (fugue_sqlParser.MINUS - 289)) | (1 << (fugue_sqlParser.TILDE - 289)))) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2751
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2773
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2754
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2755
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 291)) & ~0x3f) == 0 and ((1 << (_la - 291)) & ((1 << (fugue_sqlParser.ASTERISK - 291)) | (1 << (fugue_sqlParser.SLASH - 291)) | (1 << (fugue_sqlParser.PERCENT - 291)) | (1 << (fugue_sqlParser.DIV - 291)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2756
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2757
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2758
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & ((1 << (fugue_sqlParser.PLUS - 289)) | (1 << (fugue_sqlParser.MINUS - 289)) | (1 << (fugue_sqlParser.CONCAT_PIPE - 289)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2759
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2760
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2761
                        localctx.operator = self.match(fugue_sqlParser.AMPERSAND)
                        self.state = 2762
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2763
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2764
                        localctx.operator = self.match(fugue_sqlParser.HAT)
                        self.state = 2765
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2766
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2767
                        localctx.operator = self.match(fugue_sqlParser.PIPE)
                        self.state = 2768
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = fugue_sqlParser.ComparisonContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2769
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2770
                        self.comparisonOperator()
                        self.state = 2771
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 2777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.iinput = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)
        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlay" ):
                listener.enterOverlay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlay" ):
                listener.exitOverlay(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.istr = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.ilen = None # ValueExpressionContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)


    class CurrentDatetimeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentDatetime" ):
                listener.enterCurrentDatetime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentDatetime" ):
                listener.exitCurrentDatetime(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionNameContext,0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)
        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.istr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 270
        self.enterRecursionRule(localctx, 270, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.CurrentDatetimeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2779
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.CURRENT_DATE or _la==fugue_sqlParser.CURRENT_TIMESTAMP):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2780
                self.match(fugue_sqlParser.CASE)
                self.state = 2782 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2781
                    self.whenClause()
                    self.state = 2784 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.WHEN):
                        break

                self.state = 2788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ELSE:
                    self.state = 2786
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 2787
                    localctx.elseExpression = self.expression()


                self.state = 2790
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2792
                self.match(fugue_sqlParser.CASE)
                self.state = 2793
                localctx.value = self.expression()
                self.state = 2795 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2794
                    self.whenClause()
                    self.state = 2797 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.WHEN):
                        break

                self.state = 2801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ELSE:
                    self.state = 2799
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 2800
                    localctx.elseExpression = self.expression()


                self.state = 2803
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2805
                self.match(fugue_sqlParser.CAST)
                self.state = 2806
                self.match(fugue_sqlParser.T__2)
                self.state = 2807
                self.expression()
                self.state = 2808
                self.match(fugue_sqlParser.AS)
                self.state = 2809
                self.dataType()
                self.state = 2810
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2812
                self.match(fugue_sqlParser.STRUCT)
                self.state = 2813
                self.match(fugue_sqlParser.T__2)
                self.state = 2822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 2814
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 2819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__1:
                        self.state = 2815
                        self.match(fugue_sqlParser.T__1)
                        self.state = 2816
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 2821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2824
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2825
                self.match(fugue_sqlParser.FIRST)
                self.state = 2826
                self.match(fugue_sqlParser.T__2)
                self.state = 2827
                self.expression()
                self.state = 2830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IGNORE:
                    self.state = 2828
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 2829
                    self.match(fugue_sqlParser.NULLS)


                self.state = 2832
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2834
                self.match(fugue_sqlParser.LAST)
                self.state = 2835
                self.match(fugue_sqlParser.T__2)
                self.state = 2836
                self.expression()
                self.state = 2839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IGNORE:
                    self.state = 2837
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 2838
                    self.match(fugue_sqlParser.NULLS)


                self.state = 2841
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2843
                self.match(fugue_sqlParser.POSITION)
                self.state = 2844
                self.match(fugue_sqlParser.T__2)
                self.state = 2845
                localctx.substr = self.valueExpression(0)
                self.state = 2846
                self.match(fugue_sqlParser.IN)
                self.state = 2847
                localctx.istr = self.valueExpression(0)
                self.state = 2848
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2850
                self.constant()
                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2851
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2852
                self.qualifiedName()
                self.state = 2853
                self.match(fugue_sqlParser.T__0)
                self.state = 2854
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2856
                self.match(fugue_sqlParser.T__2)
                self.state = 2857
                self.namedExpression()
                self.state = 2860 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2858
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2859
                    self.namedExpression()
                    self.state = 2862 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.T__1):
                        break

                self.state = 2864
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2866
                self.match(fugue_sqlParser.T__2)
                self.state = 2867
                self.query()
                self.state = 2868
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2870
                self.functionName()
                self.state = 2871
                self.match(fugue_sqlParser.T__2)
                self.state = 2883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 2873
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                    if la_ == 1:
                        self.state = 2872
                        self.setQuantifier()


                    self.state = 2875
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 2880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__1:
                        self.state = 2876
                        self.match(fugue_sqlParser.T__1)
                        self.state = 2877
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 2882
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2885
                self.match(fugue_sqlParser.T__3)
                self.state = 2892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 2886
                    self.match(fugue_sqlParser.FILTER)
                    self.state = 2887
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2888
                    self.match(fugue_sqlParser.WHERE)
                    self.state = 2889
                    localctx.where = self.booleanExpression(0)
                    self.state = 2890
                    self.match(fugue_sqlParser.T__3)


                self.state = 2896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 2894
                    self.match(fugue_sqlParser.OVER)
                    self.state = 2895
                    self.windowSpec()


                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2898
                self.identifier()
                self.state = 2899
                self.match(fugue_sqlParser.T__15)
                self.state = 2900
                self.expression()
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2902
                self.match(fugue_sqlParser.T__2)
                self.state = 2903
                self.identifier()
                self.state = 2906 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2904
                    self.match(fugue_sqlParser.T__1)
                    self.state = 2905
                    self.identifier()
                    self.state = 2908 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.T__1):
                        break

                self.state = 2910
                self.match(fugue_sqlParser.T__3)
                self.state = 2911
                self.match(fugue_sqlParser.T__15)
                self.state = 2912
                self.expression()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2914
                self.identifier()
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2915
                self.match(fugue_sqlParser.T__2)
                self.state = 2916
                self.expression()
                self.state = 2917
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2919
                self.match(fugue_sqlParser.EXTRACT)
                self.state = 2920
                self.match(fugue_sqlParser.T__2)
                self.state = 2921
                localctx.field = self.identifier()
                self.state = 2922
                self.match(fugue_sqlParser.FROM)
                self.state = 2923
                localctx.source = self.valueExpression(0)
                self.state = 2924
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2926
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.SUBSTR or _la==fugue_sqlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2927
                self.match(fugue_sqlParser.T__2)
                self.state = 2928
                localctx.istr = self.valueExpression(0)
                self.state = 2929
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.FROM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2930
                localctx.pos = self.valueExpression(0)
                self.state = 2933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.FOR:
                    self.state = 2931
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.FOR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2932
                    localctx.ilen = self.valueExpression(0)


                self.state = 2935
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2937
                self.match(fugue_sqlParser.TRIM)
                self.state = 2938
                self.match(fugue_sqlParser.T__2)
                self.state = 2940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 2939
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.BOTH or _la==fugue_sqlParser.LEADING or _la==fugue_sqlParser.TRAILING):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
                if la_ == 1:
                    self.state = 2942
                    localctx.trimStr = self.valueExpression(0)


                self.state = 2945
                self.match(fugue_sqlParser.FROM)
                self.state = 2946
                localctx.srcStr = self.valueExpression(0)
                self.state = 2947
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2949
                self.match(fugue_sqlParser.OVERLAY)
                self.state = 2950
                self.match(fugue_sqlParser.T__2)
                self.state = 2951
                localctx.iinput = self.valueExpression(0)
                self.state = 2952
                self.match(fugue_sqlParser.PLACING)
                self.state = 2953
                localctx.replace = self.valueExpression(0)
                self.state = 2954
                self.match(fugue_sqlParser.FROM)
                self.state = 2955
                localctx.position = self.valueExpression(0)
                self.state = 2958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FOR:
                    self.state = 2956
                    self.match(fugue_sqlParser.FOR)
                    self.state = 2957
                    localctx.length = self.valueExpression(0)


                self.state = 2960
                self.match(fugue_sqlParser.T__3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2974
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2972
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SubscriptContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2964
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 2965
                        self.match(fugue_sqlParser.T__7)
                        self.state = 2966
                        localctx.index = self.valueExpression(0)
                        self.state = 2967
                        self.match(fugue_sqlParser.T__8)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.DereferenceContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2969
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2970
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2971
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 2976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)



    def constant(self):

        localctx = fugue_sqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_constant)
        try:
            self.state = 2989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2977
                self.match(fugue_sqlParser.NULL)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2978
                self.interval()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2979
                self.identifier()
                self.state = 2980
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2982
                self.number()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2983
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2985 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2984
                        self.match(fugue_sqlParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2987 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,373,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonEqualOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonEqualOperatorContext,0)


        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(fugue_sqlParser.NEQJ, 0)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)

        def LTE(self):
            return self.getToken(fugue_sqlParser.LTE, 0)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)

        def GTE(self):
            return self.getToken(fugue_sqlParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(fugue_sqlParser.NSEQ, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = fugue_sqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_comparisonOperator)
        try:
            self.state = 2999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.EQUAL, fugue_sqlParser.DOUBLEEQUAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2991
                self.comparisonEqualOperator()
                pass
            elif token in [fugue_sqlParser.NEQ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2992
                self.match(fugue_sqlParser.NEQ)
                pass
            elif token in [fugue_sqlParser.NEQJ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2993
                self.match(fugue_sqlParser.NEQJ)
                pass
            elif token in [fugue_sqlParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2994
                self.match(fugue_sqlParser.LT)
                pass
            elif token in [fugue_sqlParser.LTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2995
                self.match(fugue_sqlParser.LTE)
                pass
            elif token in [fugue_sqlParser.GT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2996
                self.match(fugue_sqlParser.GT)
                pass
            elif token in [fugue_sqlParser.GTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2997
                self.match(fugue_sqlParser.GTE)
                pass
            elif token in [fugue_sqlParser.NSEQ]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2998
                self.match(fugue_sqlParser.NSEQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonEqualOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUAL(self):
            return self.getToken(fugue_sqlParser.DOUBLEEQUAL, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonEqualOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonEqualOperator" ):
                listener.enterComparisonEqualOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonEqualOperator" ):
                listener.exitComparisonEqualOperator(self)




    def comparisonEqualOperator(self):

        localctx = fugue_sqlParser.ComparisonEqualOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_comparisonEqualOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3001
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.EQUAL or _la==fugue_sqlParser.DOUBLEEQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)




    def arithmeticOperator(self):

        localctx = fugue_sqlParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3003
            _la = self._input.LA(1)
            if not(((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & ((1 << (fugue_sqlParser.PLUS - 289)) | (1 << (fugue_sqlParser.MINUS - 289)) | (1 << (fugue_sqlParser.ASTERISK - 289)) | (1 << (fugue_sqlParser.SLASH - 289)) | (1 << (fugue_sqlParser.PERCENT - 289)) | (1 << (fugue_sqlParser.DIV - 289)) | (1 << (fugue_sqlParser.TILDE - 289)) | (1 << (fugue_sqlParser.AMPERSAND - 289)) | (1 << (fugue_sqlParser.PIPE - 289)) | (1 << (fugue_sqlParser.CONCAT_PIPE - 289)) | (1 << (fugue_sqlParser.HAT - 289)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)




    def predicateOperator(self):

        localctx = fugue_sqlParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3005
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.AND or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (fugue_sqlParser.IN - 129)) | (1 << (fugue_sqlParser.NOT - 129)) | (1 << (fugue_sqlParser.OR - 129)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = fugue_sqlParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3007
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = fugue_sqlParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3009
            self.match(fugue_sqlParser.INTERVAL)
            self.state = 3012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.state = 3010
                self.errorCapturingMultiUnitsInterval()

            elif la_ == 2:
                self.state = 3011
                self.errorCapturingUnitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingMultiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingMultiUnitsInterval" ):
                listener.enterErrorCapturingMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingMultiUnitsInterval" ):
                listener.exitErrorCapturingMultiUnitsInterval(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3014
            self.multiUnitsInterval()
            self.state = 3016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.state = 3015
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,i)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiUnitsInterval" ):
                listener.enterMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiUnitsInterval" ):
                listener.exitMultiUnitsInterval(self)




    def multiUnitsInterval(self):

        localctx = fugue_sqlParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3021 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3018
                    self.intervalValue()
                    self.state = 3019
                    self.intervalUnit()

                else:
                    raise NoViableAltException(self)
                self.state = 3023 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingUnitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingUnitToUnitInterval" ):
                listener.enterErrorCapturingUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingUnitToUnitInterval" ):
                listener.exitErrorCapturingUnitToUnitInterval(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3025
            localctx.body = self.unitToUnitInterval()
            self.state = 3028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 3026
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3027
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.ifrom = None # IntervalUnitContext
            self.to = None # IntervalUnitContext

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,0)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitToUnitInterval" ):
                listener.enterUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitToUnitInterval" ):
                listener.exitUnitToUnitInterval(self)




    def unitToUnitInterval(self):

        localctx = fugue_sqlParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3030
            localctx.value = self.intervalValue()
            self.state = 3031
            localctx.ifrom = self.intervalUnit()
            self.state = 3032
            self.match(fugue_sqlParser.TO)
            self.state = 3033
            localctx.to = self.intervalUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)




    def intervalValue(self):

        localctx = fugue_sqlParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 3040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.PLUS, fugue_sqlParser.MINUS, fugue_sqlParser.INTEGER_VALUE, fugue_sqlParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PLUS or _la==fugue_sqlParser.MINUS:
                    self.state = 3035
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.PLUS or _la==fugue_sqlParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3038
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3039
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalUnit" ):
                listener.enterIntervalUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalUnit" ):
                listener.exitIntervalUnit(self)




    def intervalUnit(self):

        localctx = fugue_sqlParser.IntervalUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_intervalUnit)
        try:
            self.state = 3049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3042
                self.match(fugue_sqlParser.DAY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3043
                self.match(fugue_sqlParser.HOUR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3044
                self.match(fugue_sqlParser.MINUTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3045
                self.match(fugue_sqlParser.MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3046
                self.match(fugue_sqlParser.SECOND)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3047
                self.match(fugue_sqlParser.YEAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3048
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)




    def colPosition(self):

        localctx = fugue_sqlParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_colPosition)
        try:
            self.state = 3054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3051
                localctx.position = self.match(fugue_sqlParser.FIRST)
                pass
            elif token in [fugue_sqlParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3052
                localctx.position = self.match(fugue_sqlParser.AFTER)
                self.state = 3053
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.icomplex = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)
        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)



    def dataType(self):

        localctx = fugue_sqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3056
                localctx.icomplex = self.match(fugue_sqlParser.ARRAY)
                self.state = 3057
                self.match(fugue_sqlParser.LT)
                self.state = 3058
                self.dataType()
                self.state = 3059
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3061
                localctx.icomplex = self.match(fugue_sqlParser.MAP)
                self.state = 3062
                self.match(fugue_sqlParser.LT)
                self.state = 3063
                self.dataType()
                self.state = 3064
                self.match(fugue_sqlParser.T__1)
                self.state = 3065
                self.dataType()
                self.state = 3066
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3068
                localctx.icomplex = self.match(fugue_sqlParser.STRUCT)
                self.state = 3075
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.LT]:
                    self.state = 3069
                    self.match(fugue_sqlParser.LT)
                    self.state = 3071
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
                    if la_ == 1:
                        self.state = 3070
                        self.complexColTypeList()


                    self.state = 3073
                    self.match(fugue_sqlParser.GT)
                    pass
                elif token in [fugue_sqlParser.NEQ]:
                    self.state = 3074
                    self.match(fugue_sqlParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3077
                self.identifier()
                self.state = 3088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 3078
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3079
                    self.match(fugue_sqlParser.INTEGER_VALUE)
                    self.state = 3084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__1:
                        self.state = 3080
                        self.match(fugue_sqlParser.T__1)
                        self.state = 3081
                        self.match(fugue_sqlParser.INTEGER_VALUE)
                        self.state = 3086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3087
                    self.match(fugue_sqlParser.T__3)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPositionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPositionList" ):
                listener.enterQualifiedColTypeWithPositionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPositionList" ):
                listener.exitQualifiedColTypeWithPositionList(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3092
            self.qualifiedColTypeWithPosition()
            self.state = 3097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 3093
                self.match(fugue_sqlParser.T__1)
                self.state = 3094
                self.qualifiedColTypeWithPosition()
                self.state = 3099
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPosition" ):
                listener.enterQualifiedColTypeWithPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPosition" ):
                listener.exitQualifiedColTypeWithPosition(self)




    def qualifiedColTypeWithPosition(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3100
            localctx.name = self.multipartIdentifier()
            self.state = 3101
            self.dataType()
            self.state = 3104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.NOT:
                self.state = 3102
                self.match(fugue_sqlParser.NOT)
                self.state = 3103
                self.match(fugue_sqlParser.NULL)


            self.state = 3107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 3106
                self.commentSpec()


            self.state = 3110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.FIRST:
                self.state = 3109
                self.colPosition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)




    def colTypeList(self):

        localctx = fugue_sqlParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3112
            self.colType()
            self.state = 3117
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,393,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3113
                    self.match(fugue_sqlParser.T__1)
                    self.state = 3114
                    self.colType() 
                self.state = 3119
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,393,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)




    def colType(self):

        localctx = fugue_sqlParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3120
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3121
            self.dataType()
            self.state = 3124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 3122
                self.match(fugue_sqlParser.NOT)
                self.state = 3123
                self.match(fugue_sqlParser.NULL)


            self.state = 3127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 3126
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)




    def complexColTypeList(self):

        localctx = fugue_sqlParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3129
            self.complexColType()
            self.state = 3134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 3130
                self.match(fugue_sqlParser.T__1)
                self.state = 3131
                self.complexColType()
                self.state = 3136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)




    def complexColType(self):

        localctx = fugue_sqlParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3137
            self.identifier()
            self.state = 3138
            self.match(fugue_sqlParser.T__6)
            self.state = 3139
            self.dataType()
            self.state = 3142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.NOT:
                self.state = 3140
                self.match(fugue_sqlParser.NOT)
                self.state = 3141
                self.match(fugue_sqlParser.NULL)


            self.state = 3145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 3144
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = fugue_sqlParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3147
            self.match(fugue_sqlParser.WHEN)
            self.state = 3148
            localctx.condition = self.expression()
            self.state = 3149
            self.match(fugue_sqlParser.THEN)
            self.state = 3150
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = fugue_sqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3152
            self.match(fugue_sqlParser.WINDOW)
            self.state = 3153
            self.namedWindow()
            self.state = 3158
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,399,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3154
                    self.match(fugue_sqlParser.T__1)
                    self.state = 3155
                    self.namedWindow() 
                self.state = 3160
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,399,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)




    def namedWindow(self):

        localctx = fugue_sqlParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3162
            self.match(fugue_sqlParser.AS)
            self.state = 3163
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)
        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)



    def windowSpec(self):

        localctx = fugue_sqlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3165
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3166
                self.match(fugue_sqlParser.T__2)
                self.state = 3167
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3168
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3170
                self.match(fugue_sqlParser.T__2)
                self.state = 3205
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.CLUSTER]:
                    self.state = 3171
                    self.match(fugue_sqlParser.CLUSTER)
                    self.state = 3172
                    self.match(fugue_sqlParser.BY)
                    self.state = 3173
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__1:
                        self.state = 3174
                        self.match(fugue_sqlParser.T__1)
                        self.state = 3175
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3180
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [fugue_sqlParser.T__3, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.ORDER, fugue_sqlParser.PARTITION, fugue_sqlParser.RANGE, fugue_sqlParser.ROWS, fugue_sqlParser.SORT]:
                    self.state = 3191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.DISTRIBUTE or _la==fugue_sqlParser.PARTITION:
                        self.state = 3181
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.DISTRIBUTE or _la==fugue_sqlParser.PARTITION):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3182
                        self.match(fugue_sqlParser.BY)
                        self.state = 3183
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3188
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==fugue_sqlParser.T__1:
                            self.state = 3184
                            self.match(fugue_sqlParser.T__1)
                            self.state = 3185
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3190
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3203
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.ORDER or _la==fugue_sqlParser.SORT:
                        self.state = 3193
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.ORDER or _la==fugue_sqlParser.SORT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3194
                        self.match(fugue_sqlParser.BY)
                        self.state = 3195
                        self.sortItem()
                        self.state = 3200
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==fugue_sqlParser.T__1:
                            self.state = 3196
                            self.match(fugue_sqlParser.T__1)
                            self.state = 3197
                            self.sortItem()
                            self.state = 3202
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.RANGE or _la==fugue_sqlParser.ROWS:
                    self.state = 3207
                    self.windowFrame()


                self.state = 3210
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = fugue_sqlParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_windowFrame)
        try:
            self.state = 3229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3213
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3214
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3215
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3216
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3217
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3218
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3219
                localctx.start = self.frameBound()
                self.state = 3220
                self.match(fugue_sqlParser.AND)
                self.state = 3221
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3223
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3224
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3225
                localctx.start = self.frameBound()
                self.state = 3226
                self.match(fugue_sqlParser.AND)
                self.state = 3227
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)




    def frameBound(self):

        localctx = fugue_sqlParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3231
                self.match(fugue_sqlParser.UNBOUNDED)
                self.state = 3232
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FOLLOWING or _la==fugue_sqlParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3233
                localctx.boundType = self.match(fugue_sqlParser.CURRENT)
                self.state = 3234
                self.match(fugue_sqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3235
                self.expression()
                self.state = 3236
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FOLLOWING or _la==fugue_sqlParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = fugue_sqlParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3240
            self.qualifiedName()
            self.state = 3245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__1:
                self.state = 3241
                self.match(fugue_sqlParser.T__1)
                self.state = 3242
                self.qualifiedName()
                self.state = 3247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = fugue_sqlParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_functionName)
        try:
            self.state = 3252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3248
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3249
                self.match(fugue_sqlParser.FILTER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3250
                self.match(fugue_sqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3251
                self.match(fugue_sqlParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = fugue_sqlParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3254
            self.identifier()
            self.state = 3259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,412,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3255
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3256
                    self.identifier() 
                self.state = 3261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,412,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def errorCapturingIdentifierExtra(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierExtraContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingIdentifier" ):
                listener.enterErrorCapturingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingIdentifier" ):
                listener.exitErrorCapturingIdentifier(self)




    def errorCapturingIdentifier(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            self.identifier()
            self.state = 3263
            self.errorCapturingIdentifierExtra()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.MINUS)
            else:
                return self.getToken(fugue_sqlParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorIdent" ):
                listener.enterErrorIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorIdent" ):
                listener.exitErrorIdent(self)


    class RealIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealIdent" ):
                listener.enterRealIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealIdent" ):
                listener.exitRealIdent(self)



    def errorCapturingIdentifierExtra(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_errorCapturingIdentifierExtra)
        try:
            self.state = 3272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ErrorIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3267 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3265
                        self.match(fugue_sqlParser.MINUS)
                        self.state = 3266
                        self.identifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3269 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,413,self._ctx)

                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RealIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = fugue_sqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_identifier)
        try:
            self.state = 3277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3274
                self.strictIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3275
                if not not fugue_sqlParser.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not fugue_sqlParser.SQL_standard_keyword_behavior")
                self.state = 3276
                self.strictNonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.IDENTIFIER, 0)
        def ansiNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.AnsiNonReservedContext,0)

        def nonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def strictIdentifier(self):

        localctx = fugue_sqlParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_strictIdentifier)
        try:
            self.state = 3285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3279
                self.match(fugue_sqlParser.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3280
                self.quotedIdentifier()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3281
                if not fugue_sqlParser.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "fugue_sqlParser.SQL_standard_keyword_behavior")
                self.state = 3282
                self.ansiNonReserved()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3283
                if not not fugue_sqlParser.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not fugue_sqlParser.SQL_standard_keyword_behavior")
                self.state = 3284
                self.nonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)




    def quotedIdentifier(self):

        localctx = fugue_sqlParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3287
            self.match(fugue_sqlParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyDecimalLiteral" ):
                listener.enterLegacyDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyDecimalLiteral" ):
                listener.exitLegacyDecimalLiteral(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentLiteral" ):
                listener.enterExponentLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentLiteral" ):
                listener.exitExponentLiteral(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(fugue_sqlParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)



    def number(self):

        localctx = fugue_sqlParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3289
                if not not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3290
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3293
                self.match(fugue_sqlParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3294
                if not not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3295
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3298
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3299
                if not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled")
                self.state = 3301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3300
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3303
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.EXPONENT_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3304
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3307
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3308
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3311
                self.match(fugue_sqlParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3312
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3315
                self.match(fugue_sqlParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3316
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3319
                self.match(fugue_sqlParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3320
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3323
                self.match(fugue_sqlParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3324
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3327
                self.match(fugue_sqlParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_alterColumnAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColumnAction" ):
                listener.enterAlterColumnAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColumnAction" ):
                listener.exitAlterColumnAction(self)




    def alterColumnAction(self):

        localctx = fugue_sqlParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.TYPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3330
                self.match(fugue_sqlParser.TYPE)
                self.state = 3331
                self.dataType()
                pass
            elif token in [fugue_sqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3332
                self.commentSpec()
                pass
            elif token in [fugue_sqlParser.AFTER, fugue_sqlParser.FIRST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3333
                self.colPosition()
                pass
            elif token in [fugue_sqlParser.DROP, fugue_sqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3334
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DROP or _la==fugue_sqlParser.SET):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3335
                self.match(fugue_sqlParser.NOT)
                self.state = 3336
                self.match(fugue_sqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ansiNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnsiNonReserved" ):
                listener.enterAnsiNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnsiNonReserved" ):
                listener.exitAnsiNonReserved(self)




    def ansiNonReserved(self):

        localctx = fugue_sqlParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3339
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.ASC) | (1 << fugue_sqlParser.AT) | (1 << fugue_sqlParser.BETWEEN) | (1 << fugue_sqlParser.BUCKET) | (1 << fugue_sqlParser.BUCKETS) | (1 << fugue_sqlParser.BY) | (1 << fugue_sqlParser.CACHE) | (1 << fugue_sqlParser.CASCADE) | (1 << fugue_sqlParser.CHANGE) | (1 << fugue_sqlParser.CLEAR) | (1 << fugue_sqlParser.CLUSTER) | (1 << fugue_sqlParser.CLUSTERED) | (1 << fugue_sqlParser.CODEGEN) | (1 << fugue_sqlParser.COLLECTION) | (1 << fugue_sqlParser.COLUMNS) | (1 << fugue_sqlParser.COMMENT) | (1 << fugue_sqlParser.COMMIT) | (1 << fugue_sqlParser.COMPACT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)) | (1 << (fugue_sqlParser.EXTERNAL - 64)) | (1 << (fugue_sqlParser.EXTRACT - 64)) | (1 << (fugue_sqlParser.FIELDS - 64)) | (1 << (fugue_sqlParser.FILEFORMAT - 64)) | (1 << (fugue_sqlParser.FIRST - 64)) | (1 << (fugue_sqlParser.FOLLOWING - 64)) | (1 << (fugue_sqlParser.FORMAT - 64)) | (1 << (fugue_sqlParser.FORMATTED - 64)) | (1 << (fugue_sqlParser.FUNCTION - 64)) | (1 << (fugue_sqlParser.FUNCTIONS - 64)) | (1 << (fugue_sqlParser.GLOBAL - 64)) | (1 << (fugue_sqlParser.GROUPING - 64)) | (1 << (fugue_sqlParser.IF - 64)) | (1 << (fugue_sqlParser.IGNORE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)) | (1 << (fugue_sqlParser.NO - 128)) | (1 << (fugue_sqlParser.NULLS - 128)) | (1 << (fugue_sqlParser.OF - 128)) | (1 << (fugue_sqlParser.OPTION - 128)) | (1 << (fugue_sqlParser.OPTIONS - 128)) | (1 << (fugue_sqlParser.OUT - 128)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 128)) | (1 << (fugue_sqlParser.OVER - 128)) | (1 << (fugue_sqlParser.OVERLAY - 128)) | (1 << (fugue_sqlParser.OVERWRITE - 128)) | (1 << (fugue_sqlParser.PARTITION - 128)) | (1 << (fugue_sqlParser.PARTITIONED - 128)) | (1 << (fugue_sqlParser.PARTITIONS - 128)) | (1 << (fugue_sqlParser.PERCENTLIT - 128)) | (1 << (fugue_sqlParser.PIVOT - 128)) | (1 << (fugue_sqlParser.PLACING - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETS - 192)) | (1 << (fugue_sqlParser.SHOW - 192)) | (1 << (fugue_sqlParser.SKEWED - 192)) | (1 << (fugue_sqlParser.SORT - 192)) | (1 << (fugue_sqlParser.SORTED - 192)) | (1 << (fugue_sqlParser.START - 192)) | (1 << (fugue_sqlParser.STATISTICS - 192)) | (1 << (fugue_sqlParser.STORED - 192)) | (1 << (fugue_sqlParser.STRATIFY - 192)) | (1 << (fugue_sqlParser.STRUCT - 192)) | (1 << (fugue_sqlParser.SUBSTR - 192)) | (1 << (fugue_sqlParser.SUBSTRING - 192)) | (1 << (fugue_sqlParser.TABLES - 192)) | (1 << (fugue_sqlParser.TABLESAMPLE - 192)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 192)) | (1 << (fugue_sqlParser.TEMPORARY - 192)) | (1 << (fugue_sqlParser.TERMINATED - 192)) | (1 << (fugue_sqlParser.TOUCH - 192)) | (1 << (fugue_sqlParser.TRANSACTION - 192)) | (1 << (fugue_sqlParser.TRANSACTIONS - 192)) | (1 << (fugue_sqlParser.TRANSFORM - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictNonReserved" ):
                listener.enterStrictNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictNonReserved" ):
                listener.exitStrictNonReserved(self)




    def strictNonReserved(self):

        localctx = fugue_sqlParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3341
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & ((1 << (fugue_sqlParser.ANTI - 34)) | (1 << (fugue_sqlParser.CROSS - 34)) | (1 << (fugue_sqlParser.EXCEPT - 34)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (fugue_sqlParser.FULL - 117)) | (1 << (fugue_sqlParser.INNER - 117)) | (1 << (fugue_sqlParser.INTERSECT - 117)) | (1 << (fugue_sqlParser.JOIN - 117)) | (1 << (fugue_sqlParser.LEFT - 117)) | (1 << (fugue_sqlParser.NATURAL - 117)) | (1 << (fugue_sqlParser.ON - 117)))) != 0) or ((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & ((1 << (fugue_sqlParser.RIGHT - 212)) | (1 << (fugue_sqlParser.SEMI - 212)) | (1 << (fugue_sqlParser.SETMINUS - 212)) | (1 << (fugue_sqlParser.UNION - 212)) | (1 << (fugue_sqlParser.USING - 212)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(fugue_sqlParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CHECK(self):
            return self.getToken(fugue_sqlParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(fugue_sqlParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(fugue_sqlParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(fugue_sqlParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(fugue_sqlParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(fugue_sqlParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def NULL(self):
            return self.getToken(fugue_sqlParser.NULL, 0)

        def NULLS(self):
            return self.getToken(fugue_sqlParser.NULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def ONLY(self):
            return self.getToken(fugue_sqlParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(fugue_sqlParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(fugue_sqlParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(fugue_sqlParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(fugue_sqlParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(fugue_sqlParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def USER(self):
            return self.getToken(fugue_sqlParser.USER, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = fugue_sqlParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3343
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS) | (1 << fugue_sqlParser.ASC) | (1 << fugue_sqlParser.AT) | (1 << fugue_sqlParser.AUTHORIZATION) | (1 << fugue_sqlParser.BETWEEN) | (1 << fugue_sqlParser.BOTH) | (1 << fugue_sqlParser.BUCKET) | (1 << fugue_sqlParser.BUCKETS) | (1 << fugue_sqlParser.BY) | (1 << fugue_sqlParser.CACHE) | (1 << fugue_sqlParser.CASCADE) | (1 << fugue_sqlParser.CASE) | (1 << fugue_sqlParser.CAST) | (1 << fugue_sqlParser.CHANGE) | (1 << fugue_sqlParser.CHECK) | (1 << fugue_sqlParser.CLEAR) | (1 << fugue_sqlParser.CLUSTER) | (1 << fugue_sqlParser.CLUSTERED) | (1 << fugue_sqlParser.CODEGEN) | (1 << fugue_sqlParser.COLLATE) | (1 << fugue_sqlParser.COLLECTION) | (1 << fugue_sqlParser.COLUMN) | (1 << fugue_sqlParser.COLUMNS) | (1 << fugue_sqlParser.COMMENT) | (1 << fugue_sqlParser.COMMIT) | (1 << fugue_sqlParser.COMPACT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)) | (1 << (fugue_sqlParser.EXTERNAL - 64)) | (1 << (fugue_sqlParser.EXTRACT - 64)) | (1 << (fugue_sqlParser.FALSE - 64)) | (1 << (fugue_sqlParser.FETCH - 64)) | (1 << (fugue_sqlParser.FIELDS - 64)) | (1 << (fugue_sqlParser.FILTER - 64)) | (1 << (fugue_sqlParser.FILEFORMAT - 64)) | (1 << (fugue_sqlParser.FIRST - 64)) | (1 << (fugue_sqlParser.FOLLOWING - 64)) | (1 << (fugue_sqlParser.FOR - 64)) | (1 << (fugue_sqlParser.FOREIGN - 64)) | (1 << (fugue_sqlParser.FORMAT - 64)) | (1 << (fugue_sqlParser.FORMATTED - 64)) | (1 << (fugue_sqlParser.FROM - 64)) | (1 << (fugue_sqlParser.FUNCTION - 64)) | (1 << (fugue_sqlParser.FUNCTIONS - 64)) | (1 << (fugue_sqlParser.GLOBAL - 64)) | (1 << (fugue_sqlParser.GRANT - 64)) | (1 << (fugue_sqlParser.GROUP - 64)) | (1 << (fugue_sqlParser.GROUPING - 64)) | (1 << (fugue_sqlParser.HAVING - 64)) | (1 << (fugue_sqlParser.HOUR - 64)) | (1 << (fugue_sqlParser.IF - 64)) | (1 << (fugue_sqlParser.IGNORE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)) | (1 << (fugue_sqlParser.NO - 128)) | (1 << (fugue_sqlParser.NOT - 128)) | (1 << (fugue_sqlParser.NULL - 128)) | (1 << (fugue_sqlParser.NULLS - 128)) | (1 << (fugue_sqlParser.OF - 128)) | (1 << (fugue_sqlParser.ONLY - 128)) | (1 << (fugue_sqlParser.OPTION - 128)) | (1 << (fugue_sqlParser.OPTIONS - 128)) | (1 << (fugue_sqlParser.OR - 128)) | (1 << (fugue_sqlParser.ORDER - 128)) | (1 << (fugue_sqlParser.OUT - 128)) | (1 << (fugue_sqlParser.OUTER - 128)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 128)) | (1 << (fugue_sqlParser.OVER - 128)) | (1 << (fugue_sqlParser.OVERLAPS - 128)) | (1 << (fugue_sqlParser.OVERLAY - 128)) | (1 << (fugue_sqlParser.OVERWRITE - 128)) | (1 << (fugue_sqlParser.PARTITION - 128)) | (1 << (fugue_sqlParser.PARTITIONED - 128)) | (1 << (fugue_sqlParser.PARTITIONS - 128)) | (1 << (fugue_sqlParser.PERCENTLIT - 128)) | (1 << (fugue_sqlParser.PIVOT - 128)) | (1 << (fugue_sqlParser.PLACING - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETS - 192)) | (1 << (fugue_sqlParser.SHOW - 192)) | (1 << (fugue_sqlParser.SKEWED - 192)) | (1 << (fugue_sqlParser.SOME - 192)) | (1 << (fugue_sqlParser.SORT - 192)) | (1 << (fugue_sqlParser.SORTED - 192)) | (1 << (fugue_sqlParser.START - 192)) | (1 << (fugue_sqlParser.STATISTICS - 192)) | (1 << (fugue_sqlParser.STORED - 192)) | (1 << (fugue_sqlParser.STRATIFY - 192)) | (1 << (fugue_sqlParser.STRUCT - 192)) | (1 << (fugue_sqlParser.SUBSTR - 192)) | (1 << (fugue_sqlParser.SUBSTRING - 192)) | (1 << (fugue_sqlParser.TABLE - 192)) | (1 << (fugue_sqlParser.TABLES - 192)) | (1 << (fugue_sqlParser.TABLESAMPLE - 192)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 192)) | (1 << (fugue_sqlParser.TEMPORARY - 192)) | (1 << (fugue_sqlParser.TERMINATED - 192)) | (1 << (fugue_sqlParser.THEN - 192)) | (1 << (fugue_sqlParser.TO - 192)) | (1 << (fugue_sqlParser.TOUCH - 192)) | (1 << (fugue_sqlParser.TRAILING - 192)) | (1 << (fugue_sqlParser.TRANSACTION - 192)) | (1 << (fugue_sqlParser.TRANSACTIONS - 192)) | (1 << (fugue_sqlParser.TRANSFORM - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.fugueAssignment_sempred
        self._predicates[78] = self.queryTerm_sempred
        self._predicates[132] = self.booleanExpression_sempred
        self._predicates[134] = self.valueExpression_sempred
        self._predicates[135] = self.primaryExpression_sempred
        self._predicates[168] = self.identifier_sempred
        self._predicates[169] = self.strictIdentifier_sempred
        self._predicates[171] = self.number_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def fugueAssignment_sempred(self, localctx:FugueAssignmentContext, predIndex:int):
            if predIndex == 0:
                return self.simpleAssign
         

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return fugue_sqlParser.legacy_setops_precedence_enbled
         

            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return not fugue_sqlParser.legacy_setops_precedence_enbled
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 6:
                return not fugue_sqlParser.legacy_setops_precedence_enbled
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 6)
         

    def identifier_sempred(self, localctx:IdentifierContext, predIndex:int):
            if predIndex == 17:
                return not fugue_sqlParser.SQL_standard_keyword_behavior
         

    def strictIdentifier_sempred(self, localctx:StrictIdentifierContext, predIndex:int):
            if predIndex == 18:
                return fugue_sqlParser.SQL_standard_keyword_behavior
         

            if predIndex == 19:
                return not fugue_sqlParser.SQL_standard_keyword_behavior
         

    def number_sempred(self, localctx:NumberContext, predIndex:int):
            if predIndex == 20:
                return not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 21:
                return not fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 22:
                return fugue_sqlParser.legacy_exponent_literal_as_decimal_enabled
         




